
BATTERY_INFO_SAMB11_XPLAINED_PRO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b8c4  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  100138c4  100138c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002d0c  1001393c  1001393c  0001393c  2**2
                  ALLOC
  3 .stack        00000800  10016648  10016648  0001393c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001393c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00013964  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002e598  00000000  00000000  00013a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000329c  00000000  00000000  00041fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007385  00000000  00000000  0004524c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007e8  00000000  00000000  0004c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000840  00000000  00000000  0004cdb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007c67  00000000  00000000  0004d5f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d1e2  00000000  00000000  00055260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010c998  00000000  00000000  00062442  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001fb0  00000000  00000000  0016eddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100138c4 	.word	0x100138c4
10008068:	100138c4 	.word	0x100138c4
1000806c:	1001393c 	.word	0x1001393c
10008070:	10016648 	.word	0x10016648
10008074:	1001393c 	.word	0x1001393c
10008078:	100138c8 	.word	0x100138c8
1000807c:	10013940 	.word	0x10013940
10008080:	10011689 	.word	0x10011689
10008084:	1000bc79 	.word	0x1000bc79

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1001393c 	.word	0x1001393c
100080a8:	00000000 	.word	0x00000000
100080ac:	100138c4 	.word	0x100138c4

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10013940 	.word	0x10013940
100080dc:	100138c4 	.word	0x100138c4
100080e0:	100138c4 	.word	0x100138c4
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_sleep_timer_active>:
 *
 * \return Active status of the AON Sleep Timer.
 */
bool aon_sleep_timer_sleep_timer_active(void)
{
	return AON_SLEEP_TIMER0->CONTROL.bit.SLEEP_TIMER_ACTIVE;
10008118:	4b02      	ldr	r3, [pc, #8]	; (10008124 <aon_sleep_timer_sleep_timer_active+0xc>)
1000811a:	6818      	ldr	r0, [r3, #0]
1000811c:	0040      	lsls	r0, r0, #1
1000811e:	0fc0      	lsrs	r0, r0, #31
}
10008120:	4770      	bx	lr
10008122:	46c0      	nop			; (mov r8, r8)
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008128:	4a02      	ldr	r2, [pc, #8]	; (10008134 <aon_sleep_timer_clear_interrup+0xc>)
1000812a:	6811      	ldr	r1, [r2, #0]
1000812c:	2310      	movs	r3, #16
1000812e:	430b      	orrs	r3, r1
10008130:	6013      	str	r3, [r2, #0]
}
10008132:	4770      	bx	lr
10008134:	4000d000 	.word	0x4000d000

10008138 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008138:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000813a:	4b04      	ldr	r3, [pc, #16]	; (1000814c <aon_sleep_timer_isr_handler+0x14>)
1000813c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000813e:	4b04      	ldr	r3, [pc, #16]	; (10008150 <aon_sleep_timer_isr_handler+0x18>)
10008140:	681b      	ldr	r3, [r3, #0]
10008142:	2b00      	cmp	r3, #0
10008144:	d000      	beq.n	10008148 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008146:	4798      	blx	r3
	}
}
10008148:	bd10      	pop	{r4, pc}
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10008129 	.word	0x10008129
10008150:	10013958 	.word	0x10013958

10008154 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008154:	4b01      	ldr	r3, [pc, #4]	; (1000815c <aon_sleep_timer_register_callback+0x8>)
10008156:	6018      	str	r0, [r3, #0]
}
10008158:	4770      	bx	lr
1000815a:	46c0      	nop			; (mov r8, r8)
1000815c:	10013958 	.word	0x10013958

10008160 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008160:	2200      	movs	r2, #0
10008162:	4b01      	ldr	r3, [pc, #4]	; (10008168 <aon_sleep_timer_unregister_callback+0x8>)
10008164:	601a      	str	r2, [r3, #0]
}
10008166:	4770      	bx	lr
10008168:	10013958 	.word	0x10013958

1000816c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000816c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000816e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008170:	2200      	movs	r2, #0
10008172:	4b2b      	ldr	r3, [pc, #172]	; (10008220 <aon_sleep_timer_init+0xb4>)
10008174:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008176:	7803      	ldrb	r3, [r0, #0]
10008178:	2b02      	cmp	r3, #2
1000817a:	d105      	bne.n	10008188 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a28      	ldr	r2, [pc, #160]	; (10008220 <aon_sleep_timer_init+0xb4>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	3301      	adds	r3, #1
10008182:	430b      	orrs	r3, r1
10008184:	7313      	strb	r3, [r2, #12]
10008186:	e005      	b.n	10008194 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008188:	2b01      	cmp	r3, #1
1000818a:	d103      	bne.n	10008194 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000818c:	4a24      	ldr	r2, [pc, #144]	; (10008220 <aon_sleep_timer_init+0xb4>)
1000818e:	7b11      	ldrb	r1, [r2, #12]
10008190:	430b      	orrs	r3, r1
10008192:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008194:	4b23      	ldr	r3, [pc, #140]	; (10008224 <aon_sleep_timer_init+0xb8>)
10008196:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008198:	0053      	lsls	r3, r2, #1
1000819a:	d01f      	beq.n	100081dc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000819c:	4d21      	ldr	r5, [pc, #132]	; (10008224 <aon_sleep_timer_init+0xb8>)
1000819e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a0:	262c      	movs	r6, #44	; 0x2c
100081a2:	36ff      	adds	r6, #255	; 0xff
100081a4:	2180      	movs	r1, #128	; 0x80
100081a6:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081a8:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
100081aa:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
100081ac:	9701      	str	r7, [sp, #4]
100081ae:	9b01      	ldr	r3, [sp, #4]
100081b0:	42b3      	cmp	r3, r6
100081b2:	d806      	bhi.n	100081c2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081b4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081b6:	9b01      	ldr	r3, [sp, #4]
100081b8:	3301      	adds	r3, #1
100081ba:	9301      	str	r3, [sp, #4]
100081bc:	9b01      	ldr	r3, [sp, #4]
100081be:	42b3      	cmp	r3, r6
100081c0:	d9f8      	bls.n	100081b4 <aon_sleep_timer_init+0x48>
100081c2:	7844      	ldrb	r4, [r0, #1]
100081c4:	000b      	movs	r3, r1
100081c6:	2c00      	cmp	r4, #0
100081c8:	d103      	bne.n	100081d2 <aon_sleep_timer_init+0x66>
100081ca:	2380      	movs	r3, #128	; 0x80
100081cc:	009b      	lsls	r3, r3, #2
100081ce:	e000      	b.n	100081d2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081d0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081d2:	4213      	tst	r3, r2
100081d4:	d1fc      	bne.n	100081d0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081d6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081d8:	0053      	lsls	r3, r2, #1
100081da:	d1e5      	bne.n	100081a8 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081dc:	7843      	ldrb	r3, [r0, #1]
100081de:	2b00      	cmp	r3, #0
100081e0:	d105      	bne.n	100081ee <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081e2:	4b10      	ldr	r3, [pc, #64]	; (10008224 <aon_sleep_timer_init+0xb8>)
100081e4:	6842      	ldr	r2, [r0, #4]
100081e6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081e8:	2201      	movs	r2, #1
100081ea:	601a      	str	r2, [r3, #0]
100081ec:	e004      	b.n	100081f8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081ee:	4b0d      	ldr	r3, [pc, #52]	; (10008224 <aon_sleep_timer_init+0xb8>)
100081f0:	6842      	ldr	r2, [r0, #4]
100081f2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081f4:	2202      	movs	r2, #2
100081f6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081f8:	7843      	ldrb	r3, [r0, #1]
100081fa:	2b01      	cmp	r3, #1
100081fc:	d109      	bne.n	10008212 <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081fe:	4909      	ldr	r1, [pc, #36]	; (10008224 <aon_sleep_timer_init+0xb8>)
10008200:	22e0      	movs	r2, #224	; 0xe0
10008202:	01d2      	lsls	r2, r2, #7
10008204:	680b      	ldr	r3, [r1, #0]
10008206:	4013      	ands	r3, r2
10008208:	4293      	cmp	r3, r2
1000820a:	d1fb      	bne.n	10008204 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000820c:	2200      	movs	r2, #0
1000820e:	4b05      	ldr	r3, [pc, #20]	; (10008224 <aon_sleep_timer_init+0xb8>)
10008210:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
10008212:	4905      	ldr	r1, [pc, #20]	; (10008228 <aon_sleep_timer_init+0xbc>)
10008214:	202b      	movs	r0, #43	; 0x2b
10008216:	4b05      	ldr	r3, [pc, #20]	; (1000822c <aon_sleep_timer_init+0xc0>)
10008218:	4798      	blx	r3
}
1000821a:	b003      	add	sp, #12
1000821c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000821e:	46c0      	nop			; (mov r8, r8)
10008220:	4000e000 	.word	0x4000e000
10008224:	4000d000 	.word	0x4000d000
10008228:	10008139 	.word	0x10008139
1000822c:	10009439 	.word	0x10009439

10008230 <dma_isr_handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
static void dma_isr_handler( void )
{
10008230:	b5f0      	push	{r4, r5, r6, r7, lr}
10008232:	4647      	mov	r7, r8
10008234:	b480      	push	{r7}
10008236:	b082      	sub	sp, #8
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;

	/* Get active channel */
	active_channel =  PROV_DMA_CTRL0->CORE_INT_STATUS.reg & 
10008238:	2380      	movs	r3, #128	; 0x80
1000823a:	011b      	lsls	r3, r3, #4
1000823c:	4a3a      	ldr	r2, [pc, #232]	; (10008328 <dma_isr_handler+0xf8>)
1000823e:	5cd4      	ldrb	r4, [r2, r3]
{
	uint8_t active_channel;
	static uint8_t channel_index; //
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;
10008240:	2600      	movs	r6, #0
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
10008242:	230f      	movs	r3, #15
10008244:	401c      	ands	r4, r3
10008246:	9401      	str	r4, [sp, #4]
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
10008248:	4b38      	ldr	r3, [pc, #224]	; (1000832c <dma_isr_handler+0xfc>)
1000824a:	4698      	mov	r8, r3
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
1000824c:	2501      	movs	r5, #1
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
1000824e:	9a01      	ldr	r2, [sp, #4]
 * \param[in]  channel  Channel active
 *
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;
10008250:	2100      	movs	r1, #0
10008252:	e000      	b.n	10008256 <dma_isr_handler+0x26>

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
		index++;
10008254:	0019      	movs	r1, r3
{
	uint8_t index = 0;

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
10008256:	0852      	lsrs	r2, r2, #1
		index++;
10008258:	1c4b      	adds	r3, r1, #1
1000825a:	b2db      	uxtb	r3, r3
	} while (channel);
1000825c:	2a00      	cmp	r2, #0
1000825e:	d1f9      	bne.n	10008254 <dma_isr_handler+0x24>
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
10008260:	0089      	lsls	r1, r1, #2
10008262:	4643      	mov	r3, r8
10008264:	58c8      	ldr	r0, [r1, r3]
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
10008266:	7803      	ldrb	r3, [r0, #0]
10008268:	021b      	lsls	r3, r3, #8
1000826a:	4a31      	ldr	r2, [pc, #196]	; (10008330 <dma_isr_handler+0x100>)
1000826c:	589c      	ldr	r4, [r3, r2]
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
1000826e:	b2e1      	uxtb	r1, r4
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
10008270:	4a30      	ldr	r2, [pc, #192]	; (10008334 <dma_isr_handler+0x104>)
10008272:	589a      	ldr	r2, [r3, r2]
10008274:	6282      	str	r2, [r0, #40]	; 0x28
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
10008276:	22ff      	movs	r2, #255	; 0xff
10008278:	4022      	ands	r2, r4
1000827a:	4215      	tst	r5, r2
1000827c:	d003      	beq.n	10008286 <dma_isr_handler+0x56>
			/* Transfer complete flag */
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
1000827e:	2600      	movs	r6, #0
10008280:	2225      	movs	r2, #37	; 0x25
10008282:	5486      	strb	r6, [r0, r2]
10008284:	e02f      	b.n	100082e6 <dma_isr_handler+0xb6>
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
10008286:	0797      	lsls	r7, r2, #30
10008288:	d504      	bpl.n	10008294 <dma_isr_handler+0x64>
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000828a:	2610      	movs	r6, #16
1000828c:	2225      	movs	r2, #37	; 0x25
1000828e:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
10008290:	002e      	movs	r6, r5
10008292:	e028      	b.n	100082e6 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
10008294:	0757      	lsls	r7, r2, #29
10008296:	d504      	bpl.n	100082a2 <dma_isr_handler+0x72>
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008298:	2610      	movs	r6, #16
1000829a:	2225      	movs	r2, #37	; 0x25
1000829c:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
1000829e:	3e0e      	subs	r6, #14
100082a0:	e021      	b.n	100082e6 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
100082a2:	0717      	lsls	r7, r2, #28
100082a4:	d504      	bpl.n	100082b0 <dma_isr_handler+0x80>
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082a6:	2610      	movs	r6, #16
100082a8:	2225      	movs	r2, #37	; 0x25
100082aa:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
100082ac:	3e0d      	subs	r6, #13
100082ae:	e01a      	b.n	100082e6 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
100082b0:	06d7      	lsls	r7, r2, #27
100082b2:	d504      	bpl.n	100082be <dma_isr_handler+0x8e>
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082b4:	2610      	movs	r6, #16
100082b6:	2225      	movs	r2, #37	; 0x25
100082b8:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
100082ba:	3e0c      	subs	r6, #12
100082bc:	e013      	b.n	100082e6 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
100082be:	0697      	lsls	r7, r2, #26
100082c0:	d504      	bpl.n	100082cc <dma_isr_handler+0x9c>
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082c2:	2610      	movs	r6, #16
100082c4:	2225      	movs	r2, #37	; 0x25
100082c6:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
100082c8:	3e0b      	subs	r6, #11
100082ca:	e00c      	b.n	100082e6 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
100082cc:	0652      	lsls	r2, r2, #25
100082ce:	d504      	bpl.n	100082da <dma_isr_handler+0xaa>
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082d0:	2610      	movs	r6, #16
100082d2:	2225      	movs	r2, #37	; 0x25
100082d4:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
100082d6:	3e0a      	subs	r6, #10
100082d8:	e005      	b.n	100082e6 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
100082da:	0622      	lsls	r2, r4, #24
100082dc:	d503      	bpl.n	100082e6 <dma_isr_handler+0xb6>
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082de:	2610      	movs	r6, #16
100082e0:	2225      	movs	r2, #37	; 0x25
100082e2:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
100082e4:	3e09      	subs	r6, #9
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		}
		
		if (isr) {
100082e6:	2900      	cmp	r1, #0
100082e8:	d00e      	beq.n	10008308 <dma_isr_handler+0xd8>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100082ea:	4913      	ldr	r1, [pc, #76]	; (10008338 <dma_isr_handler+0x108>)
100082ec:	002a      	movs	r2, r5
100082ee:	40b2      	lsls	r2, r6
100082f0:	505a      	str	r2, [r3, r1]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
100082f2:	2324      	movs	r3, #36	; 0x24
100082f4:	5cc3      	ldrb	r3, [r0, r3]
100082f6:	4133      	asrs	r3, r6
100082f8:	421d      	tst	r5, r3
100082fa:	d005      	beq.n	10008308 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
100082fc:	00b3      	lsls	r3, r6, #2
100082fe:	18c3      	adds	r3, r0, r3
10008300:	685b      	ldr	r3, [r3, #4]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
10008302:	2b00      	cmp	r3, #0
10008304:	d000      	beq.n	10008308 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
				resource->callback[isr_flag](resource);
10008306:	4798      	blx	r3
			}
		}
		isr &= ~(1<<isr_flag);
	} while (isr);
10008308:	002b      	movs	r3, r5
1000830a:	40b3      	lsls	r3, r6
1000830c:	439c      	bics	r4, r3
1000830e:	b263      	sxtb	r3, r4
10008310:	2b00      	cmp	r3, #0
10008312:	d19c      	bne.n	1000824e <dma_isr_handler+0x1e>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008314:	2180      	movs	r1, #128	; 0x80
10008316:	0209      	lsls	r1, r1, #8
10008318:	3381      	adds	r3, #129	; 0x81
1000831a:	33ff      	adds	r3, #255	; 0xff
1000831c:	4a07      	ldr	r2, [pc, #28]	; (1000833c <dma_isr_handler+0x10c>)
1000831e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(PROV_DMA_CTRL0_IRQn);
}
10008320:	b002      	add	sp, #8
10008322:	bc04      	pop	{r2}
10008324:	4690      	mov	r8, r2
10008326:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008328:	40002000 	.word	0x40002000
1000832c:	1001395c 	.word	0x1001395c
10008330:	400020ac 	.word	0x400020ac
10008334:	40002050 	.word	0x40002050
10008338:	400020a4 	.word	0x400020a4
1000833c:	e000e100 	.word	0xe000e100

10008340 <dma_get_config_defaults>:
 *
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	/* DMA source configuration */
	config->src.max_burst = 1;
10008340:	2201      	movs	r2, #1
10008342:	7002      	strb	r2, [r0, #0]
	config->src.tokens = 1;
10008344:	7042      	strb	r2, [r0, #1]
	config->src.enable_inc_addr = true;
10008346:	7082      	strb	r2, [r0, #2]
	config->src.periph = MEMORY_DMA_PERIPHERAL;
10008348:	2300      	movs	r3, #0
1000834a:	70c3      	strb	r3, [r0, #3]
	config->src.periph_delay = 0;
1000834c:	7103      	strb	r3, [r0, #4]
	config->src.enable_proi_top = false;
1000834e:	7143      	strb	r3, [r0, #5]
	config->src.proi_top_index = 0;
10008350:	7183      	strb	r3, [r0, #6]
	config->src.enable_proi_high = false;
10008352:	71c3      	strb	r3, [r0, #7]
	config->src.proi_high_index = 0;
10008354:	7203      	strb	r3, [r0, #8]
	/* DMA destination configuration */
	config->des.max_burst = 1;
10008356:	7242      	strb	r2, [r0, #9]
	config->des.tokens = 1;
10008358:	7282      	strb	r2, [r0, #10]
	config->des.enable_inc_addr = true;
1000835a:	72c2      	strb	r2, [r0, #11]
	config->des.periph = MEMORY_DMA_PERIPHERAL;
1000835c:	7303      	strb	r3, [r0, #12]
	config->des.periph_delay = 0;
1000835e:	7343      	strb	r3, [r0, #13]
	config->des.enable_proi_top = false;
10008360:	7383      	strb	r3, [r0, #14]
	config->des.proi_top_index = 0;
10008362:	73c3      	strb	r3, [r0, #15]
	config->des.enable_proi_high = false;
10008364:	7403      	strb	r3, [r0, #16]
	config->des.proi_high_index = 0;
10008366:	7443      	strb	r3, [r0, #17]
	/* DMA channel configuration */
	config->enable_joint_mode = false;
10008368:	7483      	strb	r3, [r0, #18]
	config->swap = DMA_ENDIAN_NO_SWAP;
1000836a:	74c3      	strb	r3, [r0, #19]
}
1000836c:	4770      	bx	lr
1000836e:	46c0      	nop			; (mov r8, r8)

10008370 <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
10008370:	b510      	push	{r4, lr}
 *
 * \return Status of the DMA resource.
 */
static inline enum status_code dma_get_job_status(struct dma_resource *resource)
{
	return resource->job_status;
10008372:	2325      	movs	r3, #37	; 0x25
10008374:	5cc3      	ldrb	r3, [r0, r3]
10008376:	b2db      	uxtb	r3, r3
	struct dma_descriptor *desc = resource->descriptor;

	/* Check if channel is busy */
	if (dma_get_job_status(resource) == STATUS_BUSY) {
10008378:	2b05      	cmp	r3, #5
1000837a:	d042      	beq.n	10008402 <dma_add_descriptor+0x92>
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
	struct dma_descriptor *desc = resource->descriptor;
1000837c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (dma_get_job_status(resource) == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
1000837e:	2a00      	cmp	r2, #0
10008380:	d007      	beq.n	10008392 <dma_add_descriptor+0x22>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
10008382:	2303      	movs	r3, #3
10008384:	68d4      	ldr	r4, [r2, #12]
10008386:	439c      	bics	r4, r3
10008388:	0023      	movs	r3, r4
1000838a:	2403      	movs	r4, #3
1000838c:	2b00      	cmp	r3, #0
1000838e:	d11f      	bne.n	100083d0 <dma_add_descriptor+0x60>
10008390:	e02d      	b.n	100083ee <dma_add_descriptor+0x7e>
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
10008392:	62c1      	str	r1, [r0, #44]	; 0x2c
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008394:	7803      	ldrb	r3, [r0, #0]
10008396:	021b      	lsls	r3, r3, #8
10008398:	4a1b      	ldr	r2, [pc, #108]	; (10008408 <dma_add_descriptor+0x98>)
1000839a:	4694      	mov	ip, r2
1000839c:	4463      	add	r3, ip
1000839e:	680a      	ldr	r2, [r1, #0]
100083a0:	601a      	str	r2, [r3, #0]
100083a2:	7803      	ldrb	r3, [r0, #0]
100083a4:	021b      	lsls	r3, r3, #8
100083a6:	4a19      	ldr	r2, [pc, #100]	; (1000840c <dma_add_descriptor+0x9c>)
100083a8:	4694      	mov	ip, r2
100083aa:	4463      	add	r3, ip
100083ac:	684a      	ldr	r2, [r1, #4]
100083ae:	601a      	str	r2, [r3, #0]
	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG0.reg, descriptor->read_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
100083b0:	688a      	ldr	r2, [r1, #8]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083b2:	7803      	ldrb	r3, [r0, #0]
100083b4:	021b      	lsls	r3, r3, #8
100083b6:	4916      	ldr	r1, [pc, #88]	; (10008410 <dma_add_descriptor+0xa0>)
100083b8:	468c      	mov	ip, r1
100083ba:	4463      	add	r3, ip
100083bc:	601a      	str	r2, [r3, #0]
100083be:	7803      	ldrb	r3, [r0, #0]
100083c0:	021b      	lsls	r3, r3, #8
100083c2:	4a14      	ldr	r2, [pc, #80]	; (10008414 <dma_add_descriptor+0xa4>)
100083c4:	4694      	mov	ip, r2
100083c6:	4463      	add	r3, ip
100083c8:	2203      	movs	r2, #3
100083ca:	601a      	str	r2, [r3, #0]
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
100083cc:	2300      	movs	r3, #0
100083ce:	e018      	b.n	10008402 <dma_add_descriptor+0x92>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
			desc = (struct dma_descriptor*)((uint32_t)desc->next);
100083d0:	68d2      	ldr	r2, [r2, #12]
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
100083d2:	68d3      	ldr	r3, [r2, #12]
100083d4:	43a3      	bics	r3, r4
100083d6:	d1fb      	bne.n	100083d0 <dma_add_descriptor+0x60>
		}
		if (resource->descriptor->cmd.next_addr == 0x0) {
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
100083d8:	60d1      	str	r1, [r2, #12]
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
100083da:	2303      	movs	r3, #3
100083dc:	68ca      	ldr	r2, [r1, #12]
100083de:	439a      	bics	r2, r3
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
100083e0:	2300      	movs	r3, #0
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
100083e2:	2a00      	cmp	r2, #0
100083e4:	d00d      	beq.n	10008402 <dma_add_descriptor+0x92>
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
100083e6:	3303      	adds	r3, #3
100083e8:	60cb      	str	r3, [r1, #12]
		}
	}

	return STATUS_OK;
100083ea:	2300      	movs	r3, #0
100083ec:	e009      	b.n	10008402 <dma_add_descriptor+0x92>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083ee:	7803      	ldrb	r3, [r0, #0]
100083f0:	021b      	lsls	r3, r3, #8
100083f2:	4808      	ldr	r0, [pc, #32]	; (10008414 <dma_add_descriptor+0xa4>)
100083f4:	4684      	mov	ip, r0
100083f6:	4463      	add	r3, ip
100083f8:	2003      	movs	r0, #3
100083fa:	000c      	movs	r4, r1
100083fc:	4384      	bics	r4, r0
100083fe:	601c      	str	r4, [r3, #0]
10008400:	e7ea      	b.n	100083d8 <dma_add_descriptor+0x68>
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
}
10008402:	0018      	movs	r0, r3
10008404:	bd10      	pop	{r4, pc}
10008406:	46c0      	nop			; (mov r8, r8)
10008408:	40002000 	.word	0x40002000
1000840c:	40002004 	.word	0x40002004
10008410:	40002008 	.word	0x40002008
10008414:	4000200c 	.word	0x4000200c

10008418 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
10008418:	b082      	sub	sp, #8
1000841a:	0002      	movs	r2, r0
	volatile uint32_t regval;

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
1000841c:	2325      	movs	r3, #37	; 0x25
1000841e:	5cc3      	ldrb	r3, [r0, r3]
10008420:	b2d8      	uxtb	r0, r3
10008422:	2805      	cmp	r0, #5
10008424:	d027      	beq.n	10008476 <dma_start_transfer_job+0x5e>
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
10008426:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
10008428:	689b      	ldr	r3, [r3, #8]
		return STATUS_ERR_INVALID_ARG;
1000842a:	2017      	movs	r0, #23
	if (resource->job_status == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
1000842c:	2b00      	cmp	r3, #0
1000842e:	d022      	beq.n	10008476 <dma_start_transfer_job+0x5e>
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
10008430:	7813      	ldrb	r3, [r2, #0]
10008432:	021b      	lsls	r3, r3, #8
10008434:	4911      	ldr	r1, [pc, #68]	; (1000847c <dma_start_transfer_job+0x64>)
10008436:	5859      	ldr	r1, [r3, r1]
	if (resource->descriptor->buffer_size == 0) {
		return STATUS_ERR_INVALID_ARG;
	}
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
10008438:	9101      	str	r1, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
1000843a:	9801      	ldr	r0, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000843c:	4910      	ldr	r1, [pc, #64]	; (10008480 <dma_start_transfer_job+0x68>)
1000843e:	5058      	str	r0, [r3, r1]
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
10008440:	2324      	movs	r3, #36	; 0x24
10008442:	5cd3      	ldrb	r3, [r2, r3]
10008444:	9301      	str	r3, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
10008446:	9901      	ldr	r1, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008448:	7813      	ldrb	r3, [r2, #0]
1000844a:	021b      	lsls	r3, r3, #8
1000844c:	480d      	ldr	r0, [pc, #52]	; (10008484 <dma_start_transfer_job+0x6c>)
1000844e:	4684      	mov	ip, r0
10008450:	4463      	add	r3, ip
10008452:	6019      	str	r1, [r3, #0]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
	/* Set job status */
	resource->job_status = STATUS_BUSY;
10008454:	2105      	movs	r1, #5
10008456:	2325      	movs	r3, #37	; 0x25
10008458:	54d1      	strb	r1, [r2, r3]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000845a:	7813      	ldrb	r3, [r2, #0]
1000845c:	021b      	lsls	r3, r3, #8
1000845e:	490a      	ldr	r1, [pc, #40]	; (10008488 <dma_start_transfer_job+0x70>)
10008460:	468c      	mov	ip, r1
10008462:	4463      	add	r3, ip
10008464:	2101      	movs	r1, #1
10008466:	6019      	str	r1, [r3, #0]
10008468:	7813      	ldrb	r3, [r2, #0]
1000846a:	021b      	lsls	r3, r3, #8
1000846c:	4a07      	ldr	r2, [pc, #28]	; (1000848c <dma_start_transfer_job+0x74>)
1000846e:	4694      	mov	ip, r2
10008470:	4463      	add	r3, ip
10008472:	6019      	str	r1, [r3, #0]
	/* Enable the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_ENABLE_REG.reg, 1);
	/* Start the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_START_REG.reg, 1);

	return STATUS_OK;
10008474:	2000      	movs	r0, #0
}
10008476:	b002      	add	sp, #8
10008478:	4770      	bx	lr
1000847a:	46c0      	nop			; (mov r8, r8)
1000847c:	400020ac 	.word	0x400020ac
10008480:	400020a4 	.word	0x400020a4
10008484:	400020a8 	.word	0x400020a8
10008488:	40002040 	.word	0x40002040
1000848c:	40002044 	.word	0x40002044

10008490 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
10008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008492:	0004      	movs	r4, r0
10008494:	000d      	movs	r5, r1
	uint8_t new_channel;

	if (!_dma_inst._dma_init) {
10008496:	4b62      	ldr	r3, [pc, #392]	; (10008620 <dma_allocate+0x190>)
10008498:	781b      	ldrb	r3, [r3, #0]
1000849a:	2b00      	cmp	r3, #0
1000849c:	d112      	bne.n	100084c4 <dma_allocate+0x34>
		/* Perform a reset before enable DMA controller */
		system_peripheral_reset(PERIPHERAL_DMA);
1000849e:	2043      	movs	r0, #67	; 0x43
100084a0:	4b60      	ldr	r3, [pc, #384]	; (10008624 <dma_allocate+0x194>)
100084a2:	4798      	blx	r3
		/* Select Mux 15 as PROV_DMA_CTRL0 interrupt source */
		LPMCU_MISC_REGS0->IRQ_MUX_IO_SEL_3.bit.MUX_15 = LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_16_Val;
100084a4:	4960      	ldr	r1, [pc, #384]	; (10008628 <dma_allocate+0x198>)
100084a6:	22cc      	movs	r2, #204	; 0xcc
100084a8:	5888      	ldr	r0, [r1, r2]
100084aa:	4b60      	ldr	r3, [pc, #384]	; (1000862c <dma_allocate+0x19c>)
100084ac:	4003      	ands	r3, r0
100084ae:	2080      	movs	r0, #128	; 0x80
100084b0:	0540      	lsls	r0, r0, #21
100084b2:	4303      	orrs	r3, r0
100084b4:	508b      	str	r3, [r1, r2]
		system_register_isr(31, (uint32_t)dma_isr_handler);
100084b6:	495e      	ldr	r1, [pc, #376]	; (10008630 <dma_allocate+0x1a0>)
100084b8:	201f      	movs	r0, #31
100084ba:	4b5e      	ldr	r3, [pc, #376]	; (10008634 <dma_allocate+0x1a4>)
100084bc:	4798      	blx	r3
		
		_dma_inst._dma_init = true;
100084be:	2201      	movs	r2, #1
100084c0:	4b57      	ldr	r3, [pc, #348]	; (10008620 <dma_allocate+0x190>)
100084c2:	701a      	strb	r2, [r3, #0]
{
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;
100084c4:	4b56      	ldr	r3, [pc, #344]	; (10008620 <dma_allocate+0x190>)
100084c6:	685a      	ldr	r2, [r3, #4]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
		if (!(tmp & 0x00000001)) {
100084c8:	07d3      	lsls	r3, r2, #31
100084ca:	d500      	bpl.n	100084ce <dma_allocate+0x3e>
100084cc:	e0a2      	b.n	10008614 <dma_allocate+0x184>
100084ce:	e002      	b.n	100084d6 <dma_allocate+0x46>
100084d0:	4211      	tst	r1, r2
100084d2:	d10e      	bne.n	100084f2 <dma_allocate+0x62>
100084d4:	e000      	b.n	100084d8 <dma_allocate+0x48>
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
100084d6:	2300      	movs	r3, #0
		if (!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return
			 *number */

			_dma_inst.allocated_channels |= 1 << count;
100084d8:	4a51      	ldr	r2, [pc, #324]	; (10008620 <dma_allocate+0x190>)
100084da:	6850      	ldr	r0, [r2, #4]
100084dc:	2101      	movs	r1, #1
100084de:	4099      	lsls	r1, r3
100084e0:	4301      	orrs	r1, r0
100084e2:	6051      	str	r1, [r2, #4]
			_dma_inst.free_channels--;
100084e4:	7a11      	ldrb	r1, [r2, #8]
100084e6:	3901      	subs	r1, #1
100084e8:	7211      	strb	r1, [r2, #8]
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
100084ea:	2014      	movs	r0, #20
		_dma_inst._dma_init = true;
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
100084ec:	2bff      	cmp	r3, #255	; 0xff
100084ee:	d107      	bne.n	10008500 <dma_allocate+0x70>
100084f0:	e094      	b.n	1000861c <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
100084f2:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
100084f4:	3301      	adds	r3, #1
100084f6:	b2db      	uxtb	r3, r3
100084f8:	2b05      	cmp	r3, #5
100084fa:	d1e9      	bne.n	100084d0 <dma_allocate+0x40>
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
100084fc:	2014      	movs	r0, #20
100084fe:	e08d      	b.n	1000861c <dma_allocate+0x18c>
	}
	
	/* Set the channel */
	resource->channel_id = new_channel;
10008500:	7023      	strb	r3, [r4, #0]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008502:	021b      	lsls	r3, r3, #8
10008504:	4a4c      	ldr	r2, [pc, #304]	; (10008638 <dma_allocate+0x1a8>)
10008506:	4694      	mov	ip, r2
10008508:	4463      	add	r3, ip
1000850a:	782a      	ldrb	r2, [r5, #0]
1000850c:	267f      	movs	r6, #127	; 0x7f
1000850e:	4032      	ands	r2, r6
10008510:	78a9      	ldrb	r1, [r5, #2]
10008512:	07c9      	lsls	r1, r1, #31
10008514:	430a      	orrs	r2, r1
10008516:	7869      	ldrb	r1, [r5, #1]
10008518:	0409      	lsls	r1, r1, #16
1000851a:	20fc      	movs	r0, #252	; 0xfc
1000851c:	0380      	lsls	r0, r0, #14
1000851e:	4001      	ands	r1, r0
10008520:	430a      	orrs	r2, r1
10008522:	601a      	str	r2, [r3, #0]
10008524:	7823      	ldrb	r3, [r4, #0]
10008526:	021b      	lsls	r3, r3, #8
10008528:	4a44      	ldr	r2, [pc, #272]	; (1000863c <dma_allocate+0x1ac>)
1000852a:	4694      	mov	ip, r2
1000852c:	4463      	add	r3, ip
1000852e:	7a6a      	ldrb	r2, [r5, #9]
10008530:	4032      	ands	r2, r6
10008532:	7ae9      	ldrb	r1, [r5, #11]
10008534:	07c9      	lsls	r1, r1, #31
10008536:	430a      	orrs	r2, r1
10008538:	7aa9      	ldrb	r1, [r5, #10]
1000853a:	0409      	lsls	r1, r1, #16
1000853c:	4008      	ands	r0, r1
1000853e:	4310      	orrs	r0, r2
10008540:	6018      	str	r0, [r3, #0]
10008542:	7823      	ldrb	r3, [r4, #0]
10008544:	021b      	lsls	r3, r3, #8
10008546:	4a3e      	ldr	r2, [pc, #248]	; (10008640 <dma_allocate+0x1b0>)
10008548:	4694      	mov	ip, r2
1000854a:	4463      	add	r3, ip
1000854c:	7cea      	ldrb	r2, [r5, #19]
1000854e:	0712      	lsls	r2, r2, #28
10008550:	21c0      	movs	r1, #192	; 0xc0
10008552:	0589      	lsls	r1, r1, #22
10008554:	400a      	ands	r2, r1
10008556:	7ca9      	ldrb	r1, [r5, #18]
10008558:	0409      	lsls	r1, r1, #16
1000855a:	430a      	orrs	r2, r1
1000855c:	601a      	str	r2, [r3, #0]
1000855e:	7823      	ldrb	r3, [r4, #0]
10008560:	021b      	lsls	r3, r3, #8
10008562:	4a38      	ldr	r2, [pc, #224]	; (10008644 <dma_allocate+0x1b4>)
10008564:	4694      	mov	ip, r2
10008566:	4463      	add	r3, ip
10008568:	792f      	ldrb	r7, [r5, #4]
1000856a:	023f      	lsls	r7, r7, #8
1000856c:	21e0      	movs	r1, #224	; 0xe0
1000856e:	00c9      	lsls	r1, r1, #3
10008570:	003a      	movs	r2, r7
10008572:	400a      	ands	r2, r1
10008574:	7b2e      	ldrb	r6, [r5, #12]
10008576:	0436      	lsls	r6, r6, #16
10008578:	20f8      	movs	r0, #248	; 0xf8
1000857a:	0340      	lsls	r0, r0, #13
1000857c:	4006      	ands	r6, r0
1000857e:	4332      	orrs	r2, r6
10008580:	0017      	movs	r7, r2
10008582:	78e8      	ldrb	r0, [r5, #3]
10008584:	221f      	movs	r2, #31
10008586:	4002      	ands	r2, r0
10008588:	003e      	movs	r6, r7
1000858a:	4316      	orrs	r6, r2
1000858c:	7b6a      	ldrb	r2, [r5, #13]
1000858e:	0612      	lsls	r2, r2, #24
10008590:	20e0      	movs	r0, #224	; 0xe0
10008592:	04c0      	lsls	r0, r0, #19
10008594:	4002      	ands	r2, r0
10008596:	4332      	orrs	r2, r6
10008598:	601a      	str	r2, [r3, #0]
1000859a:	7820      	ldrb	r0, [r4, #0]
1000859c:	0200      	lsls	r0, r0, #8
1000859e:	4b2a      	ldr	r3, [pc, #168]	; (10008648 <dma_allocate+0x1b8>)
100085a0:	469c      	mov	ip, r3
100085a2:	4460      	add	r0, ip
100085a4:	79ab      	ldrb	r3, [r5, #6]
100085a6:	2607      	movs	r6, #7
100085a8:	4033      	ands	r3, r6
100085aa:	796e      	ldrb	r6, [r5, #5]
100085ac:	2208      	movs	r2, #8
100085ae:	40b2      	lsls	r2, r6
100085b0:	4313      	orrs	r3, r2
100085b2:	79ee      	ldrb	r6, [r5, #7]
100085b4:	2280      	movs	r2, #128	; 0x80
100085b6:	40b2      	lsls	r2, r6
100085b8:	4313      	orrs	r3, r2
100085ba:	7bae      	ldrb	r6, [r5, #14]
100085bc:	2280      	movs	r2, #128	; 0x80
100085be:	0112      	lsls	r2, r2, #4
100085c0:	40b2      	lsls	r2, r6
100085c2:	4313      	orrs	r3, r2
100085c4:	7c2e      	ldrb	r6, [r5, #16]
100085c6:	2280      	movs	r2, #128	; 0x80
100085c8:	0212      	lsls	r2, r2, #8
100085ca:	40b2      	lsls	r2, r6
100085cc:	4313      	orrs	r3, r2
100085ce:	001e      	movs	r6, r3
100085d0:	7a2a      	ldrb	r2, [r5, #8]
100085d2:	0112      	lsls	r2, r2, #4
100085d4:	2370      	movs	r3, #112	; 0x70
100085d6:	401a      	ands	r2, r3
100085d8:	0033      	movs	r3, r6
100085da:	4313      	orrs	r3, r2
100085dc:	7bea      	ldrb	r2, [r5, #15]
100085de:	0212      	lsls	r2, r2, #8
100085e0:	4011      	ands	r1, r2
100085e2:	430b      	orrs	r3, r1
100085e4:	7c69      	ldrb	r1, [r5, #17]
100085e6:	0309      	lsls	r1, r1, #12
100085e8:	22e0      	movs	r2, #224	; 0xe0
100085ea:	01d2      	lsls	r2, r2, #7
100085ec:	4011      	ands	r1, r2
100085ee:	430b      	orrs	r3, r1
100085f0:	6003      	str	r3, [r0, #0]
100085f2:	1d23      	adds	r3, r4, #4
100085f4:	0021      	movs	r1, r4
100085f6:	3124      	adds	r1, #36	; 0x24
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
		resource->callback[i] = NULL;
100085f8:	2200      	movs	r2, #0
100085fa:	c304      	stmia	r3!, {r2}
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_TOP << config->des.enable_proi_top) |
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
100085fc:	428b      	cmp	r3, r1
100085fe:	d1fc      	bne.n	100085fa <dma_allocate+0x16a>
		resource->callback[i] = NULL;
	}
	resource->callback_enable = 0;
10008600:	2300      	movs	r3, #0
10008602:	2224      	movs	r2, #36	; 0x24
10008604:	54a3      	strb	r3, [r4, r2]
	/* Set the channel */
	resource->channel_id = new_channel;
	/* Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
	
	resource->descriptor = NULL;
10008606:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
10008608:	7823      	ldrb	r3, [r4, #0]
1000860a:	009b      	lsls	r3, r3, #2
1000860c:	4a0f      	ldr	r2, [pc, #60]	; (1000864c <dma_allocate+0x1bc>)
1000860e:	509c      	str	r4, [r3, r2]

	return STATUS_OK;
10008610:	2000      	movs	r0, #0
10008612:	e003      	b.n	1000861c <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
10008614:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008616:	2301      	movs	r3, #1
		if (!(tmp & 0x00000001)) {
10008618:	2101      	movs	r1, #1
1000861a:	e759      	b.n	100084d0 <dma_allocate+0x40>

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;

	return STATUS_OK;
1000861c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000861e:	46c0      	nop			; (mov r8, r8)
10008620:	100138c4 	.word	0x100138c4
10008624:	10008fd1 	.word	0x10008fd1
10008628:	4000b000 	.word	0x4000b000
1000862c:	e0ffffff 	.word	0xe0ffffff
10008630:	10008231 	.word	0x10008231
10008634:	10009439 	.word	0x10009439
10008638:	40002010 	.word	0x40002010
1000863c:	40002014 	.word	0x40002014
10008640:	40002018 	.word	0x40002018
10008644:	40002020 	.word	0x40002020
10008648:	40002838 	.word	0x40002838
1000864c:	1001395c 	.word	0x1001395c

10008650 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008650:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008652:	4b0d      	ldr	r3, [pc, #52]	; (10008688 <dualtimer_isr_handler+0x38>)
10008654:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008656:	2b00      	cmp	r3, #0
10008658:	d007      	beq.n	1000866a <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000865a:	2201      	movs	r2, #1
1000865c:	4b0a      	ldr	r3, [pc, #40]	; (10008688 <dualtimer_isr_handler+0x38>)
1000865e:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008660:	4b0a      	ldr	r3, [pc, #40]	; (1000868c <dualtimer_isr_handler+0x3c>)
10008662:	681b      	ldr	r3, [r3, #0]
10008664:	2b00      	cmp	r3, #0
10008666:	d000      	beq.n	1000866a <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008668:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000866a:	2334      	movs	r3, #52	; 0x34
1000866c:	4a06      	ldr	r2, [pc, #24]	; (10008688 <dualtimer_isr_handler+0x38>)
1000866e:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008670:	2b00      	cmp	r3, #0
10008672:	d007      	beq.n	10008684 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008674:	2101      	movs	r1, #1
10008676:	232c      	movs	r3, #44	; 0x2c
10008678:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000867a:	4b05      	ldr	r3, [pc, #20]	; (10008690 <dualtimer_isr_handler+0x40>)
1000867c:	681b      	ldr	r3, [r3, #0]
1000867e:	2b00      	cmp	r3, #0
10008680:	d000      	beq.n	10008684 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008682:	4798      	blx	r3
	}
}
10008684:	bd10      	pop	{r4, pc}
10008686:	46c0      	nop			; (mov r8, r8)
10008688:	40001000 	.word	0x40001000
1000868c:	10013970 	.word	0x10013970
10008690:	10013974 	.word	0x10013974

10008694 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008694:	2301      	movs	r3, #1
10008696:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008698:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000869a:	2202      	movs	r2, #2
1000869c:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000869e:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100086a0:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100086a2:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100086a4:	2200      	movs	r2, #0
100086a6:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100086a8:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
100086aa:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
100086ac:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
100086ae:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
100086b0:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
100086b2:	7602      	strb	r2, [r0, #24]
}
100086b4:	4770      	bx	lr
100086b6:	46c0      	nop			; (mov r8, r8)

100086b8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
100086b8:	2800      	cmp	r0, #0
100086ba:	d107      	bne.n	100086cc <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100086bc:	2900      	cmp	r1, #0
100086be:	d102      	bne.n	100086c6 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
100086c0:	4b06      	ldr	r3, [pc, #24]	; (100086dc <dualtimer_set_counter+0x24>)
100086c2:	601a      	str	r2, [r3, #0]
100086c4:	e009      	b.n	100086da <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
100086c6:	4b05      	ldr	r3, [pc, #20]	; (100086dc <dualtimer_set_counter+0x24>)
100086c8:	619a      	str	r2, [r3, #24]
100086ca:	e006      	b.n	100086da <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100086cc:	2900      	cmp	r1, #0
100086ce:	d102      	bne.n	100086d6 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
100086d0:	4b02      	ldr	r3, [pc, #8]	; (100086dc <dualtimer_set_counter+0x24>)
100086d2:	621a      	str	r2, [r3, #32]
100086d4:	e001      	b.n	100086da <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
100086d6:	4b01      	ldr	r3, [pc, #4]	; (100086dc <dualtimer_set_counter+0x24>)
100086d8:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
100086da:	4770      	bx	lr
100086dc:	40001000 	.word	0x40001000

100086e0 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100086e0:	2800      	cmp	r0, #0
100086e2:	d105      	bne.n	100086f0 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100086e4:	4a06      	ldr	r2, [pc, #24]	; (10008700 <dualtimer_enable+0x20>)
100086e6:	7a11      	ldrb	r1, [r2, #8]
100086e8:	2380      	movs	r3, #128	; 0x80
100086ea:	430b      	orrs	r3, r1
100086ec:	7213      	strb	r3, [r2, #8]
100086ee:	e005      	b.n	100086fc <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100086f0:	4903      	ldr	r1, [pc, #12]	; (10008700 <dualtimer_enable+0x20>)
100086f2:	2228      	movs	r2, #40	; 0x28
100086f4:	5c88      	ldrb	r0, [r1, r2]
100086f6:	2380      	movs	r3, #128	; 0x80
100086f8:	4303      	orrs	r3, r0
100086fa:	548b      	strb	r3, [r1, r2]
	}
}
100086fc:	4770      	bx	lr
100086fe:	46c0      	nop			; (mov r8, r8)
10008700:	40001000 	.word	0x40001000

10008704 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008704:	2800      	cmp	r0, #0
10008706:	d105      	bne.n	10008714 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008708:	4a06      	ldr	r2, [pc, #24]	; (10008724 <dualtimer_disable+0x20>)
1000870a:	7a11      	ldrb	r1, [r2, #8]
1000870c:	237f      	movs	r3, #127	; 0x7f
1000870e:	400b      	ands	r3, r1
10008710:	7213      	strb	r3, [r2, #8]
10008712:	e005      	b.n	10008720 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008714:	4903      	ldr	r1, [pc, #12]	; (10008724 <dualtimer_disable+0x20>)
10008716:	2228      	movs	r2, #40	; 0x28
10008718:	5c88      	ldrb	r0, [r1, r2]
1000871a:	237f      	movs	r3, #127	; 0x7f
1000871c:	4003      	ands	r3, r0
1000871e:	548b      	strb	r3, [r1, r2]
	}
}
10008720:	4770      	bx	lr
10008722:	46c0      	nop			; (mov r8, r8)
10008724:	40001000 	.word	0x40001000

10008728 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008728:	b570      	push	{r4, r5, r6, lr}
1000872a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000872c:	2004      	movs	r0, #4
1000872e:	4b39      	ldr	r3, [pc, #228]	; (10008814 <dualtimer_init+0xec>)
10008730:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008732:	7823      	ldrb	r3, [r4, #0]
10008734:	2b00      	cmp	r3, #0
10008736:	d102      	bne.n	1000873e <dualtimer_init+0x16>
10008738:	7b23      	ldrb	r3, [r4, #12]
1000873a:	2b00      	cmp	r3, #0
1000873c:	d065      	beq.n	1000880a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000873e:	4936      	ldr	r1, [pc, #216]	; (10008818 <dualtimer_init+0xf0>)
10008740:	68ca      	ldr	r2, [r1, #12]
10008742:	2320      	movs	r3, #32
10008744:	4313      	orrs	r3, r2
10008746:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
10008748:	7e22      	ldrb	r2, [r4, #24]
1000874a:	698b      	ldr	r3, [r1, #24]
1000874c:	2003      	movs	r0, #3
1000874e:	4002      	ands	r2, r0
10008750:	0112      	lsls	r2, r2, #4
10008752:	302d      	adds	r0, #45	; 0x2d
10008754:	4383      	bics	r3, r0
10008756:	4313      	orrs	r3, r2
10008758:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000875a:	7823      	ldrb	r3, [r4, #0]
1000875c:	2b00      	cmp	r3, #0
1000875e:	d026      	beq.n	100087ae <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008760:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008762:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008764:	2b00      	cmp	r3, #0
10008766:	d003      	beq.n	10008770 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008768:	3b02      	subs	r3, #2
1000876a:	425d      	negs	r5, r3
1000876c:	415d      	adcs	r5, r3
1000876e:	01a9      	lsls	r1, r5, #6
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
10008770:	78a2      	ldrb	r2, [r4, #2]
10008772:	0052      	lsls	r2, r2, #1
10008774:	2502      	movs	r5, #2
10008776:	402a      	ands	r2, r5
10008778:	78e3      	ldrb	r3, [r4, #3]
1000877a:	009b      	lsls	r3, r3, #2
1000877c:	350a      	adds	r5, #10
1000877e:	402b      	ands	r3, r5
10008780:	431a      	orrs	r2, r3
10008782:	0015      	movs	r5, r2
10008784:	430d      	orrs	r5, r1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008786:	7923      	ldrb	r3, [r4, #4]
10008788:	2b00      	cmp	r3, #0
1000878a:	d001      	beq.n	10008790 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000878c:	2320      	movs	r3, #32
1000878e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008790:	4b22      	ldr	r3, [pc, #136]	; (1000881c <dualtimer_init+0xf4>)
10008792:	68a2      	ldr	r2, [r4, #8]
10008794:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008796:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
10008798:	491f      	ldr	r1, [pc, #124]	; (10008818 <dualtimer_init+0xf0>)
1000879a:	22c4      	movs	r2, #196	; 0xc4
1000879c:	0052      	lsls	r2, r2, #1
1000879e:	5c88      	ldrb	r0, [r1, r2]
100087a0:	2301      	movs	r3, #1
100087a2:	4303      	orrs	r3, r0
100087a4:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
100087a6:	2000      	movs	r0, #0
100087a8:	4b1d      	ldr	r3, [pc, #116]	; (10008820 <dualtimer_init+0xf8>)
100087aa:	4798      	blx	r3
100087ac:	e000      	b.n	100087b0 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
100087ae:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
100087b0:	7b23      	ldrb	r3, [r4, #12]
100087b2:	2b00      	cmp	r3, #0
100087b4:	d029      	beq.n	1000880a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100087b6:	7b63      	ldrb	r3, [r4, #13]
100087b8:	2b00      	cmp	r3, #0
100087ba:	d005      	beq.n	100087c8 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
100087bc:	2b01      	cmp	r3, #1
100087be:	d005      	beq.n	100087cc <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
100087c0:	2b02      	cmp	r3, #2
100087c2:	d104      	bne.n	100087ce <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
100087c4:	2540      	movs	r5, #64	; 0x40
100087c6:	e002      	b.n	100087ce <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
100087c8:	2501      	movs	r5, #1
100087ca:	e000      	b.n	100087ce <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
100087cc:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
100087ce:	7ba3      	ldrb	r3, [r4, #14]
100087d0:	005b      	lsls	r3, r3, #1
100087d2:	2102      	movs	r1, #2
100087d4:	4019      	ands	r1, r3
100087d6:	7be2      	ldrb	r2, [r4, #15]
100087d8:	0092      	lsls	r2, r2, #2
100087da:	230c      	movs	r3, #12
100087dc:	4013      	ands	r3, r2
100087de:	430b      	orrs	r3, r1
100087e0:	431d      	orrs	r5, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
100087e2:	7c23      	ldrb	r3, [r4, #16]
100087e4:	2b00      	cmp	r3, #0
100087e6:	d001      	beq.n	100087ec <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
100087e8:	2320      	movs	r3, #32
100087ea:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100087ec:	6962      	ldr	r2, [r4, #20]
100087ee:	4b0b      	ldr	r3, [pc, #44]	; (1000881c <dualtimer_init+0xf4>)
100087f0:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100087f2:	2228      	movs	r2, #40	; 0x28
100087f4:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
100087f6:	4908      	ldr	r1, [pc, #32]	; (10008818 <dualtimer_init+0xf0>)
100087f8:	3261      	adds	r2, #97	; 0x61
100087fa:	32ff      	adds	r2, #255	; 0xff
100087fc:	5c88      	ldrb	r0, [r1, r2]
100087fe:	2302      	movs	r3, #2
10008800:	4303      	orrs	r3, r0
10008802:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10008804:	2001      	movs	r0, #1
10008806:	4b06      	ldr	r3, [pc, #24]	; (10008820 <dualtimer_init+0xf8>)
10008808:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000880a:	4906      	ldr	r1, [pc, #24]	; (10008824 <dualtimer_init+0xfc>)
1000880c:	201e      	movs	r0, #30
1000880e:	4b06      	ldr	r3, [pc, #24]	; (10008828 <dualtimer_init+0x100>)
10008810:	4798      	blx	r3
}
10008812:	bd70      	pop	{r4, r5, r6, pc}
10008814:	10008fd1 	.word	0x10008fd1
10008818:	4000b000 	.word	0x4000b000
1000881c:	40001000 	.word	0x40001000
10008820:	100086e1 	.word	0x100086e1
10008824:	10008651 	.word	0x10008651
10008828:	10009439 	.word	0x10009439

1000882c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000882c:	2800      	cmp	r0, #0
1000882e:	d102      	bne.n	10008836 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10008830:	4b02      	ldr	r3, [pc, #8]	; (1000883c <dualtimer_register_callback+0x10>)
10008832:	6019      	str	r1, [r3, #0]
10008834:	e001      	b.n	1000883a <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008836:	4b02      	ldr	r3, [pc, #8]	; (10008840 <dualtimer_register_callback+0x14>)
10008838:	6019      	str	r1, [r3, #0]
	}
}
1000883a:	4770      	bx	lr
1000883c:	10013970 	.word	0x10013970
10008840:	10013974 	.word	0x10013974

10008844 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008844:	2300      	movs	r3, #0
10008846:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008848:	2201      	movs	r2, #1
1000884a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000884c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000884e:	70c3      	strb	r3, [r0, #3]
}
10008850:	4770      	bx	lr
10008852:	46c0      	nop			; (mov r8, r8)

10008854 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008854:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10008856:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008858:	2801      	cmp	r0, #1
1000885a:	d800      	bhi.n	1000885e <gpio_pin_set_config+0xa>
1000885c:	e0c8      	b.n	100089f0 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000885e:	2807      	cmp	r0, #7
10008860:	d809      	bhi.n	10008876 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008862:	4d64      	ldr	r5, [pc, #400]	; (100089f4 <gpio_pin_set_config+0x1a0>)
10008864:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008866:	3b10      	subs	r3, #16
10008868:	4003      	ands	r3, r0
1000886a:	009b      	lsls	r3, r3, #2
1000886c:	2407      	movs	r4, #7
1000886e:	409c      	lsls	r4, r3
10008870:	43a2      	bics	r2, r4
10008872:	646a      	str	r2, [r5, #68]	; 0x44
10008874:	e029      	b.n	100088ca <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
10008876:	280f      	cmp	r0, #15
10008878:	d809      	bhi.n	1000888e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000887a:	4d5e      	ldr	r5, [pc, #376]	; (100089f4 <gpio_pin_set_config+0x1a0>)
1000887c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000887e:	2307      	movs	r3, #7
10008880:	4003      	ands	r3, r0
10008882:	009b      	lsls	r3, r3, #2
10008884:	2407      	movs	r4, #7
10008886:	409c      	lsls	r4, r3
10008888:	43a2      	bics	r2, r4
1000888a:	64aa      	str	r2, [r5, #72]	; 0x48
1000888c:	e01d      	b.n	100088ca <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000888e:	2817      	cmp	r0, #23
10008890:	d809      	bhi.n	100088a6 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008892:	4d58      	ldr	r5, [pc, #352]	; (100089f4 <gpio_pin_set_config+0x1a0>)
10008894:	6cea      	ldr	r2, [r5, #76]	; 0x4c
10008896:	2307      	movs	r3, #7
10008898:	4003      	ands	r3, r0
1000889a:	009b      	lsls	r3, r3, #2
1000889c:	2407      	movs	r4, #7
1000889e:	409c      	lsls	r4, r3
100088a0:	43a2      	bics	r2, r4
100088a2:	64ea      	str	r2, [r5, #76]	; 0x4c
100088a4:	e011      	b.n	100088ca <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
100088a6:	0003      	movs	r3, r0
100088a8:	3b2c      	subs	r3, #44	; 0x2c
100088aa:	2b03      	cmp	r3, #3
100088ac:	d80d      	bhi.n	100088ca <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
100088ae:	4d52      	ldr	r5, [pc, #328]	; (100089f8 <gpio_pin_set_config+0x1a4>)
100088b0:	2482      	movs	r4, #130	; 0x82
100088b2:	00e4      	lsls	r4, r4, #3
100088b4:	5d2a      	ldrb	r2, [r5, r4]
100088b6:	0712      	lsls	r2, r2, #28
100088b8:	2601      	movs	r6, #1
100088ba:	409e      	lsls	r6, r3
100088bc:	0f12      	lsrs	r2, r2, #28
100088be:	5d2b      	ldrb	r3, [r5, r4]
100088c0:	43b2      	bics	r2, r6
100088c2:	260f      	movs	r6, #15
100088c4:	43b3      	bics	r3, r6
100088c6:	4313      	orrs	r3, r2
100088c8:	552b      	strb	r3, [r5, r4]
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100088ca:	0003      	movs	r3, r0
100088cc:	3b1d      	subs	r3, #29
100088ce:	2b02      	cmp	r3, #2
100088d0:	d829      	bhi.n	10008926 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
100088d2:	784b      	ldrb	r3, [r1, #1]
100088d4:	2b01      	cmp	r3, #1
100088d6:	d108      	bne.n	100088ea <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
100088d8:	4d47      	ldr	r5, [pc, #284]	; (100089f8 <gpio_pin_set_config+0x1a4>)
100088da:	7d2b      	ldrb	r3, [r5, #20]
100088dc:	241f      	movs	r4, #31
100088de:	1a24      	subs	r4, r4, r0
100088e0:	2201      	movs	r2, #1
100088e2:	40a2      	lsls	r2, r4
100088e4:	4393      	bics	r3, r2
100088e6:	752b      	strb	r3, [r5, #20]
100088e8:	e008      	b.n	100088fc <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100088ea:	4c43      	ldr	r4, [pc, #268]	; (100089f8 <gpio_pin_set_config+0x1a4>)
100088ec:	7d25      	ldrb	r5, [r4, #20]
100088ee:	221f      	movs	r2, #31
100088f0:	1a12      	subs	r2, r2, r0
100088f2:	2301      	movs	r3, #1
100088f4:	4093      	lsls	r3, r2
100088f6:	432b      	orrs	r3, r5
100088f8:	b2db      	uxtb	r3, r3
100088fa:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
100088fc:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100088fe:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10008900:	2a00      	cmp	r2, #0
10008902:	d075      	beq.n	100089f0 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008904:	493c      	ldr	r1, [pc, #240]	; (100089f8 <gpio_pin_set_config+0x1a4>)
10008906:	880c      	ldrh	r4, [r1, #0]
10008908:	221f      	movs	r2, #31
1000890a:	1a10      	subs	r0, r2, r0
1000890c:	0080      	lsls	r0, r0, #2
1000890e:	3301      	adds	r3, #1
10008910:	4083      	lsls	r3, r0
10008912:	4323      	orrs	r3, r4
10008914:	b29b      	uxth	r3, r3
10008916:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008918:	4a38      	ldr	r2, [pc, #224]	; (100089fc <gpio_pin_set_config+0x1a8>)
1000891a:	7811      	ldrb	r1, [r2, #0]
1000891c:	2302      	movs	r3, #2
1000891e:	430b      	orrs	r3, r1
10008920:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008922:	2300      	movs	r3, #0
10008924:	e064      	b.n	100089f0 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10008926:	780a      	ldrb	r2, [r1, #0]
10008928:	2a00      	cmp	r2, #0
1000892a:	d140      	bne.n	100089ae <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000892c:	280f      	cmp	r0, #15
1000892e:	d808      	bhi.n	10008942 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008930:	2301      	movs	r3, #1
10008932:	4083      	lsls	r3, r0
10008934:	b29b      	uxth	r3, r3
10008936:	4a32      	ldr	r2, [pc, #200]	; (10008a00 <gpio_pin_set_config+0x1ac>)
10008938:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000893a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000893c:	281f      	cmp	r0, #31
1000893e:	d857      	bhi.n	100089f0 <gpio_pin_set_config+0x19c>
10008940:	e012      	b.n	10008968 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008942:	281f      	cmp	r0, #31
10008944:	d807      	bhi.n	10008956 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008946:	220f      	movs	r2, #15
10008948:	4002      	ands	r2, r0
1000894a:	2301      	movs	r3, #1
1000894c:	4093      	lsls	r3, r2
1000894e:	b29b      	uxth	r3, r3
10008950:	4a2c      	ldr	r2, [pc, #176]	; (10008a04 <gpio_pin_set_config+0x1b0>)
10008952:	8293      	strh	r3, [r2, #20]
10008954:	e008      	b.n	10008968 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008956:	230f      	movs	r3, #15
10008958:	4018      	ands	r0, r3
1000895a:	3b0e      	subs	r3, #14
1000895c:	4083      	lsls	r3, r0
1000895e:	b29b      	uxth	r3, r3
10008960:	4a29      	ldr	r2, [pc, #164]	; (10008a08 <gpio_pin_set_config+0x1b4>)
10008962:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008964:	2300      	movs	r3, #0
10008966:	e043      	b.n	100089f0 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008968:	784b      	ldrb	r3, [r1, #1]
1000896a:	2b01      	cmp	r3, #1
1000896c:	d00c      	beq.n	10008988 <gpio_pin_set_config+0x134>
1000896e:	2b00      	cmp	r3, #0
10008970:	d002      	beq.n	10008978 <gpio_pin_set_config+0x124>
10008972:	2b02      	cmp	r3, #2
10008974:	d010      	beq.n	10008998 <gpio_pin_set_config+0x144>
10008976:	e03a      	b.n	100089ee <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008978:	491e      	ldr	r1, [pc, #120]	; (100089f4 <gpio_pin_set_config+0x1a0>)
1000897a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000897c:	2301      	movs	r3, #1
1000897e:	4083      	lsls	r3, r0
10008980:	4313      	orrs	r3, r2
10008982:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008984:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
10008986:	e033      	b.n	100089f0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008988:	491a      	ldr	r1, [pc, #104]	; (100089f4 <gpio_pin_set_config+0x1a0>)
1000898a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000898c:	2201      	movs	r2, #1
1000898e:	4082      	lsls	r2, r0
10008990:	4393      	bics	r3, r2
10008992:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008994:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008996:	e02b      	b.n	100089f0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008998:	4b16      	ldr	r3, [pc, #88]	; (100089f4 <gpio_pin_set_config+0x1a0>)
1000899a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000899c:	2201      	movs	r2, #1
1000899e:	4082      	lsls	r2, r0
100089a0:	4311      	orrs	r1, r2
100089a2:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
100089a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
100089a6:	4391      	bics	r1, r2
100089a8:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089aa:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
100089ac:	e020      	b.n	100089f0 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089ae:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
100089b0:	2a01      	cmp	r2, #1
100089b2:	d11d      	bne.n	100089f0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
100089b4:	280f      	cmp	r0, #15
100089b6:	d806      	bhi.n	100089c6 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
100089b8:	3301      	adds	r3, #1
100089ba:	4083      	lsls	r3, r0
100089bc:	b29b      	uxth	r3, r3
100089be:	4a10      	ldr	r2, [pc, #64]	; (10008a00 <gpio_pin_set_config+0x1ac>)
100089c0:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089c2:	2300      	movs	r3, #0
100089c4:	e014      	b.n	100089f0 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
100089c6:	281f      	cmp	r0, #31
100089c8:	d808      	bhi.n	100089dc <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
100089ca:	230f      	movs	r3, #15
100089cc:	4018      	ands	r0, r3
100089ce:	3b0e      	subs	r3, #14
100089d0:	4083      	lsls	r3, r0
100089d2:	b29b      	uxth	r3, r3
100089d4:	4a0b      	ldr	r2, [pc, #44]	; (10008a04 <gpio_pin_set_config+0x1b0>)
100089d6:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089d8:	2300      	movs	r3, #0
100089da:	e009      	b.n	100089f0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
100089dc:	230f      	movs	r3, #15
100089de:	4018      	ands	r0, r3
100089e0:	3b0e      	subs	r3, #14
100089e2:	4083      	lsls	r3, r0
100089e4:	b29b      	uxth	r3, r3
100089e6:	4a08      	ldr	r2, [pc, #32]	; (10008a08 <gpio_pin_set_config+0x1b4>)
100089e8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089ea:	2300      	movs	r3, #0
100089ec:	e000      	b.n	100089f0 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
100089ee:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100089f0:	0018      	movs	r0, r3
100089f2:	bd70      	pop	{r4, r5, r6, pc}
100089f4:	4000b000 	.word	0x4000b000
100089f8:	4000f000 	.word	0x4000f000
100089fc:	4000e000 	.word	0x4000e000
10008a00:	40010000 	.word	0x40010000
10008a04:	40011000 	.word	0x40011000
10008a08:	40013000 	.word	0x40013000

10008a0c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
10008a0c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
10008a0e:	280f      	cmp	r0, #15
10008a10:	d810      	bhi.n	10008a34 <gpio_pin_set_output_level+0x28>
		if(level) {
10008a12:	2900      	cmp	r1, #0
10008a14:	d007      	beq.n	10008a26 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
10008a16:	4a1d      	ldr	r2, [pc, #116]	; (10008a8c <gpio_pin_set_output_level+0x80>)
10008a18:	8891      	ldrh	r1, [r2, #4]
10008a1a:	2301      	movs	r3, #1
10008a1c:	4083      	lsls	r3, r0
10008a1e:	430b      	orrs	r3, r1
10008a20:	b29b      	uxth	r3, r3
10008a22:	8093      	strh	r3, [r2, #4]
10008a24:	e031      	b.n	10008a8a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
10008a26:	4919      	ldr	r1, [pc, #100]	; (10008a8c <gpio_pin_set_output_level+0x80>)
10008a28:	888b      	ldrh	r3, [r1, #4]
10008a2a:	2201      	movs	r2, #1
10008a2c:	4082      	lsls	r2, r0
10008a2e:	4393      	bics	r3, r2
10008a30:	808b      	strh	r3, [r1, #4]
10008a32:	e02a      	b.n	10008a8a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
10008a34:	281f      	cmp	r0, #31
10008a36:	d814      	bhi.n	10008a62 <gpio_pin_set_output_level+0x56>
		if(level) {
10008a38:	2900      	cmp	r1, #0
10008a3a:	d009      	beq.n	10008a50 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008a3c:	4914      	ldr	r1, [pc, #80]	; (10008a90 <gpio_pin_set_output_level+0x84>)
10008a3e:	888c      	ldrh	r4, [r1, #4]
10008a40:	220f      	movs	r2, #15
10008a42:	4010      	ands	r0, r2
10008a44:	2301      	movs	r3, #1
10008a46:	4083      	lsls	r3, r0
10008a48:	4323      	orrs	r3, r4
10008a4a:	b29b      	uxth	r3, r3
10008a4c:	808b      	strh	r3, [r1, #4]
10008a4e:	e01c      	b.n	10008a8a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008a50:	490f      	ldr	r1, [pc, #60]	; (10008a90 <gpio_pin_set_output_level+0x84>)
10008a52:	888b      	ldrh	r3, [r1, #4]
10008a54:	220f      	movs	r2, #15
10008a56:	4010      	ands	r0, r2
10008a58:	3a0e      	subs	r2, #14
10008a5a:	4082      	lsls	r2, r0
10008a5c:	4393      	bics	r3, r2
10008a5e:	808b      	strh	r3, [r1, #4]
10008a60:	e013      	b.n	10008a8a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
10008a62:	2900      	cmp	r1, #0
10008a64:	d009      	beq.n	10008a7a <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008a66:	490b      	ldr	r1, [pc, #44]	; (10008a94 <gpio_pin_set_output_level+0x88>)
10008a68:	888c      	ldrh	r4, [r1, #4]
10008a6a:	220f      	movs	r2, #15
10008a6c:	4010      	ands	r0, r2
10008a6e:	2301      	movs	r3, #1
10008a70:	4083      	lsls	r3, r0
10008a72:	4323      	orrs	r3, r4
10008a74:	b29b      	uxth	r3, r3
10008a76:	808b      	strh	r3, [r1, #4]
10008a78:	e007      	b.n	10008a8a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008a7a:	4906      	ldr	r1, [pc, #24]	; (10008a94 <gpio_pin_set_output_level+0x88>)
10008a7c:	888b      	ldrh	r3, [r1, #4]
10008a7e:	220f      	movs	r2, #15
10008a80:	4010      	ands	r0, r2
10008a82:	3a0e      	subs	r2, #14
10008a84:	4082      	lsls	r2, r0
10008a86:	4393      	bics	r3, r2
10008a88:	808b      	strh	r3, [r1, #4]
		}
	}
}
10008a8a:	bd10      	pop	{r4, pc}
10008a8c:	40010000 	.word	0x40010000
10008a90:	40011000 	.word	0x40011000
10008a94:	40013000 	.word	0x40013000

10008a98 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008a98:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008a9a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008a9c:	23ff      	movs	r3, #255	; 0xff
10008a9e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008aa0:	2807      	cmp	r0, #7
10008aa2:	d833      	bhi.n	10008b0c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008aa4:	4a4e      	ldr	r2, [pc, #312]	; (10008be0 <gpio_pinmux_cofiguration+0x148>)
10008aa6:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008aa8:	3bf8      	subs	r3, #248	; 0xf8
10008aaa:	4003      	ands	r3, r0
10008aac:	009b      	lsls	r3, r3, #2
10008aae:	2607      	movs	r6, #7
10008ab0:	409e      	lsls	r6, r3
10008ab2:	43b4      	bics	r4, r6
10008ab4:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008ab6:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008ab8:	000e      	movs	r6, r1
10008aba:	409e      	lsls	r6, r3
10008abc:	0033      	movs	r3, r6
10008abe:	4323      	orrs	r3, r4
10008ac0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008ac2:	2901      	cmp	r1, #1
10008ac4:	d000      	beq.n	10008ac8 <gpio_pinmux_cofiguration+0x30>
10008ac6:	e08a      	b.n	10008bde <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008ac8:	2803      	cmp	r0, #3
10008aca:	d80f      	bhi.n	10008aec <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008acc:	0011      	movs	r1, r2
10008ace:	22d0      	movs	r2, #208	; 0xd0
10008ad0:	0052      	lsls	r2, r2, #1
10008ad2:	588c      	ldr	r4, [r1, r2]
10008ad4:	2303      	movs	r3, #3
10008ad6:	4018      	ands	r0, r3
10008ad8:	00c0      	lsls	r0, r0, #3
10008ada:	333c      	adds	r3, #60	; 0x3c
10008adc:	4083      	lsls	r3, r0
10008ade:	439c      	bics	r4, r3
10008ae0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008ae2:	588b      	ldr	r3, [r1, r2]
10008ae4:	4085      	lsls	r5, r0
10008ae6:	431d      	orrs	r5, r3
10008ae8:	508d      	str	r5, [r1, r2]
10008aea:	e078      	b.n	10008bde <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008aec:	493c      	ldr	r1, [pc, #240]	; (10008be0 <gpio_pinmux_cofiguration+0x148>)
10008aee:	22d2      	movs	r2, #210	; 0xd2
10008af0:	0052      	lsls	r2, r2, #1
10008af2:	588c      	ldr	r4, [r1, r2]
10008af4:	2303      	movs	r3, #3
10008af6:	4018      	ands	r0, r3
10008af8:	00c0      	lsls	r0, r0, #3
10008afa:	333c      	adds	r3, #60	; 0x3c
10008afc:	4083      	lsls	r3, r0
10008afe:	439c      	bics	r4, r3
10008b00:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b02:	588b      	ldr	r3, [r1, r2]
10008b04:	4085      	lsls	r5, r0
10008b06:	431d      	orrs	r5, r3
10008b08:	508d      	str	r5, [r1, r2]
10008b0a:	e068      	b.n	10008bde <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008b0c:	280f      	cmp	r0, #15
10008b0e:	d832      	bhi.n	10008b76 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008b10:	4a33      	ldr	r2, [pc, #204]	; (10008be0 <gpio_pinmux_cofiguration+0x148>)
10008b12:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008b14:	2307      	movs	r3, #7
10008b16:	4003      	ands	r3, r0
10008b18:	009b      	lsls	r3, r3, #2
10008b1a:	2607      	movs	r6, #7
10008b1c:	409e      	lsls	r6, r3
10008b1e:	43b4      	bics	r4, r6
10008b20:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008b22:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008b24:	000e      	movs	r6, r1
10008b26:	409e      	lsls	r6, r3
10008b28:	0033      	movs	r3, r6
10008b2a:	4323      	orrs	r3, r4
10008b2c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008b2e:	2901      	cmp	r1, #1
10008b30:	d155      	bne.n	10008bde <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008b32:	280b      	cmp	r0, #11
10008b34:	d80f      	bhi.n	10008b56 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008b36:	0011      	movs	r1, r2
10008b38:	22d4      	movs	r2, #212	; 0xd4
10008b3a:	0052      	lsls	r2, r2, #1
10008b3c:	588c      	ldr	r4, [r1, r2]
10008b3e:	2303      	movs	r3, #3
10008b40:	4018      	ands	r0, r3
10008b42:	00c0      	lsls	r0, r0, #3
10008b44:	333c      	adds	r3, #60	; 0x3c
10008b46:	4083      	lsls	r3, r0
10008b48:	439c      	bics	r4, r3
10008b4a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b4c:	588b      	ldr	r3, [r1, r2]
10008b4e:	4085      	lsls	r5, r0
10008b50:	431d      	orrs	r5, r3
10008b52:	508d      	str	r5, [r1, r2]
10008b54:	e043      	b.n	10008bde <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008b56:	4922      	ldr	r1, [pc, #136]	; (10008be0 <gpio_pinmux_cofiguration+0x148>)
10008b58:	22d6      	movs	r2, #214	; 0xd6
10008b5a:	0052      	lsls	r2, r2, #1
10008b5c:	588c      	ldr	r4, [r1, r2]
10008b5e:	2303      	movs	r3, #3
10008b60:	4018      	ands	r0, r3
10008b62:	00c0      	lsls	r0, r0, #3
10008b64:	333c      	adds	r3, #60	; 0x3c
10008b66:	4083      	lsls	r3, r0
10008b68:	439c      	bics	r4, r3
10008b6a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b6c:	588b      	ldr	r3, [r1, r2]
10008b6e:	4085      	lsls	r5, r0
10008b70:	431d      	orrs	r5, r3
10008b72:	508d      	str	r5, [r1, r2]
10008b74:	e033      	b.n	10008bde <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
10008b76:	2817      	cmp	r0, #23
10008b78:	d831      	bhi.n	10008bde <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008b7a:	4a19      	ldr	r2, [pc, #100]	; (10008be0 <gpio_pinmux_cofiguration+0x148>)
10008b7c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008b7e:	2307      	movs	r3, #7
10008b80:	4003      	ands	r3, r0
10008b82:	009b      	lsls	r3, r3, #2
10008b84:	2607      	movs	r6, #7
10008b86:	409e      	lsls	r6, r3
10008b88:	43b4      	bics	r4, r6
10008b8a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008b8c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008b8e:	000e      	movs	r6, r1
10008b90:	409e      	lsls	r6, r3
10008b92:	0033      	movs	r3, r6
10008b94:	4323      	orrs	r3, r4
10008b96:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008b98:	2901      	cmp	r1, #1
10008b9a:	d120      	bne.n	10008bde <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008b9c:	2813      	cmp	r0, #19
10008b9e:	d80f      	bhi.n	10008bc0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008ba0:	0011      	movs	r1, r2
10008ba2:	22d8      	movs	r2, #216	; 0xd8
10008ba4:	0052      	lsls	r2, r2, #1
10008ba6:	588c      	ldr	r4, [r1, r2]
10008ba8:	2303      	movs	r3, #3
10008baa:	4018      	ands	r0, r3
10008bac:	00c0      	lsls	r0, r0, #3
10008bae:	333c      	adds	r3, #60	; 0x3c
10008bb0:	4083      	lsls	r3, r0
10008bb2:	439c      	bics	r4, r3
10008bb4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008bb6:	588b      	ldr	r3, [r1, r2]
10008bb8:	4085      	lsls	r5, r0
10008bba:	431d      	orrs	r5, r3
10008bbc:	508d      	str	r5, [r1, r2]
10008bbe:	e00e      	b.n	10008bde <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008bc0:	4a07      	ldr	r2, [pc, #28]	; (10008be0 <gpio_pinmux_cofiguration+0x148>)
10008bc2:	23da      	movs	r3, #218	; 0xda
10008bc4:	005b      	lsls	r3, r3, #1
10008bc6:	58d1      	ldr	r1, [r2, r3]
10008bc8:	2403      	movs	r4, #3
10008bca:	4020      	ands	r0, r4
10008bcc:	00c0      	lsls	r0, r0, #3
10008bce:	343c      	adds	r4, #60	; 0x3c
10008bd0:	4084      	lsls	r4, r0
10008bd2:	43a1      	bics	r1, r4
10008bd4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008bd6:	58d1      	ldr	r1, [r2, r3]
10008bd8:	4085      	lsls	r5, r0
10008bda:	430d      	orrs	r5, r1
10008bdc:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008bde:	bd70      	pop	{r4, r5, r6, pc}
10008be0:	4000b000 	.word	0x4000b000

10008be4 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008be4:	2801      	cmp	r0, #1
10008be6:	d00d      	beq.n	10008c04 <system_clock_config+0x20>
10008be8:	2800      	cmp	r0, #0
10008bea:	d002      	beq.n	10008bf2 <system_clock_config+0xe>
10008bec:	2802      	cmp	r0, #2
10008bee:	d01c      	beq.n	10008c2a <system_clock_config+0x46>
10008bf0:	e02e      	b.n	10008c50 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008bf2:	4a18      	ldr	r2, [pc, #96]	; (10008c54 <system_clock_config+0x70>)
10008bf4:	6990      	ldr	r0, [r2, #24]
10008bf6:	230c      	movs	r3, #12
10008bf8:	4303      	orrs	r3, r0
10008bfa:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008bfc:	4a16      	ldr	r2, [pc, #88]	; (10008c58 <system_clock_config+0x74>)
10008bfe:	4b17      	ldr	r3, [pc, #92]	; (10008c5c <system_clock_config+0x78>)
10008c00:	601a      	str	r2, [r3, #0]
			break;
10008c02:	e01a      	b.n	10008c3a <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008c04:	4b13      	ldr	r3, [pc, #76]	; (10008c54 <system_clock_config+0x70>)
10008c06:	6998      	ldr	r0, [r3, #24]
10008c08:	2208      	movs	r2, #8
10008c0a:	4302      	orrs	r2, r0
10008c0c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008c0e:	699a      	ldr	r2, [r3, #24]
10008c10:	2004      	movs	r0, #4
10008c12:	4382      	bics	r2, r0
10008c14:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10008c16:	4a12      	ldr	r2, [pc, #72]	; (10008c60 <system_clock_config+0x7c>)
10008c18:	6853      	ldr	r3, [r2, #4]
10008c1a:	2080      	movs	r0, #128	; 0x80
10008c1c:	0300      	lsls	r0, r0, #12
10008c1e:	4303      	orrs	r3, r0
10008c20:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008c22:	4a10      	ldr	r2, [pc, #64]	; (10008c64 <system_clock_config+0x80>)
10008c24:	4b0d      	ldr	r3, [pc, #52]	; (10008c5c <system_clock_config+0x78>)
10008c26:	601a      	str	r2, [r3, #0]
			break;
10008c28:	e007      	b.n	10008c3a <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008c2a:	4a0a      	ldr	r2, [pc, #40]	; (10008c54 <system_clock_config+0x70>)
10008c2c:	6993      	ldr	r3, [r2, #24]
10008c2e:	200c      	movs	r0, #12
10008c30:	4383      	bics	r3, r0
10008c32:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008c34:	4a08      	ldr	r2, [pc, #32]	; (10008c58 <system_clock_config+0x74>)
10008c36:	4b09      	ldr	r3, [pc, #36]	; (10008c5c <system_clock_config+0x78>)
10008c38:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008c3a:	4b06      	ldr	r3, [pc, #24]	; (10008c54 <system_clock_config+0x70>)
10008c3c:	699a      	ldr	r2, [r3, #24]
10008c3e:	2003      	movs	r0, #3
10008c40:	4382      	bics	r2, r0
10008c42:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008c44:	699a      	ldr	r2, [r3, #24]
10008c46:	4001      	ands	r1, r0
10008c48:	4311      	orrs	r1, r2
10008c4a:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008c4c:	2000      	movs	r0, #0
10008c4e:	e000      	b.n	10008c52 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008c50:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008c52:	4770      	bx	lr
10008c54:	4000b000 	.word	0x4000b000
10008c58:	018cba80 	.word	0x018cba80
10008c5c:	1001542c 	.word	0x1001542c
10008c60:	4000f000 	.word	0x4000f000
10008c64:	001e8480 	.word	0x001e8480

10008c68 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008c68:	4b01      	ldr	r3, [pc, #4]	; (10008c70 <system_clock_get_value+0x8>)
10008c6a:	6818      	ldr	r0, [r3, #0]
}
10008c6c:	4770      	bx	lr
10008c6e:	46c0      	nop			; (mov r8, r8)
10008c70:	1001542c 	.word	0x1001542c

10008c74 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10008c74:	b500      	push	{lr}
	switch (peripheral) {
10008c76:	2835      	cmp	r0, #53	; 0x35
10008c78:	d900      	bls.n	10008c7c <system_clock_peripheral_enable+0x8>
10008c7a:	e1a2      	b.n	10008fc2 <system_clock_peripheral_enable+0x34e>
10008c7c:	0080      	lsls	r0, r0, #2
10008c7e:	4bd2      	ldr	r3, [pc, #840]	; (10008fc8 <system_clock_peripheral_enable+0x354>)
10008c80:	581b      	ldr	r3, [r3, r0]
10008c82:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c84:	4ad1      	ldr	r2, [pc, #836]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008c86:	68d1      	ldr	r1, [r2, #12]
10008c88:	2302      	movs	r3, #2
10008c8a:	430b      	orrs	r3, r1
10008c8c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c8e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008c90:	e198      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c92:	4ace      	ldr	r2, [pc, #824]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008c94:	68d1      	ldr	r1, [r2, #12]
10008c96:	2304      	movs	r3, #4
10008c98:	430b      	orrs	r3, r1
10008c9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008c9e:	e191      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ca0:	4aca      	ldr	r2, [pc, #808]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008ca2:	68d1      	ldr	r1, [r2, #12]
10008ca4:	2308      	movs	r3, #8
10008ca6:	430b      	orrs	r3, r1
10008ca8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008caa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10008cac:	e18a      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008cae:	4ac7      	ldr	r2, [pc, #796]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008cb0:	68d1      	ldr	r1, [r2, #12]
10008cb2:	2310      	movs	r3, #16
10008cb4:	430b      	orrs	r3, r1
10008cb6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
10008cba:	e183      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008cbc:	4ac3      	ldr	r2, [pc, #780]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008cbe:	68d1      	ldr	r1, [r2, #12]
10008cc0:	2320      	movs	r3, #32
10008cc2:	430b      	orrs	r3, r1
10008cc4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cc6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10008cc8:	e17c      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008cca:	4ac0      	ldr	r2, [pc, #768]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008ccc:	68d1      	ldr	r1, [r2, #12]
10008cce:	2380      	movs	r3, #128	; 0x80
10008cd0:	430b      	orrs	r3, r1
10008cd2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008cd6:	e175      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008cd8:	4abc      	ldr	r2, [pc, #752]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008cda:	68d3      	ldr	r3, [r2, #12]
10008cdc:	2180      	movs	r1, #128	; 0x80
10008cde:	0049      	lsls	r1, r1, #1
10008ce0:	430b      	orrs	r3, r1
10008ce2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ce4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10008ce6:	e16d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ce8:	4ab8      	ldr	r2, [pc, #736]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008cea:	68d3      	ldr	r3, [r2, #12]
10008cec:	2180      	movs	r1, #128	; 0x80
10008cee:	0109      	lsls	r1, r1, #4
10008cf0:	430b      	orrs	r3, r1
10008cf2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10008cf6:	e165      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008cf8:	4ab4      	ldr	r2, [pc, #720]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008cfa:	68d3      	ldr	r3, [r2, #12]
10008cfc:	2180      	movs	r1, #128	; 0x80
10008cfe:	0149      	lsls	r1, r1, #5
10008d00:	430b      	orrs	r3, r1
10008d02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008d06:	e15d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d08:	4ab0      	ldr	r2, [pc, #704]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d0a:	68d3      	ldr	r3, [r2, #12]
10008d0c:	2180      	movs	r1, #128	; 0x80
10008d0e:	0189      	lsls	r1, r1, #6
10008d10:	430b      	orrs	r3, r1
10008d12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008d16:	e155      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d18:	4aac      	ldr	r2, [pc, #688]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d1a:	68d3      	ldr	r3, [r2, #12]
10008d1c:	2180      	movs	r1, #128	; 0x80
10008d1e:	01c9      	lsls	r1, r1, #7
10008d20:	430b      	orrs	r3, r1
10008d22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008d26:	e14d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d28:	4aa8      	ldr	r2, [pc, #672]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d2a:	68d3      	ldr	r3, [r2, #12]
10008d2c:	2180      	movs	r1, #128	; 0x80
10008d2e:	0209      	lsls	r1, r1, #8
10008d30:	430b      	orrs	r3, r1
10008d32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008d36:	e145      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d38:	4aa4      	ldr	r2, [pc, #656]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d3a:	68d3      	ldr	r3, [r2, #12]
10008d3c:	2180      	movs	r1, #128	; 0x80
10008d3e:	0249      	lsls	r1, r1, #9
10008d40:	430b      	orrs	r3, r1
10008d42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008d46:	e13d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d48:	4aa0      	ldr	r2, [pc, #640]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d4a:	68d3      	ldr	r3, [r2, #12]
10008d4c:	2180      	movs	r1, #128	; 0x80
10008d4e:	0289      	lsls	r1, r1, #10
10008d50:	430b      	orrs	r3, r1
10008d52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008d56:	e135      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d58:	4a9c      	ldr	r2, [pc, #624]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d5a:	68d3      	ldr	r3, [r2, #12]
10008d5c:	2180      	movs	r1, #128	; 0x80
10008d5e:	02c9      	lsls	r1, r1, #11
10008d60:	430b      	orrs	r3, r1
10008d62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008d66:	e12d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d68:	4a98      	ldr	r2, [pc, #608]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d6a:	68d3      	ldr	r3, [r2, #12]
10008d6c:	2180      	movs	r1, #128	; 0x80
10008d6e:	0309      	lsls	r1, r1, #12
10008d70:	430b      	orrs	r3, r1
10008d72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008d76:	e125      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d78:	4a94      	ldr	r2, [pc, #592]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d7a:	68d3      	ldr	r3, [r2, #12]
10008d7c:	2180      	movs	r1, #128	; 0x80
10008d7e:	0349      	lsls	r1, r1, #13
10008d80:	430b      	orrs	r3, r1
10008d82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008d86:	e11d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d88:	4a90      	ldr	r2, [pc, #576]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d8a:	68d3      	ldr	r3, [r2, #12]
10008d8c:	2180      	movs	r1, #128	; 0x80
10008d8e:	0389      	lsls	r1, r1, #14
10008d90:	430b      	orrs	r3, r1
10008d92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008d96:	e115      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d98:	4a8c      	ldr	r2, [pc, #560]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008d9a:	68d3      	ldr	r3, [r2, #12]
10008d9c:	2180      	movs	r1, #128	; 0x80
10008d9e:	03c9      	lsls	r1, r1, #15
10008da0:	430b      	orrs	r3, r1
10008da2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008da4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008da6:	e10d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008da8:	4a88      	ldr	r2, [pc, #544]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008daa:	68d3      	ldr	r3, [r2, #12]
10008dac:	2180      	movs	r1, #128	; 0x80
10008dae:	0409      	lsls	r1, r1, #16
10008db0:	430b      	orrs	r3, r1
10008db2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008db4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008db6:	e105      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008db8:	4a84      	ldr	r2, [pc, #528]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008dba:	68d3      	ldr	r3, [r2, #12]
10008dbc:	2180      	movs	r1, #128	; 0x80
10008dbe:	0449      	lsls	r1, r1, #17
10008dc0:	430b      	orrs	r3, r1
10008dc2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008dc6:	e0fd      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008dc8:	4a80      	ldr	r2, [pc, #512]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008dca:	68d3      	ldr	r3, [r2, #12]
10008dcc:	2180      	movs	r1, #128	; 0x80
10008dce:	0489      	lsls	r1, r1, #18
10008dd0:	430b      	orrs	r3, r1
10008dd2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008dd6:	e0f5      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008dd8:	4a7c      	ldr	r2, [pc, #496]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008dda:	68d3      	ldr	r3, [r2, #12]
10008ddc:	2180      	movs	r1, #128	; 0x80
10008dde:	04c9      	lsls	r1, r1, #19
10008de0:	430b      	orrs	r3, r1
10008de2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008de4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008de6:	e0ed      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008de8:	4a78      	ldr	r2, [pc, #480]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008dea:	68d3      	ldr	r3, [r2, #12]
10008dec:	2180      	movs	r1, #128	; 0x80
10008dee:	0509      	lsls	r1, r1, #20
10008df0:	430b      	orrs	r3, r1
10008df2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008df4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008df6:	e0e5      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008df8:	4a74      	ldr	r2, [pc, #464]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008dfa:	68d3      	ldr	r3, [r2, #12]
10008dfc:	2180      	movs	r1, #128	; 0x80
10008dfe:	0549      	lsls	r1, r1, #21
10008e00:	430b      	orrs	r3, r1
10008e02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008e06:	e0dd      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e08:	4a70      	ldr	r2, [pc, #448]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e0a:	68d3      	ldr	r3, [r2, #12]
10008e0c:	2180      	movs	r1, #128	; 0x80
10008e0e:	0589      	lsls	r1, r1, #22
10008e10:	430b      	orrs	r3, r1
10008e12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008e16:	e0d5      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e18:	4a6c      	ldr	r2, [pc, #432]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e1a:	68d3      	ldr	r3, [r2, #12]
10008e1c:	2180      	movs	r1, #128	; 0x80
10008e1e:	05c9      	lsls	r1, r1, #23
10008e20:	430b      	orrs	r3, r1
10008e22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008e26:	e0cd      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e28:	4a68      	ldr	r2, [pc, #416]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e2a:	6911      	ldr	r1, [r2, #16]
10008e2c:	2301      	movs	r3, #1
10008e2e:	430b      	orrs	r3, r1
10008e30:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e32:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008e34:	e0c6      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e36:	4a65      	ldr	r2, [pc, #404]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e38:	6911      	ldr	r1, [r2, #16]
10008e3a:	2302      	movs	r3, #2
10008e3c:	430b      	orrs	r3, r1
10008e3e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008e42:	e0bf      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e44:	4a61      	ldr	r2, [pc, #388]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e46:	6911      	ldr	r1, [r2, #16]
10008e48:	2304      	movs	r3, #4
10008e4a:	430b      	orrs	r3, r1
10008e4c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008e50:	e0b8      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e52:	4a5e      	ldr	r2, [pc, #376]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e54:	6911      	ldr	r1, [r2, #16]
10008e56:	2308      	movs	r3, #8
10008e58:	430b      	orrs	r3, r1
10008e5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008e5e:	e0b1      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e60:	4a5a      	ldr	r2, [pc, #360]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e62:	6911      	ldr	r1, [r2, #16]
10008e64:	2310      	movs	r3, #16
10008e66:	430b      	orrs	r3, r1
10008e68:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10008e6c:	e0aa      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e6e:	4a57      	ldr	r2, [pc, #348]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e70:	6911      	ldr	r1, [r2, #16]
10008e72:	2320      	movs	r3, #32
10008e74:	430b      	orrs	r3, r1
10008e76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10008e7a:	e0a3      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e7c:	4a53      	ldr	r2, [pc, #332]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e7e:	6911      	ldr	r1, [r2, #16]
10008e80:	2340      	movs	r3, #64	; 0x40
10008e82:	430b      	orrs	r3, r1
10008e84:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10008e88:	e09c      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e8a:	4a50      	ldr	r2, [pc, #320]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e8c:	6911      	ldr	r1, [r2, #16]
10008e8e:	2380      	movs	r3, #128	; 0x80
10008e90:	430b      	orrs	r3, r1
10008e92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10008e96:	e095      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e98:	4a4c      	ldr	r2, [pc, #304]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008e9a:	6913      	ldr	r3, [r2, #16]
10008e9c:	2180      	movs	r1, #128	; 0x80
10008e9e:	0049      	lsls	r1, r1, #1
10008ea0:	430b      	orrs	r3, r1
10008ea2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ea4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10008ea6:	e08d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ea8:	4a48      	ldr	r2, [pc, #288]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008eaa:	6913      	ldr	r3, [r2, #16]
10008eac:	2180      	movs	r1, #128	; 0x80
10008eae:	0089      	lsls	r1, r1, #2
10008eb0:	430b      	orrs	r3, r1
10008eb2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10008eb6:	e085      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008eb8:	4a44      	ldr	r2, [pc, #272]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008eba:	6913      	ldr	r3, [r2, #16]
10008ebc:	2180      	movs	r1, #128	; 0x80
10008ebe:	00c9      	lsls	r1, r1, #3
10008ec0:	430b      	orrs	r3, r1
10008ec2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008ec6:	e07d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ec8:	4a40      	ldr	r2, [pc, #256]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008eca:	6913      	ldr	r3, [r2, #16]
10008ecc:	2180      	movs	r1, #128	; 0x80
10008ece:	0109      	lsls	r1, r1, #4
10008ed0:	430b      	orrs	r3, r1
10008ed2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ed4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008ed6:	e075      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ed8:	4a3c      	ldr	r2, [pc, #240]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008eda:	6913      	ldr	r3, [r2, #16]
10008edc:	2180      	movs	r1, #128	; 0x80
10008ede:	0149      	lsls	r1, r1, #5
10008ee0:	430b      	orrs	r3, r1
10008ee2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ee4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008ee6:	e06d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ee8:	4a38      	ldr	r2, [pc, #224]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008eea:	6913      	ldr	r3, [r2, #16]
10008eec:	2180      	movs	r1, #128	; 0x80
10008eee:	0189      	lsls	r1, r1, #6
10008ef0:	430b      	orrs	r3, r1
10008ef2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ef4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008ef6:	e065      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ef8:	4a34      	ldr	r2, [pc, #208]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008efa:	6913      	ldr	r3, [r2, #16]
10008efc:	2180      	movs	r1, #128	; 0x80
10008efe:	01c9      	lsls	r1, r1, #7
10008f00:	430b      	orrs	r3, r1
10008f02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008f06:	e05d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f08:	4a30      	ldr	r2, [pc, #192]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f0a:	6913      	ldr	r3, [r2, #16]
10008f0c:	2180      	movs	r1, #128	; 0x80
10008f0e:	0209      	lsls	r1, r1, #8
10008f10:	430b      	orrs	r3, r1
10008f12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008f16:	e055      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f18:	4a2c      	ldr	r2, [pc, #176]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f1a:	6913      	ldr	r3, [r2, #16]
10008f1c:	2180      	movs	r1, #128	; 0x80
10008f1e:	0249      	lsls	r1, r1, #9
10008f20:	430b      	orrs	r3, r1
10008f22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008f26:	e04d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f28:	4a28      	ldr	r2, [pc, #160]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f2a:	6913      	ldr	r3, [r2, #16]
10008f2c:	2180      	movs	r1, #128	; 0x80
10008f2e:	0289      	lsls	r1, r1, #10
10008f30:	430b      	orrs	r3, r1
10008f32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008f36:	e045      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f38:	4a24      	ldr	r2, [pc, #144]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f3a:	6913      	ldr	r3, [r2, #16]
10008f3c:	2180      	movs	r1, #128	; 0x80
10008f3e:	02c9      	lsls	r1, r1, #11
10008f40:	430b      	orrs	r3, r1
10008f42:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008f46:	e03d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f48:	4a20      	ldr	r2, [pc, #128]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f4a:	6913      	ldr	r3, [r2, #16]
10008f4c:	2180      	movs	r1, #128	; 0x80
10008f4e:	0309      	lsls	r1, r1, #12
10008f50:	430b      	orrs	r3, r1
10008f52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008f56:	e035      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f58:	4a1c      	ldr	r2, [pc, #112]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f5a:	6913      	ldr	r3, [r2, #16]
10008f5c:	2180      	movs	r1, #128	; 0x80
10008f5e:	0349      	lsls	r1, r1, #13
10008f60:	430b      	orrs	r3, r1
10008f62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008f66:	e02d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f68:	4a18      	ldr	r2, [pc, #96]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f6a:	6913      	ldr	r3, [r2, #16]
10008f6c:	2180      	movs	r1, #128	; 0x80
10008f6e:	0389      	lsls	r1, r1, #14
10008f70:	430b      	orrs	r3, r1
10008f72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008f76:	e025      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f78:	4a14      	ldr	r2, [pc, #80]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f7a:	6913      	ldr	r3, [r2, #16]
10008f7c:	2180      	movs	r1, #128	; 0x80
10008f7e:	03c9      	lsls	r1, r1, #15
10008f80:	430b      	orrs	r3, r1
10008f82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008f86:	e01d      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f88:	4a10      	ldr	r2, [pc, #64]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f8a:	6913      	ldr	r3, [r2, #16]
10008f8c:	2180      	movs	r1, #128	; 0x80
10008f8e:	0409      	lsls	r1, r1, #16
10008f90:	430b      	orrs	r3, r1
10008f92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008f96:	e015      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008f98:	4a0c      	ldr	r2, [pc, #48]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008f9a:	7d11      	ldrb	r1, [r2, #20]
10008f9c:	2301      	movs	r3, #1
10008f9e:	430b      	orrs	r3, r1
10008fa0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fa2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10008fa4:	e00e      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008fa6:	4a09      	ldr	r2, [pc, #36]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008fa8:	7d11      	ldrb	r1, [r2, #20]
10008faa:	2302      	movs	r3, #2
10008fac:	430b      	orrs	r3, r1
10008fae:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008fb2:	e007      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008fb4:	4a05      	ldr	r2, [pc, #20]	; (10008fcc <system_clock_peripheral_enable+0x358>)
10008fb6:	7d11      	ldrb	r1, [r2, #20]
10008fb8:	2304      	movs	r3, #4
10008fba:	430b      	orrs	r3, r1
10008fbc:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008fc0:	e000      	b.n	10008fc4 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008fc2:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008fc4:	bd00      	pop	{pc}
10008fc6:	46c0      	nop			; (mov r8, r8)
10008fc8:	10012918 	.word	0x10012918
10008fcc:	4000b000 	.word	0x4000b000

10008fd0 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008fd0:	b500      	push	{lr}
	switch (peripheral) {
10008fd2:	2843      	cmp	r0, #67	; 0x43
10008fd4:	d900      	bls.n	10008fd8 <system_peripheral_reset+0x8>
10008fd6:	e223      	b.n	10009420 <system_peripheral_reset+0x450>
10008fd8:	0080      	lsls	r0, r0, #2
10008fda:	4be0      	ldr	r3, [pc, #896]	; (1000935c <system_peripheral_reset+0x38c>)
10008fdc:	581b      	ldr	r3, [r3, r0]
10008fde:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008fe0:	4bdf      	ldr	r3, [pc, #892]	; (10009360 <system_peripheral_reset+0x390>)
10008fe2:	6859      	ldr	r1, [r3, #4]
10008fe4:	2202      	movs	r2, #2
10008fe6:	4391      	bics	r1, r2
10008fe8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008fea:	6859      	ldr	r1, [r3, #4]
10008fec:	430a      	orrs	r2, r1
10008fee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ff0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008ff2:	e216      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ff4:	4bda      	ldr	r3, [pc, #872]	; (10009360 <system_peripheral_reset+0x390>)
10008ff6:	6859      	ldr	r1, [r3, #4]
10008ff8:	2204      	movs	r2, #4
10008ffa:	4391      	bics	r1, r2
10008ffc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ffe:	6859      	ldr	r1, [r3, #4]
10009000:	430a      	orrs	r2, r1
10009002:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009004:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10009006:	e20c      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009008:	4bd5      	ldr	r3, [pc, #852]	; (10009360 <system_peripheral_reset+0x390>)
1000900a:	6859      	ldr	r1, [r3, #4]
1000900c:	2208      	movs	r2, #8
1000900e:	4391      	bics	r1, r2
10009010:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009012:	6859      	ldr	r1, [r3, #4]
10009014:	430a      	orrs	r2, r1
10009016:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009018:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
1000901a:	e202      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000901c:	4bd0      	ldr	r3, [pc, #832]	; (10009360 <system_peripheral_reset+0x390>)
1000901e:	6859      	ldr	r1, [r3, #4]
10009020:	2210      	movs	r2, #16
10009022:	4391      	bics	r1, r2
10009024:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009026:	6859      	ldr	r1, [r3, #4]
10009028:	430a      	orrs	r2, r1
1000902a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000902c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
1000902e:	e1f8      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009030:	4bcb      	ldr	r3, [pc, #812]	; (10009360 <system_peripheral_reset+0x390>)
10009032:	6859      	ldr	r1, [r3, #4]
10009034:	2220      	movs	r2, #32
10009036:	4391      	bics	r1, r2
10009038:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000903a:	6859      	ldr	r1, [r3, #4]
1000903c:	430a      	orrs	r2, r1
1000903e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009040:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
10009042:	e1ee      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009044:	4bc6      	ldr	r3, [pc, #792]	; (10009360 <system_peripheral_reset+0x390>)
10009046:	6859      	ldr	r1, [r3, #4]
10009048:	2240      	movs	r2, #64	; 0x40
1000904a:	4391      	bics	r1, r2
1000904c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000904e:	6859      	ldr	r1, [r3, #4]
10009050:	430a      	orrs	r2, r1
10009052:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009054:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
10009056:	e1e4      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009058:	4bc1      	ldr	r3, [pc, #772]	; (10009360 <system_peripheral_reset+0x390>)
1000905a:	6859      	ldr	r1, [r3, #4]
1000905c:	2280      	movs	r2, #128	; 0x80
1000905e:	4391      	bics	r1, r2
10009060:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009062:	6859      	ldr	r1, [r3, #4]
10009064:	430a      	orrs	r2, r1
10009066:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009068:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
1000906a:	e1da      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000906c:	4bbc      	ldr	r3, [pc, #752]	; (10009360 <system_peripheral_reset+0x390>)
1000906e:	6859      	ldr	r1, [r3, #4]
10009070:	4abc      	ldr	r2, [pc, #752]	; (10009364 <system_peripheral_reset+0x394>)
10009072:	400a      	ands	r2, r1
10009074:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009076:	685a      	ldr	r2, [r3, #4]
10009078:	2180      	movs	r1, #128	; 0x80
1000907a:	0049      	lsls	r1, r1, #1
1000907c:	430a      	orrs	r2, r1
1000907e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009080:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
10009082:	e1ce      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009084:	4bb6      	ldr	r3, [pc, #728]	; (10009360 <system_peripheral_reset+0x390>)
10009086:	6859      	ldr	r1, [r3, #4]
10009088:	4ab7      	ldr	r2, [pc, #732]	; (10009368 <system_peripheral_reset+0x398>)
1000908a:	400a      	ands	r2, r1
1000908c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000908e:	685a      	ldr	r2, [r3, #4]
10009090:	2180      	movs	r1, #128	; 0x80
10009092:	0089      	lsls	r1, r1, #2
10009094:	430a      	orrs	r2, r1
10009096:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009098:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
1000909a:	e1c2      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000909c:	4bb0      	ldr	r3, [pc, #704]	; (10009360 <system_peripheral_reset+0x390>)
1000909e:	6859      	ldr	r1, [r3, #4]
100090a0:	4ab2      	ldr	r2, [pc, #712]	; (1000936c <system_peripheral_reset+0x39c>)
100090a2:	400a      	ands	r2, r1
100090a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090a6:	685a      	ldr	r2, [r3, #4]
100090a8:	2180      	movs	r1, #128	; 0x80
100090aa:	00c9      	lsls	r1, r1, #3
100090ac:	430a      	orrs	r2, r1
100090ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090b0:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
100090b2:	e1b6      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090b4:	4baa      	ldr	r3, [pc, #680]	; (10009360 <system_peripheral_reset+0x390>)
100090b6:	6859      	ldr	r1, [r3, #4]
100090b8:	4aad      	ldr	r2, [pc, #692]	; (10009370 <system_peripheral_reset+0x3a0>)
100090ba:	400a      	ands	r2, r1
100090bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090be:	685a      	ldr	r2, [r3, #4]
100090c0:	2180      	movs	r1, #128	; 0x80
100090c2:	0109      	lsls	r1, r1, #4
100090c4:	430a      	orrs	r2, r1
100090c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090c8:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
100090ca:	e1aa      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090cc:	4ba4      	ldr	r3, [pc, #656]	; (10009360 <system_peripheral_reset+0x390>)
100090ce:	6859      	ldr	r1, [r3, #4]
100090d0:	4aa8      	ldr	r2, [pc, #672]	; (10009374 <system_peripheral_reset+0x3a4>)
100090d2:	400a      	ands	r2, r1
100090d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090d6:	685a      	ldr	r2, [r3, #4]
100090d8:	2180      	movs	r1, #128	; 0x80
100090da:	0149      	lsls	r1, r1, #5
100090dc:	430a      	orrs	r2, r1
100090de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
100090e2:	e19e      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090e4:	4b9e      	ldr	r3, [pc, #632]	; (10009360 <system_peripheral_reset+0x390>)
100090e6:	6859      	ldr	r1, [r3, #4]
100090e8:	4aa3      	ldr	r2, [pc, #652]	; (10009378 <system_peripheral_reset+0x3a8>)
100090ea:	400a      	ands	r2, r1
100090ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090ee:	685a      	ldr	r2, [r3, #4]
100090f0:	2180      	movs	r1, #128	; 0x80
100090f2:	0189      	lsls	r1, r1, #6
100090f4:	430a      	orrs	r2, r1
100090f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090f8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
100090fa:	e192      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090fc:	4b98      	ldr	r3, [pc, #608]	; (10009360 <system_peripheral_reset+0x390>)
100090fe:	6859      	ldr	r1, [r3, #4]
10009100:	4a9e      	ldr	r2, [pc, #632]	; (1000937c <system_peripheral_reset+0x3ac>)
10009102:	400a      	ands	r2, r1
10009104:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009106:	685a      	ldr	r2, [r3, #4]
10009108:	2180      	movs	r1, #128	; 0x80
1000910a:	01c9      	lsls	r1, r1, #7
1000910c:	430a      	orrs	r2, r1
1000910e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009110:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
10009112:	e186      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009114:	4b92      	ldr	r3, [pc, #584]	; (10009360 <system_peripheral_reset+0x390>)
10009116:	6859      	ldr	r1, [r3, #4]
10009118:	4a99      	ldr	r2, [pc, #612]	; (10009380 <system_peripheral_reset+0x3b0>)
1000911a:	400a      	ands	r2, r1
1000911c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000911e:	685a      	ldr	r2, [r3, #4]
10009120:	2180      	movs	r1, #128	; 0x80
10009122:	0209      	lsls	r1, r1, #8
10009124:	430a      	orrs	r2, r1
10009126:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009128:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
1000912a:	e17a      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000912c:	4b8c      	ldr	r3, [pc, #560]	; (10009360 <system_peripheral_reset+0x390>)
1000912e:	6859      	ldr	r1, [r3, #4]
10009130:	4a94      	ldr	r2, [pc, #592]	; (10009384 <system_peripheral_reset+0x3b4>)
10009132:	400a      	ands	r2, r1
10009134:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009136:	685a      	ldr	r2, [r3, #4]
10009138:	2180      	movs	r1, #128	; 0x80
1000913a:	0249      	lsls	r1, r1, #9
1000913c:	430a      	orrs	r2, r1
1000913e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009140:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
10009142:	e16e      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009144:	4b86      	ldr	r3, [pc, #536]	; (10009360 <system_peripheral_reset+0x390>)
10009146:	6859      	ldr	r1, [r3, #4]
10009148:	4a8f      	ldr	r2, [pc, #572]	; (10009388 <system_peripheral_reset+0x3b8>)
1000914a:	400a      	ands	r2, r1
1000914c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000914e:	685a      	ldr	r2, [r3, #4]
10009150:	2180      	movs	r1, #128	; 0x80
10009152:	0289      	lsls	r1, r1, #10
10009154:	430a      	orrs	r2, r1
10009156:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009158:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
1000915a:	e162      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000915c:	4b80      	ldr	r3, [pc, #512]	; (10009360 <system_peripheral_reset+0x390>)
1000915e:	6859      	ldr	r1, [r3, #4]
10009160:	4a8a      	ldr	r2, [pc, #552]	; (1000938c <system_peripheral_reset+0x3bc>)
10009162:	400a      	ands	r2, r1
10009164:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009166:	685a      	ldr	r2, [r3, #4]
10009168:	2180      	movs	r1, #128	; 0x80
1000916a:	02c9      	lsls	r1, r1, #11
1000916c:	430a      	orrs	r2, r1
1000916e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009170:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10009172:	e156      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009174:	4b7a      	ldr	r3, [pc, #488]	; (10009360 <system_peripheral_reset+0x390>)
10009176:	6859      	ldr	r1, [r3, #4]
10009178:	4a85      	ldr	r2, [pc, #532]	; (10009390 <system_peripheral_reset+0x3c0>)
1000917a:	400a      	ands	r2, r1
1000917c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000917e:	685a      	ldr	r2, [r3, #4]
10009180:	2180      	movs	r1, #128	; 0x80
10009182:	0309      	lsls	r1, r1, #12
10009184:	430a      	orrs	r2, r1
10009186:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009188:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000918a:	e14a      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000918c:	4b74      	ldr	r3, [pc, #464]	; (10009360 <system_peripheral_reset+0x390>)
1000918e:	6859      	ldr	r1, [r3, #4]
10009190:	4a80      	ldr	r2, [pc, #512]	; (10009394 <system_peripheral_reset+0x3c4>)
10009192:	400a      	ands	r2, r1
10009194:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009196:	685a      	ldr	r2, [r3, #4]
10009198:	2180      	movs	r1, #128	; 0x80
1000919a:	0349      	lsls	r1, r1, #13
1000919c:	430a      	orrs	r2, r1
1000919e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091a0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
100091a2:	e13e      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091a4:	4b6e      	ldr	r3, [pc, #440]	; (10009360 <system_peripheral_reset+0x390>)
100091a6:	6859      	ldr	r1, [r3, #4]
100091a8:	4a7b      	ldr	r2, [pc, #492]	; (10009398 <system_peripheral_reset+0x3c8>)
100091aa:	400a      	ands	r2, r1
100091ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091ae:	685a      	ldr	r2, [r3, #4]
100091b0:	2180      	movs	r1, #128	; 0x80
100091b2:	0389      	lsls	r1, r1, #14
100091b4:	430a      	orrs	r2, r1
100091b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091b8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
100091ba:	e132      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091bc:	4b68      	ldr	r3, [pc, #416]	; (10009360 <system_peripheral_reset+0x390>)
100091be:	6859      	ldr	r1, [r3, #4]
100091c0:	4a76      	ldr	r2, [pc, #472]	; (1000939c <system_peripheral_reset+0x3cc>)
100091c2:	400a      	ands	r2, r1
100091c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091c6:	685a      	ldr	r2, [r3, #4]
100091c8:	2180      	movs	r1, #128	; 0x80
100091ca:	03c9      	lsls	r1, r1, #15
100091cc:	430a      	orrs	r2, r1
100091ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091d0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
100091d2:	e126      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091d4:	4b62      	ldr	r3, [pc, #392]	; (10009360 <system_peripheral_reset+0x390>)
100091d6:	6859      	ldr	r1, [r3, #4]
100091d8:	4a71      	ldr	r2, [pc, #452]	; (100093a0 <system_peripheral_reset+0x3d0>)
100091da:	400a      	ands	r2, r1
100091dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091de:	685a      	ldr	r2, [r3, #4]
100091e0:	2180      	movs	r1, #128	; 0x80
100091e2:	0409      	lsls	r1, r1, #16
100091e4:	430a      	orrs	r2, r1
100091e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091e8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
100091ea:	e11a      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091ec:	4b5c      	ldr	r3, [pc, #368]	; (10009360 <system_peripheral_reset+0x390>)
100091ee:	6859      	ldr	r1, [r3, #4]
100091f0:	4a6c      	ldr	r2, [pc, #432]	; (100093a4 <system_peripheral_reset+0x3d4>)
100091f2:	400a      	ands	r2, r1
100091f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091f6:	685a      	ldr	r2, [r3, #4]
100091f8:	2180      	movs	r1, #128	; 0x80
100091fa:	0449      	lsls	r1, r1, #17
100091fc:	430a      	orrs	r2, r1
100091fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009200:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10009202:	e10e      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009204:	4b56      	ldr	r3, [pc, #344]	; (10009360 <system_peripheral_reset+0x390>)
10009206:	6859      	ldr	r1, [r3, #4]
10009208:	4a67      	ldr	r2, [pc, #412]	; (100093a8 <system_peripheral_reset+0x3d8>)
1000920a:	400a      	ands	r2, r1
1000920c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000920e:	685a      	ldr	r2, [r3, #4]
10009210:	2180      	movs	r1, #128	; 0x80
10009212:	0489      	lsls	r1, r1, #18
10009214:	430a      	orrs	r2, r1
10009216:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009218:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
1000921a:	e102      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000921c:	4b50      	ldr	r3, [pc, #320]	; (10009360 <system_peripheral_reset+0x390>)
1000921e:	6859      	ldr	r1, [r3, #4]
10009220:	4a62      	ldr	r2, [pc, #392]	; (100093ac <system_peripheral_reset+0x3dc>)
10009222:	400a      	ands	r2, r1
10009224:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009226:	685a      	ldr	r2, [r3, #4]
10009228:	2180      	movs	r1, #128	; 0x80
1000922a:	04c9      	lsls	r1, r1, #19
1000922c:	430a      	orrs	r2, r1
1000922e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009230:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
10009232:	e0f6      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009234:	4b4a      	ldr	r3, [pc, #296]	; (10009360 <system_peripheral_reset+0x390>)
10009236:	6859      	ldr	r1, [r3, #4]
10009238:	4a5d      	ldr	r2, [pc, #372]	; (100093b0 <system_peripheral_reset+0x3e0>)
1000923a:	400a      	ands	r2, r1
1000923c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000923e:	685a      	ldr	r2, [r3, #4]
10009240:	2180      	movs	r1, #128	; 0x80
10009242:	0509      	lsls	r1, r1, #20
10009244:	430a      	orrs	r2, r1
10009246:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009248:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
1000924a:	e0ea      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000924c:	4b44      	ldr	r3, [pc, #272]	; (10009360 <system_peripheral_reset+0x390>)
1000924e:	6859      	ldr	r1, [r3, #4]
10009250:	4a58      	ldr	r2, [pc, #352]	; (100093b4 <system_peripheral_reset+0x3e4>)
10009252:	400a      	ands	r2, r1
10009254:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009256:	685a      	ldr	r2, [r3, #4]
10009258:	2180      	movs	r1, #128	; 0x80
1000925a:	0549      	lsls	r1, r1, #21
1000925c:	430a      	orrs	r2, r1
1000925e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009260:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
10009262:	e0de      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009264:	4b3e      	ldr	r3, [pc, #248]	; (10009360 <system_peripheral_reset+0x390>)
10009266:	6859      	ldr	r1, [r3, #4]
10009268:	4a53      	ldr	r2, [pc, #332]	; (100093b8 <system_peripheral_reset+0x3e8>)
1000926a:	400a      	ands	r2, r1
1000926c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000926e:	685a      	ldr	r2, [r3, #4]
10009270:	2180      	movs	r1, #128	; 0x80
10009272:	0589      	lsls	r1, r1, #22
10009274:	430a      	orrs	r2, r1
10009276:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009278:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
1000927a:	e0d2      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000927c:	4b38      	ldr	r3, [pc, #224]	; (10009360 <system_peripheral_reset+0x390>)
1000927e:	6859      	ldr	r1, [r3, #4]
10009280:	4a4e      	ldr	r2, [pc, #312]	; (100093bc <system_peripheral_reset+0x3ec>)
10009282:	400a      	ands	r2, r1
10009284:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009286:	685a      	ldr	r2, [r3, #4]
10009288:	2180      	movs	r1, #128	; 0x80
1000928a:	05c9      	lsls	r1, r1, #23
1000928c:	430a      	orrs	r2, r1
1000928e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009290:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
10009292:	e0c6      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009294:	4a32      	ldr	r2, [pc, #200]	; (10009360 <system_peripheral_reset+0x390>)
10009296:	6853      	ldr	r3, [r2, #4]
10009298:	005b      	lsls	r3, r3, #1
1000929a:	085b      	lsrs	r3, r3, #1
1000929c:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000929e:	6853      	ldr	r3, [r2, #4]
100092a0:	2180      	movs	r1, #128	; 0x80
100092a2:	0609      	lsls	r1, r1, #24
100092a4:	430b      	orrs	r3, r1
100092a6:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092a8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
100092aa:	e0ba      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100092ac:	4b2c      	ldr	r3, [pc, #176]	; (10009360 <system_peripheral_reset+0x390>)
100092ae:	891a      	ldrh	r2, [r3, #8]
100092b0:	2101      	movs	r1, #1
100092b2:	438a      	bics	r2, r1
100092b4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100092b6:	8919      	ldrh	r1, [r3, #8]
100092b8:	2201      	movs	r2, #1
100092ba:	430a      	orrs	r2, r1
100092bc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092be:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
100092c0:	e0af      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100092c2:	4b27      	ldr	r3, [pc, #156]	; (10009360 <system_peripheral_reset+0x390>)
100092c4:	891a      	ldrh	r2, [r3, #8]
100092c6:	2102      	movs	r1, #2
100092c8:	438a      	bics	r2, r1
100092ca:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100092cc:	8919      	ldrh	r1, [r3, #8]
100092ce:	2202      	movs	r2, #2
100092d0:	430a      	orrs	r2, r1
100092d2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092d4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
100092d6:	e0a4      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100092d8:	4b21      	ldr	r3, [pc, #132]	; (10009360 <system_peripheral_reset+0x390>)
100092da:	891a      	ldrh	r2, [r3, #8]
100092dc:	2104      	movs	r1, #4
100092de:	438a      	bics	r2, r1
100092e0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100092e2:	8919      	ldrh	r1, [r3, #8]
100092e4:	2204      	movs	r2, #4
100092e6:	430a      	orrs	r2, r1
100092e8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092ea:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
100092ec:	e099      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100092ee:	4b1c      	ldr	r3, [pc, #112]	; (10009360 <system_peripheral_reset+0x390>)
100092f0:	891a      	ldrh	r2, [r3, #8]
100092f2:	2108      	movs	r1, #8
100092f4:	438a      	bics	r2, r1
100092f6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100092f8:	8919      	ldrh	r1, [r3, #8]
100092fa:	2208      	movs	r2, #8
100092fc:	430a      	orrs	r2, r1
100092fe:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009300:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10009302:	e08e      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009304:	4b16      	ldr	r3, [pc, #88]	; (10009360 <system_peripheral_reset+0x390>)
10009306:	891a      	ldrh	r2, [r3, #8]
10009308:	2110      	movs	r1, #16
1000930a:	438a      	bics	r2, r1
1000930c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000930e:	8919      	ldrh	r1, [r3, #8]
10009310:	2210      	movs	r2, #16
10009312:	430a      	orrs	r2, r1
10009314:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009316:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009318:	e083      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000931a:	4b11      	ldr	r3, [pc, #68]	; (10009360 <system_peripheral_reset+0x390>)
1000931c:	891a      	ldrh	r2, [r3, #8]
1000931e:	2120      	movs	r1, #32
10009320:	438a      	bics	r2, r1
10009322:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009324:	8919      	ldrh	r1, [r3, #8]
10009326:	2220      	movs	r2, #32
10009328:	430a      	orrs	r2, r1
1000932a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000932c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000932e:	e078      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009330:	4b0b      	ldr	r3, [pc, #44]	; (10009360 <system_peripheral_reset+0x390>)
10009332:	891a      	ldrh	r2, [r3, #8]
10009334:	2140      	movs	r1, #64	; 0x40
10009336:	438a      	bics	r2, r1
10009338:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000933a:	8919      	ldrh	r1, [r3, #8]
1000933c:	2240      	movs	r2, #64	; 0x40
1000933e:	430a      	orrs	r2, r1
10009340:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009342:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10009344:	e06d      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009346:	4b06      	ldr	r3, [pc, #24]	; (10009360 <system_peripheral_reset+0x390>)
10009348:	891a      	ldrh	r2, [r3, #8]
1000934a:	2180      	movs	r1, #128	; 0x80
1000934c:	438a      	bics	r2, r1
1000934e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009350:	8919      	ldrh	r1, [r3, #8]
10009352:	2280      	movs	r2, #128	; 0x80
10009354:	430a      	orrs	r2, r1
10009356:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009358:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
1000935a:	e062      	b.n	10009422 <system_peripheral_reset+0x452>
1000935c:	100129f0 	.word	0x100129f0
10009360:	4000b000 	.word	0x4000b000
10009364:	fffffeff 	.word	0xfffffeff
10009368:	fffffdff 	.word	0xfffffdff
1000936c:	fffffbff 	.word	0xfffffbff
10009370:	fffff7ff 	.word	0xfffff7ff
10009374:	ffffefff 	.word	0xffffefff
10009378:	ffffdfff 	.word	0xffffdfff
1000937c:	ffffbfff 	.word	0xffffbfff
10009380:	ffff7fff 	.word	0xffff7fff
10009384:	fffeffff 	.word	0xfffeffff
10009388:	fffdffff 	.word	0xfffdffff
1000938c:	fffbffff 	.word	0xfffbffff
10009390:	fff7ffff 	.word	0xfff7ffff
10009394:	ffefffff 	.word	0xffefffff
10009398:	ffdfffff 	.word	0xffdfffff
1000939c:	ffbfffff 	.word	0xffbfffff
100093a0:	ff7fffff 	.word	0xff7fffff
100093a4:	feffffff 	.word	0xfeffffff
100093a8:	fdffffff 	.word	0xfdffffff
100093ac:	fbffffff 	.word	0xfbffffff
100093b0:	f7ffffff 	.word	0xf7ffffff
100093b4:	efffffff 	.word	0xefffffff
100093b8:	dfffffff 	.word	0xdfffffff
100093bc:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100093c0:	4b18      	ldr	r3, [pc, #96]	; (10009424 <system_peripheral_reset+0x454>)
100093c2:	8919      	ldrh	r1, [r3, #8]
100093c4:	4a18      	ldr	r2, [pc, #96]	; (10009428 <system_peripheral_reset+0x458>)
100093c6:	400a      	ands	r2, r1
100093c8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100093ca:	8919      	ldrh	r1, [r3, #8]
100093cc:	2280      	movs	r2, #128	; 0x80
100093ce:	0052      	lsls	r2, r2, #1
100093d0:	430a      	orrs	r2, r1
100093d2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093d4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
100093d6:	e024      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100093d8:	4b12      	ldr	r3, [pc, #72]	; (10009424 <system_peripheral_reset+0x454>)
100093da:	8919      	ldrh	r1, [r3, #8]
100093dc:	4a13      	ldr	r2, [pc, #76]	; (1000942c <system_peripheral_reset+0x45c>)
100093de:	400a      	ands	r2, r1
100093e0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100093e2:	8919      	ldrh	r1, [r3, #8]
100093e4:	2280      	movs	r2, #128	; 0x80
100093e6:	0092      	lsls	r2, r2, #2
100093e8:	430a      	orrs	r2, r1
100093ea:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093ec:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
100093ee:	e018      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100093f0:	4b0c      	ldr	r3, [pc, #48]	; (10009424 <system_peripheral_reset+0x454>)
100093f2:	8919      	ldrh	r1, [r3, #8]
100093f4:	4a0e      	ldr	r2, [pc, #56]	; (10009430 <system_peripheral_reset+0x460>)
100093f6:	400a      	ands	r2, r1
100093f8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100093fa:	8919      	ldrh	r1, [r3, #8]
100093fc:	2280      	movs	r2, #128	; 0x80
100093fe:	00d2      	lsls	r2, r2, #3
10009400:	430a      	orrs	r2, r1
10009402:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009404:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10009406:	e00c      	b.n	10009422 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009408:	4b06      	ldr	r3, [pc, #24]	; (10009424 <system_peripheral_reset+0x454>)
1000940a:	8919      	ldrh	r1, [r3, #8]
1000940c:	4a09      	ldr	r2, [pc, #36]	; (10009434 <system_peripheral_reset+0x464>)
1000940e:	400a      	ands	r2, r1
10009410:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009412:	8919      	ldrh	r1, [r3, #8]
10009414:	2280      	movs	r2, #128	; 0x80
10009416:	0112      	lsls	r2, r2, #4
10009418:	430a      	orrs	r2, r1
1000941a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000941c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
1000941e:	e000      	b.n	10009422 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009420:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009422:	bd00      	pop	{pc}
10009424:	4000b000 	.word	0x4000b000
10009428:	fffffeff 	.word	0xfffffeff
1000942c:	fffffdff 	.word	0xfffffdff
10009430:	fffffbff 	.word	0xfffffbff
10009434:	fffff7ff 	.word	0xfffff7ff

10009438 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10009438:	2380      	movs	r3, #128	; 0x80
1000943a:	04db      	lsls	r3, r3, #19
1000943c:	469c      	mov	ip, r3
1000943e:	4460      	add	r0, ip
10009440:	0080      	lsls	r0, r0, #2
10009442:	6001      	str	r1, [r0, #0]
}
10009444:	4770      	bx	lr
10009446:	46c0      	nop			; (mov r8, r8)

10009448 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10009448:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000944a:	4b20      	ldr	r3, [pc, #128]	; (100094cc <uart_rx0_isr_handler+0x84>)
1000944c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000944e:	6823      	ldr	r3, [r4, #0]
10009450:	7d1d      	ldrb	r5, [r3, #20]
10009452:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009454:	066a      	lsls	r2, r5, #25
10009456:	d513      	bpl.n	10009480 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009458:	211e      	movs	r1, #30
1000945a:	2222      	movs	r2, #34	; 0x22
1000945c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000945e:	7e1a      	ldrb	r2, [r3, #24]
10009460:	3123      	adds	r1, #35	; 0x23
10009462:	438a      	bics	r2, r1
10009464:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009466:	2321      	movs	r3, #33	; 0x21
10009468:	5ce3      	ldrb	r3, [r4, r3]
1000946a:	071b      	lsls	r3, r3, #28
1000946c:	d506      	bpl.n	1000947c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000946e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009470:	5ce3      	ldrb	r3, [r4, r3]
10009472:	071b      	lsls	r3, r3, #28
10009474:	d502      	bpl.n	1000947c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009476:	0020      	movs	r0, r4
10009478:	6923      	ldr	r3, [r4, #16]
1000947a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000947c:	6823      	ldr	r3, [r4, #0]
1000947e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009480:	07eb      	lsls	r3, r5, #31
10009482:	d522      	bpl.n	100094ca <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009484:	6823      	ldr	r3, [r4, #0]
10009486:	7c1b      	ldrb	r3, [r3, #16]
10009488:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000948a:	6962      	ldr	r2, [r4, #20]
1000948c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000948e:	6963      	ldr	r3, [r4, #20]
10009490:	3301      	adds	r3, #1
10009492:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009494:	8ba3      	ldrh	r3, [r4, #28]
10009496:	3b01      	subs	r3, #1
10009498:	b29b      	uxth	r3, r3
1000949a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000949c:	8ba3      	ldrh	r3, [r4, #28]
1000949e:	b29b      	uxth	r3, r3
100094a0:	2b00      	cmp	r3, #0
100094a2:	d112      	bne.n	100094ca <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100094a4:	3321      	adds	r3, #33	; 0x21
100094a6:	5ce3      	ldrb	r3, [r4, r3]
100094a8:	075b      	lsls	r3, r3, #29
100094aa:	d50e      	bpl.n	100094ca <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
100094ac:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100094ae:	5ce3      	ldrb	r3, [r4, r3]
100094b0:	075b      	lsls	r3, r3, #29
100094b2:	d50a      	bpl.n	100094ca <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
100094b4:	2200      	movs	r2, #0
100094b6:	2322      	movs	r3, #34	; 0x22
100094b8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
100094ba:	6822      	ldr	r2, [r4, #0]
100094bc:	7e13      	ldrb	r3, [r2, #24]
100094be:	2101      	movs	r1, #1
100094c0:	438b      	bics	r3, r1
100094c2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
100094c4:	68e3      	ldr	r3, [r4, #12]
100094c6:	0020      	movs	r0, r4
100094c8:	4798      	blx	r3
			}
		}
	}
}
100094ca:	bd70      	pop	{r4, r5, r6, pc}
100094cc:	10015430 	.word	0x10015430

100094d0 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
100094d0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
100094d2:	4b21      	ldr	r3, [pc, #132]	; (10009558 <uart_tx0_isr_handler+0x88>)
100094d4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100094d6:	6823      	ldr	r3, [r4, #0]
100094d8:	791d      	ldrb	r5, [r3, #4]
100094da:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100094dc:	07ea      	lsls	r2, r5, #31
100094de:	d517      	bpl.n	10009510 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100094e0:	69a2      	ldr	r2, [r4, #24]
100094e2:	7811      	ldrb	r1, [r2, #0]
100094e4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100094e6:	3201      	adds	r2, #1
100094e8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100094ea:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100094ec:	8be3      	ldrh	r3, [r4, #30]
100094ee:	3b01      	subs	r3, #1
100094f0:	b29b      	uxth	r3, r3
100094f2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100094f4:	8be3      	ldrh	r3, [r4, #30]
100094f6:	b29b      	uxth	r3, r3
100094f8:	2b00      	cmp	r3, #0
100094fa:	d109      	bne.n	10009510 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100094fc:	6822      	ldr	r2, [r4, #0]
100094fe:	7a13      	ldrb	r3, [r2, #8]
10009500:	2101      	movs	r1, #1
10009502:	438b      	bics	r3, r1
10009504:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009506:	6822      	ldr	r2, [r4, #0]
10009508:	7a11      	ldrb	r1, [r2, #8]
1000950a:	2310      	movs	r3, #16
1000950c:	430b      	orrs	r3, r1
1000950e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009510:	06eb      	lsls	r3, r5, #27
10009512:	d512      	bpl.n	1000953a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009514:	2321      	movs	r3, #33	; 0x21
10009516:	5ce3      	ldrb	r3, [r4, r3]
10009518:	07db      	lsls	r3, r3, #31
1000951a:	d50e      	bpl.n	1000953a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000951c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000951e:	5ce3      	ldrb	r3, [r4, r3]
10009520:	07db      	lsls	r3, r3, #31
10009522:	d50a      	bpl.n	1000953a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009524:	2200      	movs	r2, #0
10009526:	2322      	movs	r3, #34	; 0x22
10009528:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000952a:	6822      	ldr	r2, [r4, #0]
1000952c:	7a13      	ldrb	r3, [r2, #8]
1000952e:	2110      	movs	r1, #16
10009530:	438b      	bics	r3, r1
10009532:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009534:	0020      	movs	r0, r4
10009536:	6863      	ldr	r3, [r4, #4]
10009538:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000953a:	06ab      	lsls	r3, r5, #26
1000953c:	d50a      	bpl.n	10009554 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000953e:	2321      	movs	r3, #33	; 0x21
10009540:	5ce3      	ldrb	r3, [r4, r3]
10009542:	079b      	lsls	r3, r3, #30
10009544:	d506      	bpl.n	10009554 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009546:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009548:	5ce3      	ldrb	r3, [r4, r3]
1000954a:	079b      	lsls	r3, r3, #30
1000954c:	d502      	bpl.n	10009554 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000954e:	68a3      	ldr	r3, [r4, #8]
10009550:	0020      	movs	r0, r4
10009552:	4798      	blx	r3
		}

	}
}
10009554:	bd70      	pop	{r4, r5, r6, pc}
10009556:	46c0      	nop			; (mov r8, r8)
10009558:	10015430 	.word	0x10015430

1000955c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000955c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000955e:	4b20      	ldr	r3, [pc, #128]	; (100095e0 <uart_rx1_isr_handler+0x84>)
10009560:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009562:	6823      	ldr	r3, [r4, #0]
10009564:	7d1d      	ldrb	r5, [r3, #20]
10009566:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009568:	066a      	lsls	r2, r5, #25
1000956a:	d513      	bpl.n	10009594 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000956c:	211e      	movs	r1, #30
1000956e:	2222      	movs	r2, #34	; 0x22
10009570:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009572:	7e1a      	ldrb	r2, [r3, #24]
10009574:	3123      	adds	r1, #35	; 0x23
10009576:	438a      	bics	r2, r1
10009578:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000957a:	2321      	movs	r3, #33	; 0x21
1000957c:	5ce3      	ldrb	r3, [r4, r3]
1000957e:	071b      	lsls	r3, r3, #28
10009580:	d506      	bpl.n	10009590 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009582:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009584:	5ce3      	ldrb	r3, [r4, r3]
10009586:	071b      	lsls	r3, r3, #28
10009588:	d502      	bpl.n	10009590 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000958a:	0020      	movs	r0, r4
1000958c:	6923      	ldr	r3, [r4, #16]
1000958e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009590:	6823      	ldr	r3, [r4, #0]
10009592:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009594:	07eb      	lsls	r3, r5, #31
10009596:	d522      	bpl.n	100095de <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009598:	6823      	ldr	r3, [r4, #0]
1000959a:	7c1b      	ldrb	r3, [r3, #16]
1000959c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000959e:	6962      	ldr	r2, [r4, #20]
100095a0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100095a2:	6963      	ldr	r3, [r4, #20]
100095a4:	3301      	adds	r3, #1
100095a6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
100095a8:	8ba3      	ldrh	r3, [r4, #28]
100095aa:	3b01      	subs	r3, #1
100095ac:	b29b      	uxth	r3, r3
100095ae:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
100095b0:	8ba3      	ldrh	r3, [r4, #28]
100095b2:	b29b      	uxth	r3, r3
100095b4:	2b00      	cmp	r3, #0
100095b6:	d112      	bne.n	100095de <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100095b8:	3321      	adds	r3, #33	; 0x21
100095ba:	5ce3      	ldrb	r3, [r4, r3]
100095bc:	075b      	lsls	r3, r3, #29
100095be:	d50e      	bpl.n	100095de <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
100095c0:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100095c2:	5ce3      	ldrb	r3, [r4, r3]
100095c4:	075b      	lsls	r3, r3, #29
100095c6:	d50a      	bpl.n	100095de <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
100095c8:	2200      	movs	r2, #0
100095ca:	2322      	movs	r3, #34	; 0x22
100095cc:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
100095ce:	6822      	ldr	r2, [r4, #0]
100095d0:	7e13      	ldrb	r3, [r2, #24]
100095d2:	2101      	movs	r1, #1
100095d4:	438b      	bics	r3, r1
100095d6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
100095d8:	68e3      	ldr	r3, [r4, #12]
100095da:	0020      	movs	r0, r4
100095dc:	4798      	blx	r3
			}
		}
	}
}
100095de:	bd70      	pop	{r4, r5, r6, pc}
100095e0:	10015430 	.word	0x10015430

100095e4 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
100095e4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
100095e6:	4b21      	ldr	r3, [pc, #132]	; (1000966c <uart_tx1_isr_handler+0x88>)
100095e8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100095ea:	6823      	ldr	r3, [r4, #0]
100095ec:	791d      	ldrb	r5, [r3, #4]
100095ee:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100095f0:	07ea      	lsls	r2, r5, #31
100095f2:	d517      	bpl.n	10009624 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100095f4:	69a2      	ldr	r2, [r4, #24]
100095f6:	7811      	ldrb	r1, [r2, #0]
100095f8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100095fa:	3201      	adds	r2, #1
100095fc:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100095fe:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009600:	8be3      	ldrh	r3, [r4, #30]
10009602:	3b01      	subs	r3, #1
10009604:	b29b      	uxth	r3, r3
10009606:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009608:	8be3      	ldrh	r3, [r4, #30]
1000960a:	b29b      	uxth	r3, r3
1000960c:	2b00      	cmp	r3, #0
1000960e:	d109      	bne.n	10009624 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009610:	6822      	ldr	r2, [r4, #0]
10009612:	7a13      	ldrb	r3, [r2, #8]
10009614:	2101      	movs	r1, #1
10009616:	438b      	bics	r3, r1
10009618:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000961a:	6822      	ldr	r2, [r4, #0]
1000961c:	7a11      	ldrb	r1, [r2, #8]
1000961e:	2310      	movs	r3, #16
10009620:	430b      	orrs	r3, r1
10009622:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009624:	06eb      	lsls	r3, r5, #27
10009626:	d512      	bpl.n	1000964e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009628:	2321      	movs	r3, #33	; 0x21
1000962a:	5ce3      	ldrb	r3, [r4, r3]
1000962c:	07db      	lsls	r3, r3, #31
1000962e:	d50e      	bpl.n	1000964e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009630:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009632:	5ce3      	ldrb	r3, [r4, r3]
10009634:	07db      	lsls	r3, r3, #31
10009636:	d50a      	bpl.n	1000964e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009638:	2200      	movs	r2, #0
1000963a:	2322      	movs	r3, #34	; 0x22
1000963c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000963e:	6822      	ldr	r2, [r4, #0]
10009640:	7a13      	ldrb	r3, [r2, #8]
10009642:	2110      	movs	r1, #16
10009644:	438b      	bics	r3, r1
10009646:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009648:	0020      	movs	r0, r4
1000964a:	6863      	ldr	r3, [r4, #4]
1000964c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000964e:	06ab      	lsls	r3, r5, #26
10009650:	d50a      	bpl.n	10009668 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009652:	2321      	movs	r3, #33	; 0x21
10009654:	5ce3      	ldrb	r3, [r4, r3]
10009656:	079b      	lsls	r3, r3, #30
10009658:	d506      	bpl.n	10009668 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000965a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000965c:	5ce3      	ldrb	r3, [r4, r3]
1000965e:	079b      	lsls	r3, r3, #30
10009660:	d502      	bpl.n	10009668 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009662:	68a3      	ldr	r3, [r4, #8]
10009664:	0020      	movs	r0, r4
10009666:	4798      	blx	r3
		}

	}
}
10009668:	bd70      	pop	{r4, r5, r6, pc}
1000966a:	46c0      	nop			; (mov r8, r8)
1000966c:	10015430 	.word	0x10015430

10009670 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009670:	23e1      	movs	r3, #225	; 0xe1
10009672:	025b      	lsls	r3, r3, #9
10009674:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
10009676:	2300      	movs	r3, #0
10009678:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000967a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000967c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000967e:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
10009680:	3302      	adds	r3, #2
10009682:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
10009684:	2203      	movs	r2, #3
10009686:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
10009688:	3201      	adds	r2, #1
1000968a:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
1000968c:	3201      	adds	r2, #1
1000968e:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10009690:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
10009692:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
10009694:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
10009696:	6243      	str	r3, [r0, #36]	; 0x24
}
10009698:	4770      	bx	lr
1000969a:	46c0      	nop			; (mov r8, r8)

1000969c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000969e:	464f      	mov	r7, r9
100096a0:	4646      	mov	r6, r8
100096a2:	b4c0      	push	{r6, r7}
100096a4:	0005      	movs	r5, r0
100096a6:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
100096a8:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
100096aa:	2300      	movs	r3, #0
100096ac:	6043      	str	r3, [r0, #4]
100096ae:	6083      	str	r3, [r0, #8]
100096b0:	60c3      	str	r3, [r0, #12]
100096b2:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
100096b4:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
100096b6:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
100096b8:	2200      	movs	r2, #0
100096ba:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
100096bc:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
100096be:	3320      	adds	r3, #32
100096c0:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
100096c2:	3301      	adds	r3, #1
100096c4:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
100096c6:	3301      	adds	r3, #1
100096c8:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
100096ca:	4b55      	ldr	r3, [pc, #340]	; (10009820 <uart_init+0x184>)
100096cc:	4299      	cmp	r1, r3
100096ce:	d118      	bne.n	10009702 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
100096d0:	2009      	movs	r0, #9
100096d2:	4c54      	ldr	r4, [pc, #336]	; (10009824 <uart_init+0x188>)
100096d4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
100096d6:	200a      	movs	r0, #10
100096d8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
100096da:	2009      	movs	r0, #9
100096dc:	4c52      	ldr	r4, [pc, #328]	; (10009828 <uart_init+0x18c>)
100096de:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
100096e0:	200a      	movs	r0, #10
100096e2:	47a0      	blx	r4
		_uart_instances[0] = module;
100096e4:	4b51      	ldr	r3, [pc, #324]	; (1000982c <uart_init+0x190>)
100096e6:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
100096e8:	4951      	ldr	r1, [pc, #324]	; (10009830 <uart_init+0x194>)
100096ea:	2010      	movs	r0, #16
100096ec:	4c51      	ldr	r4, [pc, #324]	; (10009834 <uart_init+0x198>)
100096ee:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
100096f0:	4951      	ldr	r1, [pc, #324]	; (10009838 <uart_init+0x19c>)
100096f2:	2011      	movs	r0, #17
100096f4:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100096f6:	4b51      	ldr	r3, [pc, #324]	; (1000983c <uart_init+0x1a0>)
100096f8:	2201      	movs	r2, #1
100096fa:	601a      	str	r2, [r3, #0]
100096fc:	3201      	adds	r2, #1
100096fe:	601a      	str	r2, [r3, #0]
10009700:	e01a      	b.n	10009738 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10009702:	4b4f      	ldr	r3, [pc, #316]	; (10009840 <uart_init+0x1a4>)
10009704:	4299      	cmp	r1, r3
10009706:	d117      	bne.n	10009738 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
10009708:	200b      	movs	r0, #11
1000970a:	4c46      	ldr	r4, [pc, #280]	; (10009824 <uart_init+0x188>)
1000970c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000970e:	200c      	movs	r0, #12
10009710:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10009712:	200b      	movs	r0, #11
10009714:	4c44      	ldr	r4, [pc, #272]	; (10009828 <uart_init+0x18c>)
10009716:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
10009718:	200c      	movs	r0, #12
1000971a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000971c:	4b43      	ldr	r3, [pc, #268]	; (1000982c <uart_init+0x190>)
1000971e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009720:	4948      	ldr	r1, [pc, #288]	; (10009844 <uart_init+0x1a8>)
10009722:	2012      	movs	r0, #18
10009724:	4c43      	ldr	r4, [pc, #268]	; (10009834 <uart_init+0x198>)
10009726:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
10009728:	4947      	ldr	r1, [pc, #284]	; (10009848 <uart_init+0x1ac>)
1000972a:	2013      	movs	r0, #19
1000972c:	47a0      	blx	r4
1000972e:	4b43      	ldr	r3, [pc, #268]	; (1000983c <uart_init+0x1a0>)
10009730:	2204      	movs	r2, #4
10009732:	601a      	str	r2, [r3, #0]
10009734:	3204      	adds	r2, #4
10009736:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009738:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000973a:	2204      	movs	r2, #4
1000973c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000973e:	2b00      	cmp	r3, #0
10009740:	d152      	bne.n	100097e8 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
10009742:	3302      	adds	r3, #2
10009744:	4698      	mov	r8, r3
10009746:	e04f      	b.n	100097e8 <uart_init+0x14c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009748:	8a31      	ldrh	r1, [r6, #16]
1000974a:	ce01      	ldmia	r6!, {r0}
1000974c:	b2c0      	uxtb	r0, r0
1000974e:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009750:	3401      	adds	r4, #1
10009752:	b2e4      	uxtb	r4, r4
10009754:	4544      	cmp	r4, r8
10009756:	d3f7      	bcc.n	10009748 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009758:	682b      	ldr	r3, [r5, #0]
1000975a:	7d1a      	ldrb	r2, [r3, #20]
1000975c:	07d2      	lsls	r2, r2, #31
1000975e:	d504      	bpl.n	1000976a <uart_init+0xce>
10009760:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009762:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009764:	7d1a      	ldrb	r2, [r3, #20]
10009766:	420a      	tst	r2, r1
10009768:	d1fb      	bne.n	10009762 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000976a:	2100      	movs	r1, #0
1000976c:	2220      	movs	r2, #32
1000976e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009770:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
10009772:	1e59      	subs	r1, r3, #1
10009774:	418b      	sbcs	r3, r1
10009776:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10009778:	793b      	ldrb	r3, [r7, #4]
1000977a:	797a      	ldrb	r2, [r7, #5]
1000977c:	4313      	orrs	r3, r2
1000977e:	430b      	orrs	r3, r1
	switch(config->parity) {
10009780:	79ba      	ldrb	r2, [r7, #6]
10009782:	2a02      	cmp	r2, #2
10009784:	d00d      	beq.n	100097a2 <uart_init+0x106>
10009786:	b2d1      	uxtb	r1, r2
10009788:	2902      	cmp	r1, #2
1000978a:	d802      	bhi.n	10009792 <uart_init+0xf6>
1000978c:	2a01      	cmp	r2, #1
1000978e:	d005      	beq.n	1000979c <uart_init+0x100>
10009790:	e00f      	b.n	100097b2 <uart_init+0x116>
10009792:	2a03      	cmp	r2, #3
10009794:	d008      	beq.n	100097a8 <uart_init+0x10c>
10009796:	2a04      	cmp	r2, #4
10009798:	d009      	beq.n	100097ae <uart_init+0x112>
1000979a:	e00a      	b.n	100097b2 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000979c:	2202      	movs	r2, #2
1000979e:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
100097a0:	e007      	b.n	100097b2 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
100097a2:	2206      	movs	r2, #6
100097a4:	4313      	orrs	r3, r2
			break;
100097a6:	e004      	b.n	100097b2 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
100097a8:	220a      	movs	r2, #10
100097aa:	4313      	orrs	r3, r2
			break;
100097ac:	e001      	b.n	100097b2 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
100097ae:	220e      	movs	r2, #14
100097b0:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
100097b2:	2220      	movs	r2, #32
100097b4:	6829      	ldr	r1, [r5, #0]
100097b6:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
100097b8:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
100097ba:	4b24      	ldr	r3, [pc, #144]	; (1000984c <uart_init+0x1b0>)
100097bc:	4798      	blx	r3
100097be:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
100097c0:	0031      	movs	r1, r6
100097c2:	4b23      	ldr	r3, [pc, #140]	; (10009850 <uart_init+0x1b4>)
100097c4:	4798      	blx	r3
100097c6:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
100097c8:	0400      	lsls	r0, r0, #16
100097ca:	0c00      	lsrs	r0, r0, #16
100097cc:	4370      	muls	r0, r6
100097ce:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
100097d0:	0931      	lsrs	r1, r6, #4
100097d2:	4288      	cmp	r0, r1
100097d4:	d906      	bls.n	100097e4 <uart_init+0x148>
100097d6:	2300      	movs	r3, #0
		i++;
100097d8:	3301      	adds	r3, #1
100097da:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
100097dc:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
100097de:	4288      	cmp	r0, r1
100097e0:	d8fa      	bhi.n	100097d8 <uart_init+0x13c>
100097e2:	e007      	b.n	100097f4 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
100097e4:	2300      	movs	r3, #0
100097e6:	e005      	b.n	100097f4 <uart_init+0x158>
100097e8:	003e      	movs	r6, r7
100097ea:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
100097ec:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
100097ee:	4b19      	ldr	r3, [pc, #100]	; (10009854 <uart_init+0x1b8>)
100097f0:	4699      	mov	r9, r3
100097f2:	e7a9      	b.n	10009748 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
100097f4:	2100      	movs	r1, #0
100097f6:	2028      	movs	r0, #40	; 0x28
100097f8:	682c      	ldr	r4, [r5, #0]
100097fa:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
100097fc:	3301      	adds	r3, #1
100097fe:	071b      	lsls	r3, r3, #28
10009800:	0f5b      	lsrs	r3, r3, #29
10009802:	00d2      	lsls	r2, r2, #3
10009804:	4313      	orrs	r3, r2
10009806:	b29b      	uxth	r3, r3
10009808:	682a      	ldr	r2, [r5, #0]
1000980a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000980c:	682b      	ldr	r3, [r5, #0]
1000980e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009810:	682b      	ldr	r3, [r5, #0]
10009812:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009814:	2000      	movs	r0, #0
10009816:	bc0c      	pop	{r2, r3}
10009818:	4690      	mov	r8, r2
1000981a:	4699      	mov	r9, r3
1000981c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000981e:	46c0      	nop			; (mov r8, r8)
10009820:	40004000 	.word	0x40004000
10009824:	10008fd1 	.word	0x10008fd1
10009828:	10008c75 	.word	0x10008c75
1000982c:	10015430 	.word	0x10015430
10009830:	10009449 	.word	0x10009449
10009834:	10009439 	.word	0x10009439
10009838:	100094d1 	.word	0x100094d1
1000983c:	e000e100 	.word	0xe000e100
10009840:	40005000 	.word	0x40005000
10009844:	1000955d 	.word	0x1000955d
10009848:	100095e5 	.word	0x100095e5
1000984c:	10008c69 	.word	0x10008c69
10009850:	1000f8d1 	.word	0x1000f8d1
10009854:	10008a99 	.word	0x10008a99

10009858 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
10009858:	6802      	ldr	r2, [r0, #0]
1000985a:	2001      	movs	r0, #1
1000985c:	7913      	ldrb	r3, [r2, #4]
1000985e:	4203      	tst	r3, r0
10009860:	d0fc      	beq.n	1000985c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009862:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009864:	2000      	movs	r0, #0
10009866:	4770      	bx	lr

10009868 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009868:	6802      	ldr	r2, [r0, #0]
1000986a:	2001      	movs	r0, #1
1000986c:	7d13      	ldrb	r3, [r2, #20]
1000986e:	4203      	tst	r3, r0
10009870:	d0fc      	beq.n	1000986c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009872:	7c13      	ldrb	r3, [r2, #16]
10009874:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
10009876:	2000      	movs	r0, #0
10009878:	4770      	bx	lr
1000987a:	46c0      	nop			; (mov r8, r8)

1000987c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000987c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000987e:	2a00      	cmp	r2, #0
10009880:	d00d      	beq.n	1000989e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009882:	330b      	adds	r3, #11
10009884:	5cc3      	ldrb	r3, [r0, r3]
10009886:	b2db      	uxtb	r3, r3
10009888:	2b05      	cmp	r3, #5
1000988a:	d008      	beq.n	1000989e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000988c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000988e:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009890:	2205      	movs	r2, #5
10009892:	2322      	movs	r3, #34	; 0x22
10009894:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009896:	6803      	ldr	r3, [r0, #0]
10009898:	3a04      	subs	r2, #4
1000989a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000989c:	2300      	movs	r3, #0
}
1000989e:	0018      	movs	r0, r3
100098a0:	4770      	bx	lr
100098a2:	46c0      	nop			; (mov r8, r8)

100098a4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
100098a4:	0093      	lsls	r3, r2, #2
100098a6:	18c3      	adds	r3, r0, r3
100098a8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
100098aa:	2120      	movs	r1, #32
100098ac:	2301      	movs	r3, #1
100098ae:	4093      	lsls	r3, r2
100098b0:	5c42      	ldrb	r2, [r0, r1]
100098b2:	4313      	orrs	r3, r2
100098b4:	5443      	strb	r3, [r0, r1]
}
100098b6:	4770      	bx	lr

100098b8 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
100098b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
100098ba:	2221      	movs	r2, #33	; 0x21
100098bc:	2301      	movs	r3, #1
100098be:	408b      	lsls	r3, r1
100098c0:	5c84      	ldrb	r4, [r0, r2]
100098c2:	4323      	orrs	r3, r4
100098c4:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
100098c6:	2901      	cmp	r1, #1
100098c8:	d104      	bne.n	100098d4 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
100098ca:	6802      	ldr	r2, [r0, #0]
100098cc:	7a11      	ldrb	r1, [r2, #8]
100098ce:	2320      	movs	r3, #32
100098d0:	430b      	orrs	r3, r1
100098d2:	7213      	strb	r3, [r2, #8]
	}
}
100098d4:	bd10      	pop	{r4, pc}
100098d6:	46c0      	nop			; (mov r8, r8)

100098d8 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
100098d8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
100098da:	2201      	movs	r2, #1
100098dc:	408a      	lsls	r2, r1
100098de:	2421      	movs	r4, #33	; 0x21
100098e0:	5d03      	ldrb	r3, [r0, r4]
100098e2:	4393      	bics	r3, r2
100098e4:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
100098e6:	2901      	cmp	r1, #1
100098e8:	d104      	bne.n	100098f4 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
100098ea:	6802      	ldr	r2, [r0, #0]
100098ec:	7a13      	ldrb	r3, [r2, #8]
100098ee:	311f      	adds	r1, #31
100098f0:	438b      	bics	r3, r1
100098f2:	7213      	strb	r3, [r2, #8]
	}

}
100098f4:	bd10      	pop	{r4, pc}
100098f6:	46c0      	nop			; (mov r8, r8)

100098f8 <uart_enable_transmit_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
100098f8:	6802      	ldr	r2, [r0, #0]
100098fa:	7a11      	ldrb	r1, [r2, #8]
100098fc:	2310      	movs	r3, #16
100098fe:	430b      	orrs	r3, r1
10009900:	7213      	strb	r3, [r2, #8]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009902:	6803      	ldr	r3, [r0, #0]
10009904:	4a07      	ldr	r2, [pc, #28]	; (10009924 <uart_enable_transmit_dma+0x2c>)
10009906:	4293      	cmp	r3, r2
10009908:	d104      	bne.n	10009914 <uart_enable_transmit_dma+0x1c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000990a:	2102      	movs	r1, #2
1000990c:	2380      	movs	r3, #128	; 0x80
1000990e:	4a06      	ldr	r2, [pc, #24]	; (10009928 <uart_enable_transmit_dma+0x30>)
10009910:	50d1      	str	r1, [r2, r3]
10009912:	e006      	b.n	10009922 <uart_enable_transmit_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009914:	4a05      	ldr	r2, [pc, #20]	; (1000992c <uart_enable_transmit_dma+0x34>)
10009916:	4293      	cmp	r3, r2
10009918:	d103      	bne.n	10009922 <uart_enable_transmit_dma+0x2a>
1000991a:	2108      	movs	r1, #8
1000991c:	2380      	movs	r3, #128	; 0x80
1000991e:	4a02      	ldr	r2, [pc, #8]	; (10009928 <uart_enable_transmit_dma+0x30>)
10009920:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009922:	4770      	bx	lr
10009924:	40004000 	.word	0x40004000
10009928:	e000e100 	.word	0xe000e100
1000992c:	40005000 	.word	0x40005000

10009930 <uart_enable_receive_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->RX_INTERRUPT_MASK.reg |= UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009930:	6802      	ldr	r2, [r0, #0]
10009932:	7e11      	ldrb	r1, [r2, #24]
10009934:	2301      	movs	r3, #1
10009936:	430b      	orrs	r3, r1
10009938:	7613      	strb	r3, [r2, #24]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
1000993a:	6803      	ldr	r3, [r0, #0]
1000993c:	4a07      	ldr	r2, [pc, #28]	; (1000995c <uart_enable_receive_dma+0x2c>)
1000993e:	4293      	cmp	r3, r2
10009940:	d104      	bne.n	1000994c <uart_enable_receive_dma+0x1c>
10009942:	2102      	movs	r1, #2
10009944:	2380      	movs	r3, #128	; 0x80
10009946:	4a06      	ldr	r2, [pc, #24]	; (10009960 <uart_enable_receive_dma+0x30>)
10009948:	50d1      	str	r1, [r2, r3]
1000994a:	e006      	b.n	1000995a <uart_enable_receive_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
1000994c:	4a05      	ldr	r2, [pc, #20]	; (10009964 <uart_enable_receive_dma+0x34>)
1000994e:	4293      	cmp	r3, r2
10009950:	d103      	bne.n	1000995a <uart_enable_receive_dma+0x2a>
10009952:	2108      	movs	r1, #8
10009954:	2380      	movs	r3, #128	; 0x80
10009956:	4a02      	ldr	r2, [pc, #8]	; (10009960 <uart_enable_receive_dma+0x30>)
10009958:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
1000995a:	4770      	bx	lr
1000995c:	40004000 	.word	0x40004000
10009960:	e000e100 	.word	0xe000e100
10009964:	40005000 	.word	0x40005000

10009968 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009968:	b5f0      	push	{r4, r5, r6, r7, lr}
1000996a:	4647      	mov	r7, r8
1000996c:	b480      	push	{r7}
1000996e:	000c      	movs	r4, r1
10009970:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009972:	2800      	cmp	r0, #0
10009974:	d10d      	bne.n	10009992 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009976:	2a00      	cmp	r2, #0
10009978:	dd0e      	ble.n	10009998 <_read+0x30>
1000997a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000997c:	4e08      	ldr	r6, [pc, #32]	; (100099a0 <_read+0x38>)
1000997e:	4d09      	ldr	r5, [pc, #36]	; (100099a4 <_read+0x3c>)
10009980:	6830      	ldr	r0, [r6, #0]
10009982:	0021      	movs	r1, r4
10009984:	682b      	ldr	r3, [r5, #0]
10009986:	4798      	blx	r3
		ptr++;
10009988:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000998a:	42a7      	cmp	r7, r4
1000998c:	d1f8      	bne.n	10009980 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000998e:	4640      	mov	r0, r8
10009990:	e003      	b.n	1000999a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009992:	2001      	movs	r0, #1
10009994:	4240      	negs	r0, r0
10009996:	e000      	b.n	1000999a <_read+0x32>
	}

	for (; len > 0; --len) {
10009998:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000999a:	bc04      	pop	{r2}
1000999c:	4690      	mov	r8, r2
1000999e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099a0:	10015440 	.word	0x10015440
100099a4:	10015438 	.word	0x10015438

100099a8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
100099a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100099aa:	4647      	mov	r7, r8
100099ac:	b480      	push	{r7}
100099ae:	000e      	movs	r6, r1
100099b0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
100099b2:	3801      	subs	r0, #1
100099b4:	2802      	cmp	r0, #2
100099b6:	d811      	bhi.n	100099dc <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
100099b8:	2a00      	cmp	r2, #0
100099ba:	d012      	beq.n	100099e2 <_write+0x3a>
100099bc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
100099be:	4b0c      	ldr	r3, [pc, #48]	; (100099f0 <_write+0x48>)
100099c0:	4698      	mov	r8, r3
100099c2:	4f0c      	ldr	r7, [pc, #48]	; (100099f4 <_write+0x4c>)
100099c4:	4643      	mov	r3, r8
100099c6:	6818      	ldr	r0, [r3, #0]
100099c8:	5d31      	ldrb	r1, [r6, r4]
100099ca:	683b      	ldr	r3, [r7, #0]
100099cc:	4798      	blx	r3
100099ce:	2800      	cmp	r0, #0
100099d0:	db09      	blt.n	100099e6 <_write+0x3e>
			return -1;
		}
		++nChars;
100099d2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
100099d4:	42a5      	cmp	r5, r4
100099d6:	d1f5      	bne.n	100099c4 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
100099d8:	0020      	movs	r0, r4
100099da:	e006      	b.n	100099ea <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
100099dc:	2001      	movs	r0, #1
100099de:	4240      	negs	r0, r0
100099e0:	e003      	b.n	100099ea <_write+0x42>
	}

	for (; len != 0; --len) {
100099e2:	2000      	movs	r0, #0
100099e4:	e001      	b.n	100099ea <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
100099e6:	2001      	movs	r0, #1
100099e8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
100099ea:	bc04      	pop	{r2}
100099ec:	4690      	mov	r8, r2
100099ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099f0:	10015440 	.word	0x10015440
100099f4:	1001543c 	.word	0x1001543c

100099f8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100099f8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100099fa:	4a06      	ldr	r2, [pc, #24]	; (10009a14 <_sbrk+0x1c>)
100099fc:	6812      	ldr	r2, [r2, #0]
100099fe:	2a00      	cmp	r2, #0
10009a00:	d102      	bne.n	10009a08 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10009a02:	4905      	ldr	r1, [pc, #20]	; (10009a18 <_sbrk+0x20>)
10009a04:	4a03      	ldr	r2, [pc, #12]	; (10009a14 <_sbrk+0x1c>)
10009a06:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10009a08:	4a02      	ldr	r2, [pc, #8]	; (10009a14 <_sbrk+0x1c>)
10009a0a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10009a0c:	18c3      	adds	r3, r0, r3
10009a0e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10009a10:	4770      	bx	lr
10009a12:	46c0      	nop			; (mov r8, r8)
10009a14:	10013978 	.word	0x10013978
10009a18:	10016e48 	.word	0x10016e48

10009a1c <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009a1c:	2001      	movs	r0, #1
10009a1e:	4240      	negs	r0, r0
10009a20:	4770      	bx	lr
10009a22:	46c0      	nop			; (mov r8, r8)

10009a24 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009a24:	2380      	movs	r3, #128	; 0x80
10009a26:	019b      	lsls	r3, r3, #6
10009a28:	604b      	str	r3, [r1, #4]

	return 0;
}
10009a2a:	2000      	movs	r0, #0
10009a2c:	4770      	bx	lr
10009a2e:	46c0      	nop			; (mov r8, r8)

10009a30 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009a30:	2001      	movs	r0, #1
10009a32:	4770      	bx	lr

10009a34 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009a34:	2000      	movs	r0, #0
10009a36:	4770      	bx	lr

10009a38 <bat_init_service>:
extern ble_connected_dev_info_t ble_dev_info[BLE_MAX_DEVICE_CONNECTED];

/**@brief Initialize the service with its included service, characteristics, and descriptors
 */
void bat_init_service(bat_gatt_service_handler_t *battery_serv, uint8_t *battery_value)
{
10009a38:	b530      	push	{r4, r5, lr}
	battery_serv->serv_handle = 0;
10009a3a:	2300      	movs	r3, #0
10009a3c:	2200      	movs	r2, #0
10009a3e:	8243      	strh	r3, [r0, #18]
	battery_serv->serv_uuid.type = AT_BLE_UUID_16;
10009a40:	7002      	strb	r2, [r0, #0]
	battery_serv->serv_uuid.uuid[0] = (uint8_t) BAT_SERVICE_UUID;
10009a42:	210f      	movs	r1, #15
10009a44:	7041      	strb	r1, [r0, #1]
	battery_serv->serv_uuid.uuid[1] = (uint8_t) (BAT_SERVICE_UUID >> 8);
10009a46:	3109      	adds	r1, #9
10009a48:	7081      	strb	r1, [r0, #2]
	
	//Battery service characteristic
	battery_serv->serv_chars.char_val_handle = 0;          /* handle stored here */
10009a4a:	8283      	strh	r3, [r0, #20]
	battery_serv->serv_chars.uuid.type = AT_BLE_UUID_16;
10009a4c:	7582      	strb	r2, [r0, #22]
	battery_serv->serv_chars.uuid.uuid[0] = (uint8_t) BAT_CHAR_BAT_LEVEL_UUID;          /* UUID : Manufacturer Name String */
10009a4e:	2419      	movs	r4, #25
10009a50:	75c4      	strb	r4, [r0, #23]
	battery_serv->serv_chars.uuid.uuid[1] = (uint8_t) (BAT_CHAR_BAT_LEVEL_UUID >> 8);          /* UUID : Manufacturer Name String */
10009a52:	3411      	adds	r4, #17
10009a54:	7604      	strb	r4, [r0, #24]
	battery_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
10009a56:	3c18      	subs	r4, #24
10009a58:	8504      	strh	r4, [r0, #40]	; 0x28
	battery_serv->serv_chars.init_value = &battery_init_value;             /* value */
10009a5a:	4c11      	ldr	r4, [pc, #68]	; (10009aa0 <bat_init_service+0x68>)
10009a5c:	62c4      	str	r4, [r0, #44]	; 0x2c
	battery_serv->serv_chars.value_init_len = sizeof(uint8_t);
10009a5e:	2401      	movs	r4, #1
10009a60:	8604      	strh	r4, [r0, #48]	; 0x30
	battery_serv->serv_chars.value_max_len = sizeof(uint8_t);
10009a62:	8644      	strh	r4, [r0, #50]	; 0x32
#if BLE_PAIR_ENABLE
	battery_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR |
10009a64:	2522      	movs	r5, #34	; 0x22
10009a66:	3433      	adds	r4, #51	; 0x33
10009a68:	5505      	strb	r5, [r0, r4]
												 AT_BLE_ATTR_WRITABLE_REQ_AUTHN_NO_AUTHR);   /* permissions */
#else
	battery_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR |
												 AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
#endif
	battery_serv->serv_chars.user_desc = NULL;           /* user defined name */
10009a6a:	6383      	str	r3, [r0, #56]	; 0x38
	battery_serv->serv_chars.user_desc_len = 0;
10009a6c:	8783      	strh	r3, [r0, #60]	; 0x3c
	battery_serv->serv_chars.user_desc_max_len = 0;
10009a6e:	87c3      	strh	r3, [r0, #62]	; 0x3e
	battery_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
10009a70:	3410      	adds	r4, #16
10009a72:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
10009a74:	3401      	adds	r4, #1
10009a76:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
10009a78:	3401      	adds	r4, #1
10009a7a:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.user_desc_handle = 0;             /*user desc handles*/
10009a7c:	3402      	adds	r4, #2
10009a7e:	5303      	strh	r3, [r0, r4]
	battery_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
10009a80:	3402      	adds	r4, #2
10009a82:	5303      	strh	r3, [r0, r4]
	battery_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
10009a84:	3402      	adds	r4, #2
10009a86:	5303      	strh	r3, [r0, r4]
	
	presentation_format.format = AT_BLE_PRES_FORMAT_UINT8;
10009a88:	4b06      	ldr	r3, [pc, #24]	; (10009aa4 <bat_init_service+0x6c>)
10009a8a:	3c48      	subs	r4, #72	; 0x48
10009a8c:	701c      	strb	r4, [r3, #0]
	presentation_format.exponent = BAT_CHAR_PRESENTATION_FORMAT_EXPONENT;
10009a8e:	705a      	strb	r2, [r3, #1]
	presentation_format.unit = (uint8_t) BAT_CHAR_PRESENTATION_FORMAT_UNIT;
	presentation_format.unit = (uint8_t) (BAT_CHAR_PRESENTATION_FORMAT_UNIT >> 8);
10009a90:	8059      	strh	r1, [r3, #2]
	presentation_format.name_space = BAT_CHAR_PRESENTATION_FORMAT_NAMESPACE;
10009a92:	2201      	movs	r2, #1
10009a94:	711a      	strb	r2, [r3, #4]
	presentation_format.description = (uint8_t) BAT_CHAR_PRESENTATION_FORMAT_DESCRIPTOR;
	presentation_format.description = (uint8_t) (BAT_CHAR_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
10009a96:	2210      	movs	r2, #16
10009a98:	80da      	strh	r2, [r3, #6]
	
	battery_serv->serv_chars.presentation_format = &presentation_format;       /* presentation format */
10009a9a:	6403      	str	r3, [r0, #64]	; 0x40
	ALL_UNUSED(battery_value);
}
10009a9c:	bd30      	pop	{r4, r5, pc}
10009a9e:	46c0      	nop			; (mov r8, r8)
10009aa0:	100138d0 	.word	0x100138d0
10009aa4:	10015444 	.word	0x10015444

10009aa8 <bat_primary_service_define>:

/**@brief defining a initialized service 
 */
at_ble_status_t bat_primary_service_define(bat_gatt_service_handler_t *battery_service)
{
10009aa8:	b510      	push	{r4, lr}
10009aaa:	b082      	sub	sp, #8
	return(at_ble_primary_service_define(&battery_service->serv_uuid,
10009aac:	0001      	movs	r1, r0
10009aae:	3112      	adds	r1, #18
10009ab0:	2301      	movs	r3, #1
10009ab2:	9301      	str	r3, [sp, #4]
10009ab4:	0003      	movs	r3, r0
10009ab6:	3314      	adds	r3, #20
10009ab8:	9300      	str	r3, [sp, #0]
10009aba:	2300      	movs	r3, #0
10009abc:	2200      	movs	r2, #0
10009abe:	4c02      	ldr	r4, [pc, #8]	; (10009ac8 <bat_primary_service_define+0x20>)
10009ac0:	47a0      	blx	r4
	&battery_service->serv_handle,
	NULL, 0,
	&battery_service->serv_chars, 1));
}
10009ac2:	b002      	add	sp, #8
10009ac4:	bd10      	pop	{r4, pc}
10009ac6:	46c0      	nop			; (mov r8, r8)
10009ac8:	1000d605 	.word	0x1000d605

10009acc <bat_update_char_value>:

/**@brief Function used to update characteristic value
 */
at_ble_status_t bat_update_char_value (at_ble_handle_t conn_handle, bat_gatt_service_handler_t *battery_serv , uint8_t char_data,bool volatile *flag)
{
10009acc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ace:	b083      	sub	sp, #12
10009ad0:	0006      	movs	r6, r0
10009ad2:	000f      	movs	r7, r1
10009ad4:	001d      	movs	r5, r3
10009ad6:	466b      	mov	r3, sp
10009ad8:	1dd9      	adds	r1, r3, #7
10009ada:	700a      	strb	r2, [r1, #0]
	at_ble_status_t status = AT_BLE_SUCCESS;
	/* Updating the att data base */
	if ((status = at_ble_characteristic_value_set(battery_serv->serv_chars.char_val_handle, &char_data, sizeof(uint8_t))) != AT_BLE_SUCCESS){
10009adc:	8ab8      	ldrh	r0, [r7, #20]
10009ade:	2201      	movs	r2, #1
10009ae0:	4b12      	ldr	r3, [pc, #72]	; (10009b2c <bat_update_char_value+0x60>)
10009ae2:	4798      	blx	r3
10009ae4:	1e04      	subs	r4, r0, #0
10009ae6:	d008      	beq.n	10009afa <bat_update_char_value+0x2e>
		DBG_LOG("updating the characteristic failed%d",status);
10009ae8:	4811      	ldr	r0, [pc, #68]	; (10009b30 <bat_update_char_value+0x64>)
10009aea:	4b12      	ldr	r3, [pc, #72]	; (10009b34 <bat_update_char_value+0x68>)
10009aec:	4798      	blx	r3
10009aee:	0021      	movs	r1, r4
10009af0:	4811      	ldr	r0, [pc, #68]	; (10009b38 <bat_update_char_value+0x6c>)
10009af2:	4b12      	ldr	r3, [pc, #72]	; (10009b3c <bat_update_char_value+0x70>)
10009af4:	4798      	blx	r3
		return status;
10009af6:	0020      	movs	r0, r4
10009af8:	e016      	b.n	10009b28 <bat_update_char_value+0x5c>
	} else {
		DBG_LOG_DEV("updating the characteristic value is successful");
	}

	if(bat_notification_flag){
10009afa:	4b11      	ldr	r3, [pc, #68]	; (10009b40 <bat_update_char_value+0x74>)
10009afc:	781b      	ldrb	r3, [r3, #0]
			DBG_LOG_DEV("sending notification successful");
			*flag = false;
			return status;
		}
	}
	return status;
10009afe:	2000      	movs	r0, #0
		return status;
	} else {
		DBG_LOG_DEV("updating the characteristic value is successful");
	}

	if(bat_notification_flag){
10009b00:	2b00      	cmp	r3, #0
10009b02:	d011      	beq.n	10009b28 <bat_update_char_value+0x5c>
		/* sending notification to the peer about change in the battery level */ 
		if((status = at_ble_notification_send(conn_handle, battery_serv->serv_chars.char_val_handle)) != AT_BLE_SUCCESS) {
10009b04:	8ab9      	ldrh	r1, [r7, #20]
10009b06:	0030      	movs	r0, r6
10009b08:	4b0e      	ldr	r3, [pc, #56]	; (10009b44 <bat_update_char_value+0x78>)
10009b0a:	4798      	blx	r3
10009b0c:	1e04      	subs	r4, r0, #0
10009b0e:	d008      	beq.n	10009b22 <bat_update_char_value+0x56>
			DBG_LOG("sending notification failed%d",status);
10009b10:	4807      	ldr	r0, [pc, #28]	; (10009b30 <bat_update_char_value+0x64>)
10009b12:	4b08      	ldr	r3, [pc, #32]	; (10009b34 <bat_update_char_value+0x68>)
10009b14:	4798      	blx	r3
10009b16:	0021      	movs	r1, r4
10009b18:	480b      	ldr	r0, [pc, #44]	; (10009b48 <bat_update_char_value+0x7c>)
10009b1a:	4b08      	ldr	r3, [pc, #32]	; (10009b3c <bat_update_char_value+0x70>)
10009b1c:	4798      	blx	r3
			return status;
10009b1e:	0020      	movs	r0, r4
10009b20:	e002      	b.n	10009b28 <bat_update_char_value+0x5c>
		}
		else {
			DBG_LOG_DEV("sending notification successful");
			*flag = false;
10009b22:	2300      	movs	r3, #0
10009b24:	702b      	strb	r3, [r5, #0]
			return status;
10009b26:	2000      	movs	r0, #0
		}
	}
	return status;
}
10009b28:	b003      	add	sp, #12
10009b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b2c:	1000d625 	.word	0x1000d625
10009b30:	10012b00 	.word	0x10012b00
10009b34:	10011835 	.word	0x10011835
10009b38:	10012b04 	.word	0x10012b04
10009b3c:	10011715 	.word	0x10011715
10009b40:	1001397c 	.word	0x1001397c
10009b44:	1000d7c5 	.word	0x1000d7c5
10009b48:	10012b2c 	.word	0x10012b2c

10009b4c <bat_char_changed_event>:
/**@brief function to check the client characteristic configuration value. 
 */
at_ble_status_t bat_char_changed_event(at_ble_handle_t conn_handle, bat_gatt_service_handler_t *battery_service, at_ble_characteristic_changed_t *char_handle, bool volatile *flag)
{
10009b4c:	b570      	push	{r4, r5, r6, lr}
10009b4e:	4c19      	ldr	r4, [pc, #100]	; (10009bb4 <bat_char_changed_event+0x68>)
10009b50:	44a5      	add	sp, r4
10009b52:	0006      	movs	r6, r0
10009b54:	000c      	movs	r4, r1
10009b56:	0011      	movs	r1, r2
10009b58:	001d      	movs	r5, r3
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, char_handle, sizeof(at_ble_characteristic_changed_t));
10009b5a:	4a17      	ldr	r2, [pc, #92]	; (10009bb8 <bat_char_changed_event+0x6c>)
10009b5c:	a801      	add	r0, sp, #4
10009b5e:	4b17      	ldr	r3, [pc, #92]	; (10009bbc <bat_char_changed_event+0x70>)
10009b60:	4798      	blx	r3
	
	if(battery_service->serv_chars.client_config_handle == change_params.char_handle)
10009b62:	234a      	movs	r3, #74	; 0x4a
10009b64:	5ae2      	ldrh	r2, [r4, r3]
10009b66:	ab01      	add	r3, sp, #4
10009b68:	885b      	ldrh	r3, [r3, #2]
		else
		{
			bat_notification_flag = false;			
		}
	}
	return status;
10009b6a:	2000      	movs	r0, #0
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, char_handle, sizeof(at_ble_characteristic_changed_t));
	
	if(battery_service->serv_chars.client_config_handle == change_params.char_handle)
10009b6c:	429a      	cmp	r2, r3
10009b6e:	d11d      	bne.n	10009bac <bat_char_changed_event+0x60>
	{
		if(change_params.char_new_value[0])
10009b70:	ab01      	add	r3, sp, #4
10009b72:	7a1b      	ldrb	r3, [r3, #8]
10009b74:	2b00      	cmp	r3, #0
10009b76:	d015      	beq.n	10009ba4 <bat_char_changed_event+0x58>
		{
			bat_notification_flag = true;
10009b78:	2201      	movs	r2, #1
10009b7a:	4b11      	ldr	r3, [pc, #68]	; (10009bc0 <bat_char_changed_event+0x74>)
10009b7c:	701a      	strb	r2, [r3, #0]
			/* sending notification to the peer about change in the battery level */
			if((status = at_ble_notification_send(conn_handle, battery_service->serv_chars.char_val_handle)) != AT_BLE_SUCCESS) {
10009b7e:	8aa1      	ldrh	r1, [r4, #20]
10009b80:	0030      	movs	r0, r6
10009b82:	4b10      	ldr	r3, [pc, #64]	; (10009bc4 <bat_char_changed_event+0x78>)
10009b84:	4798      	blx	r3
10009b86:	1e04      	subs	r4, r0, #0
10009b88:	d008      	beq.n	10009b9c <bat_char_changed_event+0x50>
				DBG_LOG("sending notification failed%d",status);
10009b8a:	480f      	ldr	r0, [pc, #60]	; (10009bc8 <bat_char_changed_event+0x7c>)
10009b8c:	4b0f      	ldr	r3, [pc, #60]	; (10009bcc <bat_char_changed_event+0x80>)
10009b8e:	4798      	blx	r3
10009b90:	0021      	movs	r1, r4
10009b92:	480f      	ldr	r0, [pc, #60]	; (10009bd0 <bat_char_changed_event+0x84>)
10009b94:	4b0f      	ldr	r3, [pc, #60]	; (10009bd4 <bat_char_changed_event+0x88>)
10009b96:	4798      	blx	r3
				return status;
10009b98:	0020      	movs	r0, r4
10009b9a:	e007      	b.n	10009bac <bat_char_changed_event+0x60>
			}
			else {
				DBG_LOG_DEV("sending notification successful");
				*flag = false;
10009b9c:	2300      	movs	r3, #0
10009b9e:	702b      	strb	r3, [r5, #0]
				return status;
10009ba0:	2000      	movs	r0, #0
10009ba2:	e003      	b.n	10009bac <bat_char_changed_event+0x60>
			}			
		}
		else
		{
			bat_notification_flag = false;			
10009ba4:	2200      	movs	r2, #0
10009ba6:	4b06      	ldr	r3, [pc, #24]	; (10009bc0 <bat_char_changed_event+0x74>)
10009ba8:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
10009baa:	2000      	movs	r0, #0
}
10009bac:	2384      	movs	r3, #132	; 0x84
10009bae:	009b      	lsls	r3, r3, #2
10009bb0:	449d      	add	sp, r3
10009bb2:	bd70      	pop	{r4, r5, r6, pc}
10009bb4:	fffffdf0 	.word	0xfffffdf0
10009bb8:	0000020a 	.word	0x0000020a
10009bbc:	100116f3 	.word	0x100116f3
10009bc0:	1001397c 	.word	0x1001397c
10009bc4:	1000d7c5 	.word	0x1000d7c5
10009bc8:	10012b00 	.word	0x10012b00
10009bcc:	10011835 	.word	0x10011835
10009bd0:	10012b2c 	.word	0x10012b2c
10009bd4:	10011715 	.word	0x10011715

10009bd8 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009bd8:	2000      	movs	r0, #0
10009bda:	4770      	bx	lr

10009bdc <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009bdc:	2000      	movs	r0, #0
10009bde:	4770      	bx	lr

10009be0 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009be0:	78c0      	ldrb	r0, [r0, #3]
10009be2:	2800      	cmp	r0, #0
10009be4:	d000      	beq.n	10009be8 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009be6:	20e2      	movs	r0, #226	; 0xe2
}
10009be8:	4770      	bx	lr
10009bea:	46c0      	nop			; (mov r8, r8)

10009bec <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009bec:	2000      	movs	r0, #0
10009bee:	4770      	bx	lr

10009bf0 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009bf0:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
10009bf2:	7800      	ldrb	r0, [r0, #0]
10009bf4:	2800      	cmp	r0, #0
10009bf6:	d006      	beq.n	10009c06 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009bf8:	4803      	ldr	r0, [pc, #12]	; (10009c08 <ble_scan_report_handler+0x18>)
10009bfa:	4b04      	ldr	r3, [pc, #16]	; (10009c0c <ble_scan_report_handler+0x1c>)
10009bfc:	4798      	blx	r3
10009bfe:	4804      	ldr	r0, [pc, #16]	; (10009c10 <ble_scan_report_handler+0x20>)
10009c00:	4b04      	ldr	r3, [pc, #16]	; (10009c14 <ble_scan_report_handler+0x24>)
10009c02:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009c04:	20e2      	movs	r0, #226	; 0xe2
}
10009c06:	bd10      	pop	{r4, pc}
10009c08:	10012b00 	.word	0x10012b00
10009c0c:	10011835 	.word	0x10011835
10009c10:	10012cbc 	.word	0x10012cbc
10009c14:	10011715 	.word	0x10011715

10009c18 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009c18:	b510      	push	{r4, lr}
10009c1a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009c1c:	78c0      	ldrb	r0, [r0, #3]
10009c1e:	2800      	cmp	r0, #0
10009c20:	d008      	beq.n	10009c34 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009c22:	4805      	ldr	r0, [pc, #20]	; (10009c38 <ble_mtu_changed_cmd_complete_handler+0x20>)
10009c24:	4b05      	ldr	r3, [pc, #20]	; (10009c3c <ble_mtu_changed_cmd_complete_handler+0x24>)
10009c26:	4798      	blx	r3
10009c28:	78a2      	ldrb	r2, [r4, #2]
10009c2a:	8821      	ldrh	r1, [r4, #0]
10009c2c:	4804      	ldr	r0, [pc, #16]	; (10009c40 <ble_mtu_changed_cmd_complete_handler+0x28>)
10009c2e:	4b05      	ldr	r3, [pc, #20]	; (10009c44 <ble_mtu_changed_cmd_complete_handler+0x2c>)
10009c30:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009c32:	20e2      	movs	r0, #226	; 0xe2
}
10009c34:	bd10      	pop	{r4, pc}
10009c36:	46c0      	nop			; (mov r8, r8)
10009c38:	10012b00 	.word	0x10012b00
10009c3c:	10011835 	.word	0x10011835
10009c40:	10012cd0 	.word	0x10012cd0
10009c44:	10011715 	.word	0x10011715

10009c48 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009c4a:	0004      	movs	r4, r0
10009c4c:	4b19      	ldr	r3, [pc, #100]	; (10009cb4 <ble_disconnected_state_handler+0x6c>)
10009c4e:	229b      	movs	r2, #155	; 0x9b
10009c50:	0092      	lsls	r2, r2, #2
10009c52:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009c54:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c56:	2600      	movs	r6, #0
10009c58:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009c5a:	001a      	movs	r2, r3
10009c5c:	3a56      	subs	r2, #86	; 0x56
10009c5e:	8811      	ldrh	r1, [r2, #0]
10009c60:	8822      	ldrh	r2, [r4, #0]
10009c62:	4291      	cmp	r1, r2
10009c64:	d119      	bne.n	10009c9a <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009c66:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009c68:	2a05      	cmp	r2, #5
10009c6a:	d001      	beq.n	10009c70 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009c6c:	2a08      	cmp	r2, #8
10009c6e:	d101      	bne.n	10009c74 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009c70:	7007      	strb	r7, [r0, #0]
10009c72:	e012      	b.n	10009c9a <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009c74:	2a07      	cmp	r2, #7
10009c76:	d80f      	bhi.n	10009c98 <ble_disconnected_state_handler+0x50>
10009c78:	0092      	lsls	r2, r2, #2
10009c7a:	490f      	ldr	r1, [pc, #60]	; (10009cb8 <ble_disconnected_state_handler+0x70>)
10009c7c:	588a      	ldr	r2, [r1, r2]
10009c7e:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c80:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
10009c82:	4a0e      	ldr	r2, [pc, #56]	; (10009cbc <ble_disconnected_state_handler+0x74>)
10009c84:	7812      	ldrb	r2, [r2, #0]
10009c86:	2a00      	cmp	r2, #0
10009c88:	d007      	beq.n	10009c9a <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
10009c8a:	4a0c      	ldr	r2, [pc, #48]	; (10009cbc <ble_disconnected_state_handler+0x74>)
10009c8c:	7812      	ldrb	r2, [r2, #0]
10009c8e:	3a01      	subs	r2, #1
10009c90:	b2d2      	uxtb	r2, r2
10009c92:	490a      	ldr	r1, [pc, #40]	; (10009cbc <ble_disconnected_state_handler+0x74>)
10009c94:	700a      	strb	r2, [r1, #0]
10009c96:	e000      	b.n	10009c9a <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c98:	7006      	strb	r6, [r0, #0]
10009c9a:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c9c:	42ab      	cmp	r3, r5
10009c9e:	d1db      	bne.n	10009c58 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009ca0:	4807      	ldr	r0, [pc, #28]	; (10009cc0 <ble_disconnected_state_handler+0x78>)
10009ca2:	4b08      	ldr	r3, [pc, #32]	; (10009cc4 <ble_disconnected_state_handler+0x7c>)
10009ca4:	4798      	blx	r3
10009ca6:	8822      	ldrh	r2, [r4, #0]
10009ca8:	78a1      	ldrb	r1, [r4, #2]
10009caa:	4807      	ldr	r0, [pc, #28]	; (10009cc8 <ble_disconnected_state_handler+0x80>)
10009cac:	4b07      	ldr	r3, [pc, #28]	; (10009ccc <ble_disconnected_state_handler+0x84>)
10009cae:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009cb0:	2000      	movs	r0, #0
10009cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009cb4:	100154c2 	.word	0x100154c2
10009cb8:	10012b4c 	.word	0x10012b4c
10009cbc:	100156d0 	.word	0x100156d0
10009cc0:	10012b00 	.word	0x10012b00
10009cc4:	10011835 	.word	0x10011835
10009cc8:	10012d08 	.word	0x10012d08
10009ccc:	10011715 	.word	0x10011715

10009cd0 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009cd2:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009cd4:	8801      	ldrh	r1, [r0, #0]
10009cd6:	4b28      	ldr	r3, [pc, #160]	; (10009d78 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009cd8:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009cda:	891a      	ldrh	r2, [r3, #8]
10009cdc:	428a      	cmp	r2, r1
10009cde:	d104      	bne.n	10009cea <ble_encryption_status_change_handler+0x1a>
10009ce0:	001a      	movs	r2, r3
10009ce2:	325e      	adds	r2, #94	; 0x5e
10009ce4:	7812      	ldrb	r2, [r2, #0]
10009ce6:	2a06      	cmp	r2, #6
10009ce8:	d02e      	beq.n	10009d48 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009cea:	3401      	adds	r4, #1
10009cec:	b2e4      	uxtb	r4, r4
10009cee:	337c      	adds	r3, #124	; 0x7c
10009cf0:	2c05      	cmp	r4, #5
10009cf2:	d1f2      	bne.n	10009cda <ble_encryption_status_change_handler+0xa>
10009cf4:	e039      	b.n	10009d6a <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009cf6:	4920      	ldr	r1, [pc, #128]	; (10009d78 <ble_encryption_status_change_handler+0xa8>)
10009cf8:	0163      	lsls	r3, r4, #5
10009cfa:	1b1a      	subs	r2, r3, r4
10009cfc:	0092      	lsls	r2, r2, #2
10009cfe:	188a      	adds	r2, r1, r2
10009d00:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009d02:	0014      	movs	r4, r2
10009d04:	345e      	adds	r4, #94	; 0x5e
10009d06:	2307      	movs	r3, #7
10009d08:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009d0a:	481c      	ldr	r0, [pc, #112]	; (10009d7c <ble_encryption_status_change_handler+0xac>)
10009d0c:	4b1c      	ldr	r3, [pc, #112]	; (10009d80 <ble_encryption_status_change_handler+0xb0>)
10009d0e:	4798      	blx	r3
10009d10:	481c      	ldr	r0, [pc, #112]	; (10009d84 <ble_encryption_status_change_handler+0xb4>)
10009d12:	4b1d      	ldr	r3, [pc, #116]	; (10009d88 <ble_encryption_status_change_handler+0xb8>)
10009d14:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009d16:	25e2      	movs	r5, #226	; 0xe2
10009d18:	e02b      	b.n	10009d72 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009d1a:	4818      	ldr	r0, [pc, #96]	; (10009d7c <ble_encryption_status_change_handler+0xac>)
10009d1c:	4b18      	ldr	r3, [pc, #96]	; (10009d80 <ble_encryption_status_change_handler+0xb0>)
10009d1e:	4798      	blx	r3
10009d20:	481a      	ldr	r0, [pc, #104]	; (10009d8c <ble_encryption_status_change_handler+0xbc>)
10009d22:	4b19      	ldr	r3, [pc, #100]	; (10009d88 <ble_encryption_status_change_handler+0xb8>)
10009d24:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009d26:	4914      	ldr	r1, [pc, #80]	; (10009d78 <ble_encryption_status_change_handler+0xa8>)
10009d28:	0163      	lsls	r3, r4, #5
10009d2a:	1b1a      	subs	r2, r3, r4
10009d2c:	0092      	lsls	r2, r2, #2
10009d2e:	188a      	adds	r2, r1, r2
10009d30:	0010      	movs	r0, r2
10009d32:	305e      	adds	r0, #94	; 0x5e
10009d34:	2708      	movs	r7, #8
10009d36:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009d38:	78f0      	ldrb	r0, [r6, #3]
10009d3a:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009d3c:	78b2      	ldrb	r2, [r6, #2]
10009d3e:	1b1c      	subs	r4, r3, r4
10009d40:	00a4      	lsls	r4, r4, #2
10009d42:	190c      	adds	r4, r1, r4
10009d44:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009d46:	e014      	b.n	10009d72 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009d48:	78b5      	ldrb	r5, [r6, #2]
10009d4a:	2d00      	cmp	r5, #0
10009d4c:	d0e5      	beq.n	10009d1a <ble_encryption_status_change_handler+0x4a>
10009d4e:	e7d2      	b.n	10009cf6 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009d50:	4e0a      	ldr	r6, [pc, #40]	; (10009d7c <ble_encryption_status_change_handler+0xac>)
10009d52:	0030      	movs	r0, r6
10009d54:	4d0a      	ldr	r5, [pc, #40]	; (10009d80 <ble_encryption_status_change_handler+0xb0>)
10009d56:	47a8      	blx	r5
10009d58:	480c      	ldr	r0, [pc, #48]	; (10009d8c <ble_encryption_status_change_handler+0xbc>)
10009d5a:	4c0b      	ldr	r4, [pc, #44]	; (10009d88 <ble_encryption_status_change_handler+0xb8>)
10009d5c:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009d5e:	0030      	movs	r0, r6
10009d60:	47a8      	blx	r5
10009d62:	480b      	ldr	r0, [pc, #44]	; (10009d90 <ble_encryption_status_change_handler+0xc0>)
10009d64:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009d66:	25e2      	movs	r5, #226	; 0xe2
10009d68:	e003      	b.n	10009d72 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009d6a:	78b5      	ldrb	r5, [r6, #2]
10009d6c:	2d00      	cmp	r5, #0
10009d6e:	d1c2      	bne.n	10009cf6 <ble_encryption_status_change_handler+0x26>
10009d70:	e7ee      	b.n	10009d50 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009d72:	0028      	movs	r0, r5
10009d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009d76:	46c0      	nop			; (mov r8, r8)
10009d78:	10015464 	.word	0x10015464
10009d7c:	10012b00 	.word	0x10012b00
10009d80:	10011835 	.word	0x10011835
10009d84:	10012d38 	.word	0x10012d38
10009d88:	10011715 	.word	0x10011715
10009d8c:	10012d4c 	.word	0x10012d4c
10009d90:	10012d70 	.word	0x10012d70

10009d94 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10009d94:	b510      	push	{r4, lr}
10009d96:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009d98:	4b15      	ldr	r3, [pc, #84]	; (10009df0 <ble_scan_info_handler+0x5c>)
10009d9a:	781b      	ldrb	r3, [r3, #0]
10009d9c:	b2db      	uxtb	r3, r3
10009d9e:	2b13      	cmp	r3, #19
10009da0:	d812      	bhi.n	10009dc8 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10009da2:	4c13      	ldr	r4, [pc, #76]	; (10009df0 <ble_scan_info_handler+0x5c>)
10009da4:	7823      	ldrb	r3, [r4, #0]
10009da6:	b2db      	uxtb	r3, r3
10009da8:	0098      	lsls	r0, r3, #2
10009daa:	18c0      	adds	r0, r0, r3
10009dac:	00c0      	lsls	r0, r0, #3
10009dae:	18c3      	adds	r3, r0, r3
10009db0:	4810      	ldr	r0, [pc, #64]	; (10009df4 <ble_scan_info_handler+0x60>)
10009db2:	1818      	adds	r0, r3, r0
10009db4:	2229      	movs	r2, #41	; 0x29
10009db6:	4b10      	ldr	r3, [pc, #64]	; (10009df8 <ble_scan_info_handler+0x64>)
10009db8:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009dba:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
10009dbc:	7823      	ldrb	r3, [r4, #0]
10009dbe:	3301      	adds	r3, #1
10009dc0:	b2db      	uxtb	r3, r3
10009dc2:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
10009dc4:	2300      	movs	r3, #0
10009dc6:	e011      	b.n	10009dec <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009dc8:	480c      	ldr	r0, [pc, #48]	; (10009dfc <ble_scan_info_handler+0x68>)
10009dca:	4b0d      	ldr	r3, [pc, #52]	; (10009e00 <ble_scan_info_handler+0x6c>)
10009dcc:	4798      	blx	r3
10009dce:	480d      	ldr	r0, [pc, #52]	; (10009e04 <ble_scan_info_handler+0x70>)
10009dd0:	4b0d      	ldr	r3, [pc, #52]	; (10009e08 <ble_scan_info_handler+0x74>)
10009dd2:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009dd4:	4b0d      	ldr	r3, [pc, #52]	; (10009e0c <ble_scan_info_handler+0x78>)
10009dd6:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009dd8:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009dda:	2800      	cmp	r0, #0
10009ddc:	d006      	beq.n	10009dec <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
10009dde:	4807      	ldr	r0, [pc, #28]	; (10009dfc <ble_scan_info_handler+0x68>)
10009de0:	4b07      	ldr	r3, [pc, #28]	; (10009e00 <ble_scan_info_handler+0x6c>)
10009de2:	4798      	blx	r3
10009de4:	480a      	ldr	r0, [pc, #40]	; (10009e10 <ble_scan_info_handler+0x7c>)
10009de6:	4b08      	ldr	r3, [pc, #32]	; (10009e08 <ble_scan_info_handler+0x74>)
10009de8:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009dea:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009dec:	0018      	movs	r0, r3
10009dee:	bd10      	pop	{r4, pc}
10009df0:	10014264 	.word	0x10014264
10009df4:	10015748 	.word	0x10015748
10009df8:	100116f3 	.word	0x100116f3
10009dfc:	10012b00 	.word	0x10012b00
10009e00:	10011835 	.word	0x10011835
10009e04:	10012d98 	.word	0x10012d98
10009e08:	10011715 	.word	0x10011715
10009e0c:	1000ce01 	.word	0x1000ce01
10009e10:	10012dd0 	.word	0x10012dd0

10009e14 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009e16:	464f      	mov	r7, r9
10009e18:	4646      	mov	r6, r8
10009e1a:	b4c0      	push	{r6, r7}
10009e1c:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009e1e:	8841      	ldrh	r1, [r0, #2]
10009e20:	4b3a      	ldr	r3, [pc, #232]	; (10009f0c <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e22:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009e24:	891a      	ldrh	r2, [r3, #8]
10009e26:	428a      	cmp	r2, r1
10009e28:	d104      	bne.n	10009e34 <ble_pair_done_handler+0x20>
10009e2a:	001a      	movs	r2, r3
10009e2c:	325e      	adds	r2, #94	; 0x5e
10009e2e:	7812      	ldrb	r2, [r2, #0]
10009e30:	2a03      	cmp	r2, #3
10009e32:	d062      	beq.n	10009efa <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e34:	3401      	adds	r4, #1
10009e36:	b2e4      	uxtb	r4, r4
10009e38:	337c      	adds	r3, #124	; 0x7c
10009e3a:	2c05      	cmp	r4, #5
10009e3c:	d1f2      	bne.n	10009e24 <ble_pair_done_handler+0x10>
10009e3e:	e02b      	b.n	10009e98 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009e40:	0163      	lsls	r3, r4, #5
10009e42:	1b1c      	subs	r4, r3, r4
10009e44:	00a4      	lsls	r4, r4, #2
10009e46:	4b31      	ldr	r3, [pc, #196]	; (10009f0c <ble_pair_done_handler+0xf8>)
10009e48:	191c      	adds	r4, r3, r4
10009e4a:	345e      	adds	r4, #94	; 0x5e
10009e4c:	7823      	ldrb	r3, [r4, #0]
10009e4e:	2b01      	cmp	r3, #1
10009e50:	d913      	bls.n	10009e7a <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
10009e52:	482f      	ldr	r0, [pc, #188]	; (10009f10 <ble_pair_done_handler+0xfc>)
10009e54:	4b2f      	ldr	r3, [pc, #188]	; (10009f14 <ble_pair_done_handler+0x100>)
10009e56:	4798      	blx	r3
10009e58:	482f      	ldr	r0, [pc, #188]	; (10009f18 <ble_pair_done_handler+0x104>)
10009e5a:	4b30      	ldr	r3, [pc, #192]	; (10009f1c <ble_pair_done_handler+0x108>)
10009e5c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009e5e:	8868      	ldrh	r0, [r5, #2]
10009e60:	2113      	movs	r1, #19
10009e62:	4b2f      	ldr	r3, [pc, #188]	; (10009f20 <ble_pair_done_handler+0x10c>)
10009e64:	4798      	blx	r3
10009e66:	1e06      	subs	r6, r0, #0
10009e68:	d04b      	beq.n	10009f02 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
10009e6a:	4829      	ldr	r0, [pc, #164]	; (10009f10 <ble_pair_done_handler+0xfc>)
10009e6c:	4b29      	ldr	r3, [pc, #164]	; (10009f14 <ble_pair_done_handler+0x100>)
10009e6e:	4798      	blx	r3
10009e70:	482c      	ldr	r0, [pc, #176]	; (10009f24 <ble_pair_done_handler+0x110>)
10009e72:	4b2a      	ldr	r3, [pc, #168]	; (10009f1c <ble_pair_done_handler+0x108>)
10009e74:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009e76:	26e2      	movs	r6, #226	; 0xe2
10009e78:	e043      	b.n	10009f02 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009e7a:	2600      	movs	r6, #0
10009e7c:	e041      	b.n	10009f02 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009e7e:	4e24      	ldr	r6, [pc, #144]	; (10009f10 <ble_pair_done_handler+0xfc>)
10009e80:	0030      	movs	r0, r6
10009e82:	4d24      	ldr	r5, [pc, #144]	; (10009f14 <ble_pair_done_handler+0x100>)
10009e84:	47a8      	blx	r5
10009e86:	4828      	ldr	r0, [pc, #160]	; (10009f28 <ble_pair_done_handler+0x114>)
10009e88:	4c24      	ldr	r4, [pc, #144]	; (10009f1c <ble_pair_done_handler+0x108>)
10009e8a:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009e8c:	0030      	movs	r0, r6
10009e8e:	47a8      	blx	r5
10009e90:	4826      	ldr	r0, [pc, #152]	; (10009f2c <ble_pair_done_handler+0x118>)
10009e92:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009e94:	26e2      	movs	r6, #226	; 0xe2
10009e96:	e034      	b.n	10009f02 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009e98:	792b      	ldrb	r3, [r5, #4]
10009e9a:	2b00      	cmp	r3, #0
10009e9c:	d1d0      	bne.n	10009e40 <ble_pair_done_handler+0x2c>
10009e9e:	e7ee      	b.n	10009e7e <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009ea0:	481b      	ldr	r0, [pc, #108]	; (10009f10 <ble_pair_done_handler+0xfc>)
10009ea2:	4b1c      	ldr	r3, [pc, #112]	; (10009f14 <ble_pair_done_handler+0x100>)
10009ea4:	4798      	blx	r3
10009ea6:	4820      	ldr	r0, [pc, #128]	; (10009f28 <ble_pair_done_handler+0x114>)
10009ea8:	4b1c      	ldr	r3, [pc, #112]	; (10009f1c <ble_pair_done_handler+0x108>)
10009eaa:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009eac:	782a      	ldrb	r2, [r5, #0]
10009eae:	4b17      	ldr	r3, [pc, #92]	; (10009f0c <ble_pair_done_handler+0xf8>)
10009eb0:	4699      	mov	r9, r3
10009eb2:	0167      	lsls	r7, r4, #5
10009eb4:	1b3b      	subs	r3, r7, r4
10009eb6:	009b      	lsls	r3, r3, #2
10009eb8:	444b      	add	r3, r9
10009eba:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009ebc:	792a      	ldrb	r2, [r5, #4]
10009ebe:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009ec0:	335e      	adds	r3, #94	; 0x5e
10009ec2:	2205      	movs	r2, #5
10009ec4:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009ec6:	1b38      	subs	r0, r7, r4
10009ec8:	0080      	lsls	r0, r0, #2
10009eca:	4448      	add	r0, r9
10009ecc:	3036      	adds	r0, #54	; 0x36
10009ece:	0029      	movs	r1, r5
10009ed0:	3122      	adds	r1, #34	; 0x22
10009ed2:	320b      	adds	r2, #11
10009ed4:	4b16      	ldr	r3, [pc, #88]	; (10009f30 <ble_pair_done_handler+0x11c>)
10009ed6:	4698      	mov	r8, r3
10009ed8:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009eda:	1b38      	subs	r0, r7, r4
10009edc:	0080      	lsls	r0, r0, #2
10009ede:	4448      	add	r0, r9
10009ee0:	3046      	adds	r0, #70	; 0x46
10009ee2:	0029      	movs	r1, r5
10009ee4:	3132      	adds	r1, #50	; 0x32
10009ee6:	2217      	movs	r2, #23
10009ee8:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009eea:	1b38      	subs	r0, r7, r4
10009eec:	0080      	lsls	r0, r0, #2
10009eee:	4448      	add	r0, r9
10009ef0:	301a      	adds	r0, #26
10009ef2:	1da9      	adds	r1, r5, #6
10009ef4:	221c      	movs	r2, #28
10009ef6:	47c0      	blx	r8
10009ef8:	e003      	b.n	10009f02 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009efa:	792e      	ldrb	r6, [r5, #4]
10009efc:	2e00      	cmp	r6, #0
10009efe:	d0cf      	beq.n	10009ea0 <ble_pair_done_handler+0x8c>
10009f00:	e79e      	b.n	10009e40 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
10009f02:	0030      	movs	r0, r6
10009f04:	bc0c      	pop	{r2, r3}
10009f06:	4690      	mov	r8, r2
10009f08:	4699      	mov	r9, r3
10009f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f0c:	10015464 	.word	0x10015464
10009f10:	10012b00 	.word	0x10012b00
10009f14:	10011835 	.word	0x10011835
10009f18:	10012de8 	.word	0x10012de8
10009f1c:	10011715 	.word	0x10011715
10009f20:	1000ce21 	.word	0x1000ce21
10009f24:	10012e08 	.word	0x10012e08
10009f28:	10012e24 	.word	0x10012e24
10009f2c:	10012e50 	.word	0x10012e50
10009f30:	100116f3 	.word	0x100116f3

10009f34 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009f34:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009f36:	8800      	ldrh	r0, [r0, #0]
10009f38:	2378      	movs	r3, #120	; 0x78
10009f3a:	2201      	movs	r2, #1
10009f3c:	2101      	movs	r1, #1
10009f3e:	4c02      	ldr	r4, [pc, #8]	; (10009f48 <ble_conn_param_update_req+0x14>)
10009f40:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009f42:	2000      	movs	r0, #0
10009f44:	bd10      	pop	{r4, pc}
10009f46:	46c0      	nop			; (mov r8, r8)
10009f48:	1000cea5 	.word	0x1000cea5

10009f4c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f4e:	4657      	mov	r7, sl
10009f50:	464e      	mov	r6, r9
10009f52:	4645      	mov	r5, r8
10009f54:	b4e0      	push	{r5, r6, r7}
10009f56:	b084      	sub	sp, #16
10009f58:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009f5a:	2209      	movs	r2, #9
10009f5c:	2100      	movs	r1, #0
10009f5e:	a801      	add	r0, sp, #4
10009f60:	4b6b      	ldr	r3, [pc, #428]	; (1000a110 <ble_slave_security_request_handler+0x1c4>)
10009f62:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009f64:	8825      	ldrh	r5, [r4, #0]
10009f66:	496b      	ldr	r1, [pc, #428]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
10009f68:	000a      	movs	r2, r1
10009f6a:	2300      	movs	r3, #0
10009f6c:	8910      	ldrh	r0, [r2, #8]
10009f6e:	42a8      	cmp	r0, r5
10009f70:	d116      	bne.n	10009fa0 <ble_slave_security_request_handler+0x54>
10009f72:	0010      	movs	r0, r2
10009f74:	305e      	adds	r0, #94	; 0x5e
10009f76:	7800      	ldrb	r0, [r0, #0]
10009f78:	2802      	cmp	r0, #2
10009f7a:	d111      	bne.n	10009fa0 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009f7c:	4865      	ldr	r0, [pc, #404]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
10009f7e:	015a      	lsls	r2, r3, #5
10009f80:	1ad6      	subs	r6, r2, r3
10009f82:	00b6      	lsls	r6, r6, #2
10009f84:	1986      	adds	r6, r0, r6
10009f86:	365e      	adds	r6, #94	; 0x5e
10009f88:	2206      	movs	r2, #6
10009f8a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009f8c:	32f9      	adds	r2, #249	; 0xf9
10009f8e:	4013      	ands	r3, r2
10009f90:	015a      	lsls	r2, r3, #5
10009f92:	1ad2      	subs	r2, r2, r3
10009f94:	0092      	lsls	r2, r2, #2
10009f96:	1882      	adds	r2, r0, r2
10009f98:	7d12      	ldrb	r2, [r2, #20]
10009f9a:	07d0      	lsls	r0, r2, #31
10009f9c:	d405      	bmi.n	10009faa <ble_slave_security_request_handler+0x5e>
10009f9e:	e01b      	b.n	10009fd8 <ble_slave_security_request_handler+0x8c>
10009fa0:	3301      	adds	r3, #1
10009fa2:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fa4:	2b05      	cmp	r3, #5
10009fa6:	d1e1      	bne.n	10009f6c <ble_slave_security_request_handler+0x20>
10009fa8:	e01e      	b.n	10009fe8 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009faa:	78e0      	ldrb	r0, [r4, #3]
10009fac:	2800      	cmp	r0, #0
10009fae:	d013      	beq.n	10009fd8 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009fb0:	0159      	lsls	r1, r3, #5
10009fb2:	1ac9      	subs	r1, r1, r3
10009fb4:	008b      	lsls	r3, r1, #2
10009fb6:	4957      	ldr	r1, [pc, #348]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
10009fb8:	18c9      	adds	r1, r1, r3
10009fba:	311a      	adds	r1, #26
10009fbc:	8820      	ldrh	r0, [r4, #0]
10009fbe:	4b56      	ldr	r3, [pc, #344]	; (1000a118 <ble_slave_security_request_handler+0x1cc>)
10009fc0:	4798      	blx	r3
10009fc2:	2800      	cmp	r0, #0
10009fc4:	d100      	bne.n	10009fc8 <ble_slave_security_request_handler+0x7c>
10009fc6:	e09d      	b.n	1000a104 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009fc8:	4854      	ldr	r0, [pc, #336]	; (1000a11c <ble_slave_security_request_handler+0x1d0>)
10009fca:	4b55      	ldr	r3, [pc, #340]	; (1000a120 <ble_slave_security_request_handler+0x1d4>)
10009fcc:	4798      	blx	r3
10009fce:	4855      	ldr	r0, [pc, #340]	; (1000a124 <ble_slave_security_request_handler+0x1d8>)
10009fd0:	4b55      	ldr	r3, [pc, #340]	; (1000a128 <ble_slave_security_request_handler+0x1dc>)
10009fd2:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009fd4:	20e2      	movs	r0, #226	; 0xe2
10009fd6:	e095      	b.n	1000a104 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009fd8:	015a      	lsls	r2, r3, #5
10009fda:	1ad3      	subs	r3, r2, r3
10009fdc:	009b      	lsls	r3, r3, #2
10009fde:	4a4d      	ldr	r2, [pc, #308]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
10009fe0:	18d3      	adds	r3, r2, r3
10009fe2:	335e      	adds	r3, #94	; 0x5e
10009fe4:	2202      	movs	r2, #2
10009fe6:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009fe8:	8825      	ldrh	r5, [r4, #0]
10009fea:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fec:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009fee:	0016      	movs	r6, r2
10009ff0:	8908      	ldrh	r0, [r1, #8]
10009ff2:	42a8      	cmp	r0, r5
10009ff4:	d10d      	bne.n	1000a012 <ble_slave_security_request_handler+0xc6>
10009ff6:	0008      	movs	r0, r1
10009ff8:	305e      	adds	r0, #94	; 0x5e
10009ffa:	7800      	ldrb	r0, [r0, #0]
10009ffc:	2802      	cmp	r0, #2
10009ffe:	d108      	bne.n	1000a012 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a000:	0152      	lsls	r2, r2, #5
1000a002:	1b92      	subs	r2, r2, r6
1000a004:	0096      	lsls	r6, r2, #2
1000a006:	4a43      	ldr	r2, [pc, #268]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
1000a008:	1992      	adds	r2, r2, r6
1000a00a:	325e      	adds	r2, #94	; 0x5e
1000a00c:	2103      	movs	r1, #3
1000a00e:	7011      	strb	r1, [r2, #0]
			break;
1000a010:	e005      	b.n	1000a01e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a012:	3301      	adds	r3, #1
1000a014:	b2db      	uxtb	r3, r3
1000a016:	3201      	adds	r2, #1
1000a018:	317c      	adds	r1, #124	; 0x7c
1000a01a:	2b05      	cmp	r3, #5
1000a01c:	d1e7      	bne.n	10009fee <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a01e:	aa01      	add	r2, sp, #4
1000a020:	2102      	movs	r1, #2
1000a022:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
1000a024:	78e1      	ldrb	r1, [r4, #3]
1000a026:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a028:	2101      	movs	r1, #1
1000a02a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a02c:	3103      	adds	r1, #3
1000a02e:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a030:	001f      	movs	r7, r3
1000a032:	015a      	lsls	r2, r3, #5
1000a034:	1ad2      	subs	r2, r2, r3
1000a036:	0092      	lsls	r2, r2, #2
1000a038:	4936      	ldr	r1, [pc, #216]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
1000a03a:	5c52      	ldrb	r2, [r2, r1]
1000a03c:	2a02      	cmp	r2, #2
1000a03e:	d104      	bne.n	1000a04a <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a040:	aa01      	add	r2, sp, #4
1000a042:	2103      	movs	r1, #3
1000a044:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a046:	71d1      	strb	r1, [r2, #7]
1000a048:	e003      	b.n	1000a052 <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a04a:	aa01      	add	r2, sp, #4
1000a04c:	2101      	movs	r1, #1
1000a04e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a050:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a052:	aa01      	add	r2, sp, #4
1000a054:	2110      	movs	r1, #16
1000a056:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a058:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a05a:	017a      	lsls	r2, r7, #5
1000a05c:	1bd2      	subs	r2, r2, r7
1000a05e:	0092      	lsls	r2, r2, #2
1000a060:	492c      	ldr	r1, [pc, #176]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
1000a062:	188a      	adds	r2, r1, r2
1000a064:	7e12      	ldrb	r2, [r2, #24]
1000a066:	2a40      	cmp	r2, #64	; 0x40
1000a068:	d134      	bne.n	1000a0d4 <ble_slave_security_request_handler+0x188>
1000a06a:	015a      	lsls	r2, r3, #5
1000a06c:	1ad3      	subs	r3, r2, r3
1000a06e:	009b      	lsls	r3, r3, #2
1000a070:	469a      	mov	sl, r3
1000a072:	001e      	movs	r6, r3
1000a074:	3660      	adds	r6, #96	; 0x60
1000a076:	1876      	adds	r6, r6, r1
1000a078:	4655      	mov	r5, sl
1000a07a:	3568      	adds	r5, #104	; 0x68
1000a07c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a07e:	4b2b      	ldr	r3, [pc, #172]	; (1000a12c <ble_slave_security_request_handler+0x1e0>)
1000a080:	4699      	mov	r9, r3
1000a082:	230f      	movs	r3, #15
1000a084:	4698      	mov	r8, r3
1000a086:	47c8      	blx	r9
1000a088:	4643      	mov	r3, r8
1000a08a:	4018      	ands	r0, r3
1000a08c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a08e:	47c8      	blx	r9
1000a090:	4643      	mov	r3, r8
1000a092:	4018      	ands	r0, r3
1000a094:	74b0      	strb	r0, [r6, #18]
1000a096:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a098:	42ae      	cmp	r6, r5
1000a09a:	d1f4      	bne.n	1000a086 <ble_slave_security_request_handler+0x13a>
1000a09c:	4656      	mov	r6, sl
1000a09e:	3670      	adds	r6, #112	; 0x70
1000a0a0:	4a1c      	ldr	r2, [pc, #112]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
1000a0a2:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a0a4:	4b21      	ldr	r3, [pc, #132]	; (1000a12c <ble_slave_security_request_handler+0x1e0>)
1000a0a6:	4699      	mov	r9, r3
1000a0a8:	230f      	movs	r3, #15
1000a0aa:	4698      	mov	r8, r3
1000a0ac:	47c8      	blx	r9
1000a0ae:	4643      	mov	r3, r8
1000a0b0:	4018      	ands	r0, r3
1000a0b2:	7028      	strb	r0, [r5, #0]
1000a0b4:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a0b6:	42b5      	cmp	r5, r6
1000a0b8:	d1f8      	bne.n	1000a0ac <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a0ba:	4b1c      	ldr	r3, [pc, #112]	; (1000a12c <ble_slave_security_request_handler+0x1e0>)
1000a0bc:	4798      	blx	r3
1000a0be:	017b      	lsls	r3, r7, #5
1000a0c0:	1bdb      	subs	r3, r3, r7
1000a0c2:	009b      	lsls	r3, r3, #2
1000a0c4:	4a13      	ldr	r2, [pc, #76]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
1000a0c6:	18d3      	adds	r3, r2, r3
1000a0c8:	001a      	movs	r2, r3
1000a0ca:	3270      	adds	r2, #112	; 0x70
1000a0cc:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a0ce:	337a      	adds	r3, #122	; 0x7a
1000a0d0:	2210      	movs	r2, #16
1000a0d2:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a0d4:	017a      	lsls	r2, r7, #5
1000a0d6:	1bd7      	subs	r7, r2, r7
1000a0d8:	00bf      	lsls	r7, r7, #2
1000a0da:	3760      	adds	r7, #96	; 0x60
1000a0dc:	4a0d      	ldr	r2, [pc, #52]	; (1000a114 <ble_slave_security_request_handler+0x1c8>)
1000a0de:	18ba      	adds	r2, r7, r2
1000a0e0:	8820      	ldrh	r0, [r4, #0]
1000a0e2:	2300      	movs	r3, #0
1000a0e4:	a901      	add	r1, sp, #4
1000a0e6:	4c12      	ldr	r4, [pc, #72]	; (1000a130 <ble_slave_security_request_handler+0x1e4>)
1000a0e8:	47a0      	blx	r4
1000a0ea:	2800      	cmp	r0, #0
1000a0ec:	d00a      	beq.n	1000a104 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000a0ee:	ab01      	add	r3, sp, #4
1000a0f0:	2200      	movs	r2, #0
1000a0f2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a0f4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a0f6:	4809      	ldr	r0, [pc, #36]	; (1000a11c <ble_slave_security_request_handler+0x1d0>)
1000a0f8:	4b09      	ldr	r3, [pc, #36]	; (1000a120 <ble_slave_security_request_handler+0x1d4>)
1000a0fa:	4798      	blx	r3
1000a0fc:	480d      	ldr	r0, [pc, #52]	; (1000a134 <ble_slave_security_request_handler+0x1e8>)
1000a0fe:	4b0a      	ldr	r3, [pc, #40]	; (1000a128 <ble_slave_security_request_handler+0x1dc>)
1000a100:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a102:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a104:	b004      	add	sp, #16
1000a106:	bc1c      	pop	{r2, r3, r4}
1000a108:	4690      	mov	r8, r2
1000a10a:	4699      	mov	r9, r3
1000a10c:	46a2      	mov	sl, r4
1000a10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a110:	10011705 	.word	0x10011705
1000a114:	10015464 	.word	0x10015464
1000a118:	1000da8d 	.word	0x1000da8d
1000a11c:	10012b00 	.word	0x10012b00
1000a120:	10011835 	.word	0x10011835
1000a124:	10012e80 	.word	0x10012e80
1000a128:	10011715 	.word	0x10011715
1000a12c:	10011849 	.word	0x10011849
1000a130:	1000d8a1 	.word	0x1000d8a1
1000a134:	10012e98 	.word	0x10012e98

1000a138 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a138:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a13a:	465f      	mov	r7, fp
1000a13c:	4656      	mov	r6, sl
1000a13e:	464d      	mov	r5, r9
1000a140:	4644      	mov	r4, r8
1000a142:	b4f0      	push	{r4, r5, r6, r7}
1000a144:	b085      	sub	sp, #20
1000a146:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a148:	8804      	ldrh	r4, [r0, #0]
1000a14a:	4a49      	ldr	r2, [pc, #292]	; (1000a270 <ble_pair_request_handler+0x138>)
1000a14c:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a14e:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a150:	8910      	ldrh	r0, [r2, #8]
1000a152:	42a0      	cmp	r0, r4
1000a154:	d10d      	bne.n	1000a172 <ble_pair_request_handler+0x3a>
1000a156:	0010      	movs	r0, r2
1000a158:	305e      	adds	r0, #94	; 0x5e
1000a15a:	7800      	ldrb	r0, [r0, #0]
1000a15c:	2802      	cmp	r0, #2
1000a15e:	d108      	bne.n	1000a172 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a160:	014a      	lsls	r2, r1, #5
1000a162:	1a52      	subs	r2, r2, r1
1000a164:	0095      	lsls	r5, r2, #2
1000a166:	4a42      	ldr	r2, [pc, #264]	; (1000a270 <ble_pair_request_handler+0x138>)
1000a168:	1952      	adds	r2, r2, r5
1000a16a:	325e      	adds	r2, #94	; 0x5e
1000a16c:	2103      	movs	r1, #3
1000a16e:	7011      	strb	r1, [r2, #0]
			break;
1000a170:	e005      	b.n	1000a17e <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a172:	3301      	adds	r3, #1
1000a174:	b2db      	uxtb	r3, r3
1000a176:	3101      	adds	r1, #1
1000a178:	327c      	adds	r2, #124	; 0x7c
1000a17a:	2b05      	cmp	r3, #5
1000a17c:	d1e8      	bne.n	1000a150 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a17e:	aa01      	add	r2, sp, #4
1000a180:	2102      	movs	r1, #2
1000a182:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a184:	3901      	subs	r1, #1
1000a186:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a188:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a18a:	2100      	movs	r1, #0
1000a18c:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a18e:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a190:	001f      	movs	r7, r3
1000a192:	015a      	lsls	r2, r3, #5
1000a194:	1ad2      	subs	r2, r2, r3
1000a196:	0092      	lsls	r2, r2, #2
1000a198:	4935      	ldr	r1, [pc, #212]	; (1000a270 <ble_pair_request_handler+0x138>)
1000a19a:	5c52      	ldrb	r2, [r2, r1]
1000a19c:	2a02      	cmp	r2, #2
1000a19e:	d104      	bne.n	1000a1aa <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a1a0:	aa01      	add	r2, sp, #4
1000a1a2:	2103      	movs	r1, #3
1000a1a4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a1a6:	71d1      	strb	r1, [r2, #7]
1000a1a8:	e003      	b.n	1000a1b2 <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a1aa:	aa01      	add	r2, sp, #4
1000a1ac:	2101      	movs	r1, #1
1000a1ae:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a1b0:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a1b2:	aa01      	add	r2, sp, #4
1000a1b4:	2110      	movs	r1, #16
1000a1b6:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a1b8:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a1ba:	017a      	lsls	r2, r7, #5
1000a1bc:	1bd2      	subs	r2, r2, r7
1000a1be:	0092      	lsls	r2, r2, #2
1000a1c0:	492b      	ldr	r1, [pc, #172]	; (1000a270 <ble_pair_request_handler+0x138>)
1000a1c2:	188a      	adds	r2, r1, r2
1000a1c4:	7e12      	ldrb	r2, [r2, #24]
1000a1c6:	2a40      	cmp	r2, #64	; 0x40
1000a1c8:	d131      	bne.n	1000a22e <ble_pair_request_handler+0xf6>
1000a1ca:	015a      	lsls	r2, r3, #5
1000a1cc:	1ad3      	subs	r3, r2, r3
1000a1ce:	009b      	lsls	r3, r3, #2
1000a1d0:	469a      	mov	sl, r3
1000a1d2:	001d      	movs	r5, r3
1000a1d4:	3560      	adds	r5, #96	; 0x60
1000a1d6:	186d      	adds	r5, r5, r1
1000a1d8:	4654      	mov	r4, sl
1000a1da:	3468      	adds	r4, #104	; 0x68
1000a1dc:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a1de:	4b25      	ldr	r3, [pc, #148]	; (1000a274 <ble_pair_request_handler+0x13c>)
1000a1e0:	4699      	mov	r9, r3
1000a1e2:	260f      	movs	r6, #15
1000a1e4:	47c8      	blx	r9
1000a1e6:	4030      	ands	r0, r6
1000a1e8:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a1ea:	47c8      	blx	r9
1000a1ec:	4030      	ands	r0, r6
1000a1ee:	74a8      	strb	r0, [r5, #18]
1000a1f0:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a1f2:	42a5      	cmp	r5, r4
1000a1f4:	d1f6      	bne.n	1000a1e4 <ble_pair_request_handler+0xac>
1000a1f6:	4655      	mov	r5, sl
1000a1f8:	3570      	adds	r5, #112	; 0x70
1000a1fa:	4a1d      	ldr	r2, [pc, #116]	; (1000a270 <ble_pair_request_handler+0x138>)
1000a1fc:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a1fe:	4b1d      	ldr	r3, [pc, #116]	; (1000a274 <ble_pair_request_handler+0x13c>)
1000a200:	4699      	mov	r9, r3
1000a202:	230f      	movs	r3, #15
1000a204:	4698      	mov	r8, r3
1000a206:	47c8      	blx	r9
1000a208:	4643      	mov	r3, r8
1000a20a:	4018      	ands	r0, r3
1000a20c:	7020      	strb	r0, [r4, #0]
1000a20e:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a210:	42ac      	cmp	r4, r5
1000a212:	d1f8      	bne.n	1000a206 <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a214:	4b17      	ldr	r3, [pc, #92]	; (1000a274 <ble_pair_request_handler+0x13c>)
1000a216:	4798      	blx	r3
1000a218:	017b      	lsls	r3, r7, #5
1000a21a:	1bdb      	subs	r3, r3, r7
1000a21c:	009b      	lsls	r3, r3, #2
1000a21e:	4a14      	ldr	r2, [pc, #80]	; (1000a270 <ble_pair_request_handler+0x138>)
1000a220:	18d3      	adds	r3, r2, r3
1000a222:	001a      	movs	r2, r3
1000a224:	3270      	adds	r2, #112	; 0x70
1000a226:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a228:	337a      	adds	r3, #122	; 0x7a
1000a22a:	2210      	movs	r2, #16
1000a22c:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a22e:	017a      	lsls	r2, r7, #5
1000a230:	1bd7      	subs	r7, r2, r7
1000a232:	00bf      	lsls	r7, r7, #2
1000a234:	3760      	adds	r7, #96	; 0x60
1000a236:	4a0e      	ldr	r2, [pc, #56]	; (1000a270 <ble_pair_request_handler+0x138>)
1000a238:	18ba      	adds	r2, r7, r2
1000a23a:	465b      	mov	r3, fp
1000a23c:	8818      	ldrh	r0, [r3, #0]
1000a23e:	2300      	movs	r3, #0
1000a240:	a901      	add	r1, sp, #4
1000a242:	4c0d      	ldr	r4, [pc, #52]	; (1000a278 <ble_pair_request_handler+0x140>)
1000a244:	47a0      	blx	r4
1000a246:	2800      	cmp	r0, #0
1000a248:	d00a      	beq.n	1000a260 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000a24a:	ab01      	add	r3, sp, #4
1000a24c:	2200      	movs	r2, #0
1000a24e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a250:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a252:	480a      	ldr	r0, [pc, #40]	; (1000a27c <ble_pair_request_handler+0x144>)
1000a254:	4b0a      	ldr	r3, [pc, #40]	; (1000a280 <ble_pair_request_handler+0x148>)
1000a256:	4798      	blx	r3
1000a258:	480a      	ldr	r0, [pc, #40]	; (1000a284 <ble_pair_request_handler+0x14c>)
1000a25a:	4b0b      	ldr	r3, [pc, #44]	; (1000a288 <ble_pair_request_handler+0x150>)
1000a25c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a25e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a260:	b005      	add	sp, #20
1000a262:	bc3c      	pop	{r2, r3, r4, r5}
1000a264:	4690      	mov	r8, r2
1000a266:	4699      	mov	r9, r3
1000a268:	46a2      	mov	sl, r4
1000a26a:	46ab      	mov	fp, r5
1000a26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a26e:	46c0      	nop			; (mov r8, r8)
1000a270:	10015464 	.word	0x10015464
1000a274:	10011849 	.word	0x10011849
1000a278:	1000d8a1 	.word	0x1000d8a1
1000a27c:	10012b00 	.word	0x10012b00
1000a280:	10011835 	.word	0x10011835
1000a284:	10012ec4 	.word	0x10012ec4
1000a288:	10011715 	.word	0x10011715

1000a28c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a28c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a28e:	b085      	sub	sp, #20
1000a290:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a292:	2206      	movs	r2, #6
1000a294:	493d      	ldr	r1, [pc, #244]	; (1000a38c <ble_pair_key_request_handler+0x100>)
1000a296:	a802      	add	r0, sp, #8
1000a298:	4e3d      	ldr	r6, [pc, #244]	; (1000a390 <ble_pair_key_request_handler+0x104>)
1000a29a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a29c:	ac01      	add	r4, sp, #4
1000a29e:	2204      	movs	r2, #4
1000a2a0:	0029      	movs	r1, r5
1000a2a2:	0020      	movs	r0, r4
1000a2a4:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a2a6:	78e3      	ldrb	r3, [r4, #3]
1000a2a8:	2b00      	cmp	r3, #0
1000a2aa:	d162      	bne.n	1000a372 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a2ac:	4839      	ldr	r0, [pc, #228]	; (1000a394 <ble_pair_key_request_handler+0x108>)
1000a2ae:	4b3a      	ldr	r3, [pc, #232]	; (1000a398 <ble_pair_key_request_handler+0x10c>)
1000a2b0:	4798      	blx	r3
1000a2b2:	483a      	ldr	r0, [pc, #232]	; (1000a39c <ble_pair_key_request_handler+0x110>)
1000a2b4:	4b3a      	ldr	r3, [pc, #232]	; (1000a3a0 <ble_pair_key_request_handler+0x114>)
1000a2b6:	4798      	blx	r3
1000a2b8:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a2ba:	4c3a      	ldr	r4, [pc, #232]	; (1000a3a4 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a2bc:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a2be:	201e      	movs	r0, #30
1000a2c0:	47a0      	blx	r4
1000a2c2:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a2c4:	2b00      	cmp	r3, #0
1000a2c6:	d11a      	bne.n	1000a2fe <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a2c8:	4f32      	ldr	r7, [pc, #200]	; (1000a394 <ble_pair_key_request_handler+0x108>)
1000a2ca:	0038      	movs	r0, r7
1000a2cc:	4e32      	ldr	r6, [pc, #200]	; (1000a398 <ble_pair_key_request_handler+0x10c>)
1000a2ce:	47b0      	blx	r6
1000a2d0:	4835      	ldr	r0, [pc, #212]	; (1000a3a8 <ble_pair_key_request_handler+0x11c>)
1000a2d2:	4c33      	ldr	r4, [pc, #204]	; (1000a3a0 <ble_pair_key_request_handler+0x114>)
1000a2d4:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a2d6:	0038      	movs	r0, r7
1000a2d8:	47b0      	blx	r6
1000a2da:	4834      	ldr	r0, [pc, #208]	; (1000a3ac <ble_pair_key_request_handler+0x120>)
1000a2dc:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a2de:	8828      	ldrh	r0, [r5, #0]
1000a2e0:	2113      	movs	r1, #19
1000a2e2:	4b33      	ldr	r3, [pc, #204]	; (1000a3b0 <ble_pair_key_request_handler+0x124>)
1000a2e4:	4798      	blx	r3
1000a2e6:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a2e8:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a2ea:	2b00      	cmp	r3, #0
1000a2ec:	d04c      	beq.n	1000a388 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a2ee:	4829      	ldr	r0, [pc, #164]	; (1000a394 <ble_pair_key_request_handler+0x108>)
1000a2f0:	4b29      	ldr	r3, [pc, #164]	; (1000a398 <ble_pair_key_request_handler+0x10c>)
1000a2f2:	4798      	blx	r3
1000a2f4:	482f      	ldr	r0, [pc, #188]	; (1000a3b4 <ble_pair_key_request_handler+0x128>)
1000a2f6:	4b2a      	ldr	r3, [pc, #168]	; (1000a3a0 <ble_pair_key_request_handler+0x114>)
1000a2f8:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a2fa:	20e2      	movs	r0, #226	; 0xe2
1000a2fc:	e044      	b.n	1000a388 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a2fe:	001a      	movs	r2, r3
1000a300:	3a30      	subs	r2, #48	; 0x30
1000a302:	2a09      	cmp	r2, #9
1000a304:	d8db      	bhi.n	1000a2be <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a306:	aa02      	add	r2, sp, #8
1000a308:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a30a:	4038      	ands	r0, r7
1000a30c:	4b2a      	ldr	r3, [pc, #168]	; (1000a3b8 <ble_pair_key_request_handler+0x12c>)
1000a30e:	4798      	blx	r3
1000a310:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a312:	2e06      	cmp	r6, #6
1000a314:	d026      	beq.n	1000a364 <ble_pair_key_request_handler+0xd8>
1000a316:	e7d2      	b.n	1000a2be <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a318:	481e      	ldr	r0, [pc, #120]	; (1000a394 <ble_pair_key_request_handler+0x108>)
1000a31a:	4b1f      	ldr	r3, [pc, #124]	; (1000a398 <ble_pair_key_request_handler+0x10c>)
1000a31c:	4798      	blx	r3
1000a31e:	4827      	ldr	r0, [pc, #156]	; (1000a3bc <ble_pair_key_request_handler+0x130>)
1000a320:	4b1f      	ldr	r3, [pc, #124]	; (1000a3a0 <ble_pair_key_request_handler+0x114>)
1000a322:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a324:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a326:	4e24      	ldr	r6, [pc, #144]	; (1000a3b8 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a328:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a32a:	5ce0      	ldrb	r0, [r4, r3]
1000a32c:	47b0      	blx	r6
1000a32e:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a330:	2c06      	cmp	r4, #6
1000a332:	d1f9      	bne.n	1000a328 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a334:	ab01      	add	r3, sp, #4
1000a336:	7899      	ldrb	r1, [r3, #2]
1000a338:	8828      	ldrh	r0, [r5, #0]
1000a33a:	aa02      	add	r2, sp, #8
1000a33c:	4b20      	ldr	r3, [pc, #128]	; (1000a3c0 <ble_pair_key_request_handler+0x134>)
1000a33e:	4798      	blx	r3
1000a340:	2800      	cmp	r0, #0
1000a342:	d021      	beq.n	1000a388 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a344:	4813      	ldr	r0, [pc, #76]	; (1000a394 <ble_pair_key_request_handler+0x108>)
1000a346:	4b14      	ldr	r3, [pc, #80]	; (1000a398 <ble_pair_key_request_handler+0x10c>)
1000a348:	4798      	blx	r3
1000a34a:	481e      	ldr	r0, [pc, #120]	; (1000a3c4 <ble_pair_key_request_handler+0x138>)
1000a34c:	4b14      	ldr	r3, [pc, #80]	; (1000a3a0 <ble_pair_key_request_handler+0x114>)
1000a34e:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a350:	2000      	movs	r0, #0
1000a352:	e019      	b.n	1000a388 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a354:	480f      	ldr	r0, [pc, #60]	; (1000a394 <ble_pair_key_request_handler+0x108>)
1000a356:	4b10      	ldr	r3, [pc, #64]	; (1000a398 <ble_pair_key_request_handler+0x10c>)
1000a358:	4798      	blx	r3
1000a35a:	481b      	ldr	r0, [pc, #108]	; (1000a3c8 <ble_pair_key_request_handler+0x13c>)
1000a35c:	4b10      	ldr	r3, [pc, #64]	; (1000a3a0 <ble_pair_key_request_handler+0x114>)
1000a35e:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a360:	2000      	movs	r0, #0
1000a362:	e011      	b.n	1000a388 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a364:	480b      	ldr	r0, [pc, #44]	; (1000a394 <ble_pair_key_request_handler+0x108>)
1000a366:	4b0c      	ldr	r3, [pc, #48]	; (1000a398 <ble_pair_key_request_handler+0x10c>)
1000a368:	4798      	blx	r3
1000a36a:	4818      	ldr	r0, [pc, #96]	; (1000a3cc <ble_pair_key_request_handler+0x140>)
1000a36c:	4b0c      	ldr	r3, [pc, #48]	; (1000a3a0 <ble_pair_key_request_handler+0x114>)
1000a36e:	4798      	blx	r3
1000a370:	e7d8      	b.n	1000a324 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a372:	ab01      	add	r3, sp, #4
1000a374:	885a      	ldrh	r2, [r3, #2]
1000a376:	2380      	movs	r3, #128	; 0x80
1000a378:	005b      	lsls	r3, r3, #1
1000a37a:	429a      	cmp	r2, r3
1000a37c:	d0cc      	beq.n	1000a318 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a37e:	ab01      	add	r3, sp, #4
1000a380:	789b      	ldrb	r3, [r3, #2]
1000a382:	2b01      	cmp	r3, #1
1000a384:	d0e6      	beq.n	1000a354 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a386:	2000      	movs	r0, #0
}
1000a388:	b005      	add	sp, #20
1000a38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a38c:	10012c78 	.word	0x10012c78
1000a390:	100116f3 	.word	0x100116f3
1000a394:	10012b00 	.word	0x10012b00
1000a398:	10011835 	.word	0x10011835
1000a39c:	10012eec 	.word	0x10012eec
1000a3a0:	10011715 	.word	0x10011715
1000a3a4:	1000b059 	.word	0x1000b059
1000a3a8:	10012f14 	.word	0x10012f14
1000a3ac:	10012f20 	.word	0x10012f20
1000a3b0:	1000ce21 	.word	0x1000ce21
1000a3b4:	10012e08 	.word	0x10012e08
1000a3b8:	10011749 	.word	0x10011749
1000a3bc:	10012f34 	.word	0x10012f34
1000a3c0:	1000d9d1 	.word	0x1000d9d1
1000a3c4:	10012f6c 	.word	0x10012f6c
1000a3c8:	10012f84 	.word	0x10012f84
1000a3cc:	10012fa0 	.word	0x10012fa0

1000a3d0 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a3d2:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a3d4:	8805      	ldrh	r5, [r0, #0]
1000a3d6:	4b2f      	ldr	r3, [pc, #188]	; (1000a494 <ble_encryption_request_handler+0xc4>)
1000a3d8:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3da:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a3dc:	0010      	movs	r0, r2
1000a3de:	8919      	ldrh	r1, [r3, #8]
1000a3e0:	42a9      	cmp	r1, r5
1000a3e2:	d116      	bne.n	1000a412 <ble_encryption_request_handler+0x42>
1000a3e4:	0019      	movs	r1, r3
1000a3e6:	315e      	adds	r1, #94	; 0x5e
1000a3e8:	7809      	ldrb	r1, [r1, #0]
1000a3ea:	2901      	cmp	r1, #1
1000a3ec:	d911      	bls.n	1000a412 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a3ee:	4929      	ldr	r1, [pc, #164]	; (1000a494 <ble_encryption_request_handler+0xc4>)
1000a3f0:	0152      	lsls	r2, r2, #5
1000a3f2:	1a10      	subs	r0, r2, r0
1000a3f4:	0080      	lsls	r0, r0, #2
1000a3f6:	1808      	adds	r0, r1, r0
1000a3f8:	305e      	adds	r0, #94	; 0x5e
1000a3fa:	2306      	movs	r3, #6
1000a3fc:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a3fe:	0162      	lsls	r2, r4, #5
1000a400:	1b13      	subs	r3, r2, r4
1000a402:	009b      	lsls	r3, r3, #2
1000a404:	18cb      	adds	r3, r1, r3
1000a406:	3370      	adds	r3, #112	; 0x70
1000a408:	881a      	ldrh	r2, [r3, #0]
1000a40a:	8873      	ldrh	r3, [r6, #2]
1000a40c:	429a      	cmp	r2, r3
1000a40e:	d113      	bne.n	1000a438 <ble_encryption_request_handler+0x68>
1000a410:	e006      	b.n	1000a420 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a412:	3401      	adds	r4, #1
1000a414:	b2e4      	uxtb	r4, r4
1000a416:	3201      	adds	r2, #1
1000a418:	337c      	adds	r3, #124	; 0x7c
1000a41a:	2c05      	cmp	r4, #5
1000a41c:	d1de      	bne.n	1000a3dc <ble_encryption_request_handler+0xc>
1000a41e:	e00b      	b.n	1000a438 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a420:	0161      	lsls	r1, r4, #5
1000a422:	1b09      	subs	r1, r1, r4
1000a424:	0089      	lsls	r1, r1, #2
1000a426:	4b1b      	ldr	r3, [pc, #108]	; (1000a494 <ble_encryption_request_handler+0xc4>)
1000a428:	1859      	adds	r1, r3, r1
1000a42a:	3172      	adds	r1, #114	; 0x72
1000a42c:	1d30      	adds	r0, r6, #4
1000a42e:	2208      	movs	r2, #8
1000a430:	4b19      	ldr	r3, [pc, #100]	; (1000a498 <ble_encryption_request_handler+0xc8>)
1000a432:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000a434:	2800      	cmp	r0, #0
1000a436:	d015      	beq.n	1000a464 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a438:	4f18      	ldr	r7, [pc, #96]	; (1000a49c <ble_encryption_request_handler+0xcc>)
1000a43a:	0038      	movs	r0, r7
1000a43c:	4e18      	ldr	r6, [pc, #96]	; (1000a4a0 <ble_encryption_request_handler+0xd0>)
1000a43e:	47b0      	blx	r6
1000a440:	4818      	ldr	r0, [pc, #96]	; (1000a4a4 <ble_encryption_request_handler+0xd4>)
1000a442:	4d19      	ldr	r5, [pc, #100]	; (1000a4a8 <ble_encryption_request_handler+0xd8>)
1000a444:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a446:	0038      	movs	r0, r7
1000a448:	47b0      	blx	r6
1000a44a:	4818      	ldr	r0, [pc, #96]	; (1000a4ac <ble_encryption_request_handler+0xdc>)
1000a44c:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a44e:	0163      	lsls	r3, r4, #5
1000a450:	1b1c      	subs	r4, r3, r4
1000a452:	00a4      	lsls	r4, r4, #2
1000a454:	4b0f      	ldr	r3, [pc, #60]	; (1000a494 <ble_encryption_request_handler+0xc4>)
1000a456:	191c      	adds	r4, r3, r4
1000a458:	8920      	ldrh	r0, [r4, #8]
1000a45a:	2105      	movs	r1, #5
1000a45c:	4b14      	ldr	r3, [pc, #80]	; (1000a4b0 <ble_encryption_request_handler+0xe0>)
1000a45e:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a460:	20e2      	movs	r0, #226	; 0xe2
1000a462:	e016      	b.n	1000a492 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a464:	0162      	lsls	r2, r4, #5
1000a466:	1b13      	subs	r3, r2, r4
1000a468:	009b      	lsls	r3, r3, #2
1000a46a:	3360      	adds	r3, #96	; 0x60
1000a46c:	4909      	ldr	r1, [pc, #36]	; (1000a494 <ble_encryption_request_handler+0xc4>)
1000a46e:	185b      	adds	r3, r3, r1
1000a470:	1b14      	subs	r4, r2, r4
1000a472:	00a4      	lsls	r4, r4, #2
1000a474:	190c      	adds	r4, r1, r4
1000a476:	7d21      	ldrb	r1, [r4, #20]
1000a478:	8830      	ldrh	r0, [r6, #0]
1000a47a:	2201      	movs	r2, #1
1000a47c:	4c0d      	ldr	r4, [pc, #52]	; (1000a4b4 <ble_encryption_request_handler+0xe4>)
1000a47e:	47a0      	blx	r4
1000a480:	2800      	cmp	r0, #0
1000a482:	d006      	beq.n	1000a492 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a484:	4805      	ldr	r0, [pc, #20]	; (1000a49c <ble_encryption_request_handler+0xcc>)
1000a486:	4b06      	ldr	r3, [pc, #24]	; (1000a4a0 <ble_encryption_request_handler+0xd0>)
1000a488:	4798      	blx	r3
1000a48a:	480b      	ldr	r0, [pc, #44]	; (1000a4b8 <ble_encryption_request_handler+0xe8>)
1000a48c:	4b06      	ldr	r3, [pc, #24]	; (1000a4a8 <ble_encryption_request_handler+0xd8>)
1000a48e:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a490:	2000      	movs	r0, #0
}
1000a492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a494:	10015464 	.word	0x10015464
1000a498:	100116d5 	.word	0x100116d5
1000a49c:	10012b00 	.word	0x10012b00
1000a4a0:	10011835 	.word	0x10011835
1000a4a4:	10012fb4 	.word	0x10012fb4
1000a4a8:	10011715 	.word	0x10011715
1000a4ac:	10012fec 	.word	0x10012fec
1000a4b0:	1000ce21 	.word	0x1000ce21
1000a4b4:	1000db05 	.word	0x1000db05
1000a4b8:	10013044 	.word	0x10013044

1000a4bc <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a4bc:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a4be:	2a00      	cmp	r2, #0
1000a4c0:	d047      	beq.n	1000a552 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a4c2:	2906      	cmp	r1, #6
1000a4c4:	d847      	bhi.n	1000a556 <ble_mgr_events_callback_handler+0x9a>
1000a4c6:	0089      	lsls	r1, r1, #2
1000a4c8:	4b28      	ldr	r3, [pc, #160]	; (1000a56c <ble_mgr_events_callback_handler+0xb0>)
1000a4ca:	585b      	ldr	r3, [r3, r1]
1000a4cc:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a4ce:	4b28      	ldr	r3, [pc, #160]	; (1000a570 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a4d0:	2405      	movs	r4, #5
1000a4d2:	e00a      	b.n	1000a4ea <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a4d4:	4b27      	ldr	r3, [pc, #156]	; (1000a574 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a4d6:	2401      	movs	r4, #1
			}
			break;
1000a4d8:	e007      	b.n	1000a4ea <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a4da:	4b27      	ldr	r3, [pc, #156]	; (1000a578 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a4dc:	2405      	movs	r4, #5
			}
			break;
1000a4de:	e004      	b.n	1000a4ea <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a4e0:	4b26      	ldr	r3, [pc, #152]	; (1000a57c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a4e2:	2401      	movs	r4, #1
			}
			break;
1000a4e4:	e001      	b.n	1000a4ea <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a4e6:	4b26      	ldr	r3, [pc, #152]	; (1000a580 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a4e8:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a4ea:	2800      	cmp	r0, #0
1000a4ec:	d116      	bne.n	1000a51c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a4ee:	6819      	ldr	r1, [r3, #0]
1000a4f0:	2900      	cmp	r1, #0
1000a4f2:	d10b      	bne.n	1000a50c <ble_mgr_events_callback_handler+0x50>
1000a4f4:	e006      	b.n	1000a504 <ble_mgr_events_callback_handler+0x48>
1000a4f6:	001d      	movs	r5, r3
1000a4f8:	3304      	adds	r3, #4
1000a4fa:	1f18      	subs	r0, r3, #4
1000a4fc:	6800      	ldr	r0, [r0, #0]
1000a4fe:	2800      	cmp	r0, #0
1000a500:	d106      	bne.n	1000a510 <ble_mgr_events_callback_handler+0x54>
1000a502:	e000      	b.n	1000a506 <ble_mgr_events_callback_handler+0x4a>
1000a504:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a506:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a508:	2101      	movs	r1, #1
						break;
1000a50a:	e02c      	b.n	1000a566 <ble_mgr_events_callback_handler+0xaa>
1000a50c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a50e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a510:	3101      	adds	r1, #1
1000a512:	b2c9      	uxtb	r1, r1
1000a514:	42a1      	cmp	r1, r4
1000a516:	d3ee      	bcc.n	1000a4f6 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a518:	2100      	movs	r1, #0
1000a51a:	e024      	b.n	1000a566 <ble_mgr_events_callback_handler+0xaa>
1000a51c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a51e:	2801      	cmp	r0, #1
1000a520:	d121      	bne.n	1000a566 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a522:	6819      	ldr	r1, [r3, #0]
1000a524:	428a      	cmp	r2, r1
1000a526:	d10c      	bne.n	1000a542 <ble_mgr_events_callback_handler+0x86>
1000a528:	e006      	b.n	1000a538 <ble_mgr_events_callback_handler+0x7c>
1000a52a:	001d      	movs	r5, r3
1000a52c:	3304      	adds	r3, #4
1000a52e:	1f18      	subs	r0, r3, #4
1000a530:	6800      	ldr	r0, [r0, #0]
1000a532:	4282      	cmp	r2, r0
1000a534:	d107      	bne.n	1000a546 <ble_mgr_events_callback_handler+0x8a>
1000a536:	e000      	b.n	1000a53a <ble_mgr_events_callback_handler+0x7e>
1000a538:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a53a:	2300      	movs	r3, #0
1000a53c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a53e:	2101      	movs	r1, #1
						break;
1000a540:	e011      	b.n	1000a566 <ble_mgr_events_callback_handler+0xaa>
1000a542:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a544:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a546:	3101      	adds	r1, #1
1000a548:	b2c9      	uxtb	r1, r1
1000a54a:	42a1      	cmp	r1, r4
1000a54c:	d3ed      	bcc.n	1000a52a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a54e:	2100      	movs	r1, #0
1000a550:	e009      	b.n	1000a566 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a552:	2100      	movs	r1, #0
1000a554:	e007      	b.n	1000a566 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a556:	2100      	movs	r1, #0
1000a558:	e005      	b.n	1000a566 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a55a:	4b0a      	ldr	r3, [pc, #40]	; (1000a584 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a55c:	2405      	movs	r4, #5
1000a55e:	e7c4      	b.n	1000a4ea <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a560:	4b09      	ldr	r3, [pc, #36]	; (1000a588 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a562:	2401      	movs	r4, #1
1000a564:	e7c1      	b.n	1000a4ea <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a566:	0008      	movs	r0, r1
1000a568:	bd30      	pop	{r4, r5, pc}
1000a56a:	46c0      	nop			; (mov r8, r8)
1000a56c:	10012b6c 	.word	0x10012b6c
1000a570:	10015450 	.word	0x10015450
1000a574:	1001544c 	.word	0x1001544c
1000a578:	100156d4 	.word	0x100156d4
1000a57c:	10015c88 	.word	0x10015c88
1000a580:	100156e8 	.word	0x100156e8
1000a584:	100156fc 	.word	0x100156fc
1000a588:	10015744 	.word	0x10015744

1000a58c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a58c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a58e:	465f      	mov	r7, fp
1000a590:	4656      	mov	r6, sl
1000a592:	464d      	mov	r5, r9
1000a594:	4644      	mov	r4, r8
1000a596:	b4f0      	push	{r4, r5, r6, r7}
1000a598:	b091      	sub	sp, #68	; 0x44
1000a59a:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a59c:	2400      	movs	r4, #0
1000a59e:	4b7e      	ldr	r3, [pc, #504]	; (1000a798 <ble_device_init+0x20c>)
1000a5a0:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a5a2:	2207      	movs	r2, #7
1000a5a4:	2100      	movs	r1, #0
1000a5a6:	487d      	ldr	r0, [pc, #500]	; (1000a79c <ble_device_init+0x210>)
1000a5a8:	4e7d      	ldr	r6, [pc, #500]	; (1000a7a0 <ble_device_init+0x214>)
1000a5aa:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a5ac:	2212      	movs	r2, #18
1000a5ae:	2100      	movs	r1, #0
1000a5b0:	487c      	ldr	r0, [pc, #496]	; (1000a7a4 <ble_device_init+0x218>)
1000a5b2:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000a5b4:	4a7c      	ldr	r2, [pc, #496]	; (1000a7a8 <ble_device_init+0x21c>)
1000a5b6:	2100      	movs	r1, #0
1000a5b8:	487c      	ldr	r0, [pc, #496]	; (1000a7ac <ble_device_init+0x220>)
1000a5ba:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000a5bc:	4b7c      	ldr	r3, [pc, #496]	; (1000a7b0 <ble_device_init+0x224>)
1000a5be:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a5c0:	22cd      	movs	r2, #205	; 0xcd
1000a5c2:	0092      	lsls	r2, r2, #2
1000a5c4:	2100      	movs	r1, #0
1000a5c6:	487b      	ldr	r0, [pc, #492]	; (1000a7b4 <ble_device_init+0x228>)
1000a5c8:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a5ca:	4b7b      	ldr	r3, [pc, #492]	; (1000a7b8 <ble_device_init+0x22c>)
1000a5cc:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a5ce:	2283      	movs	r2, #131	; 0x83
1000a5d0:	0092      	lsls	r2, r2, #2
1000a5d2:	2100      	movs	r1, #0
1000a5d4:	4879      	ldr	r0, [pc, #484]	; (1000a7bc <ble_device_init+0x230>)
1000a5d6:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a5d8:	4b79      	ldr	r3, [pc, #484]	; (1000a7c0 <ble_device_init+0x234>)
1000a5da:	469b      	mov	fp, r3
1000a5dc:	2380      	movs	r3, #128	; 0x80
1000a5de:	00db      	lsls	r3, r3, #3
1000a5e0:	469a      	mov	sl, r3
1000a5e2:	001a      	movs	r2, r3
1000a5e4:	2100      	movs	r1, #0
1000a5e6:	4658      	mov	r0, fp
1000a5e8:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a5ea:	4b76      	ldr	r3, [pc, #472]	; (1000a7c4 <ble_device_init+0x238>)
1000a5ec:	4699      	mov	r9, r3
1000a5ee:	2380      	movs	r3, #128	; 0x80
1000a5f0:	015b      	lsls	r3, r3, #5
1000a5f2:	4698      	mov	r8, r3
1000a5f4:	001a      	movs	r2, r3
1000a5f6:	2100      	movs	r1, #0
1000a5f8:	4648      	mov	r0, r9
1000a5fa:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a5fc:	4f72      	ldr	r7, [pc, #456]	; (1000a7c8 <ble_device_init+0x23c>)
1000a5fe:	221c      	movs	r2, #28
1000a600:	2100      	movs	r1, #0
1000a602:	0038      	movs	r0, r7
1000a604:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a606:	465b      	mov	r3, fp
1000a608:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a60a:	4653      	mov	r3, sl
1000a60c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a60e:	464b      	mov	r3, r9
1000a610:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a612:	4643      	mov	r3, r8
1000a614:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a616:	4b6d      	ldr	r3, [pc, #436]	; (1000a7cc <ble_device_init+0x240>)
1000a618:	601c      	str	r4, [r3, #0]
1000a61a:	605c      	str	r4, [r3, #4]
1000a61c:	609c      	str	r4, [r3, #8]
1000a61e:	60dc      	str	r4, [r3, #12]
1000a620:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a622:	4b6b      	ldr	r3, [pc, #428]	; (1000a7d0 <ble_device_init+0x244>)
1000a624:	601c      	str	r4, [r3, #0]
1000a626:	605c      	str	r4, [r3, #4]
1000a628:	609c      	str	r4, [r3, #8]
1000a62a:	60dc      	str	r4, [r3, #12]
1000a62c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a62e:	4b69      	ldr	r3, [pc, #420]	; (1000a7d4 <ble_device_init+0x248>)
1000a630:	601c      	str	r4, [r3, #0]
1000a632:	605c      	str	r4, [r3, #4]
1000a634:	609c      	str	r4, [r3, #8]
1000a636:	60dc      	str	r4, [r3, #12]
1000a638:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a63a:	4b67      	ldr	r3, [pc, #412]	; (1000a7d8 <ble_device_init+0x24c>)
1000a63c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a63e:	4b67      	ldr	r3, [pc, #412]	; (1000a7dc <ble_device_init+0x250>)
1000a640:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a642:	4b67      	ldr	r3, [pc, #412]	; (1000a7e0 <ble_device_init+0x254>)
1000a644:	601c      	str	r4, [r3, #0]
1000a646:	605c      	str	r4, [r3, #4]
1000a648:	609c      	str	r4, [r3, #8]
1000a64a:	60dc      	str	r4, [r3, #12]
1000a64c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a64e:	4b65      	ldr	r3, [pc, #404]	; (1000a7e4 <ble_device_init+0x258>)
1000a650:	601c      	str	r4, [r3, #0]
1000a652:	4c65      	ldr	r4, [pc, #404]	; (1000a7e8 <ble_device_init+0x25c>)
1000a654:	239b      	movs	r3, #155	; 0x9b
1000a656:	009b      	lsls	r3, r3, #2
1000a658:	4698      	mov	r8, r3
1000a65a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a65c:	4f50      	ldr	r7, [pc, #320]	; (1000a7a0 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a65e:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a660:	227c      	movs	r2, #124	; 0x7c
1000a662:	2100      	movs	r1, #0
1000a664:	0020      	movs	r0, r4
1000a666:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a668:	0023      	movs	r3, r4
1000a66a:	335e      	adds	r3, #94	; 0x5e
1000a66c:	2200      	movs	r2, #0
1000a66e:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a670:	7626      	strb	r6, [r4, #24]
1000a672:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a674:	45a0      	cmp	r8, r4
1000a676:	d1f3      	bne.n	1000a660 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a678:	4b5c      	ldr	r3, [pc, #368]	; (1000a7ec <ble_device_init+0x260>)
1000a67a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000a67c:	4c52      	ldr	r4, [pc, #328]	; (1000a7c8 <ble_device_init+0x23c>)
1000a67e:	4b4a      	ldr	r3, [pc, #296]	; (1000a7a8 <ble_device_init+0x21c>)
1000a680:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000a682:	4b4a      	ldr	r3, [pc, #296]	; (1000a7ac <ble_device_init+0x220>)
1000a684:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a686:	485a      	ldr	r0, [pc, #360]	; (1000a7f0 <ble_device_init+0x264>)
1000a688:	4b5a      	ldr	r3, [pc, #360]	; (1000a7f4 <ble_device_init+0x268>)
1000a68a:	4798      	blx	r3
1000a68c:	485a      	ldr	r0, [pc, #360]	; (1000a7f8 <ble_device_init+0x26c>)
1000a68e:	4b5b      	ldr	r3, [pc, #364]	; (1000a7fc <ble_device_init+0x270>)
1000a690:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a692:	0020      	movs	r0, r4
1000a694:	4b5a      	ldr	r3, [pc, #360]	; (1000a800 <ble_device_init+0x274>)
1000a696:	4798      	blx	r3
1000a698:	2800      	cmp	r0, #0
1000a69a:	d00b      	beq.n	1000a6b4 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a69c:	4e54      	ldr	r6, [pc, #336]	; (1000a7f0 <ble_device_init+0x264>)
1000a69e:	0030      	movs	r0, r6
1000a6a0:	4d54      	ldr	r5, [pc, #336]	; (1000a7f4 <ble_device_init+0x268>)
1000a6a2:	47a8      	blx	r5
1000a6a4:	4857      	ldr	r0, [pc, #348]	; (1000a804 <ble_device_init+0x278>)
1000a6a6:	4c55      	ldr	r4, [pc, #340]	; (1000a7fc <ble_device_init+0x270>)
1000a6a8:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a6aa:	0030      	movs	r0, r6
1000a6ac:	47a8      	blx	r5
1000a6ae:	4856      	ldr	r0, [pc, #344]	; (1000a808 <ble_device_init+0x27c>)
1000a6b0:	47a0      	blx	r4
1000a6b2:	e7fe      	b.n	1000a6b2 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a6b4:	4a55      	ldr	r2, [pc, #340]	; (1000a80c <ble_device_init+0x280>)
1000a6b6:	2100      	movs	r1, #0
1000a6b8:	2000      	movs	r0, #0
1000a6ba:	4c55      	ldr	r4, [pc, #340]	; (1000a810 <ble_device_init+0x284>)
1000a6bc:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a6be:	4a55      	ldr	r2, [pc, #340]	; (1000a814 <ble_device_init+0x288>)
1000a6c0:	2102      	movs	r1, #2
1000a6c2:	2000      	movs	r0, #0
1000a6c4:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a6c6:	2109      	movs	r1, #9
1000a6c8:	4853      	ldr	r0, [pc, #332]	; (1000a818 <ble_device_init+0x28c>)
1000a6ca:	4b54      	ldr	r3, [pc, #336]	; (1000a81c <ble_device_init+0x290>)
1000a6cc:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a6ce:	2800      	cmp	r0, #0
1000a6d0:	d005      	beq.n	1000a6de <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000a6d2:	4847      	ldr	r0, [pc, #284]	; (1000a7f0 <ble_device_init+0x264>)
1000a6d4:	4b47      	ldr	r3, [pc, #284]	; (1000a7f4 <ble_device_init+0x268>)
1000a6d6:	4798      	blx	r3
1000a6d8:	4851      	ldr	r0, [pc, #324]	; (1000a820 <ble_device_init+0x294>)
1000a6da:	4b48      	ldr	r3, [pc, #288]	; (1000a7fc <ble_device_init+0x270>)
1000a6dc:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a6de:	2207      	movs	r2, #7
1000a6e0:	4950      	ldr	r1, [pc, #320]	; (1000a824 <ble_device_init+0x298>)
1000a6e2:	3108      	adds	r1, #8
1000a6e4:	a804      	add	r0, sp, #16
1000a6e6:	4b50      	ldr	r3, [pc, #320]	; (1000a828 <ble_device_init+0x29c>)
1000a6e8:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a6ea:	2226      	movs	r2, #38	; 0x26
1000a6ec:	2100      	movs	r1, #0
1000a6ee:	a806      	add	r0, sp, #24
1000a6f0:	4b2b      	ldr	r3, [pc, #172]	; (1000a7a0 <ble_device_init+0x214>)
1000a6f2:	4798      	blx	r3
	
	if (addr == NULL)
1000a6f4:	2d00      	cmp	r5, #0
1000a6f6:	d10c      	bne.n	1000a712 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a6f8:	a804      	add	r0, sp, #16
1000a6fa:	4b4c      	ldr	r3, [pc, #304]	; (1000a82c <ble_device_init+0x2a0>)
1000a6fc:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a6fe:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a700:	2800      	cmp	r0, #0
1000a702:	d006      	beq.n	1000a712 <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000a704:	483a      	ldr	r0, [pc, #232]	; (1000a7f0 <ble_device_init+0x264>)
1000a706:	4b3b      	ldr	r3, [pc, #236]	; (1000a7f4 <ble_device_init+0x268>)
1000a708:	4798      	blx	r3
1000a70a:	4849      	ldr	r0, [pc, #292]	; (1000a830 <ble_device_init+0x2a4>)
1000a70c:	4b3b      	ldr	r3, [pc, #236]	; (1000a7fc <ble_device_init+0x270>)
1000a70e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a710:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a712:	4837      	ldr	r0, [pc, #220]	; (1000a7f0 <ble_device_init+0x264>)
1000a714:	4b37      	ldr	r3, [pc, #220]	; (1000a7f4 <ble_device_init+0x268>)
1000a716:	4798      	blx	r3
1000a718:	792b      	ldrb	r3, [r5, #4]
1000a71a:	796a      	ldrb	r2, [r5, #5]
1000a71c:	79a9      	ldrb	r1, [r5, #6]
1000a71e:	7828      	ldrb	r0, [r5, #0]
1000a720:	9003      	str	r0, [sp, #12]
1000a722:	7868      	ldrb	r0, [r5, #1]
1000a724:	9002      	str	r0, [sp, #8]
1000a726:	78a8      	ldrb	r0, [r5, #2]
1000a728:	9001      	str	r0, [sp, #4]
1000a72a:	78e8      	ldrb	r0, [r5, #3]
1000a72c:	9000      	str	r0, [sp, #0]
1000a72e:	4841      	ldr	r0, [pc, #260]	; (1000a834 <ble_device_init+0x2a8>)
1000a730:	4c32      	ldr	r4, [pc, #200]	; (1000a7fc <ble_device_init+0x270>)
1000a732:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a734:	ac06      	add	r4, sp, #24
1000a736:	230a      	movs	r3, #10
1000a738:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a73a:	4b3f      	ldr	r3, [pc, #252]	; (1000a838 <ble_device_init+0x2ac>)
1000a73c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a73e:	2207      	movs	r2, #7
1000a740:	0029      	movs	r1, r5
1000a742:	a807      	add	r0, sp, #28
1000a744:	4b38      	ldr	r3, [pc, #224]	; (1000a828 <ble_device_init+0x29c>)
1000a746:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a748:	2300      	movs	r3, #0
1000a74a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a74c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a74e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a750:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a752:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a754:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a756:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a758:	2380      	movs	r3, #128	; 0x80
1000a75a:	009b      	lsls	r3, r3, #2
1000a75c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a75e:	0020      	movs	r0, r4
1000a760:	4b36      	ldr	r3, [pc, #216]	; (1000a83c <ble_device_init+0x2b0>)
1000a762:	4798      	blx	r3
1000a764:	2800      	cmp	r0, #0
1000a766:	d005      	beq.n	1000a774 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a768:	4821      	ldr	r0, [pc, #132]	; (1000a7f0 <ble_device_init+0x264>)
1000a76a:	4b22      	ldr	r3, [pc, #136]	; (1000a7f4 <ble_device_init+0x268>)
1000a76c:	4798      	blx	r3
1000a76e:	4834      	ldr	r0, [pc, #208]	; (1000a840 <ble_device_init+0x2b4>)
1000a770:	4b22      	ldr	r3, [pc, #136]	; (1000a7fc <ble_device_init+0x270>)
1000a772:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a774:	0028      	movs	r0, r5
1000a776:	4b33      	ldr	r3, [pc, #204]	; (1000a844 <ble_device_init+0x2b8>)
1000a778:	4798      	blx	r3
1000a77a:	2800      	cmp	r0, #0
1000a77c:	d005      	beq.n	1000a78a <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a77e:	481c      	ldr	r0, [pc, #112]	; (1000a7f0 <ble_device_init+0x264>)
1000a780:	4b1c      	ldr	r3, [pc, #112]	; (1000a7f4 <ble_device_init+0x268>)
1000a782:	4798      	blx	r3
1000a784:	4830      	ldr	r0, [pc, #192]	; (1000a848 <ble_device_init+0x2bc>)
1000a786:	4b1d      	ldr	r3, [pc, #116]	; (1000a7fc <ble_device_init+0x270>)
1000a788:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a78a:	b011      	add	sp, #68	; 0x44
1000a78c:	bc3c      	pop	{r2, r3, r4, r5}
1000a78e:	4690      	mov	r8, r2
1000a790:	4699      	mov	r9, r3
1000a792:	46a2      	mov	sl, r4
1000a794:	46ab      	mov	fp, r5
1000a796:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a798:	10014260 	.word	0x10014260
1000a79c:	10014268 	.word	0x10014268
1000a7a0:	10011705 	.word	0x10011705
1000a7a4:	10015710 	.word	0x10015710
1000a7a8:	000004e2 	.word	0x000004e2
1000a7ac:	10013d80 	.word	0x10013d80
1000a7b0:	10014264 	.word	0x10014264
1000a7b4:	10015748 	.word	0x10015748
1000a7b8:	10015740 	.word	0x10015740
1000a7bc:	10015a7c 	.word	0x10015a7c
1000a7c0:	10013980 	.word	0x10013980
1000a7c4:	10014270 	.word	0x10014270
1000a7c8:	10015724 	.word	0x10015724
1000a7cc:	100156e8 	.word	0x100156e8
1000a7d0:	100156fc 	.word	0x100156fc
1000a7d4:	10015450 	.word	0x10015450
1000a7d8:	10015744 	.word	0x10015744
1000a7dc:	1001544c 	.word	0x1001544c
1000a7e0:	100156d4 	.word	0x100156d4
1000a7e4:	10015c88 	.word	0x10015c88
1000a7e8:	10015464 	.word	0x10015464
1000a7ec:	100156d0 	.word	0x100156d0
1000a7f0:	10012b00 	.word	0x10012b00
1000a7f4:	10011835 	.word	0x10011835
1000a7f8:	10013064 	.word	0x10013064
1000a7fc:	10011715 	.word	0x10011715
1000a800:	1000ca39 	.word	0x1000ca39
1000a804:	10013078 	.word	0x10013078
1000a808:	10013098 	.word	0x10013098
1000a80c:	100132d0 	.word	0x100132d0
1000a810:	1000a4bd 	.word	0x1000a4bd
1000a814:	10012c94 	.word	0x10012c94
1000a818:	100130d4 	.word	0x100130d4
1000a81c:	1000c951 	.word	0x1000c951
1000a820:	100130e0 	.word	0x100130e0
1000a824:	10012c78 	.word	0x10012c78
1000a828:	100116f3 	.word	0x100116f3
1000a82c:	1000c985 	.word	0x1000c985
1000a830:	100130f8 	.word	0x100130f8
1000a834:	10013110 	.word	0x10013110
1000a838:	00003a98 	.word	0x00003a98
1000a83c:	1000c9a9 	.word	0x1000c9a9
1000a840:	10013148 	.word	0x10013148
1000a844:	1000cbed 	.word	0x1000cbed
1000a848:	1001316c 	.word	0x1001316c

1000a84c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a84c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a84e:	2201      	movs	r2, #1
1000a850:	2101      	movs	r1, #1
1000a852:	4b06      	ldr	r3, [pc, #24]	; (1000a86c <ble_send_slave_sec_request+0x20>)
1000a854:	4798      	blx	r3
1000a856:	2800      	cmp	r0, #0
1000a858:	d006      	beq.n	1000a868 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a85a:	4805      	ldr	r0, [pc, #20]	; (1000a870 <ble_send_slave_sec_request+0x24>)
1000a85c:	4b05      	ldr	r3, [pc, #20]	; (1000a874 <ble_send_slave_sec_request+0x28>)
1000a85e:	4798      	blx	r3
1000a860:	4805      	ldr	r0, [pc, #20]	; (1000a878 <ble_send_slave_sec_request+0x2c>)
1000a862:	4b06      	ldr	r3, [pc, #24]	; (1000a87c <ble_send_slave_sec_request+0x30>)
1000a864:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000a866:	20e2      	movs	r0, #226	; 0xe2
}
1000a868:	bd10      	pop	{r4, pc}
1000a86a:	46c0      	nop			; (mov r8, r8)
1000a86c:	1000da4d 	.word	0x1000da4d
1000a870:	10012b00 	.word	0x10012b00
1000a874:	10011835 	.word	0x10011835
1000a878:	100131a8 	.word	0x100131a8
1000a87c:	10011715 	.word	0x10011715

1000a880 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a880:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a882:	465f      	mov	r7, fp
1000a884:	464e      	mov	r6, r9
1000a886:	4645      	mov	r5, r8
1000a888:	b4e0      	push	{r5, r6, r7}
1000a88a:	b09a      	sub	sp, #104	; 0x68
1000a88c:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a88e:	7a86      	ldrb	r6, [r0, #10]
1000a890:	2e00      	cmp	r6, #0
1000a892:	d000      	beq.n	1000a896 <ble_connected_state_handler+0x16>
1000a894:	e0c6      	b.n	1000aa24 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a896:	4875      	ldr	r0, [pc, #468]	; (1000aa6c <ble_connected_state_handler+0x1ec>)
1000a898:	4f75      	ldr	r7, [pc, #468]	; (1000aa70 <ble_connected_state_handler+0x1f0>)
1000a89a:	47b8      	blx	r7
1000a89c:	792b      	ldrb	r3, [r5, #4]
1000a89e:	796a      	ldrb	r2, [r5, #5]
1000a8a0:	79a9      	ldrb	r1, [r5, #6]
1000a8a2:	7868      	ldrb	r0, [r5, #1]
1000a8a4:	9002      	str	r0, [sp, #8]
1000a8a6:	78a8      	ldrb	r0, [r5, #2]
1000a8a8:	9001      	str	r0, [sp, #4]
1000a8aa:	78e8      	ldrb	r0, [r5, #3]
1000a8ac:	9000      	str	r0, [sp, #0]
1000a8ae:	4871      	ldr	r0, [pc, #452]	; (1000aa74 <ble_connected_state_handler+0x1f4>)
1000a8b0:	4c71      	ldr	r4, [pc, #452]	; (1000aa78 <ble_connected_state_handler+0x1f8>)
1000a8b2:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a8b4:	486d      	ldr	r0, [pc, #436]	; (1000aa6c <ble_connected_state_handler+0x1ec>)
1000a8b6:	47b8      	blx	r7
1000a8b8:	8929      	ldrh	r1, [r5, #8]
1000a8ba:	4870      	ldr	r0, [pc, #448]	; (1000aa7c <ble_connected_state_handler+0x1fc>)
1000a8bc:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a8be:	2212      	movs	r2, #18
1000a8c0:	0029      	movs	r1, r5
1000a8c2:	486f      	ldr	r0, [pc, #444]	; (1000aa80 <ble_connected_state_handler+0x200>)
1000a8c4:	4b6f      	ldr	r3, [pc, #444]	; (1000aa84 <ble_connected_state_handler+0x204>)
1000a8c6:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a8c8:	9504      	str	r5, [sp, #16]
1000a8ca:	2207      	movs	r2, #7
1000a8cc:	0029      	movs	r1, r5
1000a8ce:	486e      	ldr	r0, [pc, #440]	; (1000aa88 <ble_connected_state_handler+0x208>)
1000a8d0:	4b6e      	ldr	r3, [pc, #440]	; (1000aa8c <ble_connected_state_handler+0x20c>)
1000a8d2:	4798      	blx	r3
1000a8d4:	2800      	cmp	r0, #0
1000a8d6:	d100      	bne.n	1000a8da <ble_connected_state_handler+0x5a>
1000a8d8:	e0ad      	b.n	1000aa36 <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a8da:	782b      	ldrb	r3, [r5, #0]
1000a8dc:	2b02      	cmp	r3, #2
1000a8de:	d000      	beq.n	1000a8e2 <ble_connected_state_handler+0x62>
1000a8e0:	e0a9      	b.n	1000aa36 <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a8e2:	2250      	movs	r2, #80	; 0x50
1000a8e4:	2100      	movs	r1, #0
1000a8e6:	a806      	add	r0, sp, #24
1000a8e8:	4b69      	ldr	r3, [pc, #420]	; (1000aa90 <ble_connected_state_handler+0x210>)
1000a8ea:	4798      	blx	r3
1000a8ec:	4f69      	ldr	r7, [pc, #420]	; (1000aa94 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a8ee:	2300      	movs	r3, #0
1000a8f0:	e00b      	b.n	1000a90a <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a8f2:	1c59      	adds	r1, r3, #1
1000a8f4:	7814      	ldrb	r4, [r2, #0]
1000a8f6:	a806      	add	r0, sp, #24
1000a8f8:	54c4      	strb	r4, [r0, r3]
1000a8fa:	3201      	adds	r2, #1
1000a8fc:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a8fe:	42b3      	cmp	r3, r6
1000a900:	d1f7      	bne.n	1000a8f2 <ble_connected_state_handler+0x72>
1000a902:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a904:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a906:	2b50      	cmp	r3, #80	; 0x50
1000a908:	d004      	beq.n	1000a914 <ble_connected_state_handler+0x94>
1000a90a:	001e      	movs	r6, r3
1000a90c:	3610      	adds	r6, #16
1000a90e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a910:	003a      	movs	r2, r7
1000a912:	e7ee      	b.n	1000a8f2 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a914:	aa06      	add	r2, sp, #24
1000a916:	0029      	movs	r1, r5
1000a918:	2005      	movs	r0, #5
1000a91a:	4b5f      	ldr	r3, [pc, #380]	; (1000aa98 <ble_connected_state_handler+0x218>)
1000a91c:	4798      	blx	r3
1000a91e:	1e06      	subs	r6, r0, #0
1000a920:	d100      	bne.n	1000a924 <ble_connected_state_handler+0xa4>
1000a922:	e09c      	b.n	1000aa5e <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a924:	4851      	ldr	r0, [pc, #324]	; (1000aa6c <ble_connected_state_handler+0x1ec>)
1000a926:	4b52      	ldr	r3, [pc, #328]	; (1000aa70 <ble_connected_state_handler+0x1f0>)
1000a928:	4798      	blx	r3
1000a92a:	485c      	ldr	r0, [pc, #368]	; (1000aa9c <ble_connected_state_handler+0x21c>)
1000a92c:	4b52      	ldr	r3, [pc, #328]	; (1000aa78 <ble_connected_state_handler+0x1f8>)
1000a92e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a930:	26e2      	movs	r6, #226	; 0xe2
1000a932:	e094      	b.n	1000aa5e <ble_connected_state_handler+0x1de>
1000a934:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a936:	9405      	str	r4, [sp, #20]
1000a938:	2207      	movs	r2, #7
1000a93a:	9904      	ldr	r1, [sp, #16]
1000a93c:	4648      	mov	r0, r9
1000a93e:	47d8      	blx	fp
1000a940:	2800      	cmp	r0, #0
1000a942:	d109      	bne.n	1000a958 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a944:	9a05      	ldr	r2, [sp, #20]
1000a946:	0153      	lsls	r3, r2, #5
1000a948:	1a9b      	subs	r3, r3, r2
1000a94a:	009a      	lsls	r2, r3, #2
1000a94c:	4b54      	ldr	r3, [pc, #336]	; (1000aaa0 <ble_connected_state_handler+0x220>)
1000a94e:	189b      	adds	r3, r3, r2
1000a950:	335e      	adds	r3, #94	; 0x5e
1000a952:	2202      	movs	r2, #2
1000a954:	701a      	strb	r2, [r3, #0]
1000a956:	e02b      	b.n	1000a9b0 <ble_connected_state_handler+0x130>
1000a958:	3401      	adds	r4, #1
1000a95a:	237c      	movs	r3, #124	; 0x7c
1000a95c:	469c      	mov	ip, r3
1000a95e:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a960:	2c05      	cmp	r4, #5
1000a962:	d1e7      	bne.n	1000a934 <ble_connected_state_handler+0xb4>
1000a964:	e072      	b.n	1000aa4c <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a966:	001c      	movs	r4, r3
1000a968:	7811      	ldrb	r1, [r2, #0]
1000a96a:	2900      	cmp	r1, #0
1000a96c:	d11a      	bne.n	1000a9a4 <ble_connected_state_handler+0x124>
1000a96e:	e001      	b.n	1000a974 <ble_connected_state_handler+0xf4>
1000a970:	2400      	movs	r4, #0
1000a972:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a974:	0163      	lsls	r3, r4, #5
1000a976:	4699      	mov	r9, r3
1000a978:	1b18      	subs	r0, r3, r4
1000a97a:	0080      	lsls	r0, r0, #2
1000a97c:	4b48      	ldr	r3, [pc, #288]	; (1000aaa0 <ble_connected_state_handler+0x220>)
1000a97e:	4698      	mov	r8, r3
1000a980:	4440      	add	r0, r8
1000a982:	2212      	movs	r2, #18
1000a984:	0029      	movs	r1, r5
1000a986:	4b3f      	ldr	r3, [pc, #252]	; (1000aa84 <ble_connected_state_handler+0x204>)
1000a988:	4798      	blx	r3
						ble_device_count++;
1000a98a:	4a46      	ldr	r2, [pc, #280]	; (1000aaa4 <ble_connected_state_handler+0x224>)
1000a98c:	7813      	ldrb	r3, [r2, #0]
1000a98e:	3301      	adds	r3, #1
1000a990:	b2db      	uxtb	r3, r3
1000a992:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a994:	464b      	mov	r3, r9
1000a996:	1b1b      	subs	r3, r3, r4
1000a998:	009b      	lsls	r3, r3, #2
1000a99a:	4443      	add	r3, r8
1000a99c:	335e      	adds	r3, #94	; 0x5e
1000a99e:	2202      	movs	r2, #2
1000a9a0:	701a      	strb	r2, [r3, #0]
						break;
1000a9a2:	e005      	b.n	1000a9b0 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a9a4:	1c79      	adds	r1, r7, #1
1000a9a6:	b2cf      	uxtb	r7, r1
1000a9a8:	3301      	adds	r3, #1
1000a9aa:	327c      	adds	r2, #124	; 0x7c
1000a9ac:	2f05      	cmp	r7, #5
1000a9ae:	d1da      	bne.n	1000a966 <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a9b0:	2207      	movs	r2, #7
1000a9b2:	0029      	movs	r1, r5
1000a9b4:	4834      	ldr	r0, [pc, #208]	; (1000aa88 <ble_connected_state_handler+0x208>)
1000a9b6:	4b35      	ldr	r3, [pc, #212]	; (1000aa8c <ble_connected_state_handler+0x20c>)
1000a9b8:	4798      	blx	r3
1000a9ba:	2800      	cmp	r0, #0
1000a9bc:	d10c      	bne.n	1000a9d8 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a9be:	017b      	lsls	r3, r7, #5
1000a9c0:	1bdb      	subs	r3, r3, r7
1000a9c2:	009b      	lsls	r3, r3, #2
1000a9c4:	4a36      	ldr	r2, [pc, #216]	; (1000aaa0 <ble_connected_state_handler+0x220>)
1000a9c6:	18d3      	adds	r3, r2, r3
1000a9c8:	2205      	movs	r2, #5
1000a9ca:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a9cc:	3202      	adds	r2, #2
1000a9ce:	2100      	movs	r1, #0
1000a9d0:	482d      	ldr	r0, [pc, #180]	; (1000aa88 <ble_connected_state_handler+0x208>)
1000a9d2:	4b2f      	ldr	r3, [pc, #188]	; (1000aa90 <ble_connected_state_handler+0x210>)
1000a9d4:	4798      	blx	r3
1000a9d6:	e042      	b.n	1000aa5e <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a9d8:	4b31      	ldr	r3, [pc, #196]	; (1000aaa0 <ble_connected_state_handler+0x220>)
1000a9da:	4698      	mov	r8, r3
1000a9dc:	017c      	lsls	r4, r7, #5
1000a9de:	1be3      	subs	r3, r4, r7
1000a9e0:	009b      	lsls	r3, r3, #2
1000a9e2:	4443      	add	r3, r8
1000a9e4:	220a      	movs	r2, #10
1000a9e6:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a9e8:	3a03      	subs	r2, #3
1000a9ea:	2100      	movs	r1, #0
1000a9ec:	4826      	ldr	r0, [pc, #152]	; (1000aa88 <ble_connected_state_handler+0x208>)
1000a9ee:	4b28      	ldr	r3, [pc, #160]	; (1000aa90 <ble_connected_state_handler+0x210>)
1000a9f0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a9f2:	1be4      	subs	r4, r4, r7
1000a9f4:	00a4      	lsls	r4, r4, #2
1000a9f6:	4444      	add	r4, r8
1000a9f8:	7ca3      	ldrb	r3, [r4, #18]
1000a9fa:	2b0a      	cmp	r3, #10
1000a9fc:	d12f      	bne.n	1000aa5e <ble_connected_state_handler+0x1de>
1000a9fe:	e00d      	b.n	1000aa1c <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000aa00:	481a      	ldr	r0, [pc, #104]	; (1000aa6c <ble_connected_state_handler+0x1ec>)
1000aa02:	4b1b      	ldr	r3, [pc, #108]	; (1000aa70 <ble_connected_state_handler+0x1f0>)
1000aa04:	4798      	blx	r3
1000aa06:	4b27      	ldr	r3, [pc, #156]	; (1000aaa4 <ble_connected_state_handler+0x224>)
1000aa08:	7819      	ldrb	r1, [r3, #0]
1000aa0a:	b2c9      	uxtb	r1, r1
1000aa0c:	4826      	ldr	r0, [pc, #152]	; (1000aaa8 <ble_connected_state_handler+0x228>)
1000aa0e:	4b1a      	ldr	r3, [pc, #104]	; (1000aa78 <ble_connected_state_handler+0x1f8>)
1000aa10:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000aa12:	8928      	ldrh	r0, [r5, #8]
1000aa14:	2113      	movs	r1, #19
1000aa16:	4b25      	ldr	r3, [pc, #148]	; (1000aaac <ble_connected_state_handler+0x22c>)
1000aa18:	4798      	blx	r3
1000aa1a:	e020      	b.n	1000aa5e <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000aa1c:	8928      	ldrh	r0, [r5, #8]
1000aa1e:	4b24      	ldr	r3, [pc, #144]	; (1000aab0 <ble_connected_state_handler+0x230>)
1000aa20:	4798      	blx	r3
1000aa22:	e01c      	b.n	1000aa5e <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000aa24:	4811      	ldr	r0, [pc, #68]	; (1000aa6c <ble_connected_state_handler+0x1ec>)
1000aa26:	4b12      	ldr	r3, [pc, #72]	; (1000aa70 <ble_connected_state_handler+0x1f0>)
1000aa28:	4798      	blx	r3
1000aa2a:	7aa9      	ldrb	r1, [r5, #10]
1000aa2c:	4821      	ldr	r0, [pc, #132]	; (1000aab4 <ble_connected_state_handler+0x234>)
1000aa2e:	4b12      	ldr	r3, [pc, #72]	; (1000aa78 <ble_connected_state_handler+0x1f8>)
1000aa30:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000aa32:	2600      	movs	r6, #0
1000aa34:	e013      	b.n	1000aa5e <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000aa36:	4b1b      	ldr	r3, [pc, #108]	; (1000aaa4 <ble_connected_state_handler+0x224>)
1000aa38:	781b      	ldrb	r3, [r3, #0]
1000aa3a:	b2db      	uxtb	r3, r3
1000aa3c:	2b04      	cmp	r3, #4
1000aa3e:	d8df      	bhi.n	1000aa00 <ble_connected_state_handler+0x180>
1000aa40:	4b17      	ldr	r3, [pc, #92]	; (1000aaa0 <ble_connected_state_handler+0x220>)
1000aa42:	4699      	mov	r9, r3
1000aa44:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000aa46:	4b11      	ldr	r3, [pc, #68]	; (1000aa8c <ble_connected_state_handler+0x20c>)
1000aa48:	469b      	mov	fp, r3
1000aa4a:	e773      	b.n	1000a934 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aa4c:	235e      	movs	r3, #94	; 0x5e
1000aa4e:	4a14      	ldr	r2, [pc, #80]	; (1000aaa0 <ble_connected_state_handler+0x220>)
1000aa50:	5cd3      	ldrb	r3, [r2, r3]
1000aa52:	2b00      	cmp	r3, #0
1000aa54:	d08c      	beq.n	1000a970 <ble_connected_state_handler+0xf0>
1000aa56:	4a18      	ldr	r2, [pc, #96]	; (1000aab8 <ble_connected_state_handler+0x238>)
1000aa58:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aa5a:	2701      	movs	r7, #1
1000aa5c:	e783      	b.n	1000a966 <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000aa5e:	0030      	movs	r0, r6
1000aa60:	b01a      	add	sp, #104	; 0x68
1000aa62:	bc1c      	pop	{r2, r3, r4}
1000aa64:	4690      	mov	r8, r2
1000aa66:	4699      	mov	r9, r3
1000aa68:	46a3      	mov	fp, r4
1000aa6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa6c:	10012b00 	.word	0x10012b00
1000aa70:	10011835 	.word	0x10011835
1000aa74:	100131c8 	.word	0x100131c8
1000aa78:	10011715 	.word	0x10011715
1000aa7c:	1001320c 	.word	0x1001320c
1000aa80:	10015710 	.word	0x10015710
1000aa84:	100116f3 	.word	0x100116f3
1000aa88:	10014268 	.word	0x10014268
1000aa8c:	100116d5 	.word	0x100116d5
1000aa90:	10011705 	.word	0x10011705
1000aa94:	100154aa 	.word	0x100154aa
1000aa98:	1000ceb1 	.word	0x1000ceb1
1000aa9c:	10013224 	.word	0x10013224
1000aaa0:	10015464 	.word	0x10015464
1000aaa4:	100156d0 	.word	0x100156d0
1000aaa8:	10013248 	.word	0x10013248
1000aaac:	1000ce21 	.word	0x1000ce21
1000aab0:	1000a84d 	.word	0x1000a84d
1000aab4:	10013284 	.word	0x10013284
1000aab8:	1001553e 	.word	0x1001553e

1000aabc <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000aabc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aabe:	4647      	mov	r7, r8
1000aac0:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000aac2:	7803      	ldrb	r3, [r0, #0]
1000aac4:	2b00      	cmp	r3, #0
1000aac6:	d141      	bne.n	1000ab4c <ble_resolv_rand_addr_handler+0x90>
1000aac8:	4d2f      	ldr	r5, [pc, #188]	; (1000ab88 <ble_resolv_rand_addr_handler+0xcc>)
1000aaca:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000aacc:	1c46      	adds	r6, r0, #1
1000aace:	4f2f      	ldr	r7, [pc, #188]	; (1000ab8c <ble_resolv_rand_addr_handler+0xd0>)
1000aad0:	2210      	movs	r2, #16
1000aad2:	0029      	movs	r1, r5
1000aad4:	0030      	movs	r0, r6
1000aad6:	47b8      	blx	r7
1000aad8:	2800      	cmp	r0, #0
1000aada:	d03f      	beq.n	1000ab5c <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aadc:	3401      	adds	r4, #1
1000aade:	b2e4      	uxtb	r4, r4
1000aae0:	357c      	adds	r5, #124	; 0x7c
1000aae2:	2c05      	cmp	r4, #5
1000aae4:	d1f4      	bne.n	1000aad0 <ble_resolv_rand_addr_handler+0x14>
1000aae6:	e031      	b.n	1000ab4c <ble_resolv_rand_addr_handler+0x90>
1000aae8:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aaea:	001c      	movs	r4, r3
1000aaec:	7811      	ldrb	r1, [r2, #0]
1000aaee:	2900      	cmp	r1, #0
1000aaf0:	d122      	bne.n	1000ab38 <ble_resolv_rand_addr_handler+0x7c>
1000aaf2:	e001      	b.n	1000aaf8 <ble_resolv_rand_addr_handler+0x3c>
1000aaf4:	2400      	movs	r4, #0
1000aaf6:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000aaf8:	4b25      	ldr	r3, [pc, #148]	; (1000ab90 <ble_resolv_rand_addr_handler+0xd4>)
1000aafa:	4698      	mov	r8, r3
1000aafc:	0166      	lsls	r6, r4, #5
1000aafe:	1b37      	subs	r7, r6, r4
1000ab00:	00bf      	lsls	r7, r7, #2
1000ab02:	4447      	add	r7, r8
1000ab04:	2212      	movs	r2, #18
1000ab06:	4923      	ldr	r1, [pc, #140]	; (1000ab94 <ble_resolv_rand_addr_handler+0xd8>)
1000ab08:	0038      	movs	r0, r7
1000ab0a:	4b23      	ldr	r3, [pc, #140]	; (1000ab98 <ble_resolv_rand_addr_handler+0xdc>)
1000ab0c:	4798      	blx	r3
				ble_device_count++;
1000ab0e:	4a23      	ldr	r2, [pc, #140]	; (1000ab9c <ble_resolv_rand_addr_handler+0xe0>)
1000ab10:	7813      	ldrb	r3, [r2, #0]
1000ab12:	3301      	adds	r3, #1
1000ab14:	b2db      	uxtb	r3, r3
1000ab16:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ab18:	375e      	adds	r7, #94	; 0x5e
1000ab1a:	2302      	movs	r3, #2
1000ab1c:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ab1e:	1b34      	subs	r4, r6, r4
1000ab20:	00a4      	lsls	r4, r4, #2
1000ab22:	4444      	add	r4, r8
1000ab24:	3308      	adds	r3, #8
1000ab26:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000ab28:	016b      	lsls	r3, r5, #5
1000ab2a:	1b5d      	subs	r5, r3, r5
1000ab2c:	00ad      	lsls	r5, r5, #2
1000ab2e:	4445      	add	r5, r8
1000ab30:	7cab      	ldrb	r3, [r5, #18]
1000ab32:	2b0a      	cmp	r3, #10
1000ab34:	d123      	bne.n	1000ab7e <ble_resolv_rand_addr_handler+0xc2>
1000ab36:	e004      	b.n	1000ab42 <ble_resolv_rand_addr_handler+0x86>
1000ab38:	3301      	adds	r3, #1
1000ab3a:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ab3c:	2b05      	cmp	r3, #5
1000ab3e:	d1d3      	bne.n	1000aae8 <ble_resolv_rand_addr_handler+0x2c>
1000ab40:	e01d      	b.n	1000ab7e <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000ab42:	4b14      	ldr	r3, [pc, #80]	; (1000ab94 <ble_resolv_rand_addr_handler+0xd8>)
1000ab44:	8918      	ldrh	r0, [r3, #8]
1000ab46:	4b16      	ldr	r3, [pc, #88]	; (1000aba0 <ble_resolv_rand_addr_handler+0xe4>)
1000ab48:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000ab4a:	e018      	b.n	1000ab7e <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ab4c:	235e      	movs	r3, #94	; 0x5e
1000ab4e:	4a10      	ldr	r2, [pc, #64]	; (1000ab90 <ble_resolv_rand_addr_handler+0xd4>)
1000ab50:	5cd3      	ldrb	r3, [r2, r3]
1000ab52:	2b00      	cmp	r3, #0
1000ab54:	d0ce      	beq.n	1000aaf4 <ble_resolv_rand_addr_handler+0x38>
1000ab56:	4a13      	ldr	r2, [pc, #76]	; (1000aba4 <ble_resolv_rand_addr_handler+0xe8>)
1000ab58:	2301      	movs	r3, #1
1000ab5a:	e7c5      	b.n	1000aae8 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ab5c:	480c      	ldr	r0, [pc, #48]	; (1000ab90 <ble_resolv_rand_addr_handler+0xd4>)
1000ab5e:	0163      	lsls	r3, r4, #5
1000ab60:	1b1a      	subs	r2, r3, r4
1000ab62:	0092      	lsls	r2, r2, #2
1000ab64:	1882      	adds	r2, r0, r2
1000ab66:	0011      	movs	r1, r2
1000ab68:	315e      	adds	r1, #94	; 0x5e
1000ab6a:	2502      	movs	r5, #2
1000ab6c:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ab6e:	210a      	movs	r1, #10
1000ab70:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ab72:	0010      	movs	r0, r2
1000ab74:	2212      	movs	r2, #18
1000ab76:	4907      	ldr	r1, [pc, #28]	; (1000ab94 <ble_resolv_rand_addr_handler+0xd8>)
1000ab78:	4b07      	ldr	r3, [pc, #28]	; (1000ab98 <ble_resolv_rand_addr_handler+0xdc>)
1000ab7a:	4798      	blx	r3
1000ab7c:	e7e1      	b.n	1000ab42 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000ab7e:	2000      	movs	r0, #0
1000ab80:	bc04      	pop	{r2}
1000ab82:	4690      	mov	r8, r2
1000ab84:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab86:	46c0      	nop			; (mov r8, r8)
1000ab88:	100154aa 	.word	0x100154aa
1000ab8c:	100116d5 	.word	0x100116d5
1000ab90:	10015464 	.word	0x10015464
1000ab94:	10015710 	.word	0x10015710
1000ab98:	100116f3 	.word	0x100116f3
1000ab9c:	100156d0 	.word	0x100156d0
1000aba0:	1000a84d 	.word	0x1000a84d
1000aba4:	1001553e 	.word	0x1001553e

1000aba8 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000abaa:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000abac:	283b      	cmp	r0, #59	; 0x3b
1000abae:	d872      	bhi.n	1000ac96 <ble_event_manager+0xee>
1000abb0:	0083      	lsls	r3, r0, #2
1000abb2:	4a3c      	ldr	r2, [pc, #240]	; (1000aca4 <ble_event_manager+0xfc>)
1000abb4:	58d3      	ldr	r3, [r2, r3]
1000abb6:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abb8:	0084      	lsls	r4, r0, #2
1000abba:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000abbc:	4f3a      	ldr	r7, [pc, #232]	; (1000aca8 <ble_event_manager+0x100>)
1000abbe:	59bb      	ldr	r3, [r7, r6]
1000abc0:	2b00      	cmp	r3, #0
1000abc2:	d004      	beq.n	1000abce <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abc4:	591b      	ldr	r3, [r3, r4]
1000abc6:	2b00      	cmp	r3, #0
1000abc8:	d001      	beq.n	1000abce <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000abca:	0028      	movs	r0, r5
1000abcc:	4798      	blx	r3
1000abce:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000abd0:	2e14      	cmp	r6, #20
1000abd2:	d1f4      	bne.n	1000abbe <ble_event_manager+0x16>
1000abd4:	e065      	b.n	1000aca2 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abd6:	3813      	subs	r0, #19
1000abd8:	b2c4      	uxtb	r4, r0
1000abda:	00a4      	lsls	r4, r4, #2
1000abdc:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000abde:	4f33      	ldr	r7, [pc, #204]	; (1000acac <ble_event_manager+0x104>)
1000abe0:	59bb      	ldr	r3, [r7, r6]
1000abe2:	2b00      	cmp	r3, #0
1000abe4:	d004      	beq.n	1000abf0 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abe6:	591b      	ldr	r3, [r3, r4]
1000abe8:	2b00      	cmp	r3, #0
1000abea:	d001      	beq.n	1000abf0 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000abec:	0028      	movs	r0, r5
1000abee:	4798      	blx	r3
1000abf0:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000abf2:	2e14      	cmp	r6, #20
1000abf4:	d1f4      	bne.n	1000abe0 <ble_event_manager+0x38>
1000abf6:	e054      	b.n	1000aca2 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abf8:	381d      	subs	r0, #29
1000abfa:	b2c4      	uxtb	r4, r0
1000abfc:	00a4      	lsls	r4, r4, #2
1000abfe:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000ac00:	4f2b      	ldr	r7, [pc, #172]	; (1000acb0 <ble_event_manager+0x108>)
1000ac02:	59bb      	ldr	r3, [r7, r6]
1000ac04:	2b00      	cmp	r3, #0
1000ac06:	d004      	beq.n	1000ac12 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac08:	591b      	ldr	r3, [r3, r4]
1000ac0a:	2b00      	cmp	r3, #0
1000ac0c:	d001      	beq.n	1000ac12 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000ac0e:	0028      	movs	r0, r5
1000ac10:	4798      	blx	r3
1000ac12:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000ac14:	2e14      	cmp	r6, #20
1000ac16:	d1f4      	bne.n	1000ac02 <ble_event_manager+0x5a>
1000ac18:	e043      	b.n	1000aca2 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000ac1a:	3827      	subs	r0, #39	; 0x27
1000ac1c:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000ac1e:	4b25      	ldr	r3, [pc, #148]	; (1000acb4 <ble_event_manager+0x10c>)
1000ac20:	681b      	ldr	r3, [r3, #0]
1000ac22:	2b00      	cmp	r3, #0
1000ac24:	d03d      	beq.n	1000aca2 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac26:	0080      	lsls	r0, r0, #2
1000ac28:	58c3      	ldr	r3, [r0, r3]
1000ac2a:	2b00      	cmp	r3, #0
1000ac2c:	d039      	beq.n	1000aca2 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac2e:	0008      	movs	r0, r1
1000ac30:	4798      	blx	r3
1000ac32:	e036      	b.n	1000aca2 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000ac34:	382d      	subs	r0, #45	; 0x2d
1000ac36:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000ac38:	4b1f      	ldr	r3, [pc, #124]	; (1000acb8 <ble_event_manager+0x110>)
1000ac3a:	681b      	ldr	r3, [r3, #0]
1000ac3c:	2b00      	cmp	r3, #0
1000ac3e:	d030      	beq.n	1000aca2 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac40:	0080      	lsls	r0, r0, #2
1000ac42:	58c3      	ldr	r3, [r0, r3]
1000ac44:	2b00      	cmp	r3, #0
1000ac46:	d02c      	beq.n	1000aca2 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac48:	0008      	movs	r0, r1
1000ac4a:	4798      	blx	r3
1000ac4c:	e029      	b.n	1000aca2 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac4e:	3836      	subs	r0, #54	; 0x36
1000ac50:	b2c4      	uxtb	r4, r0
1000ac52:	00a4      	lsls	r4, r4, #2
1000ac54:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000ac56:	4f19      	ldr	r7, [pc, #100]	; (1000acbc <ble_event_manager+0x114>)
1000ac58:	59bb      	ldr	r3, [r7, r6]
1000ac5a:	2b00      	cmp	r3, #0
1000ac5c:	d004      	beq.n	1000ac68 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac5e:	591b      	ldr	r3, [r3, r4]
1000ac60:	2b00      	cmp	r3, #0
1000ac62:	d001      	beq.n	1000ac68 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000ac64:	0028      	movs	r0, r5
1000ac66:	4798      	blx	r3
1000ac68:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000ac6a:	2e14      	cmp	r6, #20
1000ac6c:	d1f4      	bne.n	1000ac58 <ble_event_manager+0xb0>
1000ac6e:	e018      	b.n	1000aca2 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000ac70:	3838      	subs	r0, #56	; 0x38
1000ac72:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000ac74:	4b12      	ldr	r3, [pc, #72]	; (1000acc0 <ble_event_manager+0x118>)
1000ac76:	681b      	ldr	r3, [r3, #0]
1000ac78:	2b00      	cmp	r3, #0
1000ac7a:	d012      	beq.n	1000aca2 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac7c:	0080      	lsls	r0, r0, #2
1000ac7e:	58c3      	ldr	r3, [r0, r3]
1000ac80:	2b00      	cmp	r3, #0
1000ac82:	d00e      	beq.n	1000aca2 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac84:	0008      	movs	r0, r1
1000ac86:	4798      	blx	r3
1000ac88:	e00b      	b.n	1000aca2 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000ac8a:	4b0e      	ldr	r3, [pc, #56]	; (1000acc4 <ble_event_manager+0x11c>)
1000ac8c:	681b      	ldr	r3, [r3, #0]
1000ac8e:	2b00      	cmp	r3, #0
1000ac90:	d007      	beq.n	1000aca2 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000ac92:	4798      	blx	r3
1000ac94:	e005      	b.n	1000aca2 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000ac96:	4d0c      	ldr	r5, [pc, #48]	; (1000acc8 <ble_event_manager+0x120>)
1000ac98:	0028      	movs	r0, r5
1000ac9a:	4c0c      	ldr	r4, [pc, #48]	; (1000accc <ble_event_manager+0x124>)
1000ac9c:	47a0      	blx	r4
1000ac9e:	0028      	movs	r0, r5
1000aca0:	47a0      	blx	r4
	}
	break;		
	}
}
1000aca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aca4:	10012b88 	.word	0x10012b88
1000aca8:	100156e8 	.word	0x100156e8
1000acac:	100156fc 	.word	0x100156fc
1000acb0:	10015450 	.word	0x10015450
1000acb4:	10015744 	.word	0x10015744
1000acb8:	1001544c 	.word	0x1001544c
1000acbc:	100156d4 	.word	0x100156d4
1000acc0:	10015c88 	.word	0x10015c88
1000acc4:	10014260 	.word	0x10014260
1000acc8:	10012b00 	.word	0x10012b00
1000accc:	10011835 	.word	0x10011835

1000acd0 <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000acd0:	b510      	push	{r4, lr}
1000acd2:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000acd4:	4906      	ldr	r1, [pc, #24]	; (1000acf0 <ble_event_task+0x20>)
1000acd6:	4807      	ldr	r0, [pc, #28]	; (1000acf4 <ble_event_task+0x24>)
1000acd8:	4b07      	ldr	r3, [pc, #28]	; (1000acf8 <ble_event_task+0x28>)
1000acda:	4798      	blx	r3
1000acdc:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000acde:	d104      	bne.n	1000acea <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000ace0:	4b04      	ldr	r3, [pc, #16]	; (1000acf4 <ble_event_task+0x24>)
1000ace2:	7818      	ldrb	r0, [r3, #0]
1000ace4:	4902      	ldr	r1, [pc, #8]	; (1000acf0 <ble_event_task+0x20>)
1000ace6:	4b05      	ldr	r3, [pc, #20]	; (1000acfc <ble_event_task+0x2c>)
1000ace8:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000acea:	0020      	movs	r0, r4
1000acec:	bd10      	pop	{r4, pc}
1000acee:	46c0      	nop			; (mov r8, r8)
1000acf0:	10015a7c 	.word	0x10015a7c
1000acf4:	10015740 	.word	0x10015740
1000acf8:	1000c1e1 	.word	0x1000c1e1
1000acfc:	1000aba9 	.word	0x1000aba9

1000ad00 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000ad00:	b570      	push	{r4, r5, r6, lr}
1000ad02:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000ad04:	ac08      	add	r4, sp, #32
1000ad06:	2303      	movs	r3, #3
1000ad08:	7063      	strb	r3, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000ad0a:	220f      	movs	r2, #15
1000ad0c:	70a2      	strb	r2, [r4, #2]
1000ad0e:	3209      	adds	r2, #9
1000ad10:	70e2      	strb	r2, [r4, #3]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000ad12:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000ad14:	3307      	adds	r3, #7
1000ad16:	7123      	strb	r3, [r4, #4]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000ad18:	2609      	movs	r6, #9
1000ad1a:	7166      	strb	r6, [r4, #5]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000ad1c:	3a0f      	subs	r2, #15
1000ad1e:	4912      	ldr	r1, [pc, #72]	; (1000ad68 <ble_advertisement_data_set+0x68>)
1000ad20:	2026      	movs	r0, #38	; 0x26
1000ad22:	4468      	add	r0, sp
1000ad24:	4d11      	ldr	r5, [pc, #68]	; (1000ad6c <ble_advertisement_data_set+0x6c>)
1000ad26:	47a8      	blx	r5
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000ad28:	2300      	movs	r3, #0
1000ad2a:	466a      	mov	r2, sp
1000ad2c:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ad2e:	3315      	adds	r3, #21
1000ad30:	7053      	strb	r3, [r2, #1]
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ad32:	73e6      	strb	r6, [r4, #15]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ad34:	33ea      	adds	r3, #234	; 0xea
1000ad36:	7423      	strb	r3, [r4, #16]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ad38:	2208      	movs	r2, #8
1000ad3a:	490d      	ldr	r1, [pc, #52]	; (1000ad70 <ble_advertisement_data_set+0x70>)
1000ad3c:	3110      	adds	r1, #16
1000ad3e:	2031      	movs	r0, #49	; 0x31
1000ad40:	4468      	add	r0, sp
1000ad42:	47a8      	blx	r5
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000ad44:	2300      	movs	r3, #0
1000ad46:	466a      	mov	r2, sp
1000ad48:	2119      	movs	r1, #25
1000ad4a:	0020      	movs	r0, r4
1000ad4c:	4c09      	ldr	r4, [pc, #36]	; (1000ad74 <ble_advertisement_data_set+0x74>)
1000ad4e:	47a0      	blx	r4
1000ad50:	2800      	cmp	r0, #0
1000ad52:	d005      	beq.n	1000ad60 <ble_advertisement_data_set+0x60>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ad54:	4808      	ldr	r0, [pc, #32]	; (1000ad78 <ble_advertisement_data_set+0x78>)
1000ad56:	4b09      	ldr	r3, [pc, #36]	; (1000ad7c <ble_advertisement_data_set+0x7c>)
1000ad58:	4798      	blx	r3
1000ad5a:	4809      	ldr	r0, [pc, #36]	; (1000ad80 <ble_advertisement_data_set+0x80>)
1000ad5c:	4b09      	ldr	r3, [pc, #36]	; (1000ad84 <ble_advertisement_data_set+0x84>)
1000ad5e:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000ad60:	2000      	movs	r0, #0
1000ad62:	b010      	add	sp, #64	; 0x40
1000ad64:	bd70      	pop	{r4, r5, r6, pc}
1000ad66:	46c0      	nop			; (mov r8, r8)
1000ad68:	100130d4 	.word	0x100130d4
1000ad6c:	100116f3 	.word	0x100116f3
1000ad70:	10012c78 	.word	0x10012c78
1000ad74:	1000cc41 	.word	0x1000cc41
1000ad78:	10012b00 	.word	0x10012b00
1000ad7c:	10011835 	.word	0x10011835
1000ad80:	100132ac 	.word	0x100132ac
1000ad84:	10011715 	.word	0x10011715

1000ad88 <aon_sleep_timer_service_init>:
 */

aon_timer_status aon_status = AON_TIMER_IDLE;

bool aon_sleep_timer_service_init(uint32_t _sec)
{
1000ad88:	b510      	push	{r4, lr}
1000ad8a:	b082      	sub	sp, #8
1000ad8c:	1e04      	subs	r4, r0, #0
	#define CONF_AON_SLEEP_COUNTER      32768    /* About 1s */
	struct aon_sleep_timer_config config;
	
	if(_sec <= 0)
1000ad8e:	d100      	bne.n	1000ad92 <aon_sleep_timer_service_init+0xa>
		_sec = 1;
1000ad90:	3401      	adds	r4, #1

	aon_sleep_timer_get_config_defaults(&config);
1000ad92:	4668      	mov	r0, sp
1000ad94:	4b07      	ldr	r3, [pc, #28]	; (1000adb4 <aon_sleep_timer_service_init+0x2c>)
1000ad96:	4798      	blx	r3
	config.wakeup = AON_SLEEP_TIMER_WAKEUP_ARM_BLE;
1000ad98:	2302      	movs	r3, #2
1000ad9a:	466a      	mov	r2, sp
1000ad9c:	7013      	strb	r3, [r2, #0]
	config.mode = AON_SLEEP_TIMER_RELOAD_MODE;//AON_SLEEP_TIMER_SINGLE_MODE
1000ad9e:	2300      	movs	r3, #0
1000ada0:	7053      	strb	r3, [r2, #1]
	config.counter = _sec * CONF_AON_SLEEP_COUNTER;
1000ada2:	03e4      	lsls	r4, r4, #15
1000ada4:	9401      	str	r4, [sp, #4]
	aon_sleep_timer_init(&config);
1000ada6:	4668      	mov	r0, sp
1000ada8:	4b03      	ldr	r3, [pc, #12]	; (1000adb8 <aon_sleep_timer_service_init+0x30>)
1000adaa:	4798      	blx	r3
	
	return true;
}
1000adac:	2001      	movs	r0, #1
1000adae:	b002      	add	sp, #8
1000adb0:	bd10      	pop	{r4, pc}
1000adb2:	46c0      	nop			; (mov r8, r8)
1000adb4:	100080e9 	.word	0x100080e9
1000adb8:	1000816d 	.word	0x1000816d

1000adbc <aon_sleep_timer_service_start>:

bool aon_sleep_timer_service_start(aon_sleep_timer_callback_t callback)
{
1000adbc:	b570      	push	{r4, r5, r6, lr}
	aon_sleep_timer_register_callback(callback);
1000adbe:	4b08      	ldr	r3, [pc, #32]	; (1000ade0 <aon_sleep_timer_service_start+0x24>)
1000adc0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000adc2:	2280      	movs	r2, #128	; 0x80
1000adc4:	0512      	lsls	r2, r2, #20
1000adc6:	4b07      	ldr	r3, [pc, #28]	; (1000ade4 <aon_sleep_timer_service_start+0x28>)
1000adc8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(AON_SLEEP_TIMER_IRQn);
		
	while(!aon_sleep_timer_sleep_timer_active())
1000adca:	4c07      	ldr	r4, [pc, #28]	; (1000ade8 <aon_sleep_timer_service_start+0x2c>)
	
	aon_status = AON_TIMER_ACTIVE;
1000adcc:	4e07      	ldr	r6, [pc, #28]	; (1000adec <aon_sleep_timer_service_start+0x30>)
1000adce:	2501      	movs	r5, #1
1000add0:	e000      	b.n	1000add4 <aon_sleep_timer_service_start+0x18>
1000add2:	7035      	strb	r5, [r6, #0]
bool aon_sleep_timer_service_start(aon_sleep_timer_callback_t callback)
{
	aon_sleep_timer_register_callback(callback);
	NVIC_EnableIRQ(AON_SLEEP_TIMER_IRQn);
		
	while(!aon_sleep_timer_sleep_timer_active())
1000add4:	47a0      	blx	r4
1000add6:	2800      	cmp	r0, #0
1000add8:	d0fb      	beq.n	1000add2 <aon_sleep_timer_service_start+0x16>
	
	aon_status = AON_TIMER_ACTIVE;
	return true;
}
1000adda:	2001      	movs	r0, #1
1000addc:	bd70      	pop	{r4, r5, r6, pc}
1000adde:	46c0      	nop			; (mov r8, r8)
1000ade0:	10008155 	.word	0x10008155
1000ade4:	e000e100 	.word	0xe000e100
1000ade8:	10008119 	.word	0x10008119
1000adec:	10015270 	.word	0x10015270

1000adf0 <aon_sleep_timer_service_stop>:

/**
 * \aon timemr stop
 */
void aon_sleep_timer_service_stop()
{	
1000adf0:	b510      	push	{r4, lr}
	if( aon_status != AON_TIMER_ACTIVE )
1000adf2:	4b08      	ldr	r3, [pc, #32]	; (1000ae14 <aon_sleep_timer_service_stop+0x24>)
1000adf4:	781b      	ldrb	r3, [r3, #0]
1000adf6:	2b01      	cmp	r3, #1
1000adf8:	d10b      	bne.n	1000ae12 <aon_sleep_timer_service_stop+0x22>
		return ;
	
	aon_status = AON_TIMER_IDLE;
1000adfa:	2200      	movs	r2, #0
1000adfc:	4b05      	ldr	r3, [pc, #20]	; (1000ae14 <aon_sleep_timer_service_stop+0x24>)
1000adfe:	701a      	strb	r2, [r3, #0]
	
	aon_sleep_timer_disable();
1000ae00:	4b05      	ldr	r3, [pc, #20]	; (1000ae18 <aon_sleep_timer_service_stop+0x28>)
1000ae02:	4798      	blx	r3
	aon_sleep_timer_unregister_callback();
1000ae04:	4b05      	ldr	r3, [pc, #20]	; (1000ae1c <aon_sleep_timer_service_stop+0x2c>)
1000ae06:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ae08:	2180      	movs	r1, #128	; 0x80
1000ae0a:	0509      	lsls	r1, r1, #20
1000ae0c:	2380      	movs	r3, #128	; 0x80
1000ae0e:	4a04      	ldr	r2, [pc, #16]	; (1000ae20 <aon_sleep_timer_service_stop+0x30>)
1000ae10:	50d1      	str	r1, [r2, r3]
	NVIC_DisableIRQ(AON_SLEEP_TIMER_IRQn);
}
1000ae12:	bd10      	pop	{r4, pc}
1000ae14:	10015270 	.word	0x10015270
1000ae18:	100080f9 	.word	0x100080f9
1000ae1c:	10008161 	.word	0x10008161
1000ae20:	e000e100 	.word	0xe000e100

1000ae24 <dualtimer_callback2>:
extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
	//puts("Timer2 trigger\r\n");
}
1000ae24:	4770      	bx	lr
1000ae26:	46c0      	nop			; (mov r8, r8)

1000ae28 <hw_timer_init>:

void hw_timer_init(void)
{
1000ae28:	b500      	push	{lr}
1000ae2a:	b089      	sub	sp, #36	; 0x24
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000ae2c:	a801      	add	r0, sp, #4
1000ae2e:	4b05      	ldr	r3, [pc, #20]	; (1000ae44 <hw_timer_init+0x1c>)
1000ae30:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000ae32:	4b05      	ldr	r3, [pc, #20]	; (1000ae48 <hw_timer_init+0x20>)
1000ae34:	9303      	str	r3, [sp, #12]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000ae36:	4b05      	ldr	r3, [pc, #20]	; (1000ae4c <hw_timer_init+0x24>)
1000ae38:	9306      	str	r3, [sp, #24]

	dualtimer_init(&config_dualtimer);
1000ae3a:	a801      	add	r0, sp, #4
1000ae3c:	4b04      	ldr	r3, [pc, #16]	; (1000ae50 <hw_timer_init+0x28>)
1000ae3e:	4798      	blx	r3
}
1000ae40:	b009      	add	sp, #36	; 0x24
1000ae42:	bd00      	pop	{pc}
1000ae44:	10008695 	.word	0x10008695
1000ae48:	018cba80 	.word	0x018cba80
1000ae4c:	03197500 	.word	0x03197500
1000ae50:	10008729 	.word	0x10008729

1000ae54 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000ae54:	b510      	push	{r4, lr}
1000ae56:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000ae58:	2000      	movs	r0, #0
1000ae5a:	4c07      	ldr	r4, [pc, #28]	; (1000ae78 <hw_timer_register_callback+0x24>)
1000ae5c:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000ae5e:	4907      	ldr	r1, [pc, #28]	; (1000ae7c <hw_timer_register_callback+0x28>)
1000ae60:	2001      	movs	r0, #1
1000ae62:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000ae64:	2000      	movs	r0, #0
1000ae66:	4c06      	ldr	r4, [pc, #24]	; (1000ae80 <hw_timer_register_callback+0x2c>)
1000ae68:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000ae6a:	2001      	movs	r0, #1
1000ae6c:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ae6e:	2280      	movs	r2, #128	; 0x80
1000ae70:	01d2      	lsls	r2, r2, #7
1000ae72:	4b04      	ldr	r3, [pc, #16]	; (1000ae84 <hw_timer_register_callback+0x30>)
1000ae74:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000ae76:	bd10      	pop	{r4, pc}
1000ae78:	1000882d 	.word	0x1000882d
1000ae7c:	1000ae25 	.word	0x1000ae25
1000ae80:	10008705 	.word	0x10008705
1000ae84:	e000e100 	.word	0xe000e100

1000ae88 <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000ae88:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000ae8a:	2800      	cmp	r0, #0
1000ae8c:	d100      	bne.n	1000ae90 <hw_timer_start+0x8>
		delay = 1;
1000ae8e:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000ae90:	4b05      	ldr	r3, [pc, #20]	; (1000aea8 <hw_timer_start+0x20>)
1000ae92:	4343      	muls	r3, r0
1000ae94:	001a      	movs	r2, r3
1000ae96:	2100      	movs	r1, #0
1000ae98:	2000      	movs	r0, #0
1000ae9a:	4b04      	ldr	r3, [pc, #16]	; (1000aeac <hw_timer_start+0x24>)
1000ae9c:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000ae9e:	2000      	movs	r0, #0
1000aea0:	4b03      	ldr	r3, [pc, #12]	; (1000aeb0 <hw_timer_start+0x28>)
1000aea2:	4798      	blx	r3
}
1000aea4:	bd10      	pop	{r4, pc}
1000aea6:	46c0      	nop			; (mov r8, r8)
1000aea8:	018cba80 	.word	0x018cba80
1000aeac:	100086b9 	.word	0x100086b9
1000aeb0:	100086e1 	.word	0x100086e1

1000aeb4 <hw_timer_stop>:

void hw_timer_stop(void)
{
1000aeb4:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000aeb6:	2000      	movs	r0, #0
1000aeb8:	4b01      	ldr	r3, [pc, #4]	; (1000aec0 <hw_timer_stop+0xc>)
1000aeba:	4798      	blx	r3
}
1000aebc:	bd10      	pop	{r4, pc}
1000aebe:	46c0      	nop			; (mov r8, r8)
1000aec0:	10008705 	.word	0x10008705

1000aec4 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000aec4:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000aec6:	4b0e      	ldr	r3, [pc, #56]	; (1000af00 <uart_read_complete_callback+0x3c>)
1000aec8:	781b      	ldrb	r3, [r3, #0]
1000aeca:	2b01      	cmp	r3, #1
1000aecc:	d10b      	bne.n	1000aee6 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000aece:	2202      	movs	r2, #2
1000aed0:	4b0b      	ldr	r3, [pc, #44]	; (1000af00 <uart_read_complete_callback+0x3c>)
1000aed2:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000aed4:	4b0b      	ldr	r3, [pc, #44]	; (1000af04 <uart_read_complete_callback+0x40>)
1000aed6:	681b      	ldr	r3, [r3, #0]
1000aed8:	2b00      	cmp	r3, #0
1000aeda:	d110      	bne.n	1000aefe <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000aedc:	2102      	movs	r1, #2
1000aede:	480a      	ldr	r0, [pc, #40]	; (1000af08 <uart_read_complete_callback+0x44>)
1000aee0:	4b0a      	ldr	r3, [pc, #40]	; (1000af0c <uart_read_complete_callback+0x48>)
1000aee2:	4798      	blx	r3
1000aee4:	e00b      	b.n	1000aefe <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000aee6:	4b07      	ldr	r3, [pc, #28]	; (1000af04 <uart_read_complete_callback+0x40>)
1000aee8:	681b      	ldr	r3, [r3, #0]
1000aeea:	2b00      	cmp	r3, #0
1000aeec:	d007      	beq.n	1000aefe <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000aeee:	4c08      	ldr	r4, [pc, #32]	; (1000af10 <uart_read_complete_callback+0x4c>)
1000aef0:	7820      	ldrb	r0, [r4, #0]
1000aef2:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000aef4:	2201      	movs	r2, #1
1000aef6:	0021      	movs	r1, r4
1000aef8:	4803      	ldr	r0, [pc, #12]	; (1000af08 <uart_read_complete_callback+0x44>)
1000aefa:	4b06      	ldr	r3, [pc, #24]	; (1000af14 <uart_read_complete_callback+0x50>)
1000aefc:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000aefe:	bd10      	pop	{r4, pc}
1000af00:	10015278 	.word	0x10015278
1000af04:	10015280 	.word	0x10015280
1000af08:	10015c8c 	.word	0x10015c8c
1000af0c:	100098d9 	.word	0x100098d9
1000af10:	1001527c 	.word	0x1001527c
1000af14:	1000987d 	.word	0x1000987d

1000af18 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000af18:	b570      	push	{r4, r5, r6, lr}
1000af1a:	0006      	movs	r6, r0
1000af1c:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000af1e:	4c03      	ldr	r4, [pc, #12]	; (1000af2c <usart_serial_getchar+0x14>)
1000af20:	0029      	movs	r1, r5
1000af22:	0030      	movs	r0, r6
1000af24:	47a0      	blx	r4
1000af26:	2800      	cmp	r0, #0
1000af28:	d1fa      	bne.n	1000af20 <usart_serial_getchar+0x8>
}
1000af2a:	bd70      	pop	{r4, r5, r6, pc}
1000af2c:	10009869 	.word	0x10009869

1000af30 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000af30:	b570      	push	{r4, r5, r6, lr}
1000af32:	0006      	movs	r6, r0
1000af34:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000af36:	4c03      	ldr	r4, [pc, #12]	; (1000af44 <usart_serial_putchar+0x14>)
1000af38:	0029      	movs	r1, r5
1000af3a:	0030      	movs	r0, r6
1000af3c:	47a0      	blx	r4
1000af3e:	2800      	cmp	r0, #0
1000af40:	d1fa      	bne.n	1000af38 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000af42:	bd70      	pop	{r4, r5, r6, pc}
1000af44:	10009859 	.word	0x10009859

1000af48 <serial_console_init>:

void serial_console_init(void)
{
1000af48:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000af4a:	2100      	movs	r1, #0
1000af4c:	2000      	movs	r0, #0
1000af4e:	4b19      	ldr	r3, [pc, #100]	; (1000afb4 <serial_console_init+0x6c>)
1000af50:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000af52:	4c19      	ldr	r4, [pc, #100]	; (1000afb8 <serial_console_init+0x70>)
1000af54:	0020      	movs	r0, r4
1000af56:	4b19      	ldr	r3, [pc, #100]	; (1000afbc <serial_console_init+0x74>)
1000af58:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000af5a:	23e1      	movs	r3, #225	; 0xe1
1000af5c:	025b      	lsls	r3, r3, #9
1000af5e:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000af60:	2302      	movs	r3, #2
1000af62:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000af64:	2203      	movs	r2, #3
1000af66:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000af68:	3201      	adds	r2, #1
1000af6a:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000af6c:	3201      	adds	r2, #1
1000af6e:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000af70:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000af72:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000af74:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000af76:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000af78:	4d11      	ldr	r5, [pc, #68]	; (1000afc0 <serial_console_init+0x78>)
1000af7a:	4b12      	ldr	r3, [pc, #72]	; (1000afc4 <serial_console_init+0x7c>)
1000af7c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000af7e:	4a12      	ldr	r2, [pc, #72]	; (1000afc8 <serial_console_init+0x80>)
1000af80:	4b12      	ldr	r3, [pc, #72]	; (1000afcc <serial_console_init+0x84>)
1000af82:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000af84:	4a12      	ldr	r2, [pc, #72]	; (1000afd0 <serial_console_init+0x88>)
1000af86:	4b13      	ldr	r3, [pc, #76]	; (1000afd4 <serial_console_init+0x8c>)
1000af88:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000af8a:	0022      	movs	r2, r4
1000af8c:	4912      	ldr	r1, [pc, #72]	; (1000afd8 <serial_console_init+0x90>)
1000af8e:	0028      	movs	r0, r5
1000af90:	4b12      	ldr	r3, [pc, #72]	; (1000afdc <serial_console_init+0x94>)
1000af92:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000af94:	4e12      	ldr	r6, [pc, #72]	; (1000afe0 <serial_console_init+0x98>)
1000af96:	6833      	ldr	r3, [r6, #0]
1000af98:	6898      	ldr	r0, [r3, #8]
1000af9a:	2100      	movs	r1, #0
1000af9c:	4c11      	ldr	r4, [pc, #68]	; (1000afe4 <serial_console_init+0x9c>)
1000af9e:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000afa0:	6833      	ldr	r3, [r6, #0]
1000afa2:	6858      	ldr	r0, [r3, #4]
1000afa4:	2100      	movs	r1, #0
1000afa6:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000afa8:	2202      	movs	r2, #2
1000afaa:	490f      	ldr	r1, [pc, #60]	; (1000afe8 <serial_console_init+0xa0>)
1000afac:	0028      	movs	r0, r5
1000afae:	4b0f      	ldr	r3, [pc, #60]	; (1000afec <serial_console_init+0xa4>)
1000afb0:	4798      	blx	r3
}
1000afb2:	bd70      	pop	{r4, r5, r6, pc}
1000afb4:	10008be5 	.word	0x10008be5
1000afb8:	10015cb0 	.word	0x10015cb0
1000afbc:	10009671 	.word	0x10009671
1000afc0:	10015c8c 	.word	0x10015c8c
1000afc4:	10015440 	.word	0x10015440
1000afc8:	1000af31 	.word	0x1000af31
1000afcc:	1001543c 	.word	0x1001543c
1000afd0:	1000af19 	.word	0x1000af19
1000afd4:	10015438 	.word	0x10015438
1000afd8:	40004000 	.word	0x40004000
1000afdc:	1000969d 	.word	0x1000969d
1000afe0:	10013938 	.word	0x10013938
1000afe4:	100118c1 	.word	0x100118c1
1000afe8:	1000aec5 	.word	0x1000aec5
1000afec:	100098a5 	.word	0x100098a5

1000aff0 <_time_start>:

void _time_start(unsigned int sec)
{
1000aff0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aff2:	b083      	sub	sp, #12
1000aff4:	0005      	movs	r5, r0
	system_clock_get_value();
1000aff6:	4c0d      	ldr	r4, [pc, #52]	; (1000b02c <_time_start+0x3c>)
1000aff8:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000affa:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000affc:	4f0c      	ldr	r7, [pc, #48]	; (1000b030 <_time_start+0x40>)
1000affe:	47b8      	blx	r7
1000b000:	4e0c      	ldr	r6, [pc, #48]	; (1000b034 <_time_start+0x44>)
1000b002:	4a0d      	ldr	r2, [pc, #52]	; (1000b038 <_time_start+0x48>)
1000b004:	4b0d      	ldr	r3, [pc, #52]	; (1000b03c <_time_start+0x4c>)
1000b006:	47b0      	blx	r6
1000b008:	9000      	str	r0, [sp, #0]
1000b00a:	9101      	str	r1, [sp, #4]
1000b00c:	20fa      	movs	r0, #250	; 0xfa
1000b00e:	0080      	lsls	r0, r0, #2
1000b010:	4368      	muls	r0, r5
1000b012:	47b8      	blx	r7
1000b014:	0002      	movs	r2, r0
1000b016:	000b      	movs	r3, r1
1000b018:	9800      	ldr	r0, [sp, #0]
1000b01a:	9901      	ldr	r1, [sp, #4]
1000b01c:	47b0      	blx	r6
1000b01e:	4b08      	ldr	r3, [pc, #32]	; (1000b040 <_time_start+0x50>)
1000b020:	4798      	blx	r3
1000b022:	4b08      	ldr	r3, [pc, #32]	; (1000b044 <_time_start+0x54>)
1000b024:	6018      	str	r0, [r3, #0]
}
1000b026:	b003      	add	sp, #12
1000b028:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b02a:	46c0      	nop			; (mov r8, r8)
1000b02c:	10008c69 	.word	0x10008c69
1000b030:	10011171 	.word	0x10011171
1000b034:	10010569 	.word	0x10010569
1000b038:	19feaec7 	.word	0x19feaec7
1000b03c:	3f09d8ef 	.word	0x3f09d8ef
1000b040:	1000fa19 	.word	0x1000fa19
1000b044:	10015274 	.word	0x10015274

1000b048 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000b048:	4b02      	ldr	r3, [pc, #8]	; (1000b054 <_time_done+0xc>)
1000b04a:	681a      	ldr	r2, [r3, #0]
1000b04c:	1e50      	subs	r0, r2, #1
1000b04e:	6018      	str	r0, [r3, #0]
}
1000b050:	4770      	bx	lr
1000b052:	46c0      	nop			; (mov r8, r8)
1000b054:	10015274 	.word	0x10015274

1000b058 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000b058:	b570      	push	{r4, r5, r6, lr}
1000b05a:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000b05c:	2201      	movs	r2, #1
1000b05e:	4b11      	ldr	r3, [pc, #68]	; (1000b0a4 <getchar_b11_timeout+0x4c>)
1000b060:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000b062:	4b11      	ldr	r3, [pc, #68]	; (1000b0a8 <getchar_b11_timeout+0x50>)
1000b064:	681b      	ldr	r3, [r3, #0]
1000b066:	2b00      	cmp	r3, #0
1000b068:	d103      	bne.n	1000b072 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000b06a:	2102      	movs	r1, #2
1000b06c:	480f      	ldr	r0, [pc, #60]	; (1000b0ac <getchar_b11_timeout+0x54>)
1000b06e:	4b10      	ldr	r3, [pc, #64]	; (1000b0b0 <getchar_b11_timeout+0x58>)
1000b070:	4798      	blx	r3

	_time_start(sec);
1000b072:	0020      	movs	r0, r4
1000b074:	4b0f      	ldr	r3, [pc, #60]	; (1000b0b4 <getchar_b11_timeout+0x5c>)
1000b076:	4798      	blx	r3
	
	string_input[0] = 0;
1000b078:	490f      	ldr	r1, [pc, #60]	; (1000b0b8 <getchar_b11_timeout+0x60>)
1000b07a:	2300      	movs	r3, #0
1000b07c:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b07e:	2201      	movs	r2, #1
1000b080:	480a      	ldr	r0, [pc, #40]	; (1000b0ac <getchar_b11_timeout+0x54>)
1000b082:	4b0e      	ldr	r3, [pc, #56]	; (1000b0bc <getchar_b11_timeout+0x64>)
1000b084:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000b086:	4c07      	ldr	r4, [pc, #28]	; (1000b0a4 <getchar_b11_timeout+0x4c>)
1000b088:	4d0d      	ldr	r5, [pc, #52]	; (1000b0c0 <getchar_b11_timeout+0x68>)
1000b08a:	7823      	ldrb	r3, [r4, #0]
1000b08c:	2b02      	cmp	r3, #2
1000b08e:	d002      	beq.n	1000b096 <getchar_b11_timeout+0x3e>
1000b090:	47a8      	blx	r5
1000b092:	2800      	cmp	r0, #0
1000b094:	d1f9      	bne.n	1000b08a <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000b096:	2200      	movs	r2, #0
1000b098:	4b02      	ldr	r3, [pc, #8]	; (1000b0a4 <getchar_b11_timeout+0x4c>)
1000b09a:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000b09c:	4b06      	ldr	r3, [pc, #24]	; (1000b0b8 <getchar_b11_timeout+0x60>)
1000b09e:	7818      	ldrb	r0, [r3, #0]
}
1000b0a0:	bd70      	pop	{r4, r5, r6, pc}
1000b0a2:	46c0      	nop			; (mov r8, r8)
1000b0a4:	10015278 	.word	0x10015278
1000b0a8:	10015280 	.word	0x10015280
1000b0ac:	10015c8c 	.word	0x10015c8c
1000b0b0:	100098b9 	.word	0x100098b9
1000b0b4:	1000aff1 	.word	0x1000aff1
1000b0b8:	1001527c 	.word	0x1001527c
1000b0bc:	1000987d 	.word	0x1000987d
1000b0c0:	1000b049 	.word	0x1000b049

1000b0c4 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000b0c4:	4b02      	ldr	r3, [pc, #8]	; (1000b0d0 <platform_event_free+0xc>)
1000b0c6:	681a      	ldr	r2, [r3, #0]
1000b0c8:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000b0ca:	6018      	str	r0, [r3, #0]
}
1000b0cc:	4770      	bx	lr
1000b0ce:	46c0      	nop			; (mov r8, r8)
1000b0d0:	10015288 	.word	0x10015288

1000b0d4 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000b0d4:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000b0d6:	4b0b      	ldr	r3, [pc, #44]	; (1000b104 <platform_event_post+0x30>)
1000b0d8:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000b0da:	2c00      	cmp	r4, #0
1000b0dc:	d011      	beq.n	1000b102 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000b0de:	6825      	ldr	r5, [r4, #0]
1000b0e0:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000b0e2:	2300      	movs	r3, #0
1000b0e4:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000b0e6:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000b0e8:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000b0ea:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000b0ec:	4b06      	ldr	r3, [pc, #24]	; (1000b108 <platform_event_post+0x34>)
1000b0ee:	681a      	ldr	r2, [r3, #0]
1000b0f0:	2a00      	cmp	r2, #0
1000b0f2:	d102      	bne.n	1000b0fa <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000b0f4:	601c      	str	r4, [r3, #0]
1000b0f6:	e004      	b.n	1000b102 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000b0f8:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000b0fa:	6813      	ldr	r3, [r2, #0]
1000b0fc:	2b00      	cmp	r3, #0
1000b0fe:	d1fb      	bne.n	1000b0f8 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000b100:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000b102:	bd30      	pop	{r4, r5, pc}
1000b104:	10015288 	.word	0x10015288
1000b108:	10015284 	.word	0x10015284

1000b10c <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000b10c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000b10e:	2300      	movs	r3, #0
1000b110:	4a06      	ldr	r2, [pc, #24]	; (1000b12c <platform_event_init+0x20>)
1000b112:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000b114:	4a06      	ldr	r2, [pc, #24]	; (1000b130 <platform_event_init+0x24>)
1000b116:	6013      	str	r3, [r2, #0]
1000b118:	4c06      	ldr	r4, [pc, #24]	; (1000b134 <platform_event_init+0x28>)
1000b11a:	0026      	movs	r6, r4
1000b11c:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000b11e:	4d06      	ldr	r5, [pc, #24]	; (1000b138 <platform_event_init+0x2c>)
1000b120:	0020      	movs	r0, r4
1000b122:	47a8      	blx	r5
1000b124:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000b126:	42b4      	cmp	r4, r6
1000b128:	d1fa      	bne.n	1000b120 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000b12a:	bd70      	pop	{r4, r5, r6, pc}
1000b12c:	10015288 	.word	0x10015288
1000b130:	10015284 	.word	0x10015284
1000b134:	1001528c 	.word	0x1001528c
1000b138:	1000b0c5 	.word	0x1000b0c5

1000b13c <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000b13c:	b570      	push	{r4, r5, r6, lr}
1000b13e:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b140:	4b13      	ldr	r3, [pc, #76]	; (1000b190 <at_ke_msg_send+0x54>)
1000b142:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000b144:	4b13      	ldr	r3, [pc, #76]	; (1000b194 <at_ke_msg_send+0x58>)
1000b146:	681b      	ldr	r3, [r3, #0]
1000b148:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000b14a:	2c0c      	cmp	r4, #12
1000b14c:	d01f      	beq.n	1000b18e <at_ke_msg_send+0x52>
1000b14e:	3c0c      	subs	r4, #12
1000b150:	88e3      	ldrh	r3, [r4, #6]
1000b152:	2b05      	cmp	r3, #5
1000b154:	d01b      	beq.n	1000b18e <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000b156:	07eb      	lsls	r3, r5, #31
1000b158:	d414      	bmi.n	1000b184 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000b15a:	4b0f      	ldr	r3, [pc, #60]	; (1000b198 <at_ke_msg_send+0x5c>)
1000b15c:	681b      	ldr	r3, [r3, #0]
1000b15e:	2002      	movs	r0, #2
1000b160:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000b162:	4b0e      	ldr	r3, [pc, #56]	; (1000b19c <at_ke_msg_send+0x60>)
1000b164:	681b      	ldr	r3, [r3, #0]
1000b166:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000b168:	4c0d      	ldr	r4, [pc, #52]	; (1000b1a0 <at_ke_msg_send+0x64>)
1000b16a:	2003      	movs	r0, #3
1000b16c:	6823      	ldr	r3, [r4, #0]
1000b16e:	4798      	blx	r3
1000b170:	2800      	cmp	r0, #0
1000b172:	d1fa      	bne.n	1000b16a <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000b174:	4b0b      	ldr	r3, [pc, #44]	; (1000b1a4 <at_ke_msg_send+0x68>)
1000b176:	681b      	ldr	r3, [r3, #0]
1000b178:	3002      	adds	r0, #2
1000b17a:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000b17c:	2201      	movs	r2, #1
1000b17e:	4b0a      	ldr	r3, [pc, #40]	; (1000b1a8 <at_ke_msg_send+0x6c>)
1000b180:	601a      	str	r2, [r3, #0]
1000b182:	e004      	b.n	1000b18e <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000b184:	4b09      	ldr	r3, [pc, #36]	; (1000b1ac <at_ke_msg_send+0x70>)
1000b186:	6818      	ldr	r0, [r3, #0]
1000b188:	4b09      	ldr	r3, [pc, #36]	; (1000b1b0 <at_ke_msg_send+0x74>)
1000b18a:	681b      	ldr	r3, [r3, #0]
1000b18c:	4798      	blx	r3
		}
	}
}
1000b18e:	bd70      	pop	{r4, r5, r6, pc}
1000b190:	4000b1ec 	.word	0x4000b1ec
1000b194:	10015334 	.word	0x10015334
1000b198:	1001532c 	.word	0x1001532c
1000b19c:	10015340 	.word	0x10015340
1000b1a0:	10015318 	.word	0x10015318
1000b1a4:	10015320 	.word	0x10015320
1000b1a8:	4000b020 	.word	0x4000b020
1000b1ac:	10015324 	.word	0x10015324
1000b1b0:	10015314 	.word	0x10015314

1000b1b4 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000b1b4:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000b1b6:	4b06      	ldr	r3, [pc, #24]	; (1000b1d0 <samb11_plf_resume_callback+0x1c>)
1000b1b8:	4a06      	ldr	r2, [pc, #24]	; (1000b1d4 <samb11_plf_resume_callback+0x20>)
1000b1ba:	6819      	ldr	r1, [r3, #0]
1000b1bc:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000b1be:	685a      	ldr	r2, [r3, #4]
1000b1c0:	4b05      	ldr	r3, [pc, #20]	; (1000b1d8 <samb11_plf_resume_callback+0x24>)
1000b1c2:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000b1c4:	4b05      	ldr	r3, [pc, #20]	; (1000b1dc <samb11_plf_resume_callback+0x28>)
1000b1c6:	681b      	ldr	r3, [r3, #0]
1000b1c8:	2b00      	cmp	r3, #0
1000b1ca:	d000      	beq.n	1000b1ce <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000b1cc:	4798      	blx	r3
	}
}
1000b1ce:	bd10      	pop	{r4, pc}
1000b1d0:	10015cd8 	.word	0x10015cd8
1000b1d4:	4000b00c 	.word	0x4000b00c
1000b1d8:	4000b010 	.word	0x4000b010
1000b1dc:	10015fb4 	.word	0x10015fb4

1000b1e0 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b1e0:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b1e2:	2232      	movs	r2, #50	; 0x32
1000b1e4:	2100      	movs	r1, #0
1000b1e6:	480d      	ldr	r0, [pc, #52]	; (1000b21c <init_port_list+0x3c>)
1000b1e8:	4b0d      	ldr	r3, [pc, #52]	; (1000b220 <init_port_list+0x40>)
1000b1ea:	4798      	blx	r3
1000b1ec:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b1ee:	480b      	ldr	r0, [pc, #44]	; (1000b21c <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000b1f0:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b1f2:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b1f4:	004a      	lsls	r2, r1, #1
1000b1f6:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b1f8:	1882      	adds	r2, r0, r2
1000b1fa:	7853      	ldrb	r3, [r2, #1]
1000b1fc:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b1fe:	b2db      	uxtb	r3, r3
1000b200:	43a3      	bics	r3, r4
1000b202:	7053      	strb	r3, [r2, #1]
1000b204:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b206:	2919      	cmp	r1, #25
1000b208:	d1f4      	bne.n	1000b1f4 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b20a:	4b04      	ldr	r3, [pc, #16]	; (1000b21c <init_port_list+0x3c>)
1000b20c:	785a      	ldrb	r2, [r3, #1]
1000b20e:	3918      	subs	r1, #24
1000b210:	438a      	bics	r2, r1
1000b212:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b214:	78da      	ldrb	r2, [r3, #3]
1000b216:	438a      	bics	r2, r1
1000b218:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000b21a:	bd70      	pop	{r4, r5, r6, pc}
1000b21c:	10015cf4 	.word	0x10015cf4
1000b220:	10011705 	.word	0x10011705

1000b224 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b224:	4a06      	ldr	r2, [pc, #24]	; (1000b240 <init_clock+0x1c>)
1000b226:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b228:	4b06      	ldr	r3, [pc, #24]	; (1000b244 <init_clock+0x20>)
1000b22a:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b22c:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b22e:	4a06      	ldr	r2, [pc, #24]	; (1000b248 <init_clock+0x24>)
1000b230:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b232:	4906      	ldr	r1, [pc, #24]	; (1000b24c <init_clock+0x28>)
1000b234:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b236:	4b06      	ldr	r3, [pc, #24]	; (1000b250 <init_clock+0x2c>)
1000b238:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b23a:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b23c:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b23e:	4770      	bx	lr
1000b240:	4000b00c 	.word	0x4000b00c
1000b244:	fffe0fd3 	.word	0xfffe0fd3
1000b248:	10015cd8 	.word	0x10015cd8
1000b24c:	4000b010 	.word	0x4000b010
1000b250:	ffffe7c0 	.word	0xffffe7c0

1000b254 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b254:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b256:	4657      	mov	r7, sl
1000b258:	464e      	mov	r6, r9
1000b25a:	4645      	mov	r5, r8
1000b25c:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b25e:	4b4f      	ldr	r3, [pc, #316]	; (1000b39c <platform_driver_init+0x148>)
1000b260:	781b      	ldrb	r3, [r3, #0]
1000b262:	2b00      	cmp	r3, #0
1000b264:	d004      	beq.n	1000b270 <platform_driver_init+0x1c>
1000b266:	4b4d      	ldr	r3, [pc, #308]	; (1000b39c <platform_driver_init+0x148>)
1000b268:	781b      	ldrb	r3, [r3, #0]
1000b26a:	2b01      	cmp	r3, #1
1000b26c:	d100      	bne.n	1000b270 <platform_driver_init+0x1c>
1000b26e:	e08c      	b.n	1000b38a <platform_driver_init+0x136>
		init_port_list();
1000b270:	4b4b      	ldr	r3, [pc, #300]	; (1000b3a0 <platform_driver_init+0x14c>)
1000b272:	4798      	blx	r3
		init_clock();
1000b274:	4b4b      	ldr	r3, [pc, #300]	; (1000b3a4 <platform_driver_init+0x150>)
1000b276:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b278:	2300      	movs	r3, #0
1000b27a:	4698      	mov	r8, r3
1000b27c:	4b4a      	ldr	r3, [pc, #296]	; (1000b3a8 <platform_driver_init+0x154>)
1000b27e:	4642      	mov	r2, r8
1000b280:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b282:	4c4a      	ldr	r4, [pc, #296]	; (1000b3ac <platform_driver_init+0x158>)
1000b284:	2380      	movs	r3, #128	; 0x80
1000b286:	2280      	movs	r2, #128	; 0x80
1000b288:	0412      	lsls	r2, r2, #16
1000b28a:	4692      	mov	sl, r2
1000b28c:	50e2      	str	r2, [r4, r3]
1000b28e:	2280      	movs	r2, #128	; 0x80
1000b290:	0452      	lsls	r2, r2, #17
1000b292:	4691      	mov	r9, r2
1000b294:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b296:	4d46      	ldr	r5, [pc, #280]	; (1000b3b0 <platform_driver_init+0x15c>)
1000b298:	4b46      	ldr	r3, [pc, #280]	; (1000b3b4 <platform_driver_init+0x160>)
1000b29a:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b29c:	4b46      	ldr	r3, [pc, #280]	; (1000b3b8 <platform_driver_init+0x164>)
1000b29e:	4a47      	ldr	r2, [pc, #284]	; (1000b3bc <platform_driver_init+0x168>)
1000b2a0:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b2a2:	4947      	ldr	r1, [pc, #284]	; (1000b3c0 <platform_driver_init+0x16c>)
1000b2a4:	4a47      	ldr	r2, [pc, #284]	; (1000b3c4 <platform_driver_init+0x170>)
1000b2a6:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b2a8:	4a47      	ldr	r2, [pc, #284]	; (1000b3c8 <platform_driver_init+0x174>)
1000b2aa:	6811      	ldr	r1, [r2, #0]
1000b2ac:	4a47      	ldr	r2, [pc, #284]	; (1000b3cc <platform_driver_init+0x178>)
1000b2ae:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b2b0:	4a47      	ldr	r2, [pc, #284]	; (1000b3d0 <platform_driver_init+0x17c>)
1000b2b2:	6811      	ldr	r1, [r2, #0]
1000b2b4:	4a47      	ldr	r2, [pc, #284]	; (1000b3d4 <platform_driver_init+0x180>)
1000b2b6:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b2b8:	4947      	ldr	r1, [pc, #284]	; (1000b3d8 <platform_driver_init+0x184>)
1000b2ba:	4a48      	ldr	r2, [pc, #288]	; (1000b3dc <platform_driver_init+0x188>)
1000b2bc:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b2be:	4948      	ldr	r1, [pc, #288]	; (1000b3e0 <platform_driver_init+0x18c>)
1000b2c0:	4a48      	ldr	r2, [pc, #288]	; (1000b3e4 <platform_driver_init+0x190>)
1000b2c2:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b2c4:	4f48      	ldr	r7, [pc, #288]	; (1000b3e8 <platform_driver_init+0x194>)
1000b2c6:	4a49      	ldr	r2, [pc, #292]	; (1000b3ec <platform_driver_init+0x198>)
1000b2c8:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b2ca:	4949      	ldr	r1, [pc, #292]	; (1000b3f0 <platform_driver_init+0x19c>)
1000b2cc:	4a49      	ldr	r2, [pc, #292]	; (1000b3f4 <platform_driver_init+0x1a0>)
1000b2ce:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b2d0:	4949      	ldr	r1, [pc, #292]	; (1000b3f8 <platform_driver_init+0x1a4>)
1000b2d2:	4a4a      	ldr	r2, [pc, #296]	; (1000b3fc <platform_driver_init+0x1a8>)
1000b2d4:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000b2d6:	4e4a      	ldr	r6, [pc, #296]	; (1000b400 <platform_driver_init+0x1ac>)
1000b2d8:	4a4a      	ldr	r2, [pc, #296]	; (1000b404 <platform_driver_init+0x1b0>)
1000b2da:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000b2dc:	494a      	ldr	r1, [pc, #296]	; (1000b408 <platform_driver_init+0x1b4>)
1000b2de:	4a4b      	ldr	r2, [pc, #300]	; (1000b40c <platform_driver_init+0x1b8>)
1000b2e0:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b2e2:	494b      	ldr	r1, [pc, #300]	; (1000b410 <platform_driver_init+0x1bc>)
1000b2e4:	4a4b      	ldr	r2, [pc, #300]	; (1000b414 <platform_driver_init+0x1c0>)
1000b2e6:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b2e8:	494b      	ldr	r1, [pc, #300]	; (1000b418 <platform_driver_init+0x1c4>)
1000b2ea:	4a4c      	ldr	r2, [pc, #304]	; (1000b41c <platform_driver_init+0x1c8>)
1000b2ec:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b2ee:	494c      	ldr	r1, [pc, #304]	; (1000b420 <platform_driver_init+0x1cc>)
1000b2f0:	4a4c      	ldr	r2, [pc, #304]	; (1000b424 <platform_driver_init+0x1d0>)
1000b2f2:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b2f4:	494c      	ldr	r1, [pc, #304]	; (1000b428 <platform_driver_init+0x1d4>)
1000b2f6:	4a4d      	ldr	r2, [pc, #308]	; (1000b42c <platform_driver_init+0x1d8>)
1000b2f8:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b2fa:	2028      	movs	r0, #40	; 0x28
1000b2fc:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b2fe:	494c      	ldr	r1, [pc, #304]	; (1000b430 <platform_driver_init+0x1dc>)
1000b300:	2028      	movs	r0, #40	; 0x28
1000b302:	682b      	ldr	r3, [r5, #0]
1000b304:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b306:	682b      	ldr	r3, [r5, #0]
1000b308:	494a      	ldr	r1, [pc, #296]	; (1000b434 <platform_driver_init+0x1e0>)
1000b30a:	2027      	movs	r0, #39	; 0x27
1000b30c:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b30e:	4b4a      	ldr	r3, [pc, #296]	; (1000b438 <platform_driver_init+0x1e4>)
1000b310:	681a      	ldr	r2, [r3, #0]
1000b312:	4b4a      	ldr	r3, [pc, #296]	; (1000b43c <platform_driver_init+0x1e8>)
1000b314:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b316:	4a4a      	ldr	r2, [pc, #296]	; (1000b440 <platform_driver_init+0x1ec>)
1000b318:	4b4a      	ldr	r3, [pc, #296]	; (1000b444 <platform_driver_init+0x1f0>)
1000b31a:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b31c:	4a4a      	ldr	r2, [pc, #296]	; (1000b448 <platform_driver_init+0x1f4>)
1000b31e:	4b4b      	ldr	r3, [pc, #300]	; (1000b44c <platform_driver_init+0x1f8>)
1000b320:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b322:	4a4b      	ldr	r2, [pc, #300]	; (1000b450 <platform_driver_init+0x1fc>)
1000b324:	4b4b      	ldr	r3, [pc, #300]	; (1000b454 <platform_driver_init+0x200>)
1000b326:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b328:	4a4b      	ldr	r2, [pc, #300]	; (1000b458 <platform_driver_init+0x204>)
1000b32a:	4b4c      	ldr	r3, [pc, #304]	; (1000b45c <platform_driver_init+0x208>)
1000b32c:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b32e:	4a4c      	ldr	r2, [pc, #304]	; (1000b460 <platform_driver_init+0x20c>)
1000b330:	4b4c      	ldr	r3, [pc, #304]	; (1000b464 <platform_driver_init+0x210>)
1000b332:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b334:	4a4c      	ldr	r2, [pc, #304]	; (1000b468 <platform_driver_init+0x214>)
1000b336:	4b4d      	ldr	r3, [pc, #308]	; (1000b46c <platform_driver_init+0x218>)
1000b338:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b33a:	4a4d      	ldr	r2, [pc, #308]	; (1000b470 <platform_driver_init+0x21c>)
1000b33c:	4b4d      	ldr	r3, [pc, #308]	; (1000b474 <platform_driver_init+0x220>)
1000b33e:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b340:	22a0      	movs	r2, #160	; 0xa0
1000b342:	0092      	lsls	r2, r2, #2
1000b344:	2100      	movs	r1, #0
1000b346:	484c      	ldr	r0, [pc, #304]	; (1000b478 <platform_driver_init+0x224>)
1000b348:	4b4c      	ldr	r3, [pc, #304]	; (1000b47c <platform_driver_init+0x228>)
1000b34a:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b34c:	2280      	movs	r2, #128	; 0x80
1000b34e:	0092      	lsls	r2, r2, #2
1000b350:	4b4b      	ldr	r3, [pc, #300]	; (1000b480 <platform_driver_init+0x22c>)
1000b352:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b354:	4b4b      	ldr	r3, [pc, #300]	; (1000b484 <platform_driver_init+0x230>)
1000b356:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b358:	4653      	mov	r3, sl
1000b35a:	6023      	str	r3, [r4, #0]
1000b35c:	464b      	mov	r3, r9
1000b35e:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b360:	4b49      	ldr	r3, [pc, #292]	; (1000b488 <platform_driver_init+0x234>)
1000b362:	4642      	mov	r2, r8
1000b364:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b366:	683b      	ldr	r3, [r7, #0]
1000b368:	4a48      	ldr	r2, [pc, #288]	; (1000b48c <platform_driver_init+0x238>)
1000b36a:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000b36c:	6833      	ldr	r3, [r6, #0]
1000b36e:	4a48      	ldr	r2, [pc, #288]	; (1000b490 <platform_driver_init+0x23c>)
1000b370:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000b372:	2000      	movs	r0, #0
1000b374:	4c47      	ldr	r4, [pc, #284]	; (1000b494 <platform_driver_init+0x240>)
1000b376:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000b378:	2001      	movs	r0, #1
1000b37a:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000b37c:	2002      	movs	r0, #2
1000b37e:	47a0      	blx	r4
		platform_initialized = 1;
1000b380:	2201      	movs	r2, #1
1000b382:	4b06      	ldr	r3, [pc, #24]	; (1000b39c <platform_driver_init+0x148>)
1000b384:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b386:	2000      	movs	r0, #0
1000b388:	e003      	b.n	1000b392 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000b38a:	2201      	movs	r2, #1
1000b38c:	4b03      	ldr	r3, [pc, #12]	; (1000b39c <platform_driver_init+0x148>)
1000b38e:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b390:	2001      	movs	r0, #1
	}
	return status;
}
1000b392:	bc1c      	pop	{r2, r3, r4}
1000b394:	4690      	mov	r8, r2
1000b396:	4699      	mov	r9, r3
1000b398:	46a2      	mov	sl, r4
1000b39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b39c:	1001531c 	.word	0x1001531c
1000b3a0:	1000b1e1 	.word	0x1000b1e1
1000b3a4:	1000b225 	.word	0x1000b225
1000b3a8:	1001533c 	.word	0x1001533c
1000b3ac:	e000e100 	.word	0xe000e100
1000b3b0:	10015fa8 	.word	0x10015fa8
1000b3b4:	000007d7 	.word	0x000007d7
1000b3b8:	000007bd 	.word	0x000007bd
1000b3bc:	10015ce4 	.word	0x10015ce4
1000b3c0:	0001bc51 	.word	0x0001bc51
1000b3c4:	10015fac 	.word	0x10015fac
1000b3c8:	100400bc 	.word	0x100400bc
1000b3cc:	1001530c 	.word	0x1001530c
1000b3d0:	100400b8 	.word	0x100400b8
1000b3d4:	10015308 	.word	0x10015308
1000b3d8:	0001b99f 	.word	0x0001b99f
1000b3dc:	10015ce0 	.word	0x10015ce0
1000b3e0:	0001b9db 	.word	0x0001b9db
1000b3e4:	10015cec 	.word	0x10015cec
1000b3e8:	10015fbc 	.word	0x10015fbc
1000b3ec:	1004003c 	.word	0x1004003c
1000b3f0:	10041fc0 	.word	0x10041fc0
1000b3f4:	10015cf0 	.word	0x10015cf0
1000b3f8:	10041fc4 	.word	0x10041fc4
1000b3fc:	10015fb8 	.word	0x10015fb8
1000b400:	10015fb0 	.word	0x10015fb0
1000b404:	10041fd4 	.word	0x10041fd4
1000b408:	10041fd8 	.word	0x10041fd8
1000b40c:	10015ce8 	.word	0x10015ce8
1000b410:	0001cbe9 	.word	0x0001cbe9
1000b414:	1001532c 	.word	0x1001532c
1000b418:	0001cd8f 	.word	0x0001cd8f
1000b41c:	10015320 	.word	0x10015320
1000b420:	0001cea3 	.word	0x0001cea3
1000b424:	10015340 	.word	0x10015340
1000b428:	0001cbcf 	.word	0x0001cbcf
1000b42c:	10015318 	.word	0x10015318
1000b430:	1000b8ad 	.word	0x1000b8ad
1000b434:	1000b841 	.word	0x1000b841
1000b438:	100400e4 	.word	0x100400e4
1000b43c:	10015334 	.word	0x10015334
1000b440:	00019fe9 	.word	0x00019fe9
1000b444:	10015344 	.word	0x10015344
1000b448:	0001dbdd 	.word	0x0001dbdd
1000b44c:	10015314 	.word	0x10015314
1000b450:	0001dc5b 	.word	0x0001dc5b
1000b454:	10015328 	.word	0x10015328
1000b458:	100405ec 	.word	0x100405ec
1000b45c:	10015324 	.word	0x10015324
1000b460:	0001d5e3 	.word	0x0001d5e3
1000b464:	10015330 	.word	0x10015330
1000b468:	10040c20 	.word	0x10040c20
1000b46c:	10015348 	.word	0x10015348
1000b470:	00019f09 	.word	0x00019f09
1000b474:	10015304 	.word	0x10015304
1000b478:	10015d28 	.word	0x10015d28
1000b47c:	10011705 	.word	0x10011705
1000b480:	10015fc0 	.word	0x10015fc0
1000b484:	1000b10d 	.word	0x1000b10d
1000b488:	10015fb4 	.word	0x10015fb4
1000b48c:	1000b1b5 	.word	0x1000b1b5
1000b490:	1000b909 	.word	0x1000b909
1000b494:	1000b8f1 	.word	0x1000b8f1

1000b498 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b498:	4b04      	ldr	r3, [pc, #16]	; (1000b4ac <platform_register_ble_msg_handler+0x14>)
1000b49a:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b49c:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b49e:	2a01      	cmp	r2, #1
1000b4a0:	d102      	bne.n	1000b4a8 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b4a2:	4b03      	ldr	r3, [pc, #12]	; (1000b4b0 <platform_register_ble_msg_handler+0x18>)
1000b4a4:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b4a6:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b4a8:	0018      	movs	r0, r3
1000b4aa:	4770      	bx	lr
1000b4ac:	1001531c 	.word	0x1001531c
1000b4b0:	1001533c 	.word	0x1001533c

1000b4b4 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b4b4:	b570      	push	{r4, r5, r6, lr}
1000b4b6:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b4b8:	4b0e      	ldr	r3, [pc, #56]	; (1000b4f4 <platform_interface_send+0x40>)
1000b4ba:	681b      	ldr	r3, [r3, #0]
1000b4bc:	2b00      	cmp	r3, #0
1000b4be:	d002      	beq.n	1000b4c6 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b4c0:	8840      	ldrh	r0, [r0, #2]
1000b4c2:	4798      	blx	r3
1000b4c4:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b4c6:	88e3      	ldrh	r3, [r4, #6]
1000b4c8:	88a2      	ldrh	r2, [r4, #4]
1000b4ca:	8861      	ldrh	r1, [r4, #2]
1000b4cc:	8820      	ldrh	r0, [r4, #0]
1000b4ce:	4d0a      	ldr	r5, [pc, #40]	; (1000b4f8 <platform_interface_send+0x44>)
1000b4d0:	682d      	ldr	r5, [r5, #0]
1000b4d2:	47a8      	blx	r5
1000b4d4:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b4d6:	88e2      	ldrh	r2, [r4, #6]
1000b4d8:	2a00      	cmp	r2, #0
1000b4da:	d102      	bne.n	1000b4e2 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b4dc:	4b07      	ldr	r3, [pc, #28]	; (1000b4fc <platform_interface_send+0x48>)
1000b4de:	4798      	blx	r3
1000b4e0:	e006      	b.n	1000b4f0 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b4e2:	0021      	movs	r1, r4
1000b4e4:	3108      	adds	r1, #8
1000b4e6:	4b06      	ldr	r3, [pc, #24]	; (1000b500 <platform_interface_send+0x4c>)
1000b4e8:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b4ea:	0028      	movs	r0, r5
1000b4ec:	4b03      	ldr	r3, [pc, #12]	; (1000b4fc <platform_interface_send+0x48>)
1000b4ee:	4798      	blx	r3
	}
}
1000b4f0:	bd70      	pop	{r4, r5, r6, pc}
1000b4f2:	46c0      	nop			; (mov r8, r8)
1000b4f4:	1001530c 	.word	0x1001530c
1000b4f8:	10015344 	.word	0x10015344
1000b4fc:	1000b13d 	.word	0x1000b13d
1000b500:	100116f3 	.word	0x100116f3

1000b504 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b504:	b570      	push	{r4, r5, r6, lr}
1000b506:	0015      	movs	r5, r2
1000b508:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b50a:	020a      	lsls	r2, r1, #8
1000b50c:	4302      	orrs	r2, r0
1000b50e:	4b0a      	ldr	r3, [pc, #40]	; (1000b538 <send_plf_int_msg_ind+0x34>)
1000b510:	681e      	ldr	r6, [r3, #0]
1000b512:	0023      	movs	r3, r4
1000b514:	2105      	movs	r1, #5
1000b516:	20a0      	movs	r0, #160	; 0xa0
1000b518:	00c0      	lsls	r0, r0, #3
1000b51a:	47b0      	blx	r6
1000b51c:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000b51e:	d00a      	beq.n	1000b536 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000b520:	2c00      	cmp	r4, #0
1000b522:	d005      	beq.n	1000b530 <send_plf_int_msg_ind+0x2c>
1000b524:	2d00      	cmp	r5, #0
1000b526:	d003      	beq.n	1000b530 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000b528:	0022      	movs	r2, r4
1000b52a:	0029      	movs	r1, r5
1000b52c:	4b03      	ldr	r3, [pc, #12]	; (1000b53c <send_plf_int_msg_ind+0x38>)
1000b52e:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000b530:	0030      	movs	r0, r6
1000b532:	4b03      	ldr	r3, [pc, #12]	; (1000b540 <send_plf_int_msg_ind+0x3c>)
1000b534:	4798      	blx	r3
	}
}
1000b536:	bd70      	pop	{r4, r5, r6, pc}
1000b538:	10015344 	.word	0x10015344
1000b53c:	100116f3 	.word	0x100116f3
1000b540:	1000b13d 	.word	0x1000b13d

1000b544 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b544:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b546:	465f      	mov	r7, fp
1000b548:	4656      	mov	r6, sl
1000b54a:	464d      	mov	r5, r9
1000b54c:	4644      	mov	r4, r8
1000b54e:	b4f0      	push	{r4, r5, r6, r7}
1000b550:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b552:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b554:	2300      	movs	r3, #0
1000b556:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b558:	1ce3      	adds	r3, r4, #3
1000b55a:	d81c      	bhi.n	1000b596 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b55c:	220d      	movs	r2, #13
1000b55e:	2100      	movs	r1, #0
1000b560:	a802      	add	r0, sp, #8
1000b562:	4b82      	ldr	r3, [pc, #520]	; (1000b76c <platform_event_wait+0x228>)
1000b564:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b566:	2333      	movs	r3, #51	; 0x33
1000b568:	aa02      	add	r2, sp, #8
1000b56a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b56c:	3b30      	subs	r3, #48	; 0x30
1000b56e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b570:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b572:	3302      	adds	r3, #2
1000b574:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b576:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b578:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b57a:	0a23      	lsrs	r3, r4, #8
1000b57c:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b57e:	0c23      	lsrs	r3, r4, #16
1000b580:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b582:	0e24      	lsrs	r4, r4, #24
1000b584:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b586:	2301      	movs	r3, #1
1000b588:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b58a:	210d      	movs	r1, #13
1000b58c:	0010      	movs	r0, r2
1000b58e:	4b78      	ldr	r3, [pc, #480]	; (1000b770 <platform_event_wait+0x22c>)
1000b590:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b592:	2301      	movs	r3, #1
1000b594:	4699      	mov	r9, r3
1000b596:	2400      	movs	r4, #0
1000b598:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b59a:	4f76      	ldr	r7, [pc, #472]	; (1000b774 <platform_event_wait+0x230>)
1000b59c:	4e76      	ldr	r6, [pc, #472]	; (1000b778 <platform_event_wait+0x234>)
1000b59e:	4977      	ldr	r1, [pc, #476]	; (1000b77c <platform_event_wait+0x238>)
1000b5a0:	6838      	ldr	r0, [r7, #0]
1000b5a2:	6833      	ldr	r3, [r6, #0]
1000b5a4:	4798      	blx	r3
1000b5a6:	2800      	cmp	r0, #0
1000b5a8:	d000      	beq.n	1000b5ac <platform_event_wait+0x68>
1000b5aa:	e088      	b.n	1000b6be <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b5ac:	4b73      	ldr	r3, [pc, #460]	; (1000b77c <platform_event_wait+0x238>)
1000b5ae:	681c      	ldr	r4, [r3, #0]
1000b5b0:	88a3      	ldrh	r3, [r4, #4]
1000b5b2:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b5b4:	23cd      	movs	r3, #205	; 0xcd
1000b5b6:	009b      	lsls	r3, r3, #2
1000b5b8:	459a      	cmp	sl, r3
1000b5ba:	d100      	bne.n	1000b5be <platform_event_wait+0x7a>
1000b5bc:	e0c7      	b.n	1000b74e <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b5be:	8923      	ldrh	r3, [r4, #8]
1000b5c0:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b5c2:	8963      	ldrh	r3, [r4, #10]
1000b5c4:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b5c6:	464b      	mov	r3, r9
1000b5c8:	2b00      	cmp	r3, #0
1000b5ca:	d011      	beq.n	1000b5f0 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b5cc:	220d      	movs	r2, #13
1000b5ce:	2100      	movs	r1, #0
1000b5d0:	a802      	add	r0, sp, #8
1000b5d2:	4b66      	ldr	r3, [pc, #408]	; (1000b76c <platform_event_wait+0x228>)
1000b5d4:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b5d6:	2333      	movs	r3, #51	; 0x33
1000b5d8:	aa02      	add	r2, sp, #8
1000b5da:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b5dc:	3b30      	subs	r3, #48	; 0x30
1000b5de:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b5e0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b5e2:	3302      	adds	r3, #2
1000b5e4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b5e6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b5e8:	210d      	movs	r1, #13
1000b5ea:	0010      	movs	r0, r2
1000b5ec:	4b60      	ldr	r3, [pc, #384]	; (1000b770 <platform_event_wait+0x22c>)
1000b5ee:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b5f0:	23a0      	movs	r3, #160	; 0xa0
1000b5f2:	00db      	lsls	r3, r3, #3
1000b5f4:	459a      	cmp	sl, r3
1000b5f6:	d121      	bne.n	1000b63c <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b5f8:	4b61      	ldr	r3, [pc, #388]	; (1000b780 <platform_event_wait+0x23c>)
1000b5fa:	881b      	ldrh	r3, [r3, #0]
1000b5fc:	4443      	add	r3, r8
1000b5fe:	22a0      	movs	r2, #160	; 0xa0
1000b600:	0092      	lsls	r2, r2, #2
1000b602:	4293      	cmp	r3, r2
1000b604:	dd02      	ble.n	1000b60c <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b606:	3a80      	subs	r2, #128	; 0x80
1000b608:	4b5d      	ldr	r3, [pc, #372]	; (1000b780 <platform_event_wait+0x23c>)
1000b60a:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b60c:	4b5c      	ldr	r3, [pc, #368]	; (1000b780 <platform_event_wait+0x23c>)
1000b60e:	469a      	mov	sl, r3
1000b610:	881d      	ldrh	r5, [r3, #0]
1000b612:	4b5c      	ldr	r3, [pc, #368]	; (1000b784 <platform_event_wait+0x240>)
1000b614:	18ed      	adds	r5, r5, r3
1000b616:	0021      	movs	r1, r4
1000b618:	310c      	adds	r1, #12
1000b61a:	4642      	mov	r2, r8
1000b61c:	0028      	movs	r0, r5
1000b61e:	4b5a      	ldr	r3, [pc, #360]	; (1000b788 <platform_event_wait+0x244>)
1000b620:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b622:	4642      	mov	r2, r8
1000b624:	0029      	movs	r1, r5
1000b626:	4658      	mov	r0, fp
1000b628:	4b58      	ldr	r3, [pc, #352]	; (1000b78c <platform_event_wait+0x248>)
1000b62a:	4798      	blx	r3
				plf_event_buff_index += len;
1000b62c:	4653      	mov	r3, sl
1000b62e:	881b      	ldrh	r3, [r3, #0]
1000b630:	4443      	add	r3, r8
1000b632:	4652      	mov	r2, sl
1000b634:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b636:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b638:	2502      	movs	r5, #2
1000b63a:	e03a      	b.n	1000b6b2 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b63c:	4b54      	ldr	r3, [pc, #336]	; (1000b790 <platform_event_wait+0x24c>)
1000b63e:	681b      	ldr	r3, [r3, #0]
1000b640:	2b00      	cmp	r3, #0
1000b642:	d032      	beq.n	1000b6aa <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b644:	4b4d      	ldr	r3, [pc, #308]	; (1000b77c <platform_event_wait+0x238>)
1000b646:	681a      	ldr	r2, [r3, #0]
1000b648:	8893      	ldrh	r3, [r2, #4]
1000b64a:	21cd      	movs	r1, #205	; 0xcd
1000b64c:	0089      	lsls	r1, r1, #2
1000b64e:	428b      	cmp	r3, r1
1000b650:	d104      	bne.n	1000b65c <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b652:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b654:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b656:	2b00      	cmp	r3, #0
1000b658:	d02b      	beq.n	1000b6b2 <platform_event_wait+0x16e>
1000b65a:	e028      	b.n	1000b6ae <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b65c:	4c4d      	ldr	r4, [pc, #308]	; (1000b794 <platform_event_wait+0x250>)
1000b65e:	4d49      	ldr	r5, [pc, #292]	; (1000b784 <platform_event_wait+0x240>)
1000b660:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b662:	702b      	strb	r3, [r5, #0]
1000b664:	0a1b      	lsrs	r3, r3, #8
1000b666:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b668:	8910      	ldrh	r0, [r2, #8]
1000b66a:	4b4b      	ldr	r3, [pc, #300]	; (1000b798 <platform_event_wait+0x254>)
1000b66c:	681b      	ldr	r3, [r3, #0]
1000b66e:	4798      	blx	r3
1000b670:	7128      	strb	r0, [r5, #4]
1000b672:	0a00      	lsrs	r0, r0, #8
1000b674:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b676:	6820      	ldr	r0, [r4, #0]
1000b678:	4b40      	ldr	r3, [pc, #256]	; (1000b77c <platform_event_wait+0x238>)
1000b67a:	681a      	ldr	r2, [r3, #0]
1000b67c:	88d2      	ldrh	r2, [r2, #6]
1000b67e:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b680:	681d      	ldr	r5, [r3, #0]
1000b682:	896b      	ldrh	r3, [r5, #10]
1000b684:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b686:	3008      	adds	r0, #8
1000b688:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b68a:	896a      	ldrh	r2, [r5, #10]
1000b68c:	2a00      	cmp	r2, #0
1000b68e:	d003      	beq.n	1000b698 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b690:	0029      	movs	r1, r5
1000b692:	310c      	adds	r1, #12
1000b694:	4b3c      	ldr	r3, [pc, #240]	; (1000b788 <platform_event_wait+0x244>)
1000b696:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b698:	8969      	ldrh	r1, [r5, #10]
1000b69a:	3108      	adds	r1, #8
1000b69c:	4b3c      	ldr	r3, [pc, #240]	; (1000b790 <platform_event_wait+0x24c>)
1000b69e:	681b      	ldr	r3, [r3, #0]
1000b6a0:	4838      	ldr	r0, [pc, #224]	; (1000b784 <platform_event_wait+0x240>)
1000b6a2:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b6a4:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b6a6:	2503      	movs	r5, #3
1000b6a8:	e003      	b.n	1000b6b2 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b6aa:	2400      	movs	r4, #0
1000b6ac:	e001      	b.n	1000b6b2 <platform_event_wait+0x16e>
1000b6ae:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b6b0:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b6b2:	4b32      	ldr	r3, [pc, #200]	; (1000b77c <platform_event_wait+0x238>)
1000b6b4:	6818      	ldr	r0, [r3, #0]
1000b6b6:	4b39      	ldr	r3, [pc, #228]	; (1000b79c <platform_event_wait+0x258>)
1000b6b8:	681b      	ldr	r3, [r3, #0]
1000b6ba:	4798      	blx	r3
1000b6bc:	e000      	b.n	1000b6c0 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b6be:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b6c0:	2c00      	cmp	r4, #0
1000b6c2:	d000      	beq.n	1000b6c6 <platform_event_wait+0x182>
1000b6c4:	e76b      	b.n	1000b59e <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b6c6:	464b      	mov	r3, r9
1000b6c8:	2b00      	cmp	r3, #0
1000b6ca:	d046      	beq.n	1000b75a <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b6cc:	4b29      	ldr	r3, [pc, #164]	; (1000b774 <platform_event_wait+0x230>)
1000b6ce:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b6d0:	2e00      	cmp	r6, #0
1000b6d2:	d104      	bne.n	1000b6de <platform_event_wait+0x19a>
1000b6d4:	2300      	movs	r3, #0
1000b6d6:	6a1c      	ldr	r4, [r3, #32]
1000b6d8:	2c00      	cmp	r4, #0
1000b6da:	d131      	bne.n	1000b740 <platform_event_wait+0x1fc>
1000b6dc:	e03d      	b.n	1000b75a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b6de:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b6e0:	2314      	movs	r3, #20
1000b6e2:	469c      	mov	ip, r3
1000b6e4:	44b4      	add	ip, r6
1000b6e6:	4663      	mov	r3, ip
1000b6e8:	4660      	mov	r0, ip
1000b6ea:	9300      	str	r3, [sp, #0]
1000b6ec:	4b2c      	ldr	r3, [pc, #176]	; (1000b7a0 <platform_event_wait+0x25c>)
1000b6ee:	681b      	ldr	r3, [r3, #0]
1000b6f0:	4798      	blx	r3
	while(NULL != current)
1000b6f2:	2c00      	cmp	r4, #0
1000b6f4:	d01f      	beq.n	1000b736 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b6f6:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b6f8:	23cd      	movs	r3, #205	; 0xcd
1000b6fa:	009b      	lsls	r3, r3, #2
1000b6fc:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b6fe:	4b27      	ldr	r3, [pc, #156]	; (1000b79c <platform_event_wait+0x258>)
1000b700:	469a      	mov	sl, r3
1000b702:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b704:	6803      	ldr	r3, [r0, #0]
1000b706:	889b      	ldrh	r3, [r3, #4]
1000b708:	4543      	cmp	r3, r8
1000b70a:	d110      	bne.n	1000b72e <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b70c:	2f00      	cmp	r7, #0
1000b70e:	d006      	beq.n	1000b71e <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b710:	6883      	ldr	r3, [r0, #8]
1000b712:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b714:	4653      	mov	r3, sl
1000b716:	681b      	ldr	r3, [r3, #0]
1000b718:	4798      	blx	r3
				current = prev->pstrNext;
1000b71a:	68b8      	ldr	r0, [r7, #8]
1000b71c:	e009      	b.n	1000b732 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b71e:	6883      	ldr	r3, [r0, #8]
1000b720:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b722:	4b1e      	ldr	r3, [pc, #120]	; (1000b79c <platform_event_wait+0x258>)
1000b724:	681b      	ldr	r3, [r3, #0]
1000b726:	9301      	str	r3, [sp, #4]
1000b728:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b72a:	6a30      	ldr	r0, [r6, #32]
1000b72c:	e001      	b.n	1000b732 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b72e:	0007      	movs	r7, r0
1000b730:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b732:	2800      	cmp	r0, #0
1000b734:	d1e6      	bne.n	1000b704 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b736:	4b1b      	ldr	r3, [pc, #108]	; (1000b7a4 <platform_event_wait+0x260>)
1000b738:	681b      	ldr	r3, [r3, #0]
1000b73a:	9800      	ldr	r0, [sp, #0]
1000b73c:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b73e:	e00c      	b.n	1000b75a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b740:	2314      	movs	r3, #20
1000b742:	9300      	str	r3, [sp, #0]
1000b744:	4b16      	ldr	r3, [pc, #88]	; (1000b7a0 <platform_event_wait+0x25c>)
1000b746:	681b      	ldr	r3, [r3, #0]
1000b748:	2014      	movs	r0, #20
1000b74a:	4798      	blx	r3
1000b74c:	e7d3      	b.n	1000b6f6 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b74e:	4b10      	ldr	r3, [pc, #64]	; (1000b790 <platform_event_wait+0x24c>)
1000b750:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b752:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b754:	2b00      	cmp	r3, #0
1000b756:	d0ac      	beq.n	1000b6b2 <platform_event_wait+0x16e>
1000b758:	e77b      	b.n	1000b652 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b75a:	0028      	movs	r0, r5
1000b75c:	b007      	add	sp, #28
1000b75e:	bc3c      	pop	{r2, r3, r4, r5}
1000b760:	4690      	mov	r8, r2
1000b762:	4699      	mov	r9, r3
1000b764:	46a2      	mov	sl, r4
1000b766:	46ab      	mov	fp, r5
1000b768:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b76a:	46c0      	nop			; (mov r8, r8)
1000b76c:	10011705 	.word	0x10011705
1000b770:	1000b4b5 	.word	0x1000b4b5
1000b774:	10015348 	.word	0x10015348
1000b778:	10015330 	.word	0x10015330
1000b77c:	10015310 	.word	0x10015310
1000b780:	10015fc0 	.word	0x10015fc0
1000b784:	10015d28 	.word	0x10015d28
1000b788:	100116f3 	.word	0x100116f3
1000b78c:	1000b0d5 	.word	0x1000b0d5
1000b790:	1001533c 	.word	0x1001533c
1000b794:	10015338 	.word	0x10015338
1000b798:	10015308 	.word	0x10015308
1000b79c:	10015304 	.word	0x10015304
1000b7a0:	10015328 	.word	0x10015328
1000b7a4:	10015314 	.word	0x10015314

1000b7a8 <release_message_lock>:
#endif	//0
	return status;
}

plf_drv_status release_message_lock()
{
1000b7a8:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b7aa:	4b03      	ldr	r3, [pc, #12]	; (1000b7b8 <release_message_lock+0x10>)
1000b7ac:	681b      	ldr	r3, [r3, #0]
1000b7ae:	2080      	movs	r0, #128	; 0x80
1000b7b0:	01c0      	lsls	r0, r0, #7
1000b7b2:	4798      	blx	r3
	return status;
}
1000b7b4:	2000      	movs	r0, #0
1000b7b6:	bd10      	pop	{r4, pc}
1000b7b8:	10015cec 	.word	0x10015cec

1000b7bc <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000b7bc:	2800      	cmp	r0, #0
1000b7be:	d003      	beq.n	1000b7c8 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000b7c0:	4b02      	ldr	r3, [pc, #8]	; (1000b7cc <register_resume_callback+0x10>)
1000b7c2:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000b7c4:	2000      	movs	r0, #0
1000b7c6:	e000      	b.n	1000b7ca <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000b7c8:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000b7ca:	4770      	bx	lr
1000b7cc:	10015fb4 	.word	0x10015fb4

1000b7d0 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000b7d0:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b7d2:	4a18      	ldr	r2, [pc, #96]	; (1000b834 <gpio1_combined_isr_handler+0x64>)
1000b7d4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b7d6:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b7d8:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b7da:	2180      	movs	r1, #128	; 0x80
1000b7dc:	0209      	lsls	r1, r1, #8
1000b7de:	4301      	orrs	r1, r0
1000b7e0:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b7e2:	0010      	movs	r0, r2
1000b7e4:	4d14      	ldr	r5, [pc, #80]	; (1000b838 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b7e6:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b7e8:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b7ea:	05db      	lsls	r3, r3, #23
1000b7ec:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b7ee:	d011      	beq.n	1000b814 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b7f0:	b2db      	uxtb	r3, r3
1000b7f2:	4259      	negs	r1, r3
1000b7f4:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b7f6:	2b01      	cmp	r3, #1
1000b7f8:	d006      	beq.n	1000b808 <gpio1_combined_isr_handler+0x38>
1000b7fa:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b7fc:	085b      	lsrs	r3, r3, #1
				index++;
1000b7fe:	3101      	adds	r1, #1
1000b800:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b802:	2b01      	cmp	r3, #1
1000b804:	d1fa      	bne.n	1000b7fc <gpio1_combined_isr_handler+0x2c>
1000b806:	e000      	b.n	1000b80a <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b808:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b80a:	0023      	movs	r3, r4
1000b80c:	408b      	lsls	r3, r1
1000b80e:	b29b      	uxth	r3, r3
1000b810:	8703      	strh	r3, [r0, #56]	; 0x38
1000b812:	e003      	b.n	1000b81c <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b814:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b816:	432b      	orrs	r3, r5
1000b818:	b29b      	uxth	r3, r3
1000b81a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b81c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b81e:	05db      	lsls	r3, r3, #23
1000b820:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b822:	d1e2      	bne.n	1000b7ea <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b824:	2180      	movs	r1, #128	; 0x80
1000b826:	0049      	lsls	r1, r1, #1
1000b828:	3381      	adds	r3, #129	; 0x81
1000b82a:	33ff      	adds	r3, #255	; 0xff
1000b82c:	4a03      	ldr	r2, [pc, #12]	; (1000b83c <gpio1_combined_isr_handler+0x6c>)
1000b82e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b830:	bd30      	pop	{r4, r5, pc}
1000b832:	46c0      	nop			; (mov r8, r8)
1000b834:	40011000 	.word	0x40011000
1000b838:	ffff8000 	.word	0xffff8000
1000b83c:	e000e100 	.word	0xe000e100

1000b840 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b840:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b842:	4a17      	ldr	r2, [pc, #92]	; (1000b8a0 <gpio0_combined_isr_handler+0x60>)
1000b844:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b846:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b848:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b84a:	2180      	movs	r1, #128	; 0x80
1000b84c:	0209      	lsls	r1, r1, #8
1000b84e:	4301      	orrs	r1, r0
1000b850:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b852:	0010      	movs	r0, r2
1000b854:	4d13      	ldr	r5, [pc, #76]	; (1000b8a4 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b856:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b858:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b85a:	05db      	lsls	r3, r3, #23
1000b85c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b85e:	d011      	beq.n	1000b884 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b860:	b2db      	uxtb	r3, r3
1000b862:	4259      	negs	r1, r3
1000b864:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b866:	2b01      	cmp	r3, #1
1000b868:	d006      	beq.n	1000b878 <gpio0_combined_isr_handler+0x38>
1000b86a:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b86c:	085b      	lsrs	r3, r3, #1
				index++;
1000b86e:	3101      	adds	r1, #1
1000b870:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b872:	2b01      	cmp	r3, #1
1000b874:	d1fa      	bne.n	1000b86c <gpio0_combined_isr_handler+0x2c>
1000b876:	e000      	b.n	1000b87a <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b878:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b87a:	0023      	movs	r3, r4
1000b87c:	408b      	lsls	r3, r1
1000b87e:	b29b      	uxth	r3, r3
1000b880:	8703      	strh	r3, [r0, #56]	; 0x38
1000b882:	e003      	b.n	1000b88c <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b884:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b886:	432b      	orrs	r3, r5
1000b888:	b29b      	uxth	r3, r3
1000b88a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b88c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b88e:	05db      	lsls	r3, r3, #23
1000b890:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b892:	d1e2      	bne.n	1000b85a <gpio0_combined_isr_handler+0x1a>
1000b894:	2180      	movs	r1, #128	; 0x80
1000b896:	3381      	adds	r3, #129	; 0x81
1000b898:	33ff      	adds	r3, #255	; 0xff
1000b89a:	4a03      	ldr	r2, [pc, #12]	; (1000b8a8 <gpio0_combined_isr_handler+0x68>)
1000b89c:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b89e:	bd30      	pop	{r4, r5, pc}
1000b8a0:	40010000 	.word	0x40010000
1000b8a4:	ffff8000 	.word	0xffff8000
1000b8a8:	e000e100 	.word	0xe000e100

1000b8ac <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b8ac:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b8ae:	4b0c      	ldr	r3, [pc, #48]	; (1000b8e0 <PORT1_COMB_Handler+0x34>)
1000b8b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b8b2:	0b5b      	lsrs	r3, r3, #13
1000b8b4:	d010      	beq.n	1000b8d8 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b8b6:	4b0b      	ldr	r3, [pc, #44]	; (1000b8e4 <PORT1_COMB_Handler+0x38>)
1000b8b8:	681b      	ldr	r3, [r3, #0]
1000b8ba:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b8bc:	4a08      	ldr	r2, [pc, #32]	; (1000b8e0 <PORT1_COMB_Handler+0x34>)
1000b8be:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b8c0:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b8c2:	0b5b      	lsrs	r3, r3, #13
1000b8c4:	035b      	lsls	r3, r3, #13
1000b8c6:	430b      	orrs	r3, r1
1000b8c8:	8713      	strh	r3, [r2, #56]	; 0x38
1000b8ca:	2180      	movs	r1, #128	; 0x80
1000b8cc:	0049      	lsls	r1, r1, #1
1000b8ce:	23c0      	movs	r3, #192	; 0xc0
1000b8d0:	005b      	lsls	r3, r3, #1
1000b8d2:	4a05      	ldr	r2, [pc, #20]	; (1000b8e8 <PORT1_COMB_Handler+0x3c>)
1000b8d4:	50d1      	str	r1, [r2, r3]
1000b8d6:	e001      	b.n	1000b8dc <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b8d8:	4b04      	ldr	r3, [pc, #16]	; (1000b8ec <PORT1_COMB_Handler+0x40>)
1000b8da:	4798      	blx	r3
	}
}
1000b8dc:	bd10      	pop	{r4, pc}
1000b8de:	46c0      	nop			; (mov r8, r8)
1000b8e0:	40011000 	.word	0x40011000
1000b8e4:	10015fac 	.word	0x10015fac
1000b8e8:	e000e100 	.word	0xe000e100
1000b8ec:	1000b7d1 	.word	0x1000b7d1

1000b8f0 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b8f0:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b8f2:	2802      	cmp	r0, #2
1000b8f4:	d804      	bhi.n	1000b900 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b8f6:	0080      	lsls	r0, r0, #2
1000b8f8:	2200      	movs	r2, #0
1000b8fa:	4b02      	ldr	r3, [pc, #8]	; (1000b904 <wakeup_int_unregister_callback+0x14>)
1000b8fc:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b8fe:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b900:	0018      	movs	r0, r3
1000b902:	4770      	bx	lr
1000b904:	10015fc4 	.word	0x10015fc4

1000b908 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b908:	b510      	push	{r4, lr}
1000b90a:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b90c:	7803      	ldrb	r3, [r0, #0]
1000b90e:	2b01      	cmp	r3, #1
1000b910:	d108      	bne.n	1000b924 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000b912:	4b11      	ldr	r3, [pc, #68]	; (1000b958 <wakeup_active_event_callback+0x50>)
1000b914:	681b      	ldr	r3, [r3, #0]
1000b916:	2b00      	cmp	r3, #0
1000b918:	d000      	beq.n	1000b91c <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000b91a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000b91c:	23ff      	movs	r3, #255	; 0xff
1000b91e:	6822      	ldr	r2, [r4, #0]
1000b920:	439a      	bics	r2, r3
1000b922:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b924:	7863      	ldrb	r3, [r4, #1]
1000b926:	2b01      	cmp	r3, #1
1000b928:	d108      	bne.n	1000b93c <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000b92a:	4b0b      	ldr	r3, [pc, #44]	; (1000b958 <wakeup_active_event_callback+0x50>)
1000b92c:	685b      	ldr	r3, [r3, #4]
1000b92e:	2b00      	cmp	r3, #0
1000b930:	d000      	beq.n	1000b934 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000b932:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b934:	4b09      	ldr	r3, [pc, #36]	; (1000b95c <wakeup_active_event_callback+0x54>)
1000b936:	6822      	ldr	r2, [r4, #0]
1000b938:	4013      	ands	r3, r2
1000b93a:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b93c:	78a3      	ldrb	r3, [r4, #2]
1000b93e:	2b01      	cmp	r3, #1
1000b940:	d108      	bne.n	1000b954 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000b942:	4b05      	ldr	r3, [pc, #20]	; (1000b958 <wakeup_active_event_callback+0x50>)
1000b944:	689b      	ldr	r3, [r3, #8]
1000b946:	2b00      	cmp	r3, #0
1000b948:	d000      	beq.n	1000b94c <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000b94a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b94c:	4b04      	ldr	r3, [pc, #16]	; (1000b960 <wakeup_active_event_callback+0x58>)
1000b94e:	6822      	ldr	r2, [r4, #0]
1000b950:	4013      	ands	r3, r2
1000b952:	6023      	str	r3, [r4, #0]
	}
}
1000b954:	bd10      	pop	{r4, pc}
1000b956:	46c0      	nop			; (mov r8, r8)
1000b958:	10015fc4 	.word	0x10015fc4
1000b95c:	ffff00ff 	.word	0xffff00ff
1000b960:	ff00ffff 	.word	0xff00ffff

1000b964 <ble_paired_app_event>:
}

/* Callback registered for AT_BLE_PAIR_DONE event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
	timer_cb_done = false;
1000b964:	2200      	movs	r2, #0
1000b966:	4b02      	ldr	r3, [pc, #8]	; (1000b970 <ble_paired_app_event+0xc>)
1000b968:	701a      	strb	r2, [r3, #0]
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000b96a:	2000      	movs	r0, #0
1000b96c:	4770      	bx	lr
1000b96e:	46c0      	nop			; (mov r8, r8)
1000b970:	10015357 	.word	0x10015357

1000b974 <ble_connected_app_event>:
}

static at_ble_status_t ble_connected_app_event(void *param)
{
	at_ble_connected_t *connected = (at_ble_connected_t *)param;
	bat_connection_handle = connected->handle;
1000b974:	8902      	ldrh	r2, [r0, #8]
1000b976:	4b02      	ldr	r3, [pc, #8]	; (1000b980 <ble_connected_app_event+0xc>)
1000b978:	801a      	strh	r2, [r3, #0]
	ble_paired_app_event(param);
	#else
	ALL_UNUSED(param);
	#endif
	return AT_BLE_SUCCESS;
}
1000b97a:	2000      	movs	r0, #0
1000b97c:	4770      	bx	lr
1000b97e:	46c0      	nop			; (mov r8, r8)
1000b980:	10015fe4 	.word	0x10015fe4

1000b984 <ble_notification_confirmed_app_event>:

/* Callback registered for AT_BLE_NOTIFICATION_CONFIRMED event from stack */
static at_ble_status_t ble_notification_confirmed_app_event(void *param)
{
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)param;
	if(!notification_status->status)
1000b984:	78c3      	ldrb	r3, [r0, #3]
1000b986:	2b00      	cmp	r3, #0
1000b988:	d102      	bne.n	1000b990 <ble_notification_confirmed_app_event+0xc>
	{
		flag = true;
1000b98a:	2201      	movs	r2, #1
1000b98c:	4b01      	ldr	r3, [pc, #4]	; (1000b994 <ble_notification_confirmed_app_event+0x10>)
1000b98e:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("sending notification to the peer success");
	}
	return AT_BLE_SUCCESS;
}
1000b990:	2000      	movs	r0, #0
1000b992:	4770      	bx	lr
1000b994:	100138d1 	.word	0x100138d1

1000b998 <resume_cb>:
	NULL,
	NULL
};

void resume_cb(void)
{
1000b998:	b510      	push	{r4, lr}
	init_port_list();
1000b99a:	4b02      	ldr	r3, [pc, #8]	; (1000b9a4 <resume_cb+0xc>)
1000b99c:	4798      	blx	r3
	//uart_init(UART_HW_MODULE_UART1,&uart_cfg);
	serial_console_init();
1000b99e:	4b02      	ldr	r3, [pc, #8]	; (1000b9a8 <resume_cb+0x10>)
1000b9a0:	4798      	blx	r3
}
1000b9a2:	bd10      	pop	{r4, pc}
1000b9a4:	1000b1e1 	.word	0x1000b1e1
1000b9a8:	1000af49 	.word	0x1000af49

1000b9ac <app_htpt_cfg_indntf_ind_handler>:
		ble_advertise(); 
		ALL_UNUSED(param);
		return AT_BLE_SUCCESS;
	}
	
	static at_ble_status_t app_htpt_cfg_indntf_ind_handler(void *params) { 
1000b9ac:	b510      	push	{r4, lr}
		at_ble_htpt_cfg_indntf_ind_t htpt_cfg_indntf_ind_params; 
		memcpy((uint8_t *)&htpt_cfg_indntf_ind_params, 
		params, 
		sizeof(at_ble_htpt_cfg_indntf_ind_t)); 
		
		if (htpt_cfg_indntf_ind_params.ntf_ind_cfg == 0x03) { 
1000b9ae:	7843      	ldrb	r3, [r0, #1]
1000b9b0:	2b03      	cmp	r3, #3
1000b9b2:	d106      	bne.n	1000b9c2 <app_htpt_cfg_indntf_ind_handler+0x16>
			printf("Started HTP Temperature Notification"); 
1000b9b4:	4807      	ldr	r0, [pc, #28]	; (1000b9d4 <app_htpt_cfg_indntf_ind_handler+0x28>)
1000b9b6:	4b08      	ldr	r3, [pc, #32]	; (1000b9d8 <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000b9b8:	4798      	blx	r3
			Temp_Notification_Flag = true; 
1000b9ba:	2201      	movs	r2, #1
1000b9bc:	4b07      	ldr	r3, [pc, #28]	; (1000b9dc <app_htpt_cfg_indntf_ind_handler+0x30>)
1000b9be:	701a      	strb	r2, [r3, #0]
1000b9c0:	e005      	b.n	1000b9ce <app_htpt_cfg_indntf_ind_handler+0x22>
		} 
		else { 
			printf("HTP Temperature Notification Stopped"); 
1000b9c2:	4807      	ldr	r0, [pc, #28]	; (1000b9e0 <app_htpt_cfg_indntf_ind_handler+0x34>)
1000b9c4:	4b04      	ldr	r3, [pc, #16]	; (1000b9d8 <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000b9c6:	4798      	blx	r3
			Temp_Notification_Flag = false; 
1000b9c8:	2200      	movs	r2, #0
1000b9ca:	4b04      	ldr	r3, [pc, #16]	; (1000b9dc <app_htpt_cfg_indntf_ind_handler+0x30>)
1000b9cc:	701a      	strb	r2, [r3, #0]
		} 
		return AT_BLE_SUCCESS; 
	}
1000b9ce:	2000      	movs	r0, #0
1000b9d0:	bd10      	pop	{r4, pc}
1000b9d2:	46c0      	nop			; (mov r8, r8)
1000b9d4:	100133d8 	.word	0x100133d8
1000b9d8:	10011715 	.word	0x10011715
1000b9dc:	10015356 	.word	0x10015356
1000b9e0:	10013400 	.word	0x10013400

1000b9e4 <transfer_done_rx>:
//! [transfer_done_tx]


//! [transfer_done_rx]
static void transfer_done_rx(struct dma_resource* const resource )
{
1000b9e4:	b570      	push	{r4, r5, r6, lr}
	dma_start_transfer_job(&uart_dma_resource_tx);
1000b9e6:	4817      	ldr	r0, [pc, #92]	; (1000ba44 <transfer_done_rx+0x60>)
1000b9e8:	4b17      	ldr	r3, [pc, #92]	; (1000ba48 <transfer_done_rx+0x64>)
1000b9ea:	4798      	blx	r3
	//Temperature = string[0];
	integer_part = string[0];
1000b9ec:	4c17      	ldr	r4, [pc, #92]	; (1000ba4c <transfer_done_rx+0x68>)
1000b9ee:	7820      	ldrb	r0, [r4, #0]
1000b9f0:	4e17      	ldr	r6, [pc, #92]	; (1000ba50 <transfer_done_rx+0x6c>)
1000b9f2:	47b0      	blx	r6
1000b9f4:	1c05      	adds	r5, r0, #0
1000b9f6:	4b17      	ldr	r3, [pc, #92]	; (1000ba54 <transfer_done_rx+0x70>)
1000b9f8:	6018      	str	r0, [r3, #0]
	fractional_part = string[1];
1000b9fa:	7860      	ldrb	r0, [r4, #1]
1000b9fc:	47b0      	blx	r6
1000b9fe:	4b16      	ldr	r3, [pc, #88]	; (1000ba58 <transfer_done_rx+0x74>)
1000ba00:	6018      	str	r0, [r3, #0]
	temp = (float) (integer_part + ((float)((fractional_part)/10)));
1000ba02:	4916      	ldr	r1, [pc, #88]	; (1000ba5c <transfer_done_rx+0x78>)
1000ba04:	4b16      	ldr	r3, [pc, #88]	; (1000ba60 <transfer_done_rx+0x7c>)
1000ba06:	4798      	blx	r3
1000ba08:	1c29      	adds	r1, r5, #0
1000ba0a:	4b16      	ldr	r3, [pc, #88]	; (1000ba64 <transfer_done_rx+0x80>)
1000ba0c:	4798      	blx	r3
1000ba0e:	4b16      	ldr	r3, [pc, #88]	; (1000ba68 <transfer_done_rx+0x84>)
1000ba10:	6018      	str	r0, [r3, #0]
	if(string[2] == 'a')
1000ba12:	78a3      	ldrb	r3, [r4, #2]
1000ba14:	2b61      	cmp	r3, #97	; 0x61
1000ba16:	d103      	bne.n	1000ba20 <transfer_done_rx+0x3c>
	{
		LED_Status = true;
1000ba18:	2201      	movs	r2, #1
1000ba1a:	4b14      	ldr	r3, [pc, #80]	; (1000ba6c <transfer_done_rx+0x88>)
1000ba1c:	701a      	strb	r2, [r3, #0]
1000ba1e:	e004      	b.n	1000ba2a <transfer_done_rx+0x46>
	}
	else if(string[2] == 'b')
1000ba20:	2b62      	cmp	r3, #98	; 0x62
1000ba22:	d102      	bne.n	1000ba2a <transfer_done_rx+0x46>
	{
		LED_Status = false;
1000ba24:	2200      	movs	r2, #0
1000ba26:	4b11      	ldr	r3, [pc, #68]	; (1000ba6c <transfer_done_rx+0x88>)
1000ba28:	701a      	strb	r2, [r3, #0]
	}
	soil1 = string[4];
1000ba2a:	4b08      	ldr	r3, [pc, #32]	; (1000ba4c <transfer_done_rx+0x68>)
1000ba2c:	791a      	ldrb	r2, [r3, #4]
1000ba2e:	4910      	ldr	r1, [pc, #64]	; (1000ba70 <transfer_done_rx+0x8c>)
1000ba30:	700a      	strb	r2, [r1, #0]
	soil0 = string[5];
1000ba32:	795b      	ldrb	r3, [r3, #5]
1000ba34:	490f      	ldr	r1, [pc, #60]	; (1000ba74 <transfer_done_rx+0x90>)
1000ba36:	700b      	strb	r3, [r1, #0]
	soil = (soil1*100) + soil0;
1000ba38:	2164      	movs	r1, #100	; 0x64
1000ba3a:	434a      	muls	r2, r1
1000ba3c:	18d3      	adds	r3, r2, r3
1000ba3e:	4a0e      	ldr	r2, [pc, #56]	; (1000ba78 <transfer_done_rx+0x94>)
1000ba40:	8013      	strh	r3, [r2, #0]
}
1000ba42:	bd70      	pop	{r4, r5, r6, pc}
1000ba44:	10016004 	.word	0x10016004
1000ba48:	10008419 	.word	0x10008419
1000ba4c:	10015350 	.word	0x10015350
1000ba50:	100104ed 	.word	0x100104ed
1000ba54:	10016000 	.word	0x10016000
1000ba58:	10015fe0 	.word	0x10015fe0
1000ba5c:	41200000 	.word	0x41200000
1000ba60:	1000fd41 	.word	0x1000fd41
1000ba64:	1000fa55 	.word	0x1000fa55
1000ba68:	10015fe8 	.word	0x10015fe8
1000ba6c:	10015fd0 	.word	0x10015fd0
1000ba70:	10015359 	.word	0x10015359
1000ba74:	10015358 	.word	0x10015358
1000ba78:	1001534c 	.word	0x1001534c

1000ba7c <transfer_done_tx>:
	}	
}

//! [transfer_done_tx]
static void transfer_done_tx(struct dma_resource* const resource )
{
1000ba7c:	b510      	push	{r4, lr}
	dma_start_transfer_job(&uart_dma_resource_rx);
1000ba7e:	4802      	ldr	r0, [pc, #8]	; (1000ba88 <transfer_done_tx+0xc>)
1000ba80:	4b02      	ldr	r3, [pc, #8]	; (1000ba8c <transfer_done_tx+0x10>)
1000ba82:	4798      	blx	r3
}
1000ba84:	bd10      	pop	{r4, pc}
1000ba86:	46c0      	nop			; (mov r8, r8)
1000ba88:	10016034 	.word	0x10016034
1000ba8c:	10008419 	.word	0x10008419

1000ba90 <ble_char_changed_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_CHANGED event from stack */
static at_ble_status_t ble_char_changed_app_event(void *param)
{
1000ba90:	b510      	push	{r4, lr}
1000ba92:	0004      	movs	r4, r0
	uint16_t device_listening;
	at_ble_characteristic_changed_t *char_handle = (at_ble_characteristic_changed_t *)param;

	if(bas_service_handler.serv_chars.client_config_handle == char_handle->char_handle)
1000ba94:	234a      	movs	r3, #74	; 0x4a
1000ba96:	4a0d      	ldr	r2, [pc, #52]	; (1000bacc <ble_char_changed_app_event+0x3c>)
1000ba98:	5ad2      	ldrh	r2, [r2, r3]
1000ba9a:	8843      	ldrh	r3, [r0, #2]
1000ba9c:	429a      	cmp	r2, r3
1000ba9e:	d10d      	bne.n	1000babc <ble_char_changed_app_event+0x2c>
	{
		device_listening = char_handle->char_new_value[1]<<8| char_handle->char_new_value[0];
		if(!device_listening)
1000baa0:	7a43      	ldrb	r3, [r0, #9]
1000baa2:	021b      	lsls	r3, r3, #8
1000baa4:	7a02      	ldrb	r2, [r0, #8]
1000baa6:	4313      	orrs	r3, r2
1000baa8:	d102      	bne.n	1000bab0 <ble_char_changed_app_event+0x20>
		{
			aon_sleep_timer_service_stop();
1000baaa:	4b09      	ldr	r3, [pc, #36]	; (1000bad0 <ble_char_changed_app_event+0x40>)
1000baac:	4798      	blx	r3
1000baae:	e005      	b.n	1000babc <ble_char_changed_app_event+0x2c>
		}
		else
		{
			aon_sleep_timer_service_init(1);
1000bab0:	2001      	movs	r0, #1
1000bab2:	4b08      	ldr	r3, [pc, #32]	; (1000bad4 <ble_char_changed_app_event+0x44>)
1000bab4:	4798      	blx	r3
			aon_sleep_timer_service_start(aon_sleep_timer_callback);
1000bab6:	4808      	ldr	r0, [pc, #32]	; (1000bad8 <ble_char_changed_app_event+0x48>)
1000bab8:	4b08      	ldr	r3, [pc, #32]	; (1000badc <ble_char_changed_app_event+0x4c>)
1000baba:	4798      	blx	r3
		}
	}
	return bat_char_changed_event(char_handle->conn_handle,&bas_service_handler, char_handle, &flag);
1000babc:	7820      	ldrb	r0, [r4, #0]
1000babe:	4b08      	ldr	r3, [pc, #32]	; (1000bae0 <ble_char_changed_app_event+0x50>)
1000bac0:	0022      	movs	r2, r4
1000bac2:	4902      	ldr	r1, [pc, #8]	; (1000bacc <ble_char_changed_app_event+0x3c>)
1000bac4:	4c07      	ldr	r4, [pc, #28]	; (1000bae4 <ble_char_changed_app_event+0x54>)
1000bac6:	47a0      	blx	r4
}
1000bac8:	bd10      	pop	{r4, pc}
1000baca:	46c0      	nop			; (mov r8, r8)
1000bacc:	10016074 	.word	0x10016074
1000bad0:	1000adf1 	.word	0x1000adf1
1000bad4:	1000ad89 	.word	0x1000ad89
1000bad8:	1000bae9 	.word	0x1000bae9
1000badc:	1000adbd 	.word	0x1000adbd
1000bae0:	100138d1 	.word	0x100138d1
1000bae4:	10009b4d 	.word	0x10009b4d

1000bae8 <aon_sleep_timer_callback>:
	gpio_pin_set_config(LED_0_PIN, &config_gpio_pin);
	//! [setup_6]
}
//! [setup]
static void aon_sleep_timer_callback(void)
{
1000bae8:	b510      	push	{r4, lr}
	timer_cb_done = true;
1000baea:	2201      	movs	r2, #1
1000baec:	4b04      	ldr	r3, [pc, #16]	; (1000bb00 <aon_sleep_timer_callback+0x18>)
1000baee:	701a      	strb	r2, [r3, #0]
	send_plf_int_msg_ind(USER_TIMER_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000baf0:	2300      	movs	r3, #0
1000baf2:	2200      	movs	r2, #0
1000baf4:	2101      	movs	r1, #1
1000baf6:	2041      	movs	r0, #65	; 0x41
1000baf8:	4c02      	ldr	r4, [pc, #8]	; (1000bb04 <aon_sleep_timer_callback+0x1c>)
1000bafa:	47a0      	blx	r4
}
1000bafc:	bd10      	pop	{r4, pc}
1000bafe:	46c0      	nop			; (mov r8, r8)
1000bb00:	10015357 	.word	0x10015357
1000bb04:	1000b505 	.word	0x1000b505

1000bb08 <timer_callback_handler>:
			while(true); 
		} 
	}
	
	/* Timer callback */ 
	static void timer_callback_handler(void) { 
1000bb08:	b510      	push	{r4, lr}
		/* Stop timer */ 
		hw_timer_stop(); 
1000bb0a:	4b04      	ldr	r3, [pc, #16]	; (1000bb1c <timer_callback_handler+0x14>)
1000bb0c:	4798      	blx	r3
		/* Set timer Alarm flag */ 
		Timer_Flag = true; 
1000bb0e:	2201      	movs	r2, #1
1000bb10:	4b03      	ldr	r3, [pc, #12]	; (1000bb20 <timer_callback_handler+0x18>)
1000bb12:	701a      	strb	r2, [r3, #0]
		/* Restart Timer */ 
		hw_timer_start(10); 
1000bb14:	200a      	movs	r0, #10
1000bb16:	4b03      	ldr	r3, [pc, #12]	; (1000bb24 <timer_callback_handler+0x1c>)
1000bb18:	4798      	blx	r3
	}
1000bb1a:	bd10      	pop	{r4, pc}
1000bb1c:	1000aeb5 	.word	0x1000aeb5
1000bb20:	1001535a 	.word	0x1001535a
1000bb24:	1000ae89 	.word	0x1000ae89

1000bb28 <ble_paired_cb>:
	};
	
	
	/* Callback registered for AT_BLE_CONNECTED event*/ 
	static at_ble_status_t ble_paired_cb (void *param)
	{
1000bb28:	b570      	push	{r4, r5, r6, lr}
1000bb2a:	0004      	movs	r4, r0
		
		parameter.con_intv_min = GAP_CONN_INTERVAL_MIN;
1000bb2c:	4b11      	ldr	r3, [pc, #68]	; (1000bb74 <ble_paired_cb+0x4c>)
1000bb2e:	2214      	movs	r2, #20
1000bb30:	801a      	strh	r2, [r3, #0]
		parameter.con_intv_max = GAP_CONN_INTERVAL_MAX;
1000bb32:	323c      	adds	r2, #60	; 0x3c
1000bb34:	805a      	strh	r2, [r3, #2]
		parameter.con_latency = GAP_CONN_SLAVE_LATENCY;
1000bb36:	2200      	movs	r2, #0
1000bb38:	809a      	strh	r2, [r3, #4]
		parameter.ce_len_min = GAP_CE_LEN_MIN;
1000bb3a:	811a      	strh	r2, [r3, #8]
		parameter.ce_len_max = GAP_CE_LEN_MAX;
1000bb3c:	815a      	strh	r2, [r3, #10]
		parameter.superv_to = GAP_SUPERVISION_TIMOUT;
1000bb3e:	32f5      	adds	r2, #245	; 0xf5
1000bb40:	32ff      	adds	r2, #255	; 0xff
1000bb42:	80da      	strh	r2, [r3, #6]

		at_ble_pair_done_t *pair_params = param;
		printf("\nAssignment 3.2: Application paired ");
1000bb44:	480c      	ldr	r0, [pc, #48]	; (1000bb78 <ble_paired_cb+0x50>)
1000bb46:	4d0d      	ldr	r5, [pc, #52]	; (1000bb7c <ble_paired_cb+0x54>)
1000bb48:	47a8      	blx	r5
		/* Enable the HTP Profile */
		printf("\nAssignment 4.1: enable health temperature service ");
1000bb4a:	480d      	ldr	r0, [pc, #52]	; (1000bb80 <ble_paired_cb+0x58>)
1000bb4c:	47a8      	blx	r5
		status = at_ble_htpt_enable(pair_params->handle,
1000bb4e:	8860      	ldrh	r0, [r4, #2]
1000bb50:	2102      	movs	r1, #2
1000bb52:	4b0c      	ldr	r3, [pc, #48]	; (1000bb84 <ble_paired_cb+0x5c>)
1000bb54:	4798      	blx	r3
1000bb56:	4b0c      	ldr	r3, [pc, #48]	; (1000bb88 <ble_paired_cb+0x60>)
1000bb58:	7018      	strb	r0, [r3, #0]
		HTPT_CFG_INTERM_MEAS_NTF);
		if(status != AT_BLE_SUCCESS){
1000bb5a:	781b      	ldrb	r3, [r3, #0]
1000bb5c:	2b00      	cmp	r3, #0
1000bb5e:	d003      	beq.n	1000bb68 <ble_paired_cb+0x40>
			printf("*** Failure in HTP Profile Enable");
1000bb60:	480a      	ldr	r0, [pc, #40]	; (1000bb8c <ble_paired_cb+0x64>)
1000bb62:	4b06      	ldr	r3, [pc, #24]	; (1000bb7c <ble_paired_cb+0x54>)
1000bb64:	4798      	blx	r3
1000bb66:	e7fe      	b.n	1000bb66 <ble_paired_cb+0x3e>
			while(true);
		}
		at_ble_connection_param_update(pair_params->handle,
1000bb68:	8860      	ldrh	r0, [r4, #2]
1000bb6a:	4902      	ldr	r1, [pc, #8]	; (1000bb74 <ble_paired_cb+0x4c>)
1000bb6c:	4b08      	ldr	r3, [pc, #32]	; (1000bb90 <ble_paired_cb+0x68>)
1000bb6e:	4798      	blx	r3
		&parameter);
		ALL_UNUSED(param);
		return AT_BLE_SUCCESS;
	}
1000bb70:	2000      	movs	r0, #0
1000bb72:	bd70      	pop	{r4, r5, r6, pc}
1000bb74:	10015fd4 	.word	0x10015fd4
1000bb78:	10013428 	.word	0x10013428
1000bb7c:	10011715 	.word	0x10011715
1000bb80:	10013450 	.word	0x10013450
1000bb84:	1000db59 	.word	0x1000db59
1000bb88:	100160c4 	.word	0x100160c4
1000bb8c:	10013484 	.word	0x10013484
1000bb90:	1000ce41 	.word	0x1000ce41

1000bb94 <ble_advertise>:
		Timer_Flag = true; 
		/* Restart Timer */ 
		hw_timer_start(10); 
	}
	
	static void ble_advertise (void) {
1000bb94:	b510      	push	{r4, lr}
1000bb96:	b084      	sub	sp, #16
		printf("\nAssignment 2.1 : Start Advertising");
1000bb98:	4815      	ldr	r0, [pc, #84]	; (1000bbf0 <ble_advertise+0x5c>)
1000bb9a:	4b16      	ldr	r3, [pc, #88]	; (1000bbf4 <ble_advertise+0x60>)
1000bb9c:	4798      	blx	r3
		status = ble_advertisement_data_set();
1000bb9e:	4b16      	ldr	r3, [pc, #88]	; (1000bbf8 <ble_advertise+0x64>)
1000bba0:	4798      	blx	r3
1000bba2:	4b16      	ldr	r3, [pc, #88]	; (1000bbfc <ble_advertise+0x68>)
1000bba4:	7018      	strb	r0, [r3, #0]
		if(status != AT_BLE_SUCCESS) {
1000bba6:	781b      	ldrb	r3, [r3, #0]
1000bba8:	2b00      	cmp	r3, #0
1000bbaa:	d006      	beq.n	1000bbba <ble_advertise+0x26>
			printf("\n\r## Advertisement data set failed : error %x",status);
1000bbac:	4b13      	ldr	r3, [pc, #76]	; (1000bbfc <ble_advertise+0x68>)
1000bbae:	7819      	ldrb	r1, [r3, #0]
1000bbb0:	b2c9      	uxtb	r1, r1
1000bbb2:	4813      	ldr	r0, [pc, #76]	; (1000bc00 <ble_advertise+0x6c>)
1000bbb4:	4b0f      	ldr	r3, [pc, #60]	; (1000bbf4 <ble_advertise+0x60>)
1000bbb6:	4798      	blx	r3
1000bbb8:	e7fe      	b.n	1000bbb8 <ble_advertise+0x24>
			while(1);
		}
		/* Start of advertisement */
		status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED,
1000bbba:	2300      	movs	r3, #0
1000bbbc:	9302      	str	r3, [sp, #8]
1000bbbe:	4b11      	ldr	r3, [pc, #68]	; (1000bc04 <ble_advertise+0x70>)
1000bbc0:	9301      	str	r3, [sp, #4]
1000bbc2:	335a      	adds	r3, #90	; 0x5a
1000bbc4:	33ff      	adds	r3, #255	; 0xff
1000bbc6:	9300      	str	r3, [sp, #0]
1000bbc8:	2300      	movs	r3, #0
1000bbca:	2200      	movs	r2, #0
1000bbcc:	2101      	movs	r1, #1
1000bbce:	2000      	movs	r0, #0
1000bbd0:	4c0d      	ldr	r4, [pc, #52]	; (1000bc08 <ble_advertise+0x74>)
1000bbd2:	47a0      	blx	r4
1000bbd4:	4b09      	ldr	r3, [pc, #36]	; (1000bbfc <ble_advertise+0x68>)
1000bbd6:	7018      	strb	r0, [r3, #0]
		NULL,
		AT_BLE_ADV_FP_ANY,
		1000,
		655,
		0);
		if(status != AT_BLE_SUCCESS) {
1000bbd8:	781b      	ldrb	r3, [r3, #0]
1000bbda:	2b00      	cmp	r3, #0
1000bbdc:	d006      	beq.n	1000bbec <ble_advertise+0x58>
			printf("\n\r## Advertisement data set failed : error %x",status);
1000bbde:	4b07      	ldr	r3, [pc, #28]	; (1000bbfc <ble_advertise+0x68>)
1000bbe0:	7819      	ldrb	r1, [r3, #0]
1000bbe2:	b2c9      	uxtb	r1, r1
1000bbe4:	4806      	ldr	r0, [pc, #24]	; (1000bc00 <ble_advertise+0x6c>)
1000bbe6:	4b03      	ldr	r3, [pc, #12]	; (1000bbf4 <ble_advertise+0x60>)
1000bbe8:	4798      	blx	r3
1000bbea:	e7fe      	b.n	1000bbea <ble_advertise+0x56>
			while(1);
		}
	}
1000bbec:	b004      	add	sp, #16
1000bbee:	bd10      	pop	{r4, pc}
1000bbf0:	100134a8 	.word	0x100134a8
1000bbf4:	10011715 	.word	0x10011715
1000bbf8:	1000ad01 	.word	0x1000ad01
1000bbfc:	100160c4 	.word	0x100160c4
1000bc00:	100134cc 	.word	0x100134cc
1000bc04:	0000028f 	.word	0x0000028f
1000bc08:	1000ccc5 	.word	0x1000ccc5

1000bc0c <ble_disconnected_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
1000bc0c:	b510      	push	{r4, lr}
	timer_cb_done = false;
1000bc0e:	2200      	movs	r2, #0
1000bc10:	4b05      	ldr	r3, [pc, #20]	; (1000bc28 <ble_disconnected_app_event+0x1c>)
1000bc12:	701a      	strb	r2, [r3, #0]
	flag = true;
1000bc14:	3201      	adds	r2, #1
1000bc16:	4b05      	ldr	r3, [pc, #20]	; (1000bc2c <ble_disconnected_app_event+0x20>)
1000bc18:	701a      	strb	r2, [r3, #0]
	
	aon_sleep_timer_service_stop();
1000bc1a:	4b05      	ldr	r3, [pc, #20]	; (1000bc30 <ble_disconnected_app_event+0x24>)
1000bc1c:	4798      	blx	r3
	ble_advertise();
1000bc1e:	4b05      	ldr	r3, [pc, #20]	; (1000bc34 <ble_disconnected_app_event+0x28>)
1000bc20:	4798      	blx	r3
	//battery_service_advertise();
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000bc22:	2000      	movs	r0, #0
1000bc24:	bd10      	pop	{r4, pc}
1000bc26:	46c0      	nop			; (mov r8, r8)
1000bc28:	10015357 	.word	0x10015357
1000bc2c:	100138d1 	.word	0x100138d1
1000bc30:	1000adf1 	.word	0x1000adf1
1000bc34:	1000bb95 	.word	0x1000bb95

1000bc38 <ble_disconnected_cb>:
			while(1);
		}
	}
	
	/* Callback registered for AT_BLE_DISCONNECTED event */ 
	static at_ble_status_t ble_disconnected_cb (void *param) { 
1000bc38:	b510      	push	{r4, lr}
		printf("\nAssignment 3.2: Application disconnected "); 
1000bc3a:	4803      	ldr	r0, [pc, #12]	; (1000bc48 <ble_disconnected_cb+0x10>)
1000bc3c:	4b03      	ldr	r3, [pc, #12]	; (1000bc4c <ble_disconnected_cb+0x14>)
1000bc3e:	4798      	blx	r3
		ble_advertise(); 
1000bc40:	4b03      	ldr	r3, [pc, #12]	; (1000bc50 <ble_disconnected_cb+0x18>)
1000bc42:	4798      	blx	r3
		ALL_UNUSED(param);
		return AT_BLE_SUCCESS;
	}
1000bc44:	2000      	movs	r0, #0
1000bc46:	bd10      	pop	{r4, pc}
1000bc48:	100134fc 	.word	0x100134fc
1000bc4c:	10011715 	.word	0x10011715
1000bc50:	1000bb95 	.word	0x1000bb95

1000bc54 <configure_gpio_pins>:
//! [setup_callback]

//! [setup]

void configure_gpio_pins(void)
{
1000bc54:	b510      	push	{r4, lr}
1000bc56:	b082      	sub	sp, #8
	//! [setup_1]
	struct gpio_config config_gpio_pin;
	//! [setup_1]
	//! [setup_2]
	gpio_get_config_defaults(&config_gpio_pin);
1000bc58:	ac01      	add	r4, sp, #4
1000bc5a:	0020      	movs	r0, r4
1000bc5c:	4b04      	ldr	r3, [pc, #16]	; (1000bc70 <configure_gpio_pins+0x1c>)
1000bc5e:	4798      	blx	r3
	//gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
	//! [setup_4]


	//! [setup_5]
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000bc60:	2301      	movs	r3, #1
1000bc62:	7023      	strb	r3, [r4, #0]
	//! [setup_5]
	//! [setup_6]
	gpio_pin_set_config(LED_0_PIN, &config_gpio_pin);
1000bc64:	0021      	movs	r1, r4
1000bc66:	2016      	movs	r0, #22
1000bc68:	4b02      	ldr	r3, [pc, #8]	; (1000bc74 <configure_gpio_pins+0x20>)
1000bc6a:	4798      	blx	r3
	//! [setup_6]
}
1000bc6c:	b002      	add	sp, #8
1000bc6e:	bd10      	pop	{r4, pc}
1000bc70:	10008845 	.word	0x10008845
1000bc74:	10008855 	.word	0x10008855

1000bc78 <main>:
	init_port_list();
	//uart_init(UART_HW_MODULE_UART1,&uart_cfg);
	serial_console_init();
}

int main (void) { 
1000bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc7a:	465f      	mov	r7, fp
1000bc7c:	4656      	mov	r6, sl
1000bc7e:	464d      	mov	r5, r9
1000bc80:	4644      	mov	r4, r8
1000bc82:	b4f0      	push	{r4, r5, r6, r7}
1000bc84:	b093      	sub	sp, #76	; 0x4c
	at_ble_status_t status3;
	uint8_t battery_level = BATTERY_MIN_LEVEL;
1000bc86:	2200      	movs	r2, #0
1000bc88:	233f      	movs	r3, #63	; 0x3f
1000bc8a:	a902      	add	r1, sp, #8
1000bc8c:	468c      	mov	ip, r1
1000bc8e:	4463      	add	r3, ip
1000bc90:	701a      	strb	r2, [r3, #0]
	platform_driver_init();
1000bc92:	4bc4      	ldr	r3, [pc, #784]	; (1000bfa4 <main+0x32c>)
1000bc94:	4798      	blx	r3
	 
	//acquire_sleep_lock(); 
	
	configure_gpio_pins();
1000bc96:	4bc4      	ldr	r3, [pc, #784]	; (1000bfa8 <main+0x330>)
1000bc98:	4798      	blx	r3
	
	/* Initialize serial console */ 
	serial_console_init(); 
1000bc9a:	4bc4      	ldr	r3, [pc, #784]	; (1000bfac <main+0x334>)
1000bc9c:	4798      	blx	r3
	DBG_LOG("Initializing Battery Service Application");
1000bc9e:	48c4      	ldr	r0, [pc, #784]	; (1000bfb0 <main+0x338>)
1000bca0:	4bc4      	ldr	r3, [pc, #784]	; (1000bfb4 <main+0x33c>)
1000bca2:	4798      	blx	r3
1000bca4:	48c4      	ldr	r0, [pc, #784]	; (1000bfb8 <main+0x340>)
1000bca6:	4cc5      	ldr	r4, [pc, #788]	; (1000bfbc <main+0x344>)
1000bca8:	47a0      	blx	r4
	/* Hardware timer */ 
	hw_timer_init(); 
1000bcaa:	4bc5      	ldr	r3, [pc, #788]	; (1000bfc0 <main+0x348>)
1000bcac:	4798      	blx	r3
	
	/* Register the callback */ 
	hw_timer_register_callback(timer_callback_handler); 
1000bcae:	48c5      	ldr	r0, [pc, #788]	; (1000bfc4 <main+0x34c>)
1000bcb0:	4bc5      	ldr	r3, [pc, #788]	; (1000bfc8 <main+0x350>)
1000bcb2:	4798      	blx	r3
	/* Start timer */ 
	hw_timer_start(1);
1000bcb4:	2001      	movs	r0, #1
1000bcb6:	4bc5      	ldr	r3, [pc, #788]	; (1000bfcc <main+0x354>)
1000bcb8:	4798      	blx	r3
	
	printf("\n\rSAMB11 BLE Application");
1000bcba:	48c5      	ldr	r0, [pc, #788]	; (1000bfd0 <main+0x358>)
1000bcbc:	47a0      	blx	r4
		
	/* initialize the BLE chip and Set the Device Address */
	ble_device_init(NULL);
1000bcbe:	2000      	movs	r0, #0
1000bcc0:	4bc4      	ldr	r3, [pc, #784]	; (1000bfd4 <main+0x35c>)
1000bcc2:	4798      	blx	r3
	
		
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
1000bcc4:	4ac4      	ldr	r2, [pc, #784]	; (1000bfd8 <main+0x360>)
1000bcc6:	6813      	ldr	r3, [r2, #0]
1000bcc8:	2101      	movs	r1, #1
1000bcca:	438b      	bics	r3, r1
1000bccc:	6013      	str	r3, [r2, #0]
		
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ );
1000bcce:	2100      	movs	r1, #0
1000bcd0:	2000      	movs	r0, #0
1000bcd2:	4bc2      	ldr	r3, [pc, #776]	; (1000bfdc <main+0x364>)
1000bcd4:	4798      	blx	r3
	//! [setup_config]
	struct uart_config config_uart;
	//! [setup_config]

	//! [setup_config_defaults]
	uart_get_config_defaults(&config_uart);
1000bcd6:	a807      	add	r0, sp, #28
1000bcd8:	4bc1      	ldr	r3, [pc, #772]	; (1000bfe0 <main+0x368>)
1000bcda:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_uart.baud_rate = 9600;
1000bcdc:	2396      	movs	r3, #150	; 0x96
1000bcde:	019b      	lsls	r3, r3, #6
1000bce0:	9307      	str	r3, [sp, #28]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000bce2:	2302      	movs	r3, #2
1000bce4:	9309      	str	r3, [sp, #36]	; 0x24
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000bce6:	2203      	movs	r2, #3
1000bce8:	920a      	str	r2, [sp, #40]	; 0x28
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000bcea:	3201      	adds	r2, #1
1000bcec:	920b      	str	r2, [sp, #44]	; 0x2c
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000bcee:	3201      	adds	r2, #1
1000bcf0:	920c      	str	r2, [sp, #48]	; 0x30
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000bcf2:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000bcf4:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000bcf6:	930f      	str	r3, [sp, #60]	; 0x3c
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000bcf8:	9310      	str	r3, [sp, #64]	; 0x40
	//! [setup_change_config]

	//! [setup_set_config]
	while (uart_init(&uart_instance,
1000bcfa:	4dba      	ldr	r5, [pc, #744]	; (1000bfe4 <main+0x36c>)
1000bcfc:	4cba      	ldr	r4, [pc, #744]	; (1000bfe8 <main+0x370>)
1000bcfe:	aa07      	add	r2, sp, #28
1000bd00:	49ba      	ldr	r1, [pc, #744]	; (1000bfec <main+0x374>)
1000bd02:	0028      	movs	r0, r5
1000bd04:	47a0      	blx	r4
1000bd06:	2800      	cmp	r0, #0
1000bd08:	d1f9      	bne.n	1000bcfe <main+0x86>
	EDBG_CDC_MODULE, &config_uart) != STATUS_OK) {
	}
	//! [setup_set_config]

	//! [enable_interrupt]
	uart_enable_transmit_dma(&uart_instance);
1000bd0a:	4bb6      	ldr	r3, [pc, #728]	; (1000bfe4 <main+0x36c>)
1000bd0c:	469a      	mov	sl, r3
1000bd0e:	0018      	movs	r0, r3
1000bd10:	4bb7      	ldr	r3, [pc, #732]	; (1000bff0 <main+0x378>)
1000bd12:	4798      	blx	r3
	uart_enable_receive_dma(&uart_instance);
1000bd14:	4650      	mov	r0, sl
1000bd16:	4bb7      	ldr	r3, [pc, #732]	; (1000bff4 <main+0x37c>)
1000bd18:	4798      	blx	r3
	//! [setup_tx_1]
	struct dma_resource_config config;
	//! [setup_tx_1]

	//! [setup_tx_2]
	dma_get_config_defaults(&config);
1000bd1a:	ac07      	add	r4, sp, #28
1000bd1c:	0020      	movs	r0, r4
1000bd1e:	4eb6      	ldr	r6, [pc, #728]	; (1000bff8 <main+0x380>)
1000bd20:	47b0      	blx	r6
	//! [setup_tx_2]

	//! [setup_tx_3]
	config.des.periph = UART0TX_DMA_PERIPHERAL;
1000bd22:	2302      	movs	r3, #2
1000bd24:	2202      	movs	r2, #2
1000bd26:	4691      	mov	r9, r2
1000bd28:	7323      	strb	r3, [r4, #12]
	config.des.enable_inc_addr = false;
1000bd2a:	2500      	movs	r5, #0
1000bd2c:	72e5      	strb	r5, [r4, #11]
	config.src.periph = UART0TX_DMA_PERIPHERAL;
1000bd2e:	70e3      	strb	r3, [r4, #3]
	//! [setup_tx_3]

	//! [setup_tx_4]
	dma_allocate(resource, &config);
1000bd30:	4fb2      	ldr	r7, [pc, #712]	; (1000bffc <main+0x384>)
1000bd32:	0021      	movs	r1, r4
1000bd34:	0038      	movs	r0, r7
1000bd36:	4bb2      	ldr	r3, [pc, #712]	; (1000c000 <main+0x388>)
1000bd38:	469b      	mov	fp, r3
1000bd3a:	4798      	blx	r3
	//! [setup_rx_1]
	struct dma_resource_config config;
	//! [setup_rx_1]

	//! [setup_rx_2]
	dma_get_config_defaults(&config);
1000bd3c:	0020      	movs	r0, r4
1000bd3e:	47b0      	blx	r6
	//! [setup_rx_2]

	//! [setup_rx_3]
	config.src.periph = UART0RX_DMA_PERIPHERAL;
1000bd40:	2301      	movs	r3, #1
1000bd42:	4698      	mov	r8, r3
1000bd44:	2601      	movs	r6, #1
1000bd46:	70e3      	strb	r3, [r4, #3]
	config.src.enable_inc_addr = false;
1000bd48:	70a5      	strb	r5, [r4, #2]
	config.src.periph_delay = 1;
1000bd4a:	7123      	strb	r3, [r4, #4]
	//! [setup_rx_3]

	//! [setup_rx_4]
	dma_allocate(resource, &config);
1000bd4c:	4dad      	ldr	r5, [pc, #692]	; (1000c004 <main+0x38c>)
1000bd4e:	0021      	movs	r1, r4
1000bd50:	0028      	movs	r0, r5
1000bd52:	47d8      	blx	fp
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000bd54:	49ac      	ldr	r1, [pc, #688]	; (1000c008 <main+0x390>)
1000bd56:	7b0b      	ldrb	r3, [r1, #12]
1000bd58:	4333      	orrs	r3, r6
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000bd5a:	464a      	mov	r2, r9
1000bd5c:	4313      	orrs	r3, r2
1000bd5e:	730b      	strb	r3, [r1, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000bd60:	2303      	movs	r3, #3
1000bd62:	469b      	mov	fp, r3
1000bd64:	68cb      	ldr	r3, [r1, #12]
1000bd66:	465a      	mov	r2, fp
1000bd68:	4013      	ands	r3, r2
1000bd6a:	60cb      	str	r3, [r1, #12]
	//! [setup_tx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000bd6c:	2306      	movs	r3, #6
1000bd6e:	469c      	mov	ip, r3
1000bd70:	608b      	str	r3, [r1, #8]
	descriptor->read_start_addr = (uint32_t)string;
1000bd72:	4ba6      	ldr	r3, [pc, #664]	; (1000c00c <main+0x394>)
1000bd74:	600b      	str	r3, [r1, #0]
	descriptor->write_start_addr =
	(uint32_t)(&uart_instance.hw->TRANSMIT_DATA.reg);
1000bd76:	4653      	mov	r3, sl
1000bd78:	681b      	ldr	r3, [r3, #0]
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr = (uint32_t)string;
	descriptor->write_start_addr =
1000bd7a:	604b      	str	r3, [r1, #4]
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000bd7c:	4ca4      	ldr	r4, [pc, #656]	; (1000c010 <main+0x398>)
1000bd7e:	7b22      	ldrb	r2, [r4, #12]
1000bd80:	4332      	orrs	r2, r6
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000bd82:	4648      	mov	r0, r9
1000bd84:	4302      	orrs	r2, r0
1000bd86:	7322      	strb	r2, [r4, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000bd88:	465a      	mov	r2, fp
1000bd8a:	68e0      	ldr	r0, [r4, #12]
1000bd8c:	4002      	ands	r2, r0
1000bd8e:	60e2      	str	r2, [r4, #12]
	//! [setup_rx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000bd90:	4662      	mov	r2, ip
1000bd92:	60a2      	str	r2, [r4, #8]
	descriptor->read_start_addr =
	(uint32_t)(&uart_instance.hw->RECEIVE_DATA.reg);
1000bd94:	3310      	adds	r3, #16
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr =
1000bd96:	6023      	str	r3, [r4, #0]
	(uint32_t)(&uart_instance.hw->RECEIVE_DATA.reg);
	descriptor->write_start_addr = (uint32_t)string;
1000bd98:	4b9c      	ldr	r3, [pc, #624]	; (1000c00c <main+0x394>)
1000bd9a:	6063      	str	r3, [r4, #4]
	setup_transfer_descriptor_tx(&example_descriptor_tx);
	setup_transfer_descriptor_rx(&example_descriptor_rx);
	//! [setup_transfer_descriptor]

	//! [add_descriptor_to_resource]
	dma_add_descriptor(&uart_dma_resource_tx, &example_descriptor_tx);
1000bd9c:	0038      	movs	r0, r7
1000bd9e:	4b9d      	ldr	r3, [pc, #628]	; (1000c014 <main+0x39c>)
1000bda0:	4699      	mov	r9, r3
1000bda2:	4798      	blx	r3
	dma_add_descriptor(&uart_dma_resource_rx, &example_descriptor_rx);
1000bda4:	0021      	movs	r1, r4
1000bda6:	0028      	movs	r0, r5
1000bda8:	47c8      	blx	r9
 *
 */
static inline void dma_register_callback(struct dma_resource *resource,
		dma_callback_t callback, enum dma_callback_type type)
{
	resource->callback[type] = callback;
1000bdaa:	4b9b      	ldr	r3, [pc, #620]	; (1000c018 <main+0x3a0>)
1000bdac:	607b      	str	r3, [r7, #4]
1000bdae:	4b9b      	ldr	r3, [pc, #620]	; (1000c01c <main+0x3a4>)
1000bdb0:	606b      	str	r3, [r5, #4]
 *
 */
static inline void dma_enable_callback(struct dma_resource *resource,
		enum dma_callback_type type)
{
	resource->callback_enable |= 1 << type;
1000bdb2:	2324      	movs	r3, #36	; 0x24
1000bdb4:	5cfa      	ldrb	r2, [r7, r3]
1000bdb6:	4332      	orrs	r2, r6
1000bdb8:	54fa      	strb	r2, [r7, r3]
1000bdba:	5cea      	ldrb	r2, [r5, r3]
1000bdbc:	4316      	orrs	r6, r2
1000bdbe:	54ee      	strb	r6, [r5, r3]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bdc0:	2280      	movs	r2, #128	; 0x80
1000bdc2:	0212      	lsls	r2, r2, #8
1000bdc4:	4b96      	ldr	r3, [pc, #600]	; (1000c020 <main+0x3a8>)
1000bdc6:	601a      	str	r2, [r3, #0]
	/* configure the temperature sensor ADC */ 
	//at30tse_write_config_register(AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit)); 
	 
	
	
	dma_start_transfer_job(&uart_dma_resource_rx);
1000bdc8:	0028      	movs	r0, r5
1000bdca:	4b96      	ldr	r3, [pc, #600]	; (1000c024 <main+0x3ac>)
1000bdcc:	4798      	blx	r3

static void htp_temperature_read(void) { 
	//float temperature; /* Read Temperature Value from IO1 Xplained Pro */ 
	float temperature;
	//temperature = at30tse_read_temperature(); /* Display temperature on com port */ 
	temperature = temp;
1000bdce:	4b96      	ldr	r3, [pc, #600]	; (1000c028 <main+0x3b0>)
	#ifdef HTPT_FAHRENHEIT 
		printf("\nTemperature: %d Fahrenheit", (uint16_t)temperature); 
	#else 
		printf("\nTemperature: %d Deg Celsius", (uint16_t)temperature); 
1000bdd0:	6818      	ldr	r0, [r3, #0]
1000bdd2:	4b96      	ldr	r3, [pc, #600]	; (1000c02c <main+0x3b4>)
1000bdd4:	4798      	blx	r3
1000bdd6:	b281      	uxth	r1, r0
1000bdd8:	4895      	ldr	r0, [pc, #596]	; (1000c030 <main+0x3b8>)
1000bdda:	4c78      	ldr	r4, [pc, #480]	; (1000bfbc <main+0x344>)
1000bddc:	47a0      	blx	r4
		ALL_UNUSED(param);
		return AT_BLE_SUCCESS;
	}
	
	static void htp_init (void) { 
		printf("\nAssignment 4.1: Init Health temperature service "); 
1000bdde:	4895      	ldr	r0, [pc, #596]	; (1000c034 <main+0x3bc>)
1000bde0:	47a0      	blx	r4
		/* Create htp service in GATT database*/ 
		status = at_ble_htpt_create_db( HTPT_TEMP_TYPE_CHAR_SUP, 
1000bde2:	4b95      	ldr	r3, [pc, #596]	; (1000c038 <main+0x3c0>)
1000bde4:	9302      	str	r3, [sp, #8]
1000bde6:	230c      	movs	r3, #12
1000bde8:	9301      	str	r3, [sp, #4]
1000bdea:	4643      	mov	r3, r8
1000bdec:	9300      	str	r3, [sp, #0]
1000bdee:	331d      	adds	r3, #29
1000bdf0:	2201      	movs	r2, #1
1000bdf2:	2104      	movs	r1, #4
1000bdf4:	2001      	movs	r0, #1
1000bdf6:	4c91      	ldr	r4, [pc, #580]	; (1000c03c <main+0x3c4>)
1000bdf8:	47a0      	blx	r4
1000bdfa:	4b91      	ldr	r3, [pc, #580]	; (1000c040 <main+0x3c8>)
1000bdfc:	7018      	strb	r0, [r3, #0]
										1, 
										30, 
										1, 
										HTPT_AUTH, 
										&htpt_conn_handle); 
		if (status != AT_BLE_SUCCESS){ 
1000bdfe:	781b      	ldrb	r3, [r3, #0]
1000be00:	2b00      	cmp	r3, #0
1000be02:	d003      	beq.n	1000be0c <main+0x194>
			printf("HTP Data Base creation failed"); 
1000be04:	488f      	ldr	r0, [pc, #572]	; (1000c044 <main+0x3cc>)
1000be06:	4b6d      	ldr	r3, [pc, #436]	; (1000bfbc <main+0x344>)
1000be08:	4798      	blx	r3
1000be0a:	e7fe      	b.n	1000be0a <main+0x192>
};


/* Register GAP callbacks at BLE manager level*/ 
static void register_ble_callbacks (void) { /* Register GAP Callbacks */ 
	printf("\nAssignment 3.2: Register bluetooth events callbacks"); 
1000be0c:	488e      	ldr	r0, [pc, #568]	; (1000c048 <main+0x3d0>)
1000be0e:	4b6b      	ldr	r3, [pc, #428]	; (1000bfbc <main+0x344>)
1000be10:	4798      	blx	r3
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000be12:	4a8e      	ldr	r2, [pc, #568]	; (1000c04c <main+0x3d4>)
1000be14:	2100      	movs	r1, #0
1000be16:	2000      	movs	r0, #0
1000be18:	4b8d      	ldr	r3, [pc, #564]	; (1000c050 <main+0x3d8>)
1000be1a:	4798      	blx	r3
1000be1c:	4b88      	ldr	r3, [pc, #544]	; (1000c040 <main+0x3c8>)
1000be1e:	7018      	strb	r0, [r3, #0]
											BLE_GAP_EVENT_TYPE,
											app_gap_cb); 
    if (status != true) { 
1000be20:	781b      	ldrb	r3, [r3, #0]
1000be22:	2b01      	cmp	r3, #1
1000be24:	d002      	beq.n	1000be2c <main+0x1b4>
		printf("\n##Error when Registering SAMB11 gap callbacks"); 
1000be26:	488b      	ldr	r0, [pc, #556]	; (1000c054 <main+0x3dc>)
1000be28:	4b64      	ldr	r3, [pc, #400]	; (1000bfbc <main+0x344>)
1000be2a:	4798      	blx	r3
		} 
		
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000be2c:	4a8a      	ldr	r2, [pc, #552]	; (1000c058 <main+0x3e0>)
1000be2e:	2104      	movs	r1, #4
1000be30:	2000      	movs	r0, #0
1000be32:	4b87      	ldr	r3, [pc, #540]	; (1000c050 <main+0x3d8>)
1000be34:	4798      	blx	r3
1000be36:	4b82      	ldr	r3, [pc, #520]	; (1000c040 <main+0x3c8>)
1000be38:	7018      	strb	r0, [r3, #0]
											BLE_GATT_HTPT_EVENT_TYPE,
											app_htpt_handle);
	if (status != true) { 
1000be3a:	781b      	ldrb	r3, [r3, #0]
1000be3c:	2b01      	cmp	r3, #1
1000be3e:	d002      	beq.n	1000be46 <main+0x1ce>
		printf("\n##Error when Registering SAMB11 htpt callbacks"); 
1000be40:	4886      	ldr	r0, [pc, #536]	; (1000c05c <main+0x3e4>)
1000be42:	4b5e      	ldr	r3, [pc, #376]	; (1000bfbc <main+0x344>)
1000be44:	4798      	blx	r3
	/* Start Advertising process */
	
	//ble_advertise();
	
	// Initialize the battery service
	bat_init_service(&bas_service_handler, &battery_level);
1000be46:	4c86      	ldr	r4, [pc, #536]	; (1000c060 <main+0x3e8>)
1000be48:	213f      	movs	r1, #63	; 0x3f
1000be4a:	ab02      	add	r3, sp, #8
1000be4c:	469c      	mov	ip, r3
1000be4e:	4461      	add	r1, ip
1000be50:	0020      	movs	r0, r4
1000be52:	4b84      	ldr	r3, [pc, #528]	; (1000c064 <main+0x3ec>)
1000be54:	4798      	blx	r3
	
	// Define the primary service in the GATT server database
	if((status3 = bat_primary_service_define(&bas_service_handler))!= AT_BLE_SUCCESS)
1000be56:	0020      	movs	r0, r4
1000be58:	4b83      	ldr	r3, [pc, #524]	; (1000c068 <main+0x3f0>)
1000be5a:	4798      	blx	r3
1000be5c:	1e04      	subs	r4, r0, #0
1000be5e:	d006      	beq.n	1000be6e <main+0x1f6>
	{
		DBG_LOG("defining battery service failed %d", status3);
1000be60:	4853      	ldr	r0, [pc, #332]	; (1000bfb0 <main+0x338>)
1000be62:	4b54      	ldr	r3, [pc, #336]	; (1000bfb4 <main+0x33c>)
1000be64:	4798      	blx	r3
1000be66:	0021      	movs	r1, r4
1000be68:	4880      	ldr	r0, [pc, #512]	; (1000c06c <main+0x3f4>)
1000be6a:	4b54      	ldr	r3, [pc, #336]	; (1000bfbc <main+0x344>)
1000be6c:	4798      	blx	r3
	}
	at_ble_tx_power_set(AT_BLE_TX_PWR_LVL_POS_03_DB);
1000be6e:	203b      	movs	r0, #59	; 0x3b
1000be70:	4b7f      	ldr	r3, [pc, #508]	; (1000c070 <main+0x3f8>)
1000be72:	4798      	blx	r3
	ble_advertise();
1000be74:	4b7f      	ldr	r3, [pc, #508]	; (1000c074 <main+0x3fc>)
1000be76:	4798      	blx	r3
	//battery_service_advertise();
	
	// Register callbacks for gap related events
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000be78:	4a7f      	ldr	r2, [pc, #508]	; (1000c078 <main+0x400>)
1000be7a:	2100      	movs	r1, #0
1000be7c:	2000      	movs	r0, #0
1000be7e:	4c74      	ldr	r4, [pc, #464]	; (1000c050 <main+0x3d8>)
1000be80:	47a0      	blx	r4
	BLE_GAP_EVENT_TYPE,
	battery_app_gap_cb);
	
	// Register callbacks for gatt server related events
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000be82:	4a7e      	ldr	r2, [pc, #504]	; (1000c07c <main+0x404>)
1000be84:	2102      	movs	r1, #2
1000be86:	2000      	movs	r0, #0
1000be88:	47a0      	blx	r4
	BLE_GATT_SERVER_EVENT_TYPE,
	battery_app_gatt_server_cb);
	
	register_resume_callback(resume_cb);
1000be8a:	487d      	ldr	r0, [pc, #500]	; (1000c080 <main+0x408>)
1000be8c:	4b7d      	ldr	r3, [pc, #500]	; (1000c084 <main+0x40c>)
1000be8e:	4798      	blx	r3
		//release_sleep_lock();
	
	while(true) {
		// BLE Event Task
		//ble_event_task(BLE_EVENT_TIMEOUT);
		ble_event_task(655);
1000be90:	4c7d      	ldr	r4, [pc, #500]	; (1000c088 <main+0x410>)
		if (timer_cb_done)
1000be92:	4e7e      	ldr	r6, [pc, #504]	; (1000c08c <main+0x414>)
		//release_sleep_lock();
	
	while(true) {
		// BLE Event Task
		//ble_event_task(BLE_EVENT_TIMEOUT);
		ble_event_task(655);
1000be94:	487e      	ldr	r0, [pc, #504]	; (1000c090 <main+0x418>)
1000be96:	47a0      	blx	r4
		if (timer_cb_done)
1000be98:	7833      	ldrb	r3, [r6, #0]
1000be9a:	2b00      	cmp	r3, #0
1000be9c:	d03d      	beq.n	1000bf1a <main+0x2a2>
		{
 			timer_cb_done = false;
1000be9e:	2200      	movs	r2, #0
1000bea0:	4b7a      	ldr	r3, [pc, #488]	; (1000c08c <main+0x414>)
1000bea2:	701a      	strb	r2, [r3, #0]
 			// send the notification and Update the battery level
			if(flag){
1000bea4:	4b7b      	ldr	r3, [pc, #492]	; (1000c094 <main+0x41c>)
1000bea6:	781b      	ldrb	r3, [r3, #0]
1000bea8:	2b00      	cmp	r3, #0
1000beaa:	d036      	beq.n	1000bf1a <main+0x2a2>
 				if(bat_update_char_value(bat_connection_handle,&bas_service_handler, battery_level, &flag) == AT_BLE_SUCCESS)
1000beac:	233f      	movs	r3, #63	; 0x3f
1000beae:	aa02      	add	r2, sp, #8
1000beb0:	4694      	mov	ip, r2
1000beb2:	4463      	add	r3, ip
1000beb4:	781a      	ldrb	r2, [r3, #0]
1000beb6:	4b78      	ldr	r3, [pc, #480]	; (1000c098 <main+0x420>)
1000beb8:	8818      	ldrh	r0, [r3, #0]
1000beba:	4b76      	ldr	r3, [pc, #472]	; (1000c094 <main+0x41c>)
1000bebc:	4968      	ldr	r1, [pc, #416]	; (1000c060 <main+0x3e8>)
1000bebe:	4d77      	ldr	r5, [pc, #476]	; (1000c09c <main+0x424>)
1000bec0:	47a8      	blx	r5
1000bec2:	2800      	cmp	r0, #0
1000bec4:	d10a      	bne.n	1000bedc <main+0x264>
 				{
 					DBG_LOG("Battery Level:%d%%", battery_level);
1000bec6:	483a      	ldr	r0, [pc, #232]	; (1000bfb0 <main+0x338>)
1000bec8:	4b3a      	ldr	r3, [pc, #232]	; (1000bfb4 <main+0x33c>)
1000beca:	4798      	blx	r3
1000becc:	233f      	movs	r3, #63	; 0x3f
1000bece:	aa02      	add	r2, sp, #8
1000bed0:	4694      	mov	ip, r2
1000bed2:	4463      	add	r3, ip
1000bed4:	7819      	ldrb	r1, [r3, #0]
1000bed6:	4872      	ldr	r0, [pc, #456]	; (1000c0a0 <main+0x428>)
1000bed8:	4b38      	ldr	r3, [pc, #224]	; (1000bfbc <main+0x344>)
1000beda:	4798      	blx	r3
 				{
					battery_flag = true;
 				}*/
 				/*if(battery_flag== true)
				{*/
 					if(soil >3250)
1000bedc:	4b71      	ldr	r3, [pc, #452]	; (1000c0a4 <main+0x42c>)
1000bede:	881b      	ldrh	r3, [r3, #0]
1000bee0:	4a71      	ldr	r2, [pc, #452]	; (1000c0a8 <main+0x430>)
1000bee2:	4293      	cmp	r3, r2
1000bee4:	d906      	bls.n	1000bef4 <main+0x27c>
 					{
 						battery_level = BATTERY_MAX_LEVEL;
1000bee6:	2264      	movs	r2, #100	; 0x64
1000bee8:	233f      	movs	r3, #63	; 0x3f
1000beea:	a902      	add	r1, sp, #8
1000beec:	468c      	mov	ip, r1
1000beee:	4463      	add	r3, ip
1000bef0:	701a      	strb	r2, [r3, #0]
1000bef2:	e012      	b.n	1000bf1a <main+0x2a2>
 					}
 				//}
 				/*else
 				{*/
 					else if(soil<1000 & soil >30)
1000bef4:	3b1f      	subs	r3, #31
1000bef6:	b29b      	uxth	r3, r3
1000bef8:	22f2      	movs	r2, #242	; 0xf2
1000befa:	0092      	lsls	r2, r2, #2
1000befc:	4293      	cmp	r3, r2
1000befe:	d806      	bhi.n	1000bf0e <main+0x296>
 					{
 						battery_level = BATTERY_MIN_LEVEL;
1000bf00:	2200      	movs	r2, #0
1000bf02:	233f      	movs	r3, #63	; 0x3f
1000bf04:	a902      	add	r1, sp, #8
1000bf06:	468c      	mov	ip, r1
1000bf08:	4463      	add	r3, ip
1000bf0a:	701a      	strb	r2, [r3, #0]
1000bf0c:	e005      	b.n	1000bf1a <main+0x2a2>
 					}
					else 
					{
						battery_level = BATTERY_MOD_LEVEL;
1000bf0e:	2232      	movs	r2, #50	; 0x32
1000bf10:	233f      	movs	r3, #63	; 0x3f
1000bf12:	a902      	add	r1, sp, #8
1000bf14:	468c      	mov	ip, r1
1000bf16:	4463      	add	r3, ip
1000bf18:	701a      	strb	r2, [r3, #0]
 			}
		}
		
		
		//dma_start_transfer_job(&uart_dma_resource_rx);
		if (Timer_Flag & Temp_Notification_Flag) 
1000bf1a:	4b64      	ldr	r3, [pc, #400]	; (1000c0ac <main+0x434>)
1000bf1c:	781a      	ldrb	r2, [r3, #0]
1000bf1e:	4b64      	ldr	r3, [pc, #400]	; (1000c0b0 <main+0x438>)
1000bf20:	781b      	ldrb	r3, [r3, #0]
1000bf22:	b2db      	uxtb	r3, r3
1000bf24:	2a00      	cmp	r2, #0
1000bf26:	d034      	beq.n	1000bf92 <main+0x31a>
1000bf28:	2b00      	cmp	r3, #0
1000bf2a:	d032      	beq.n	1000bf92 <main+0x31a>
	at_ble_prf_date_time_t timestamp; 
	float temperature; 
	//uint8_t temperature;// = temperature;
	/* Read Temperature Value from IO1 Xplained Pro */ 
	//temperature = at30tse_read_temperature(); 
	if (string[3]==67)
1000bf2c:	4b37      	ldr	r3, [pc, #220]	; (1000c00c <main+0x394>)
1000bf2e:	78db      	ldrb	r3, [r3, #3]
1000bf30:	2b43      	cmp	r3, #67	; 0x43
1000bf32:	d106      	bne.n	1000bf42 <main+0x2ca>
	{
	temp=temp*(-1);					//For negative temperature values
1000bf34:	4a3c      	ldr	r2, [pc, #240]	; (1000c028 <main+0x3b0>)
1000bf36:	6813      	ldr	r3, [r2, #0]
1000bf38:	2180      	movs	r1, #128	; 0x80
1000bf3a:	0609      	lsls	r1, r1, #24
1000bf3c:	468c      	mov	ip, r1
1000bf3e:	4463      	add	r3, ip
1000bf40:	6013      	str	r3, [r2, #0]
	}
	temperature = temp;
1000bf42:	4b39      	ldr	r3, [pc, #228]	; (1000c028 <main+0x3b0>)
1000bf44:	681b      	ldr	r3, [r3, #0]
1000bf46:	1c18      	adds	r0, r3, #0
1000bf48:	9305      	str	r3, [sp, #20]
	#ifdef HTPT_FAHRENHEIT 
		temperature = (((temperature * 9.0)/5.0) + 32.0); 
	#endif 
	/* Read Temperature Value from IO1 Xplained Pro */ 
	timestamp.day = 1; 
1000bf4a:	ad07      	add	r5, sp, #28
1000bf4c:	2701      	movs	r7, #1
1000bf4e:	70ef      	strb	r7, [r5, #3]
	timestamp.hour = 9; 
1000bf50:	2309      	movs	r3, #9
1000bf52:	712b      	strb	r3, [r5, #4]
	timestamp.min = 2; 
1000bf54:	3b07      	subs	r3, #7
1000bf56:	716b      	strb	r3, [r5, #5]
	timestamp.month = 8; 
1000bf58:	3306      	adds	r3, #6
1000bf5a:	70ab      	strb	r3, [r5, #2]
	timestamp.sec = 36; 
1000bf5c:	331c      	adds	r3, #28
1000bf5e:	71ab      	strb	r3, [r5, #6]
	timestamp.year = 15; 
1000bf60:	3b15      	subs	r3, #21
1000bf62:	802b      	strh	r3, [r5, #0]
	/* Read Temperature Value from IO1 Xplained Pro */ 
	if(at_ble_htpt_temp_send(convert_ieee754_ieee11073_float((float)temperature), 
1000bf64:	4953      	ldr	r1, [pc, #332]	; (1000c0b4 <main+0x43c>)
1000bf66:	4b54      	ldr	r3, [pc, #336]	; (1000c0b8 <main+0x440>)
1000bf68:	4798      	blx	r3
1000bf6a:	4b30      	ldr	r3, [pc, #192]	; (1000c02c <main+0x3b4>)
1000bf6c:	4798      	blx	r3
1000bf6e:	23ff      	movs	r3, #255	; 0xff
1000bf70:	061b      	lsls	r3, r3, #24
1000bf72:	4318      	orrs	r0, r3
1000bf74:	9700      	str	r7, [sp, #0]
1000bf76:	2304      	movs	r3, #4
1000bf78:	2204      	movs	r2, #4
1000bf7a:	0029      	movs	r1, r5
1000bf7c:	4d4f      	ldr	r5, [pc, #316]	; (1000c0bc <main+0x444>)
1000bf7e:	47a8      	blx	r5
1000bf80:	2800      	cmp	r0, #0
1000bf82:	d106      	bne.n	1000bf92 <main+0x31a>
		) == AT_BLE_SUCCESS) 
		{
		#ifdef HTPT_FAHRENHEIT 
			printf("\nTemperature: %d Fahrenheit", (uint16_t)temperature); 
		#else 
			printf("\nTemperature: %d Deg Celsius", (uint16_t)temperature); 
1000bf84:	9805      	ldr	r0, [sp, #20]
1000bf86:	4b29      	ldr	r3, [pc, #164]	; (1000c02c <main+0x3b4>)
1000bf88:	4798      	blx	r3
1000bf8a:	b281      	uxth	r1, r0
1000bf8c:	4828      	ldr	r0, [pc, #160]	; (1000c030 <main+0x3b8>)
1000bf8e:	4b0b      	ldr	r3, [pc, #44]	; (1000bfbc <main+0x344>)
1000bf90:	4798      	blx	r3
		//dma_start_transfer_job(&uart_dma_resource_rx);
		if (Timer_Flag & Temp_Notification_Flag) 
		{ 
			htp_temperature_send(); 
			}
		gpio_pin_set_output_level(LED_0_PIN, !LED_Status);			//Setting or clearing the LED output
1000bf92:	4b4b      	ldr	r3, [pc, #300]	; (1000c0c0 <main+0x448>)
1000bf94:	7819      	ldrb	r1, [r3, #0]
1000bf96:	2301      	movs	r3, #1
1000bf98:	4059      	eors	r1, r3
1000bf9a:	2016      	movs	r0, #22
1000bf9c:	4b49      	ldr	r3, [pc, #292]	; (1000c0c4 <main+0x44c>)
1000bf9e:	4798      	blx	r3
		} 
1000bfa0:	e778      	b.n	1000be94 <main+0x21c>
1000bfa2:	46c0      	nop			; (mov r8, r8)
1000bfa4:	1000b255 	.word	0x1000b255
1000bfa8:	1000bc55 	.word	0x1000bc55
1000bfac:	1000af49 	.word	0x1000af49
1000bfb0:	10012b00 	.word	0x10012b00
1000bfb4:	10011835 	.word	0x10011835
1000bfb8:	10013528 	.word	0x10013528
1000bfbc:	10011715 	.word	0x10011715
1000bfc0:	1000ae29 	.word	0x1000ae29
1000bfc4:	1000bb09 	.word	0x1000bb09
1000bfc8:	1000ae55 	.word	0x1000ae55
1000bfcc:	1000ae89 	.word	0x1000ae89
1000bfd0:	10013554 	.word	0x10013554
1000bfd4:	1000a58d 	.word	0x1000a58d
1000bfd8:	e000e010 	.word	0xe000e010
1000bfdc:	10008be5 	.word	0x10008be5
1000bfe0:	10009671 	.word	0x10009671
1000bfe4:	10015c8c 	.word	0x10015c8c
1000bfe8:	1000969d 	.word	0x1000969d
1000bfec:	40004000 	.word	0x40004000
1000bff0:	100098f9 	.word	0x100098f9
1000bff4:	10009931 	.word	0x10009931
1000bff8:	10008341 	.word	0x10008341
1000bffc:	10016004 	.word	0x10016004
1000c000:	10008491 	.word	0x10008491
1000c004:	10016034 	.word	0x10016034
1000c008:	10016064 	.word	0x10016064
1000c00c:	10015350 	.word	0x10015350
1000c010:	10015ff0 	.word	0x10015ff0
1000c014:	10008371 	.word	0x10008371
1000c018:	1000ba7d 	.word	0x1000ba7d
1000c01c:	1000b9e5 	.word	0x1000b9e5
1000c020:	e000e100 	.word	0xe000e100
1000c024:	10008419 	.word	0x10008419
1000c028:	10015fe8 	.word	0x10015fe8
1000c02c:	1000f9e9 	.word	0x1000f9e9
1000c030:	10013570 	.word	0x10013570
1000c034:	10013590 	.word	0x10013590
1000c038:	10015fec 	.word	0x10015fec
1000c03c:	1000db39 	.word	0x1000db39
1000c040:	100160c4 	.word	0x100160c4
1000c044:	100135c4 	.word	0x100135c4
1000c048:	100135e4 	.word	0x100135e4
1000c04c:	1001338c 	.word	0x1001338c
1000c050:	1000a4bd 	.word	0x1000a4bd
1000c054:	1001361c 	.word	0x1001361c
1000c058:	10013368 	.word	0x10013368
1000c05c:	1001364c 	.word	0x1001364c
1000c060:	10016074 	.word	0x10016074
1000c064:	10009a39 	.word	0x10009a39
1000c068:	10009aa9 	.word	0x10009aa9
1000c06c:	1001367c 	.word	0x1001367c
1000c070:	1000ced9 	.word	0x1000ced9
1000c074:	1000bb95 	.word	0x1000bb95
1000c078:	1001331c 	.word	0x1001331c
1000c07c:	100136b4 	.word	0x100136b4
1000c080:	1000b999 	.word	0x1000b999
1000c084:	1000b7bd 	.word	0x1000b7bd
1000c088:	1000acd1 	.word	0x1000acd1
1000c08c:	10015357 	.word	0x10015357
1000c090:	0000028f 	.word	0x0000028f
1000c094:	100138d1 	.word	0x100138d1
1000c098:	10015fe4 	.word	0x10015fe4
1000c09c:	10009acd 	.word	0x10009acd
1000c0a0:	100136a0 	.word	0x100136a0
1000c0a4:	1001534c 	.word	0x1001534c
1000c0a8:	00000cb2 	.word	0x00000cb2
1000c0ac:	1001535a 	.word	0x1001535a
1000c0b0:	10015356 	.word	0x10015356
1000c0b4:	41200000 	.word	0x41200000
1000c0b8:	1000ff75 	.word	0x1000ff75
1000c0bc:	1000db65 	.word	0x1000db65
1000c0c0:	10015fd0 	.word	0x10015fd0
1000c0c4:	10008a0d 	.word	0x10008a0d

1000c0c8 <internal_event_post>:
1000c0c8:	b570      	push	{r4, r5, r6, lr}
1000c0ca:	4d12      	ldr	r5, [pc, #72]	; (1000c114 <internal_event_post+0x4c>)
1000c0cc:	682c      	ldr	r4, [r5, #0]
1000c0ce:	2c00      	cmp	r4, #0
1000c0d0:	d014      	beq.n	1000c0fc <internal_event_post+0x34>
1000c0d2:	6826      	ldr	r6, [r4, #0]
1000c0d4:	60e2      	str	r2, [r4, #12]
1000c0d6:	602e      	str	r6, [r5, #0]
1000c0d8:	2500      	movs	r5, #0
1000c0da:	4a0f      	ldr	r2, [pc, #60]	; (1000c118 <internal_event_post+0x50>)
1000c0dc:	8123      	strh	r3, [r4, #8]
1000c0de:	6813      	ldr	r3, [r2, #0]
1000c0e0:	6025      	str	r5, [r4, #0]
1000c0e2:	80a0      	strh	r0, [r4, #4]
1000c0e4:	80e1      	strh	r1, [r4, #6]
1000c0e6:	42ab      	cmp	r3, r5
1000c0e8:	d101      	bne.n	1000c0ee <internal_event_post+0x26>
1000c0ea:	6014      	str	r4, [r2, #0]
1000c0ec:	e011      	b.n	1000c112 <internal_event_post+0x4a>
1000c0ee:	681a      	ldr	r2, [r3, #0]
1000c0f0:	2a00      	cmp	r2, #0
1000c0f2:	d001      	beq.n	1000c0f8 <internal_event_post+0x30>
1000c0f4:	1c13      	adds	r3, r2, #0
1000c0f6:	e7fa      	b.n	1000c0ee <internal_event_post+0x26>
1000c0f8:	601c      	str	r4, [r3, #0]
1000c0fa:	e00a      	b.n	1000c112 <internal_event_post+0x4a>
1000c0fc:	b2c4      	uxtb	r4, r0
1000c0fe:	2c00      	cmp	r4, #0
1000c100:	d107      	bne.n	1000c112 <internal_event_post+0x4a>
1000c102:	4c06      	ldr	r4, [pc, #24]	; (1000c11c <internal_event_post+0x54>)
1000c104:	60e2      	str	r2, [r4, #12]
1000c106:	2201      	movs	r2, #1
1000c108:	8123      	strh	r3, [r4, #8]
1000c10a:	4b05      	ldr	r3, [pc, #20]	; (1000c120 <internal_event_post+0x58>)
1000c10c:	80a0      	strh	r0, [r4, #4]
1000c10e:	80e1      	strh	r1, [r4, #6]
1000c110:	701a      	strb	r2, [r3, #0]
1000c112:	bd70      	pop	{r4, r5, r6, pc}
1000c114:	10015374 	.word	0x10015374
1000c118:	10015370 	.word	0x10015370
1000c11c:	1001535c 	.word	0x1001535c
1000c120:	1001536c 	.word	0x1001536c

1000c124 <internal_event_init>:
1000c124:	b510      	push	{r4, lr}
1000c126:	4b08      	ldr	r3, [pc, #32]	; (1000c148 <internal_event_init+0x24>)
1000c128:	0900      	lsrs	r0, r0, #4
1000c12a:	0100      	lsls	r0, r0, #4
1000c12c:	681a      	ldr	r2, [r3, #0]
1000c12e:	1808      	adds	r0, r1, r0
1000c130:	4281      	cmp	r1, r0
1000c132:	d003      	beq.n	1000c13c <internal_event_init+0x18>
1000c134:	600a      	str	r2, [r1, #0]
1000c136:	1c0a      	adds	r2, r1, #0
1000c138:	3110      	adds	r1, #16
1000c13a:	e7f9      	b.n	1000c130 <internal_event_init+0xc>
1000c13c:	601a      	str	r2, [r3, #0]
1000c13e:	2200      	movs	r2, #0
1000c140:	4b02      	ldr	r3, [pc, #8]	; (1000c14c <internal_event_init+0x28>)
1000c142:	601a      	str	r2, [r3, #0]
1000c144:	bd10      	pop	{r4, pc}
1000c146:	46c0      	nop			; (mov r8, r8)
1000c148:	10015374 	.word	0x10015374
1000c14c:	10015370 	.word	0x10015370

1000c150 <special_events_handler>:
1000c150:	b538      	push	{r3, r4, r5, lr}
1000c152:	4c1b      	ldr	r4, [pc, #108]	; (1000c1c0 <special_events_handler+0x70>)
1000c154:	1c03      	adds	r3, r0, #0
1000c156:	8825      	ldrh	r5, [r4, #0]
1000c158:	1c08      	adds	r0, r1, #0
1000c15a:	1c21      	adds	r1, r4, #0
1000c15c:	429d      	cmp	r5, r3
1000c15e:	d107      	bne.n	1000c170 <special_events_handler+0x20>
1000c160:	88a5      	ldrh	r5, [r4, #4]
1000c162:	4285      	cmp	r5, r0
1000c164:	d104      	bne.n	1000c170 <special_events_handler+0x20>
1000c166:	2301      	movs	r3, #1
1000c168:	425b      	negs	r3, r3
1000c16a:	8023      	strh	r3, [r4, #0]
1000c16c:	60a2      	str	r2, [r4, #8]
1000c16e:	e009      	b.n	1000c184 <special_events_handler+0x34>
1000c170:	884c      	ldrh	r4, [r1, #2]
1000c172:	429c      	cmp	r4, r3
1000c174:	d10a      	bne.n	1000c18c <special_events_handler+0x3c>
1000c176:	888c      	ldrh	r4, [r1, #4]
1000c178:	4284      	cmp	r4, r0
1000c17a:	d107      	bne.n	1000c18c <special_events_handler+0x3c>
1000c17c:	2301      	movs	r3, #1
1000c17e:	425b      	negs	r3, r3
1000c180:	804b      	strh	r3, [r1, #2]
1000c182:	608a      	str	r2, [r1, #8]
1000c184:	4b0f      	ldr	r3, [pc, #60]	; (1000c1c4 <special_events_handler+0x74>)
1000c186:	4798      	blx	r3
1000c188:	2001      	movs	r0, #1
1000c18a:	e017      	b.n	1000c1bc <special_events_handler+0x6c>
1000c18c:	490e      	ldr	r1, [pc, #56]	; (1000c1c8 <special_events_handler+0x78>)
1000c18e:	428b      	cmp	r3, r1
1000c190:	d00e      	beq.n	1000c1b0 <special_events_handler+0x60>
1000c192:	490e      	ldr	r1, [pc, #56]	; (1000c1cc <special_events_handler+0x7c>)
1000c194:	428b      	cmp	r3, r1
1000c196:	d007      	beq.n	1000c1a8 <special_events_handler+0x58>
1000c198:	490d      	ldr	r1, [pc, #52]	; (1000c1d0 <special_events_handler+0x80>)
1000c19a:	2000      	movs	r0, #0
1000c19c:	428b      	cmp	r3, r1
1000c19e:	d10d      	bne.n	1000c1bc <special_events_handler+0x6c>
1000c1a0:	1c10      	adds	r0, r2, #0
1000c1a2:	4b0c      	ldr	r3, [pc, #48]	; (1000c1d4 <special_events_handler+0x84>)
1000c1a4:	4798      	blx	r3
1000c1a6:	e7ef      	b.n	1000c188 <special_events_handler+0x38>
1000c1a8:	1c11      	adds	r1, r2, #0
1000c1aa:	4b0b      	ldr	r3, [pc, #44]	; (1000c1d8 <special_events_handler+0x88>)
1000c1ac:	2200      	movs	r2, #0
1000c1ae:	e002      	b.n	1000c1b6 <special_events_handler+0x66>
1000c1b0:	1c11      	adds	r1, r2, #0
1000c1b2:	2200      	movs	r2, #0
1000c1b4:	4b09      	ldr	r3, [pc, #36]	; (1000c1dc <special_events_handler+0x8c>)
1000c1b6:	4798      	blx	r3
1000c1b8:	4243      	negs	r3, r0
1000c1ba:	4158      	adcs	r0, r3
1000c1bc:	bd38      	pop	{r3, r4, r5, pc}
1000c1be:	46c0      	nop			; (mov r8, r8)
1000c1c0:	100160c8 	.word	0x100160c8
1000c1c4:	1000dc71 	.word	0x1000dc71
1000c1c8:	00000e13 	.word	0x00000e13
1000c1cc:	00000e15 	.word	0x00000e15
1000c1d0:	00000e01 	.word	0x00000e01
1000c1d4:	1000e099 	.word	0x1000e099
1000c1d8:	1000e259 	.word	0x1000e259
1000c1dc:	1000e331 	.word	0x1000e331

1000c1e0 <at_ble_event_get>:
1000c1e0:	2300      	movs	r3, #0
1000c1e2:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c1e4:	b087      	sub	sp, #28
1000c1e6:	9204      	str	r2, [sp, #16]
1000c1e8:	7003      	strb	r3, [r0, #0]
1000c1ea:	9b04      	ldr	r3, [sp, #16]
1000c1ec:	9003      	str	r0, [sp, #12]
1000c1ee:	3b01      	subs	r3, #1
1000c1f0:	1c0d      	adds	r5, r1, #0
1000c1f2:	9305      	str	r3, [sp, #20]
1000c1f4:	3303      	adds	r3, #3
1000c1f6:	d802      	bhi.n	1000c1fe <at_ble_event_get+0x1e>
1000c1f8:	9804      	ldr	r0, [sp, #16]
1000c1fa:	4bae      	ldr	r3, [pc, #696]	; (1000c4b4 <at_ble_event_get+0x2d4>)
1000c1fc:	4798      	blx	r3
1000c1fe:	9b05      	ldr	r3, [sp, #20]
1000c200:	4cad      	ldr	r4, [pc, #692]	; (1000c4b8 <at_ble_event_get+0x2d8>)
1000c202:	3303      	adds	r3, #3
1000c204:	d902      	bls.n	1000c20c <at_ble_event_get+0x2c>
1000c206:	2300      	movs	r3, #0
1000c208:	9302      	str	r3, [sp, #8]
1000c20a:	e015      	b.n	1000c238 <at_ble_event_get+0x58>
1000c20c:	2300      	movs	r3, #0
1000c20e:	9302      	str	r3, [sp, #8]
1000c210:	6823      	ldr	r3, [r4, #0]
1000c212:	2b00      	cmp	r3, #0
1000c214:	d113      	bne.n	1000c23e <at_ble_event_get+0x5e>
1000c216:	9b02      	ldr	r3, [sp, #8]
1000c218:	2bd0      	cmp	r3, #208	; 0xd0
1000c21a:	d100      	bne.n	1000c21e <at_ble_event_get+0x3e>
1000c21c:	e2da      	b.n	1000c7d4 <at_ble_event_get+0x5f4>
1000c21e:	9804      	ldr	r0, [sp, #16]
1000c220:	4ba6      	ldr	r3, [pc, #664]	; (1000c4bc <at_ble_event_get+0x2dc>)
1000c222:	4798      	blx	r3
1000c224:	9002      	str	r0, [sp, #8]
1000c226:	2802      	cmp	r0, #2
1000c228:	d1f2      	bne.n	1000c210 <at_ble_event_get+0x30>
1000c22a:	e03f      	b.n	1000c2ac <at_ble_event_get+0xcc>
1000c22c:	9804      	ldr	r0, [sp, #16]
1000c22e:	4ba3      	ldr	r3, [pc, #652]	; (1000c4bc <at_ble_event_get+0x2dc>)
1000c230:	4798      	blx	r3
1000c232:	9002      	str	r0, [sp, #8]
1000c234:	2802      	cmp	r0, #2
1000c236:	d039      	beq.n	1000c2ac <at_ble_event_get+0xcc>
1000c238:	6823      	ldr	r3, [r4, #0]
1000c23a:	2b00      	cmp	r3, #0
1000c23c:	d0f6      	beq.n	1000c22c <at_ble_event_get+0x4c>
1000c23e:	9b02      	ldr	r3, [sp, #8]
1000c240:	2bd0      	cmp	r3, #208	; 0xd0
1000c242:	d100      	bne.n	1000c246 <at_ble_event_get+0x66>
1000c244:	e2c6      	b.n	1000c7d4 <at_ble_event_get+0x5f4>
1000c246:	9b02      	ldr	r3, [sp, #8]
1000c248:	3b03      	subs	r3, #3
1000c24a:	1e5a      	subs	r2, r3, #1
1000c24c:	4193      	sbcs	r3, r2
1000c24e:	9a02      	ldr	r2, [sp, #8]
1000c250:	425b      	negs	r3, r3
1000c252:	401a      	ands	r2, r3
1000c254:	6823      	ldr	r3, [r4, #0]
1000c256:	9202      	str	r2, [sp, #8]
1000c258:	2b00      	cmp	r3, #0
1000c25a:	d100      	bne.n	1000c25e <at_ble_event_get+0x7e>
1000c25c:	e2c2      	b.n	1000c7e4 <at_ble_event_get+0x604>
1000c25e:	681a      	ldr	r2, [r3, #0]
1000c260:	68de      	ldr	r6, [r3, #12]
1000c262:	6022      	str	r2, [r4, #0]
1000c264:	88da      	ldrh	r2, [r3, #6]
1000c266:	9201      	str	r2, [sp, #4]
1000c268:	4a95      	ldr	r2, [pc, #596]	; (1000c4c0 <at_ble_event_get+0x2e0>)
1000c26a:	889c      	ldrh	r4, [r3, #4]
1000c26c:	6811      	ldr	r1, [r2, #0]
1000c26e:	6013      	str	r3, [r2, #0]
1000c270:	6019      	str	r1, [r3, #0]
1000c272:	4b94      	ldr	r3, [pc, #592]	; (1000c4c4 <at_ble_event_get+0x2e4>)
1000c274:	781b      	ldrb	r3, [r3, #0]
1000c276:	2b01      	cmp	r3, #1
1000c278:	d10f      	bne.n	1000c29a <at_ble_event_get+0xba>
1000c27a:	4b93      	ldr	r3, [pc, #588]	; (1000c4c8 <at_ble_event_get+0x2e8>)
1000c27c:	4a92      	ldr	r2, [pc, #584]	; (1000c4c8 <at_ble_event_get+0x2e8>)
1000c27e:	8898      	ldrh	r0, [r3, #4]
1000c280:	88d9      	ldrh	r1, [r3, #6]
1000c282:	68d2      	ldr	r2, [r2, #12]
1000c284:	891b      	ldrh	r3, [r3, #8]
1000c286:	4f91      	ldr	r7, [pc, #580]	; (1000c4cc <at_ble_event_get+0x2ec>)
1000c288:	47b8      	blx	r7
1000c28a:	2210      	movs	r2, #16
1000c28c:	4b90      	ldr	r3, [pc, #576]	; (1000c4d0 <at_ble_event_get+0x2f0>)
1000c28e:	488e      	ldr	r0, [pc, #568]	; (1000c4c8 <at_ble_event_get+0x2e8>)
1000c290:	2100      	movs	r1, #0
1000c292:	4798      	blx	r3
1000c294:	2300      	movs	r3, #0
1000c296:	4a8b      	ldr	r2, [pc, #556]	; (1000c4c4 <at_ble_event_get+0x2e4>)
1000c298:	7013      	strb	r3, [r2, #0]
1000c29a:	9b02      	ldr	r3, [sp, #8]
1000c29c:	2b00      	cmp	r3, #0
1000c29e:	d114      	bne.n	1000c2ca <at_ble_event_get+0xea>
1000c2a0:	4b8c      	ldr	r3, [pc, #560]	; (1000c4d4 <at_ble_event_get+0x2f4>)
1000c2a2:	429c      	cmp	r4, r3
1000c2a4:	d009      	beq.n	1000c2ba <at_ble_event_get+0xda>
1000c2a6:	4b8c      	ldr	r3, [pc, #560]	; (1000c4d8 <at_ble_event_get+0x2f8>)
1000c2a8:	429c      	cmp	r4, r3
1000c2aa:	d127      	bne.n	1000c2fc <at_ble_event_get+0x11c>
1000c2ac:	233a      	movs	r3, #58	; 0x3a
1000c2ae:	9a03      	ldr	r2, [sp, #12]
1000c2b0:	7013      	strb	r3, [r2, #0]
1000c2b2:	2300      	movs	r3, #0
1000c2b4:	9302      	str	r3, [sp, #8]
1000c2b6:	1c1d      	adds	r5, r3, #0
1000c2b8:	e007      	b.n	1000c2ca <at_ble_event_get+0xea>
1000c2ba:	9b01      	ldr	r3, [sp, #4]
1000c2bc:	42a3      	cmp	r3, r4
1000c2be:	d000      	beq.n	1000c2c2 <at_ble_event_get+0xe2>
1000c2c0:	e28a      	b.n	1000c7d8 <at_ble_event_get+0x5f8>
1000c2c2:	2338      	movs	r3, #56	; 0x38
1000c2c4:	9a03      	ldr	r2, [sp, #12]
1000c2c6:	7013      	strb	r3, [r2, #0]
1000c2c8:	602e      	str	r6, [r5, #0]
1000c2ca:	9b03      	ldr	r3, [sp, #12]
1000c2cc:	781b      	ldrb	r3, [r3, #0]
1000c2ce:	2b3b      	cmp	r3, #59	; 0x3b
1000c2d0:	d101      	bne.n	1000c2d6 <at_ble_event_get+0xf6>
1000c2d2:	4b82      	ldr	r3, [pc, #520]	; (1000c4dc <at_ble_event_get+0x2fc>)
1000c2d4:	4798      	blx	r3
1000c2d6:	9b03      	ldr	r3, [sp, #12]
1000c2d8:	781b      	ldrb	r3, [r3, #0]
1000c2da:	2b3b      	cmp	r3, #59	; 0x3b
1000c2dc:	d003      	beq.n	1000c2e6 <at_ble_event_get+0x106>
1000c2de:	9b05      	ldr	r3, [sp, #20]
1000c2e0:	3303      	adds	r3, #3
1000c2e2:	d904      	bls.n	1000c2ee <at_ble_event_get+0x10e>
1000c2e4:	e283      	b.n	1000c7ee <at_ble_event_get+0x60e>
1000c2e6:	9b02      	ldr	r3, [sp, #8]
1000c2e8:	2b00      	cmp	r3, #0
1000c2ea:	d088      	beq.n	1000c1fe <at_ble_event_get+0x1e>
1000c2ec:	e7f7      	b.n	1000c2de <at_ble_event_get+0xfe>
1000c2ee:	9b02      	ldr	r3, [sp, #8]
1000c2f0:	2bd0      	cmp	r3, #208	; 0xd0
1000c2f2:	d100      	bne.n	1000c2f6 <at_ble_event_get+0x116>
1000c2f4:	e27b      	b.n	1000c7ee <at_ble_event_get+0x60e>
1000c2f6:	4b7a      	ldr	r3, [pc, #488]	; (1000c4e0 <at_ble_event_get+0x300>)
1000c2f8:	4798      	blx	r3
1000c2fa:	e278      	b.n	1000c7ee <at_ble_event_get+0x60e>
1000c2fc:	9b01      	ldr	r3, [sp, #4]
1000c2fe:	2bbb      	cmp	r3, #187	; 0xbb
1000c300:	d125      	bne.n	1000c34e <at_ble_event_get+0x16e>
1000c302:	2cbb      	cmp	r4, #187	; 0xbb
1000c304:	d123      	bne.n	1000c34e <at_ble_event_get+0x16e>
1000c306:	466b      	mov	r3, sp
1000c308:	891b      	ldrh	r3, [r3, #8]
1000c30a:	80ab      	strh	r3, [r5, #4]
1000c30c:	78b3      	ldrb	r3, [r6, #2]
1000c30e:	7872      	ldrb	r2, [r6, #1]
1000c310:	78f0      	ldrb	r0, [r6, #3]
1000c312:	021b      	lsls	r3, r3, #8
1000c314:	4313      	orrs	r3, r2
1000c316:	7971      	ldrb	r1, [r6, #5]
1000c318:	7932      	ldrb	r2, [r6, #4]
1000c31a:	70a8      	strb	r0, [r5, #2]
1000c31c:	4871      	ldr	r0, [pc, #452]	; (1000c4e4 <at_ble_event_get+0x304>)
1000c31e:	802b      	strh	r3, [r5, #0]
1000c320:	4283      	cmp	r3, r0
1000c322:	d806      	bhi.n	1000c332 <at_ble_event_get+0x152>
1000c324:	4a70      	ldr	r2, [pc, #448]	; (1000c4e8 <at_ble_event_get+0x308>)
1000c326:	4293      	cmp	r3, r2
1000c328:	d20b      	bcs.n	1000c342 <at_ble_event_get+0x162>
1000c32a:	4a70      	ldr	r2, [pc, #448]	; (1000c4ec <at_ble_event_get+0x30c>)
1000c32c:	4293      	cmp	r3, r2
1000c32e:	d008      	beq.n	1000c342 <at_ble_event_get+0x162>
1000c330:	e009      	b.n	1000c346 <at_ble_event_get+0x166>
1000c332:	486f      	ldr	r0, [pc, #444]	; (1000c4f0 <at_ble_event_get+0x310>)
1000c334:	4283      	cmp	r3, r0
1000c336:	d106      	bne.n	1000c346 <at_ble_event_get+0x166>
1000c338:	020b      	lsls	r3, r1, #8
1000c33a:	4313      	orrs	r3, r2
1000c33c:	80ab      	strh	r3, [r5, #4]
1000c33e:	2337      	movs	r3, #55	; 0x37
1000c340:	e002      	b.n	1000c348 <at_ble_event_get+0x168>
1000c342:	2336      	movs	r3, #54	; 0x36
1000c344:	e000      	b.n	1000c348 <at_ble_event_get+0x168>
1000c346:	2300      	movs	r3, #0
1000c348:	9a03      	ldr	r2, [sp, #12]
1000c34a:	7013      	strb	r3, [r2, #0]
1000c34c:	e7bd      	b.n	1000c2ca <at_ble_event_get+0xea>
1000c34e:	4b69      	ldr	r3, [pc, #420]	; (1000c4f4 <at_ble_event_get+0x314>)
1000c350:	429c      	cmp	r4, r3
1000c352:	d100      	bne.n	1000c356 <at_ble_event_get+0x176>
1000c354:	e144      	b.n	1000c5e0 <at_ble_event_get+0x400>
1000c356:	d865      	bhi.n	1000c424 <at_ble_event_get+0x244>
1000c358:	4b67      	ldr	r3, [pc, #412]	; (1000c4f8 <at_ble_event_get+0x318>)
1000c35a:	429c      	cmp	r4, r3
1000c35c:	d100      	bne.n	1000c360 <at_ble_event_get+0x180>
1000c35e:	e1d5      	b.n	1000c70c <at_ble_event_get+0x52c>
1000c360:	d82f      	bhi.n	1000c3c2 <at_ble_event_get+0x1e2>
1000c362:	4b66      	ldr	r3, [pc, #408]	; (1000c4fc <at_ble_event_get+0x31c>)
1000c364:	429c      	cmp	r4, r3
1000c366:	d100      	bne.n	1000c36a <at_ble_event_get+0x18a>
1000c368:	e1e0      	b.n	1000c72c <at_ble_event_get+0x54c>
1000c36a:	d813      	bhi.n	1000c394 <at_ble_event_get+0x1b4>
1000c36c:	4b64      	ldr	r3, [pc, #400]	; (1000c500 <at_ble_event_get+0x320>)
1000c36e:	429c      	cmp	r4, r3
1000c370:	d100      	bne.n	1000c374 <at_ble_event_get+0x194>
1000c372:	e1a3      	b.n	1000c6bc <at_ble_event_get+0x4dc>
1000c374:	d804      	bhi.n	1000c380 <at_ble_event_get+0x1a0>
1000c376:	2638      	movs	r6, #56	; 0x38
1000c378:	42b4      	cmp	r4, r6
1000c37a:	d100      	bne.n	1000c37e <at_ble_event_get+0x19e>
1000c37c:	e225      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c37e:	e117      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c380:	4b60      	ldr	r3, [pc, #384]	; (1000c504 <at_ble_event_get+0x324>)
1000c382:	429c      	cmp	r4, r3
1000c384:	d100      	bne.n	1000c388 <at_ble_event_get+0x1a8>
1000c386:	e19f      	b.n	1000c6c8 <at_ble_event_get+0x4e8>
1000c388:	33fe      	adds	r3, #254	; 0xfe
1000c38a:	33ff      	adds	r3, #255	; 0xff
1000c38c:	429c      	cmp	r4, r3
1000c38e:	d100      	bne.n	1000c392 <at_ble_event_get+0x1b2>
1000c390:	e1d3      	b.n	1000c73a <at_ble_event_get+0x55a>
1000c392:	e10d      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c394:	4b5c      	ldr	r3, [pc, #368]	; (1000c508 <at_ble_event_get+0x328>)
1000c396:	429c      	cmp	r4, r3
1000c398:	d100      	bne.n	1000c39c <at_ble_event_get+0x1bc>
1000c39a:	e1a9      	b.n	1000c6f0 <at_ble_event_get+0x510>
1000c39c:	d808      	bhi.n	1000c3b0 <at_ble_event_get+0x1d0>
1000c39e:	4b5b      	ldr	r3, [pc, #364]	; (1000c50c <at_ble_event_get+0x32c>)
1000c3a0:	429c      	cmp	r4, r3
1000c3a2:	d100      	bne.n	1000c3a6 <at_ble_event_get+0x1c6>
1000c3a4:	e196      	b.n	1000c6d4 <at_ble_event_get+0x4f4>
1000c3a6:	4b5a      	ldr	r3, [pc, #360]	; (1000c510 <at_ble_event_get+0x330>)
1000c3a8:	429c      	cmp	r4, r3
1000c3aa:	d100      	bne.n	1000c3ae <at_ble_event_get+0x1ce>
1000c3ac:	e199      	b.n	1000c6e2 <at_ble_event_get+0x502>
1000c3ae:	e0ff      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c3b0:	4b58      	ldr	r3, [pc, #352]	; (1000c514 <at_ble_event_get+0x334>)
1000c3b2:	429c      	cmp	r4, r3
1000c3b4:	d100      	bne.n	1000c3b8 <at_ble_event_get+0x1d8>
1000c3b6:	e1a2      	b.n	1000c6fe <at_ble_event_get+0x51e>
1000c3b8:	4b57      	ldr	r3, [pc, #348]	; (1000c518 <at_ble_event_get+0x338>)
1000c3ba:	429c      	cmp	r4, r3
1000c3bc:	d100      	bne.n	1000c3c0 <at_ble_event_get+0x1e0>
1000c3be:	e1d4      	b.n	1000c76a <at_ble_event_get+0x58a>
1000c3c0:	e0f6      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c3c2:	4b56      	ldr	r3, [pc, #344]	; (1000c51c <at_ble_event_get+0x33c>)
1000c3c4:	429c      	cmp	r4, r3
1000c3c6:	d100      	bne.n	1000c3ca <at_ble_event_get+0x1ea>
1000c3c8:	e1c8      	b.n	1000c75c <at_ble_event_get+0x57c>
1000c3ca:	d812      	bhi.n	1000c3f2 <at_ble_event_get+0x212>
1000c3cc:	4b54      	ldr	r3, [pc, #336]	; (1000c520 <at_ble_event_get+0x340>)
1000c3ce:	429c      	cmp	r4, r3
1000c3d0:	d100      	bne.n	1000c3d4 <at_ble_event_get+0x1f4>
1000c3d2:	e1d1      	b.n	1000c778 <at_ble_event_get+0x598>
1000c3d4:	d804      	bhi.n	1000c3e0 <at_ble_event_get+0x200>
1000c3d6:	4b53      	ldr	r3, [pc, #332]	; (1000c524 <at_ble_event_get+0x344>)
1000c3d8:	429c      	cmp	r4, r3
1000c3da:	d100      	bne.n	1000c3de <at_ble_event_get+0x1fe>
1000c3dc:	e19b      	b.n	1000c716 <at_ble_event_get+0x536>
1000c3de:	e0e7      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c3e0:	4b51      	ldr	r3, [pc, #324]	; (1000c528 <at_ble_event_get+0x348>)
1000c3e2:	429c      	cmp	r4, r3
1000c3e4:	d100      	bne.n	1000c3e8 <at_ble_event_get+0x208>
1000c3e6:	e1ad      	b.n	1000c744 <at_ble_event_get+0x564>
1000c3e8:	4b50      	ldr	r3, [pc, #320]	; (1000c52c <at_ble_event_get+0x34c>)
1000c3ea:	429c      	cmp	r4, r3
1000c3ec:	d100      	bne.n	1000c3f0 <at_ble_event_get+0x210>
1000c3ee:	e1b0      	b.n	1000c752 <at_ble_event_get+0x572>
1000c3f0:	e0de      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c3f2:	4b4f      	ldr	r3, [pc, #316]	; (1000c530 <at_ble_event_get+0x350>)
1000c3f4:	429c      	cmp	r4, r3
1000c3f6:	d100      	bne.n	1000c3fa <at_ble_event_get+0x21a>
1000c3f8:	e0e0      	b.n	1000c5bc <at_ble_event_get+0x3dc>
1000c3fa:	d809      	bhi.n	1000c410 <at_ble_event_get+0x230>
1000c3fc:	3b08      	subs	r3, #8
1000c3fe:	429c      	cmp	r4, r3
1000c400:	d100      	bne.n	1000c404 <at_ble_event_get+0x224>
1000c402:	e0d7      	b.n	1000c5b4 <at_ble_event_get+0x3d4>
1000c404:	4b4b      	ldr	r3, [pc, #300]	; (1000c534 <at_ble_event_get+0x354>)
1000c406:	2639      	movs	r6, #57	; 0x39
1000c408:	429c      	cmp	r4, r3
1000c40a:	d100      	bne.n	1000c40e <at_ble_event_get+0x22e>
1000c40c:	e1dd      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c40e:	e0cf      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c410:	23d1      	movs	r3, #209	; 0xd1
1000c412:	011b      	lsls	r3, r3, #4
1000c414:	429c      	cmp	r4, r3
1000c416:	d100      	bne.n	1000c41a <at_ble_event_get+0x23a>
1000c418:	e0d6      	b.n	1000c5c8 <at_ble_event_get+0x3e8>
1000c41a:	4b47      	ldr	r3, [pc, #284]	; (1000c538 <at_ble_event_get+0x358>)
1000c41c:	429c      	cmp	r4, r3
1000c41e:	d100      	bne.n	1000c422 <at_ble_event_get+0x242>
1000c420:	e0d8      	b.n	1000c5d4 <at_ble_event_get+0x3f4>
1000c422:	e0c5      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c424:	4b45      	ldr	r3, [pc, #276]	; (1000c53c <at_ble_event_get+0x35c>)
1000c426:	429c      	cmp	r4, r3
1000c428:	d100      	bne.n	1000c42c <at_ble_event_get+0x24c>
1000c42a:	e117      	b.n	1000c65c <at_ble_event_get+0x47c>
1000c42c:	d82e      	bhi.n	1000c48c <at_ble_event_get+0x2ac>
1000c42e:	4b44      	ldr	r3, [pc, #272]	; (1000c540 <at_ble_event_get+0x360>)
1000c430:	429c      	cmp	r4, r3
1000c432:	d100      	bne.n	1000c436 <at_ble_event_get+0x256>
1000c434:	e13d      	b.n	1000c6b2 <at_ble_event_get+0x4d2>
1000c436:	d812      	bhi.n	1000c45e <at_ble_event_get+0x27e>
1000c438:	4b42      	ldr	r3, [pc, #264]	; (1000c544 <at_ble_event_get+0x364>)
1000c43a:	429c      	cmp	r4, r3
1000c43c:	d100      	bne.n	1000c440 <at_ble_event_get+0x260>
1000c43e:	e0e8      	b.n	1000c612 <at_ble_event_get+0x432>
1000c440:	d804      	bhi.n	1000c44c <at_ble_event_get+0x26c>
1000c442:	3b03      	subs	r3, #3
1000c444:	429c      	cmp	r4, r3
1000c446:	d100      	bne.n	1000c44a <at_ble_event_get+0x26a>
1000c448:	e0d0      	b.n	1000c5ec <at_ble_event_get+0x40c>
1000c44a:	e0b1      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c44c:	4b3e      	ldr	r3, [pc, #248]	; (1000c548 <at_ble_event_get+0x368>)
1000c44e:	429c      	cmp	r4, r3
1000c450:	d100      	bne.n	1000c454 <at_ble_event_get+0x274>
1000c452:	e0d0      	b.n	1000c5f6 <at_ble_event_get+0x416>
1000c454:	4b3d      	ldr	r3, [pc, #244]	; (1000c54c <at_ble_event_get+0x36c>)
1000c456:	429c      	cmp	r4, r3
1000c458:	d100      	bne.n	1000c45c <at_ble_event_get+0x27c>
1000c45a:	e0f9      	b.n	1000c650 <at_ble_event_get+0x470>
1000c45c:	e0a8      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c45e:	4b3c      	ldr	r3, [pc, #240]	; (1000c550 <at_ble_event_get+0x370>)
1000c460:	429c      	cmp	r4, r3
1000c462:	d100      	bne.n	1000c466 <at_ble_event_get+0x286>
1000c464:	e0db      	b.n	1000c61e <at_ble_event_get+0x43e>
1000c466:	d808      	bhi.n	1000c47a <at_ble_event_get+0x29a>
1000c468:	4b3a      	ldr	r3, [pc, #232]	; (1000c554 <at_ble_event_get+0x374>)
1000c46a:	429c      	cmp	r4, r3
1000c46c:	d100      	bne.n	1000c470 <at_ble_event_get+0x290>
1000c46e:	e11b      	b.n	1000c6a8 <at_ble_event_get+0x4c8>
1000c470:	4b39      	ldr	r3, [pc, #228]	; (1000c558 <at_ble_event_get+0x378>)
1000c472:	429c      	cmp	r4, r3
1000c474:	d100      	bne.n	1000c478 <at_ble_event_get+0x298>
1000c476:	e0d8      	b.n	1000c62a <at_ble_event_get+0x44a>
1000c478:	e09a      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c47a:	4b38      	ldr	r3, [pc, #224]	; (1000c55c <at_ble_event_get+0x37c>)
1000c47c:	429c      	cmp	r4, r3
1000c47e:	d100      	bne.n	1000c482 <at_ble_event_get+0x2a2>
1000c480:	e0d8      	b.n	1000c634 <at_ble_event_get+0x454>
1000c482:	4b37      	ldr	r3, [pc, #220]	; (1000c560 <at_ble_event_get+0x380>)
1000c484:	429c      	cmp	r4, r3
1000c486:	d100      	bne.n	1000c48a <at_ble_event_get+0x2aa>
1000c488:	e0db      	b.n	1000c642 <at_ble_event_get+0x462>
1000c48a:	e091      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c48c:	4b35      	ldr	r3, [pc, #212]	; (1000c564 <at_ble_event_get+0x384>)
1000c48e:	429c      	cmp	r4, r3
1000c490:	d100      	bne.n	1000c494 <at_ble_event_get+0x2b4>
1000c492:	e0f7      	b.n	1000c684 <at_ble_event_get+0x4a4>
1000c494:	d876      	bhi.n	1000c584 <at_ble_event_get+0x3a4>
1000c496:	4b34      	ldr	r3, [pc, #208]	; (1000c568 <at_ble_event_get+0x388>)
1000c498:	429c      	cmp	r4, r3
1000c49a:	d100      	bne.n	1000c49e <at_ble_event_get+0x2be>
1000c49c:	e0f8      	b.n	1000c690 <at_ble_event_get+0x4b0>
1000c49e:	d869      	bhi.n	1000c574 <at_ble_event_get+0x394>
1000c4a0:	4b32      	ldr	r3, [pc, #200]	; (1000c56c <at_ble_event_get+0x38c>)
1000c4a2:	429c      	cmp	r4, r3
1000c4a4:	d100      	bne.n	1000c4a8 <at_ble_event_get+0x2c8>
1000c4a6:	e0e0      	b.n	1000c66a <at_ble_event_get+0x48a>
1000c4a8:	4b31      	ldr	r3, [pc, #196]	; (1000c570 <at_ble_event_get+0x390>)
1000c4aa:	429c      	cmp	r4, r3
1000c4ac:	d100      	bne.n	1000c4b0 <at_ble_event_get+0x2d0>
1000c4ae:	e0a9      	b.n	1000c604 <at_ble_event_get+0x424>
1000c4b0:	e07e      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c4b2:	46c0      	nop			; (mov r8, r8)
1000c4b4:	1000dca9 	.word	0x1000dca9
1000c4b8:	10015370 	.word	0x10015370
1000c4bc:	1000b545 	.word	0x1000b545
1000c4c0:	10015374 	.word	0x10015374
1000c4c4:	1001536c 	.word	0x1001536c
1000c4c8:	1001535c 	.word	0x1001535c
1000c4cc:	1000c0c9 	.word	0x1000c0c9
1000c4d0:	10011705 	.word	0x10011705
1000c4d4:	0000ffff 	.word	0x0000ffff
1000c4d8:	0000fffe 	.word	0x0000fffe
1000c4dc:	1000b7a9 	.word	0x1000b7a9
1000c4e0:	1000dcab 	.word	0x1000dcab
1000c4e4:	0000201e 	.word	0x0000201e
1000c4e8:	0000201d 	.word	0x0000201d
1000c4ec:	00000c03 	.word	0x00000c03
1000c4f0:	0000201f 	.word	0x0000201f
1000c4f4:	00000d1c 	.word	0x00000d1c
1000c4f8:	00000c0c 	.word	0x00000c0c
1000c4fc:	00000c02 	.word	0x00000c02
1000c500:	00000a02 	.word	0x00000a02
1000c504:	00000a03 	.word	0x00000a03
1000c508:	00000c06 	.word	0x00000c06
1000c50c:	00000c04 	.word	0x00000c04
1000c510:	00000c05 	.word	0x00000c05
1000c514:	00000c07 	.word	0x00000c07
1000c518:	00000c09 	.word	0x00000c09
1000c51c:	00000c17 	.word	0x00000c17
1000c520:	00000c12 	.word	0x00000c12
1000c524:	00000c0d 	.word	0x00000c0d
1000c528:	00000c13 	.word	0x00000c13
1000c52c:	00000c15 	.word	0x00000c15
1000c530:	00000d08 	.word	0x00000d08
1000c534:	00000d01 	.word	0x00000d01
1000c538:	00000d15 	.word	0x00000d15
1000c53c:	00000e1b 	.word	0x00000e1b
1000c540:	00000e0f 	.word	0x00000e0f
1000c544:	00000e03 	.word	0x00000e03
1000c548:	00000e06 	.word	0x00000e06
1000c54c:	00000e0a 	.word	0x00000e0a
1000c550:	00000e15 	.word	0x00000e15
1000c554:	00000e11 	.word	0x00000e11
1000c558:	00000e13 	.word	0x00000e13
1000c55c:	00000e17 	.word	0x00000e17
1000c560:	00000e19 	.word	0x00000e19
1000c564:	00000e27 	.word	0x00000e27
1000c568:	00000e21 	.word	0x00000e21
1000c56c:	00000e1c 	.word	0x00000e1c
1000c570:	00000e1d 	.word	0x00000e1d
1000c574:	4b9f      	ldr	r3, [pc, #636]	; (1000c7f4 <at_ble_event_get+0x614>)
1000c576:	429c      	cmp	r4, r3
1000c578:	d07e      	beq.n	1000c678 <at_ble_event_get+0x498>
1000c57a:	4b9f      	ldr	r3, [pc, #636]	; (1000c7f8 <at_ble_event_get+0x618>)
1000c57c:	429c      	cmp	r4, r3
1000c57e:	d100      	bne.n	1000c582 <at_ble_event_get+0x3a2>
1000c580:	e08c      	b.n	1000c69c <at_ble_event_get+0x4bc>
1000c582:	e015      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c584:	4b9d      	ldr	r3, [pc, #628]	; (1000c7fc <at_ble_event_get+0x61c>)
1000c586:	429c      	cmp	r4, r3
1000c588:	d100      	bne.n	1000c58c <at_ble_event_get+0x3ac>
1000c58a:	e10a      	b.n	1000c7a2 <at_ble_event_get+0x5c2>
1000c58c:	d808      	bhi.n	1000c5a0 <at_ble_event_get+0x3c0>
1000c58e:	4b9c      	ldr	r3, [pc, #624]	; (1000c800 <at_ble_event_get+0x620>)
1000c590:	429c      	cmp	r4, r3
1000c592:	d100      	bne.n	1000c596 <at_ble_event_get+0x3b6>
1000c594:	e0f7      	b.n	1000c786 <at_ble_event_get+0x5a6>
1000c596:	4b9b      	ldr	r3, [pc, #620]	; (1000c804 <at_ble_event_get+0x624>)
1000c598:	429c      	cmp	r4, r3
1000c59a:	d100      	bne.n	1000c59e <at_ble_event_get+0x3be>
1000c59c:	e0fa      	b.n	1000c794 <at_ble_event_get+0x5b4>
1000c59e:	e007      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c5a0:	4b99      	ldr	r3, [pc, #612]	; (1000c808 <at_ble_event_get+0x628>)
1000c5a2:	429c      	cmp	r4, r3
1000c5a4:	d100      	bne.n	1000c5a8 <at_ble_event_get+0x3c8>
1000c5a6:	e103      	b.n	1000c7b0 <at_ble_event_get+0x5d0>
1000c5a8:	4b98      	ldr	r3, [pc, #608]	; (1000c80c <at_ble_event_get+0x62c>)
1000c5aa:	429c      	cmp	r4, r3
1000c5ac:	d100      	bne.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c5ae:	e106      	b.n	1000c7be <at_ble_event_get+0x5de>
1000c5b0:	2600      	movs	r6, #0
1000c5b2:	e10a      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c5b4:	1c30      	adds	r0, r6, #0
1000c5b6:	1c29      	adds	r1, r5, #0
1000c5b8:	4b95      	ldr	r3, [pc, #596]	; (1000c810 <at_ble_event_get+0x630>)
1000c5ba:	e014      	b.n	1000c5e6 <at_ble_event_get+0x406>
1000c5bc:	1c30      	adds	r0, r6, #0
1000c5be:	1c29      	adds	r1, r5, #0
1000c5c0:	4b94      	ldr	r3, [pc, #592]	; (1000c814 <at_ble_event_get+0x634>)
1000c5c2:	4798      	blx	r3
1000c5c4:	2604      	movs	r6, #4
1000c5c6:	e100      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c5c8:	1c30      	adds	r0, r6, #0
1000c5ca:	1c29      	adds	r1, r5, #0
1000c5cc:	4b92      	ldr	r3, [pc, #584]	; (1000c818 <at_ble_event_get+0x638>)
1000c5ce:	4798      	blx	r3
1000c5d0:	2601      	movs	r6, #1
1000c5d2:	e0fa      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c5d4:	1c30      	adds	r0, r6, #0
1000c5d6:	1c29      	adds	r1, r5, #0
1000c5d8:	4b90      	ldr	r3, [pc, #576]	; (1000c81c <at_ble_event_get+0x63c>)
1000c5da:	4798      	blx	r3
1000c5dc:	260f      	movs	r6, #15
1000c5de:	e0f4      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c5e0:	1c30      	adds	r0, r6, #0
1000c5e2:	1c29      	adds	r1, r5, #0
1000c5e4:	4b8e      	ldr	r3, [pc, #568]	; (1000c820 <at_ble_event_get+0x640>)
1000c5e6:	4798      	blx	r3
1000c5e8:	1c06      	adds	r6, r0, #0
1000c5ea:	e0ee      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c5ec:	9801      	ldr	r0, [sp, #4]
1000c5ee:	1c31      	adds	r1, r6, #0
1000c5f0:	1c2a      	adds	r2, r5, #0
1000c5f2:	4b8c      	ldr	r3, [pc, #560]	; (1000c824 <at_ble_event_get+0x644>)
1000c5f4:	e017      	b.n	1000c626 <at_ble_event_get+0x446>
1000c5f6:	1c31      	adds	r1, r6, #0
1000c5f8:	9801      	ldr	r0, [sp, #4]
1000c5fa:	1c2a      	adds	r2, r5, #0
1000c5fc:	4b8a      	ldr	r3, [pc, #552]	; (1000c828 <at_ble_event_get+0x648>)
1000c5fe:	4798      	blx	r3
1000c600:	2611      	movs	r6, #17
1000c602:	e0e2      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c604:	1c31      	adds	r1, r6, #0
1000c606:	9801      	ldr	r0, [sp, #4]
1000c608:	1c2a      	adds	r2, r5, #0
1000c60a:	4b88      	ldr	r3, [pc, #544]	; (1000c82c <at_ble_event_get+0x64c>)
1000c60c:	4798      	blx	r3
1000c60e:	2612      	movs	r6, #18
1000c610:	e0db      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c612:	1c30      	adds	r0, r6, #0
1000c614:	1c29      	adds	r1, r5, #0
1000c616:	4b86      	ldr	r3, [pc, #536]	; (1000c830 <at_ble_event_get+0x650>)
1000c618:	4798      	blx	r3
1000c61a:	2606      	movs	r6, #6
1000c61c:	e0d5      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c61e:	1c31      	adds	r1, r6, #0
1000c620:	1c2a      	adds	r2, r5, #0
1000c622:	9801      	ldr	r0, [sp, #4]
1000c624:	4b83      	ldr	r3, [pc, #524]	; (1000c834 <at_ble_event_get+0x654>)
1000c626:	4798      	blx	r3
1000c628:	e7de      	b.n	1000c5e8 <at_ble_event_get+0x408>
1000c62a:	9801      	ldr	r0, [sp, #4]
1000c62c:	1c31      	adds	r1, r6, #0
1000c62e:	1c2a      	adds	r2, r5, #0
1000c630:	4b81      	ldr	r3, [pc, #516]	; (1000c838 <at_ble_event_get+0x658>)
1000c632:	e7f8      	b.n	1000c626 <at_ble_event_get+0x446>
1000c634:	1c31      	adds	r1, r6, #0
1000c636:	9801      	ldr	r0, [sp, #4]
1000c638:	1c2a      	adds	r2, r5, #0
1000c63a:	4b80      	ldr	r3, [pc, #512]	; (1000c83c <at_ble_event_get+0x65c>)
1000c63c:	4798      	blx	r3
1000c63e:	260d      	movs	r6, #13
1000c640:	e0c3      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c642:	1c31      	adds	r1, r6, #0
1000c644:	9801      	ldr	r0, [sp, #4]
1000c646:	1c2a      	adds	r2, r5, #0
1000c648:	4b7d      	ldr	r3, [pc, #500]	; (1000c840 <at_ble_event_get+0x660>)
1000c64a:	4798      	blx	r3
1000c64c:	260e      	movs	r6, #14
1000c64e:	e0bc      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c650:	9801      	ldr	r0, [sp, #4]
1000c652:	1c31      	adds	r1, r6, #0
1000c654:	1c2a      	adds	r2, r5, #0
1000c656:	4b7b      	ldr	r3, [pc, #492]	; (1000c844 <at_ble_event_get+0x664>)
1000c658:	4798      	blx	r3
1000c65a:	e084      	b.n	1000c766 <at_ble_event_get+0x586>
1000c65c:	1c31      	adds	r1, r6, #0
1000c65e:	9801      	ldr	r0, [sp, #4]
1000c660:	1c2a      	adds	r2, r5, #0
1000c662:	4b79      	ldr	r3, [pc, #484]	; (1000c848 <at_ble_event_get+0x668>)
1000c664:	4798      	blx	r3
1000c666:	260b      	movs	r6, #11
1000c668:	e0af      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c66a:	1c31      	adds	r1, r6, #0
1000c66c:	9801      	ldr	r0, [sp, #4]
1000c66e:	1c2a      	adds	r2, r5, #0
1000c670:	4b76      	ldr	r3, [pc, #472]	; (1000c84c <at_ble_event_get+0x66c>)
1000c672:	4798      	blx	r3
1000c674:	2610      	movs	r6, #16
1000c676:	e0a8      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c678:	1c30      	adds	r0, r6, #0
1000c67a:	1c29      	adds	r1, r5, #0
1000c67c:	4b74      	ldr	r3, [pc, #464]	; (1000c850 <at_ble_event_get+0x670>)
1000c67e:	4798      	blx	r3
1000c680:	2628      	movs	r6, #40	; 0x28
1000c682:	e0a2      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c684:	1c30      	adds	r0, r6, #0
1000c686:	1c29      	adds	r1, r5, #0
1000c688:	4b72      	ldr	r3, [pc, #456]	; (1000c854 <at_ble_event_get+0x674>)
1000c68a:	4798      	blx	r3
1000c68c:	2629      	movs	r6, #41	; 0x29
1000c68e:	e09c      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c690:	1c30      	adds	r0, r6, #0
1000c692:	1c29      	adds	r1, r5, #0
1000c694:	4b70      	ldr	r3, [pc, #448]	; (1000c858 <at_ble_event_get+0x678>)
1000c696:	4798      	blx	r3
1000c698:	2627      	movs	r6, #39	; 0x27
1000c69a:	e096      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c69c:	1c30      	adds	r0, r6, #0
1000c69e:	1c29      	adds	r1, r5, #0
1000c6a0:	4b6e      	ldr	r3, [pc, #440]	; (1000c85c <at_ble_event_get+0x67c>)
1000c6a2:	4798      	blx	r3
1000c6a4:	262a      	movs	r6, #42	; 0x2a
1000c6a6:	e090      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c6a8:	9801      	ldr	r0, [sp, #4]
1000c6aa:	1c31      	adds	r1, r6, #0
1000c6ac:	1c2a      	adds	r2, r5, #0
1000c6ae:	4b6c      	ldr	r3, [pc, #432]	; (1000c860 <at_ble_event_get+0x680>)
1000c6b0:	e7b9      	b.n	1000c626 <at_ble_event_get+0x446>
1000c6b2:	9801      	ldr	r0, [sp, #4]
1000c6b4:	1c31      	adds	r1, r6, #0
1000c6b6:	1c2a      	adds	r2, r5, #0
1000c6b8:	4b6a      	ldr	r3, [pc, #424]	; (1000c864 <at_ble_event_get+0x684>)
1000c6ba:	e7b4      	b.n	1000c626 <at_ble_event_get+0x446>
1000c6bc:	1c30      	adds	r0, r6, #0
1000c6be:	1c29      	adds	r1, r5, #0
1000c6c0:	4b69      	ldr	r3, [pc, #420]	; (1000c868 <at_ble_event_get+0x688>)
1000c6c2:	4798      	blx	r3
1000c6c4:	262b      	movs	r6, #43	; 0x2b
1000c6c6:	e080      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c6c8:	1c30      	adds	r0, r6, #0
1000c6ca:	1c29      	adds	r1, r5, #0
1000c6cc:	4b67      	ldr	r3, [pc, #412]	; (1000c86c <at_ble_event_get+0x68c>)
1000c6ce:	4798      	blx	r3
1000c6d0:	262c      	movs	r6, #44	; 0x2c
1000c6d2:	e07a      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c6d4:	1c31      	adds	r1, r6, #0
1000c6d6:	9801      	ldr	r0, [sp, #4]
1000c6d8:	1c2a      	adds	r2, r5, #0
1000c6da:	4b65      	ldr	r3, [pc, #404]	; (1000c870 <at_ble_event_get+0x690>)
1000c6dc:	4798      	blx	r3
1000c6de:	2613      	movs	r6, #19
1000c6e0:	e073      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c6e2:	1c31      	adds	r1, r6, #0
1000c6e4:	9801      	ldr	r0, [sp, #4]
1000c6e6:	1c2a      	adds	r2, r5, #0
1000c6e8:	4b62      	ldr	r3, [pc, #392]	; (1000c874 <at_ble_event_get+0x694>)
1000c6ea:	4798      	blx	r3
1000c6ec:	2614      	movs	r6, #20
1000c6ee:	e06c      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c6f0:	1c31      	adds	r1, r6, #0
1000c6f2:	9801      	ldr	r0, [sp, #4]
1000c6f4:	1c2a      	adds	r2, r5, #0
1000c6f6:	4b60      	ldr	r3, [pc, #384]	; (1000c878 <at_ble_event_get+0x698>)
1000c6f8:	4798      	blx	r3
1000c6fa:	2615      	movs	r6, #21
1000c6fc:	e065      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c6fe:	1c31      	adds	r1, r6, #0
1000c700:	9801      	ldr	r0, [sp, #4]
1000c702:	1c2a      	adds	r2, r5, #0
1000c704:	4b5d      	ldr	r3, [pc, #372]	; (1000c87c <at_ble_event_get+0x69c>)
1000c706:	4798      	blx	r3
1000c708:	2616      	movs	r6, #22
1000c70a:	e05e      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c70c:	9801      	ldr	r0, [sp, #4]
1000c70e:	1c31      	adds	r1, r6, #0
1000c710:	1c2a      	adds	r2, r5, #0
1000c712:	4b5b      	ldr	r3, [pc, #364]	; (1000c880 <at_ble_event_get+0x6a0>)
1000c714:	e787      	b.n	1000c626 <at_ble_event_get+0x446>
1000c716:	1c31      	adds	r1, r6, #0
1000c718:	9801      	ldr	r0, [sp, #4]
1000c71a:	1c2a      	adds	r2, r5, #0
1000c71c:	4b58      	ldr	r3, [pc, #352]	; (1000c880 <at_ble_event_get+0x6a0>)
1000c71e:	4798      	blx	r3
1000c720:	88a9      	ldrh	r1, [r5, #4]
1000c722:	1c06      	adds	r6, r0, #0
1000c724:	4b57      	ldr	r3, [pc, #348]	; (1000c884 <at_ble_event_get+0x6a4>)
1000c726:	8828      	ldrh	r0, [r5, #0]
1000c728:	4798      	blx	r3
1000c72a:	e04e      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c72c:	1c31      	adds	r1, r6, #0
1000c72e:	9801      	ldr	r0, [sp, #4]
1000c730:	1c2a      	adds	r2, r5, #0
1000c732:	4b55      	ldr	r3, [pc, #340]	; (1000c888 <at_ble_event_get+0x6a8>)
1000c734:	4798      	blx	r3
1000c736:	2623      	movs	r6, #35	; 0x23
1000c738:	e047      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c73a:	9801      	ldr	r0, [sp, #4]
1000c73c:	1c31      	adds	r1, r6, #0
1000c73e:	1c2a      	adds	r2, r5, #0
1000c740:	4b52      	ldr	r3, [pc, #328]	; (1000c88c <at_ble_event_get+0x6ac>)
1000c742:	e770      	b.n	1000c626 <at_ble_event_get+0x446>
1000c744:	9b01      	ldr	r3, [sp, #4]
1000c746:	1c30      	adds	r0, r6, #0
1000c748:	0a1f      	lsrs	r7, r3, #8
1000c74a:	802f      	strh	r7, [r5, #0]
1000c74c:	1c29      	adds	r1, r5, #0
1000c74e:	4b50      	ldr	r3, [pc, #320]	; (1000c890 <at_ble_event_get+0x6b0>)
1000c750:	e749      	b.n	1000c5e6 <at_ble_event_get+0x406>
1000c752:	9801      	ldr	r0, [sp, #4]
1000c754:	1c31      	adds	r1, r6, #0
1000c756:	1c2a      	adds	r2, r5, #0
1000c758:	4b4e      	ldr	r3, [pc, #312]	; (1000c894 <at_ble_event_get+0x6b4>)
1000c75a:	e764      	b.n	1000c626 <at_ble_event_get+0x446>
1000c75c:	1c30      	adds	r0, r6, #0
1000c75e:	1c29      	adds	r1, r5, #0
1000c760:	9a01      	ldr	r2, [sp, #4]
1000c762:	4b4d      	ldr	r3, [pc, #308]	; (1000c898 <at_ble_event_get+0x6b8>)
1000c764:	4798      	blx	r3
1000c766:	263b      	movs	r6, #59	; 0x3b
1000c768:	e02f      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c76a:	1c31      	adds	r1, r6, #0
1000c76c:	9801      	ldr	r0, [sp, #4]
1000c76e:	1c2a      	adds	r2, r5, #0
1000c770:	4b4a      	ldr	r3, [pc, #296]	; (1000c89c <at_ble_event_get+0x6bc>)
1000c772:	4798      	blx	r3
1000c774:	2618      	movs	r6, #24
1000c776:	e028      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c778:	1c31      	adds	r1, r6, #0
1000c77a:	9801      	ldr	r0, [sp, #4]
1000c77c:	1c2a      	adds	r2, r5, #0
1000c77e:	4b48      	ldr	r3, [pc, #288]	; (1000c8a0 <at_ble_event_get+0x6c0>)
1000c780:	4798      	blx	r3
1000c782:	2620      	movs	r6, #32
1000c784:	e021      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c786:	1c31      	adds	r1, r6, #0
1000c788:	9801      	ldr	r0, [sp, #4]
1000c78a:	1c2a      	adds	r2, r5, #0
1000c78c:	4b45      	ldr	r3, [pc, #276]	; (1000c8a4 <at_ble_event_get+0x6c4>)
1000c78e:	4798      	blx	r3
1000c790:	2633      	movs	r6, #51	; 0x33
1000c792:	e01a      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c794:	1c31      	adds	r1, r6, #0
1000c796:	9801      	ldr	r0, [sp, #4]
1000c798:	1c2a      	adds	r2, r5, #0
1000c79a:	4b43      	ldr	r3, [pc, #268]	; (1000c8a8 <at_ble_event_get+0x6c8>)
1000c79c:	4798      	blx	r3
1000c79e:	2630      	movs	r6, #48	; 0x30
1000c7a0:	e013      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c7a2:	1c31      	adds	r1, r6, #0
1000c7a4:	9801      	ldr	r0, [sp, #4]
1000c7a6:	1c2a      	adds	r2, r5, #0
1000c7a8:	4b40      	ldr	r3, [pc, #256]	; (1000c8ac <at_ble_event_get+0x6cc>)
1000c7aa:	4798      	blx	r3
1000c7ac:	2634      	movs	r6, #52	; 0x34
1000c7ae:	e00c      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c7b0:	1c31      	adds	r1, r6, #0
1000c7b2:	9801      	ldr	r0, [sp, #4]
1000c7b4:	1c2a      	adds	r2, r5, #0
1000c7b6:	4b3e      	ldr	r3, [pc, #248]	; (1000c8b0 <at_ble_event_get+0x6d0>)
1000c7b8:	4798      	blx	r3
1000c7ba:	2635      	movs	r6, #53	; 0x35
1000c7bc:	e005      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c7be:	1c31      	adds	r1, r6, #0
1000c7c0:	9801      	ldr	r0, [sp, #4]
1000c7c2:	1c2a      	adds	r2, r5, #0
1000c7c4:	4b3b      	ldr	r3, [pc, #236]	; (1000c8b4 <at_ble_event_get+0x6d4>)
1000c7c6:	4798      	blx	r3
1000c7c8:	2632      	movs	r6, #50	; 0x32
1000c7ca:	9b03      	ldr	r3, [sp, #12]
1000c7cc:	701e      	strb	r6, [r3, #0]
1000c7ce:	2300      	movs	r3, #0
1000c7d0:	9302      	str	r3, [sp, #8]
1000c7d2:	e57a      	b.n	1000c2ca <at_ble_event_get+0xea>
1000c7d4:	23d0      	movs	r3, #208	; 0xd0
1000c7d6:	e7fb      	b.n	1000c7d0 <at_ble_event_get+0x5f0>
1000c7d8:	9b01      	ldr	r3, [sp, #4]
1000c7da:	9e02      	ldr	r6, [sp, #8]
1000c7dc:	2bbb      	cmp	r3, #187	; 0xbb
1000c7de:	d000      	beq.n	1000c7e2 <at_ble_event_get+0x602>
1000c7e0:	e6e6      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c7e2:	e7f2      	b.n	1000c7ca <at_ble_event_get+0x5ea>
1000c7e4:	9b02      	ldr	r3, [sp, #8]
1000c7e6:	2b00      	cmp	r3, #0
1000c7e8:	d000      	beq.n	1000c7ec <at_ble_event_get+0x60c>
1000c7ea:	e56e      	b.n	1000c2ca <at_ble_event_get+0xea>
1000c7ec:	e6e0      	b.n	1000c5b0 <at_ble_event_get+0x3d0>
1000c7ee:	9802      	ldr	r0, [sp, #8]
1000c7f0:	b007      	add	sp, #28
1000c7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c7f4:	00000e22 	.word	0x00000e22
1000c7f8:	00000e25 	.word	0x00000e25
1000c7fc:	00001b05 	.word	0x00001b05
1000c800:	00001b01 	.word	0x00001b01
1000c804:	00001b03 	.word	0x00001b03
1000c808:	00001b06 	.word	0x00001b06
1000c80c:	00001b08 	.word	0x00001b08
1000c810:	1000ec09 	.word	0x1000ec09
1000c814:	1000ebed 	.word	0x1000ebed
1000c818:	1000ee89 	.word	0x1000ee89
1000c81c:	1000ef79 	.word	0x1000ef79
1000c820:	1000f085 	.word	0x1000f085
1000c824:	1000df05 	.word	0x1000df05
1000c828:	1000e801 	.word	0x1000e801
1000c82c:	1000e87d 	.word	0x1000e87d
1000c830:	1000e1bd 	.word	0x1000e1bd
1000c834:	1000e259 	.word	0x1000e259
1000c838:	1000e331 	.word	0x1000e331
1000c83c:	1000e5b9 	.word	0x1000e5b9
1000c840:	1000e659 	.word	0x1000e659
1000c844:	1000e78d 	.word	0x1000e78d
1000c848:	1000e7b5 	.word	0x1000e7b5
1000c84c:	1000e7cb 	.word	0x1000e7cb
1000c850:	1000e895 	.word	0x1000e895
1000c854:	1000e8c3 	.word	0x1000e8c3
1000c858:	1000e8d9 	.word	0x1000e8d9
1000c85c:	1000e903 	.word	0x1000e903
1000c860:	1000e731 	.word	0x1000e731
1000c864:	1000e75b 	.word	0x1000e75b
1000c868:	1000d845 	.word	0x1000d845
1000c86c:	1000d871 	.word	0x1000d871
1000c870:	1000f2a5 	.word	0x1000f2a5
1000c874:	1000f2e1 	.word	0x1000f2e1
1000c878:	1000f329 	.word	0x1000f329
1000c87c:	1000f36d 	.word	0x1000f36d
1000c880:	1000f3a1 	.word	0x1000f3a1
1000c884:	1000f265 	.word	0x1000f265
1000c888:	1000f46d 	.word	0x1000f46d
1000c88c:	1000f3f5 	.word	0x1000f3f5
1000c890:	1000d729 	.word	0x1000d729
1000c894:	1000d795 	.word	0x1000d795
1000c898:	1000d759 	.word	0x1000d759
1000c89c:	1000f47d 	.word	0x1000f47d
1000c8a0:	1000f4bd 	.word	0x1000f4bd
1000c8a4:	1000f87d 	.word	0x1000f87d
1000c8a8:	1000f887 	.word	0x1000f887
1000c8ac:	1000f88d 	.word	0x1000f88d
1000c8b0:	1000f893 	.word	0x1000f893
1000c8b4:	1000f89f 	.word	0x1000f89f

1000c8b8 <internal_event_flush>:
1000c8b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c8ba:	490e      	ldr	r1, [pc, #56]	; (1000c8f4 <internal_event_flush+0x3c>)
1000c8bc:	2400      	movs	r4, #0
1000c8be:	680b      	ldr	r3, [r1, #0]
1000c8c0:	1c0f      	adds	r7, r1, #0
1000c8c2:	1c1e      	adds	r6, r3, #0
1000c8c4:	4a0c      	ldr	r2, [pc, #48]	; (1000c8f8 <internal_event_flush+0x40>)
1000c8c6:	6815      	ldr	r5, [r2, #0]
1000c8c8:	9201      	str	r2, [sp, #4]
1000c8ca:	2b00      	cmp	r3, #0
1000c8cc:	d00e      	beq.n	1000c8ec <internal_event_flush+0x34>
1000c8ce:	889a      	ldrh	r2, [r3, #4]
1000c8d0:	6819      	ldr	r1, [r3, #0]
1000c8d2:	4282      	cmp	r2, r0
1000c8d4:	d107      	bne.n	1000c8e6 <internal_event_flush+0x2e>
1000c8d6:	2c00      	cmp	r4, #0
1000c8d8:	d001      	beq.n	1000c8de <internal_event_flush+0x26>
1000c8da:	6021      	str	r1, [r4, #0]
1000c8dc:	e000      	b.n	1000c8e0 <internal_event_flush+0x28>
1000c8de:	1c0e      	adds	r6, r1, #0
1000c8e0:	601d      	str	r5, [r3, #0]
1000c8e2:	1c1d      	adds	r5, r3, #0
1000c8e4:	1c23      	adds	r3, r4, #0
1000c8e6:	1c1c      	adds	r4, r3, #0
1000c8e8:	1c0b      	adds	r3, r1, #0
1000c8ea:	e7ee      	b.n	1000c8ca <internal_event_flush+0x12>
1000c8ec:	9b01      	ldr	r3, [sp, #4]
1000c8ee:	603e      	str	r6, [r7, #0]
1000c8f0:	601d      	str	r5, [r3, #0]
1000c8f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c8f4:	10015370 	.word	0x10015370
1000c8f8:	10015374 	.word	0x10015374

1000c8fc <internal_conn_flush>:
1000c8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c8fe:	4a12      	ldr	r2, [pc, #72]	; (1000c948 <internal_conn_flush+0x4c>)
1000c900:	9000      	str	r0, [sp, #0]
1000c902:	6813      	ldr	r3, [r2, #0]
1000c904:	4811      	ldr	r0, [pc, #68]	; (1000c94c <internal_conn_flush+0x50>)
1000c906:	1c1f      	adds	r7, r3, #0
1000c908:	2100      	movs	r1, #0
1000c90a:	4684      	mov	ip, r0
1000c90c:	6804      	ldr	r4, [r0, #0]
1000c90e:	9201      	str	r2, [sp, #4]
1000c910:	2b00      	cmp	r3, #0
1000c912:	d014      	beq.n	1000c93e <internal_conn_flush+0x42>
1000c914:	88d8      	ldrh	r0, [r3, #6]
1000c916:	9a00      	ldr	r2, [sp, #0]
1000c918:	681d      	ldr	r5, [r3, #0]
1000c91a:	0a06      	lsrs	r6, r0, #8
1000c91c:	4296      	cmp	r6, r2
1000c91e:	d10b      	bne.n	1000c938 <internal_conn_flush+0x3c>
1000c920:	26fd      	movs	r6, #253	; 0xfd
1000c922:	4006      	ands	r6, r0
1000c924:	2e0c      	cmp	r6, #12
1000c926:	d107      	bne.n	1000c938 <internal_conn_flush+0x3c>
1000c928:	2900      	cmp	r1, #0
1000c92a:	d001      	beq.n	1000c930 <internal_conn_flush+0x34>
1000c92c:	600d      	str	r5, [r1, #0]
1000c92e:	e000      	b.n	1000c932 <internal_conn_flush+0x36>
1000c930:	1c2f      	adds	r7, r5, #0
1000c932:	601c      	str	r4, [r3, #0]
1000c934:	1c1c      	adds	r4, r3, #0
1000c936:	1c0b      	adds	r3, r1, #0
1000c938:	1c19      	adds	r1, r3, #0
1000c93a:	1c2b      	adds	r3, r5, #0
1000c93c:	e7e8      	b.n	1000c910 <internal_conn_flush+0x14>
1000c93e:	9b01      	ldr	r3, [sp, #4]
1000c940:	601f      	str	r7, [r3, #0]
1000c942:	4663      	mov	r3, ip
1000c944:	601c      	str	r4, [r3, #0]
1000c946:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c948:	10015370 	.word	0x10015370
1000c94c:	10015374 	.word	0x10015374

1000c950 <at_ble_device_name_set>:
1000c950:	b530      	push	{r4, r5, lr}
1000c952:	23cf      	movs	r3, #207	; 0xcf
1000c954:	2800      	cmp	r0, #0
1000c956:	d010      	beq.n	1000c97a <at_ble_device_name_set+0x2a>
1000c958:	1e4a      	subs	r2, r1, #1
1000c95a:	2a1f      	cmp	r2, #31
1000c95c:	d80d      	bhi.n	1000c97a <at_ble_device_name_set+0x2a>
1000c95e:	4a08      	ldr	r2, [pc, #32]	; (1000c980 <at_ble_device_name_set+0x30>)
1000c960:	1c13      	adds	r3, r2, #0
1000c962:	33aa      	adds	r3, #170	; 0xaa
1000c964:	8019      	strh	r1, [r3, #0]
1000c966:	2300      	movs	r3, #0
1000c968:	1c1c      	adds	r4, r3, #0
1000c96a:	5cc5      	ldrb	r5, [r0, r3]
1000c96c:	34ac      	adds	r4, #172	; 0xac
1000c96e:	3301      	adds	r3, #1
1000c970:	5515      	strb	r5, [r2, r4]
1000c972:	b2dc      	uxtb	r4, r3
1000c974:	428c      	cmp	r4, r1
1000c976:	d3f7      	bcc.n	1000c968 <at_ble_device_name_set+0x18>
1000c978:	2300      	movs	r3, #0
1000c97a:	1c18      	adds	r0, r3, #0
1000c97c:	bd30      	pop	{r4, r5, pc}
1000c97e:	46c0      	nop			; (mov r8, r8)
1000c980:	10016166 	.word	0x10016166

1000c984 <at_ble_addr_get>:
1000c984:	b510      	push	{r4, lr}
1000c986:	1c04      	adds	r4, r0, #0
1000c988:	20cf      	movs	r0, #207	; 0xcf
1000c98a:	2c00      	cmp	r4, #0
1000c98c:	d006      	beq.n	1000c99c <at_ble_addr_get+0x18>
1000c98e:	4b04      	ldr	r3, [pc, #16]	; (1000c9a0 <at_ble_addr_get+0x1c>)
1000c990:	38ce      	subs	r0, #206	; 0xce
1000c992:	1c21      	adds	r1, r4, #0
1000c994:	4798      	blx	r3
1000c996:	4b03      	ldr	r3, [pc, #12]	; (1000c9a4 <at_ble_addr_get+0x20>)
1000c998:	791b      	ldrb	r3, [r3, #4]
1000c99a:	7023      	strb	r3, [r4, #0]
1000c99c:	bd10      	pop	{r4, pc}
1000c99e:	46c0      	nop			; (mov r8, r8)
1000c9a0:	1000ea9d 	.word	0x1000ea9d
1000c9a4:	10016166 	.word	0x10016166

1000c9a8 <at_ble_set_dev_config>:
1000c9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c9aa:	7906      	ldrb	r6, [r0, #4]
1000c9ac:	b089      	sub	sp, #36	; 0x24
1000c9ae:	25cf      	movs	r5, #207	; 0xcf
1000c9b0:	2e03      	cmp	r6, #3
1000c9b2:	d838      	bhi.n	1000ca26 <at_ble_set_dev_config+0x7e>
1000c9b4:	7803      	ldrb	r3, [r0, #0]
1000c9b6:	3511      	adds	r5, #17
1000c9b8:	2b0f      	cmp	r3, #15
1000c9ba:	d834      	bhi.n	1000ca26 <at_ble_set_dev_config+0x7e>
1000c9bc:	2380      	movs	r3, #128	; 0x80
1000c9be:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000c9c0:	3d11      	subs	r5, #17
1000c9c2:	009b      	lsls	r3, r3, #2
1000c9c4:	429f      	cmp	r7, r3
1000c9c6:	d82e      	bhi.n	1000ca26 <at_ble_set_dev_config+0x7e>
1000c9c8:	7fc5      	ldrb	r5, [r0, #31]
1000c9ca:	7f83      	ldrb	r3, [r0, #30]
1000c9cc:	01ad      	lsls	r5, r5, #6
1000c9ce:	015b      	lsls	r3, r3, #5
1000c9d0:	431d      	orrs	r5, r3
1000c9d2:	7ec3      	ldrb	r3, [r0, #27]
1000c9d4:	431d      	orrs	r5, r3
1000c9d6:	7f43      	ldrb	r3, [r0, #29]
1000c9d8:	011b      	lsls	r3, r3, #4
1000c9da:	431d      	orrs	r5, r3
1000c9dc:	7f03      	ldrb	r3, [r0, #28]
1000c9de:	009b      	lsls	r3, r3, #2
1000c9e0:	431d      	orrs	r5, r3
1000c9e2:	4b12      	ldr	r3, [pc, #72]	; (1000ca2c <at_ble_set_dev_config+0x84>)
1000c9e4:	b2ed      	uxtb	r5, r5
1000c9e6:	711e      	strb	r6, [r3, #4]
1000c9e8:	7903      	ldrb	r3, [r0, #4]
1000c9ea:	3b02      	subs	r3, #2
1000c9ec:	2b01      	cmp	r3, #1
1000c9ee:	d801      	bhi.n	1000c9f4 <at_ble_set_dev_config+0x4c>
1000c9f0:	2302      	movs	r3, #2
1000c9f2:	7103      	strb	r3, [r0, #4]
1000c9f4:	1c04      	adds	r4, r0, #0
1000c9f6:	1c23      	adds	r3, r4, #0
1000c9f8:	330b      	adds	r3, #11
1000c9fa:	8861      	ldrh	r1, [r4, #2]
1000c9fc:	9307      	str	r3, [sp, #28]
1000c9fe:	7923      	ldrb	r3, [r4, #4]
1000ca00:	7800      	ldrb	r0, [r0, #0]
1000ca02:	9300      	str	r3, [sp, #0]
1000ca04:	9501      	str	r5, [sp, #4]
1000ca06:	8c25      	ldrh	r5, [r4, #32]
1000ca08:	1d62      	adds	r2, r4, #5
1000ca0a:	9502      	str	r5, [sp, #8]
1000ca0c:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000ca0e:	9b07      	ldr	r3, [sp, #28]
1000ca10:	9503      	str	r5, [sp, #12]
1000ca12:	9704      	str	r7, [sp, #16]
1000ca14:	4d06      	ldr	r5, [pc, #24]	; (1000ca30 <at_ble_set_dev_config+0x88>)
1000ca16:	47a8      	blx	r5
1000ca18:	7126      	strb	r6, [r4, #4]
1000ca1a:	1c05      	adds	r5, r0, #0
1000ca1c:	1c21      	adds	r1, r4, #0
1000ca1e:	4803      	ldr	r0, [pc, #12]	; (1000ca2c <at_ble_set_dev_config+0x84>)
1000ca20:	2226      	movs	r2, #38	; 0x26
1000ca22:	4b04      	ldr	r3, [pc, #16]	; (1000ca34 <at_ble_set_dev_config+0x8c>)
1000ca24:	4798      	blx	r3
1000ca26:	1c28      	adds	r0, r5, #0
1000ca28:	b009      	add	sp, #36	; 0x24
1000ca2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca2c:	10016166 	.word	0x10016166
1000ca30:	1000e995 	.word	0x1000e995
1000ca34:	100116f3 	.word	0x100116f3

1000ca38 <at_ble_init>:
1000ca38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ca3a:	b087      	sub	sp, #28
1000ca3c:	af03      	add	r7, sp, #12
1000ca3e:	4954      	ldr	r1, [pc, #336]	; (1000cb90 <at_ble_init+0x158>)
1000ca40:	220b      	movs	r2, #11
1000ca42:	4b54      	ldr	r3, [pc, #336]	; (1000cb94 <at_ble_init+0x15c>)
1000ca44:	1c04      	adds	r4, r0, #0
1000ca46:	1c38      	adds	r0, r7, #0
1000ca48:	4798      	blx	r3
1000ca4a:	2205      	movs	r2, #5
1000ca4c:	4b52      	ldr	r3, [pc, #328]	; (1000cb98 <at_ble_init+0x160>)
1000ca4e:	2640      	movs	r6, #64	; 0x40
1000ca50:	801a      	strh	r2, [r3, #0]
1000ca52:	2300      	movs	r3, #0
1000ca54:	4a51      	ldr	r2, [pc, #324]	; (1000cb9c <at_ble_init+0x164>)
1000ca56:	6013      	str	r3, [r2, #0]
1000ca58:	4a51      	ldr	r2, [pc, #324]	; (1000cba0 <at_ble_init+0x168>)
1000ca5a:	7013      	strb	r3, [r2, #0]
1000ca5c:	4a51      	ldr	r2, [pc, #324]	; (1000cba4 <at_ble_init+0x16c>)
1000ca5e:	7013      	strb	r3, [r2, #0]
1000ca60:	4b51      	ldr	r3, [pc, #324]	; (1000cba8 <at_ble_init+0x170>)
1000ca62:	4798      	blx	r3
1000ca64:	4b51      	ldr	r3, [pc, #324]	; (1000cbac <at_ble_init+0x174>)
1000ca66:	4798      	blx	r3
1000ca68:	4b51      	ldr	r3, [pc, #324]	; (1000cbb0 <at_ble_init+0x178>)
1000ca6a:	4798      	blx	r3
1000ca6c:	4b51      	ldr	r3, [pc, #324]	; (1000cbb4 <at_ble_init+0x17c>)
1000ca6e:	4798      	blx	r3
1000ca70:	2c00      	cmp	r4, #0
1000ca72:	d100      	bne.n	1000ca76 <at_ble_init+0x3e>
1000ca74:	e089      	b.n	1000cb8a <at_ble_init+0x152>
1000ca76:	68a3      	ldr	r3, [r4, #8]
1000ca78:	2b00      	cmp	r3, #0
1000ca7a:	d100      	bne.n	1000ca7e <at_ble_init+0x46>
1000ca7c:	e085      	b.n	1000cb8a <at_ble_init+0x152>
1000ca7e:	6923      	ldr	r3, [r4, #16]
1000ca80:	2b00      	cmp	r3, #0
1000ca82:	d100      	bne.n	1000ca86 <at_ble_init+0x4e>
1000ca84:	e081      	b.n	1000cb8a <at_ble_init+0x152>
1000ca86:	6820      	ldr	r0, [r4, #0]
1000ca88:	2800      	cmp	r0, #0
1000ca8a:	d102      	bne.n	1000ca92 <at_ble_init+0x5a>
1000ca8c:	6863      	ldr	r3, [r4, #4]
1000ca8e:	2b00      	cmp	r3, #0
1000ca90:	d17b      	bne.n	1000cb8a <at_ble_init+0x152>
1000ca92:	4b49      	ldr	r3, [pc, #292]	; (1000cbb8 <at_ble_init+0x180>)
1000ca94:	6861      	ldr	r1, [r4, #4]
1000ca96:	4798      	blx	r3
1000ca98:	4b48      	ldr	r3, [pc, #288]	; (1000cbbc <at_ble_init+0x184>)
1000ca9a:	4798      	blx	r3
1000ca9c:	2801      	cmp	r0, #1
1000ca9e:	d901      	bls.n	1000caa4 <at_ble_init+0x6c>
1000caa0:	26e2      	movs	r6, #226	; 0xe2
1000caa2:	e072      	b.n	1000cb8a <at_ble_init+0x152>
1000caa4:	4846      	ldr	r0, [pc, #280]	; (1000cbc0 <at_ble_init+0x188>)
1000caa6:	4b47      	ldr	r3, [pc, #284]	; (1000cbc4 <at_ble_init+0x18c>)
1000caa8:	4798      	blx	r3
1000caaa:	2800      	cmp	r0, #0
1000caac:	d1f8      	bne.n	1000caa0 <at_ble_init+0x68>
1000caae:	1c20      	adds	r0, r4, #0
1000cab0:	4b45      	ldr	r3, [pc, #276]	; (1000cbc8 <at_ble_init+0x190>)
1000cab2:	4798      	blx	r3
1000cab4:	68e0      	ldr	r0, [r4, #12]
1000cab6:	68a1      	ldr	r1, [r4, #8]
1000cab8:	4b44      	ldr	r3, [pc, #272]	; (1000cbcc <at_ble_init+0x194>)
1000caba:	4798      	blx	r3
1000cabc:	466b      	mov	r3, sp
1000cabe:	2201      	movs	r2, #1
1000cac0:	1cdc      	adds	r4, r3, #3
1000cac2:	1c20      	adds	r0, r4, #0
1000cac4:	a901      	add	r1, sp, #4
1000cac6:	4252      	negs	r2, r2
1000cac8:	4b41      	ldr	r3, [pc, #260]	; (1000cbd0 <at_ble_init+0x198>)
1000caca:	4798      	blx	r3
1000cacc:	2800      	cmp	r0, #0
1000cace:	d102      	bne.n	1000cad6 <at_ble_init+0x9e>
1000cad0:	7823      	ldrb	r3, [r4, #0]
1000cad2:	2b39      	cmp	r3, #57	; 0x39
1000cad4:	d1f2      	bne.n	1000cabc <at_ble_init+0x84>
1000cad6:	4b3f      	ldr	r3, [pc, #252]	; (1000cbd4 <at_ble_init+0x19c>)
1000cad8:	4798      	blx	r3
1000cada:	1e06      	subs	r6, r0, #0
1000cadc:	d155      	bne.n	1000cb8a <at_ble_init+0x152>
1000cade:	1c03      	adds	r3, r0, #0
1000cae0:	2101      	movs	r1, #1
1000cae2:	4a3d      	ldr	r2, [pc, #244]	; (1000cbd8 <at_ble_init+0x1a0>)
1000cae4:	4249      	negs	r1, r1
1000cae6:	189a      	adds	r2, r3, r2
1000cae8:	3312      	adds	r3, #18
1000caea:	8151      	strh	r1, [r2, #10]
1000caec:	2b90      	cmp	r3, #144	; 0x90
1000caee:	d1f7      	bne.n	1000cae0 <at_ble_init+0xa8>
1000caf0:	4c3a      	ldr	r4, [pc, #232]	; (1000cbdc <at_ble_init+0x1a4>)
1000caf2:	3b81      	subs	r3, #129	; 0x81
1000caf4:	7023      	strb	r3, [r4, #0]
1000caf6:	4b3a      	ldr	r3, [pc, #232]	; (1000cbe0 <at_ble_init+0x1a8>)
1000caf8:	4a3a      	ldr	r2, [pc, #232]	; (1000cbe4 <at_ble_init+0x1ac>)
1000cafa:	8063      	strh	r3, [r4, #2]
1000cafc:	2300      	movs	r3, #0
1000cafe:	7123      	strb	r3, [r4, #4]
1000cb00:	3301      	adds	r3, #1
1000cb02:	1e58      	subs	r0, r3, #1
1000cb04:	0119      	lsls	r1, r3, #4
1000cb06:	4301      	orrs	r1, r0
1000cb08:	3302      	adds	r3, #2
1000cb0a:	7011      	strb	r1, [r2, #0]
1000cb0c:	3201      	adds	r2, #1
1000cb0e:	2b21      	cmp	r3, #33	; 0x21
1000cb10:	d1f7      	bne.n	1000cb02 <at_ble_init+0xca>
1000cb12:	33e0      	adds	r3, #224	; 0xe0
1000cb14:	33ff      	adds	r3, #255	; 0xff
1000cb16:	84a3      	strh	r3, [r4, #36]	; 0x24
1000cb18:	1c23      	adds	r3, r4, #0
1000cb1a:	2500      	movs	r5, #0
1000cb1c:	3373      	adds	r3, #115	; 0x73
1000cb1e:	701d      	strb	r5, [r3, #0]
1000cb20:	1c23      	adds	r3, r4, #0
1000cb22:	3372      	adds	r3, #114	; 0x72
1000cb24:	701d      	strb	r5, [r3, #0]
1000cb26:	1c23      	adds	r3, r4, #0
1000cb28:	3376      	adds	r3, #118	; 0x76
1000cb2a:	701d      	strb	r5, [r3, #0]
1000cb2c:	1c23      	adds	r3, r4, #0
1000cb2e:	33cc      	adds	r3, #204	; 0xcc
1000cb30:	801d      	strh	r5, [r3, #0]
1000cb32:	1c22      	adds	r2, r4, #0
1000cb34:	23a0      	movs	r3, #160	; 0xa0
1000cb36:	32d0      	adds	r2, #208	; 0xd0
1000cb38:	005b      	lsls	r3, r3, #1
1000cb3a:	8013      	strh	r3, [r2, #0]
1000cb3c:	1c22      	adds	r2, r4, #0
1000cb3e:	32ce      	adds	r2, #206	; 0xce
1000cb40:	8013      	strh	r3, [r2, #0]
1000cb42:	1c23      	adds	r3, r4, #0
1000cb44:	33d2      	adds	r3, #210	; 0xd2
1000cb46:	801d      	strh	r5, [r3, #0]
1000cb48:	22fa      	movs	r2, #250	; 0xfa
1000cb4a:	1c23      	adds	r3, r4, #0
1000cb4c:	0052      	lsls	r2, r2, #1
1000cb4e:	33d4      	adds	r3, #212	; 0xd4
1000cb50:	801a      	strh	r2, [r3, #0]
1000cb52:	1c23      	adds	r3, r4, #0
1000cb54:	33d6      	adds	r3, #214	; 0xd6
1000cb56:	701d      	strb	r5, [r3, #0]
1000cb58:	1c20      	adds	r0, r4, #0
1000cb5a:	4b23      	ldr	r3, [pc, #140]	; (1000cbe8 <at_ble_init+0x1b0>)
1000cb5c:	76e5      	strb	r5, [r4, #27]
1000cb5e:	7725      	strb	r5, [r4, #28]
1000cb60:	7765      	strb	r5, [r4, #29]
1000cb62:	77a5      	strb	r5, [r4, #30]
1000cb64:	77e5      	strb	r5, [r4, #31]
1000cb66:	8425      	strh	r5, [r4, #32]
1000cb68:	8465      	strh	r5, [r4, #34]	; 0x22
1000cb6a:	4798      	blx	r3
1000cb6c:	1c23      	adds	r3, r4, #0
1000cb6e:	2207      	movs	r2, #7
1000cb70:	3374      	adds	r3, #116	; 0x74
1000cb72:	701a      	strb	r2, [r3, #0]
1000cb74:	1c23      	adds	r3, r4, #0
1000cb76:	3204      	adds	r2, #4
1000cb78:	33aa      	adds	r3, #170	; 0xaa
1000cb7a:	801a      	strh	r2, [r3, #0]
1000cb7c:	1c2b      	adds	r3, r5, #0
1000cb7e:	5d7a      	ldrb	r2, [r7, r5]
1000cb80:	33ac      	adds	r3, #172	; 0xac
1000cb82:	3501      	adds	r5, #1
1000cb84:	54e2      	strb	r2, [r4, r3]
1000cb86:	2d0b      	cmp	r5, #11
1000cb88:	d1f8      	bne.n	1000cb7c <at_ble_init+0x144>
1000cb8a:	1c30      	adds	r0, r6, #0
1000cb8c:	b007      	add	sp, #28
1000cb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb90:	100136dc 	.word	0x100136dc
1000cb94:	100116f3 	.word	0x100116f3
1000cb98:	100160d4 	.word	0x100160d4
1000cb9c:	10015420 	.word	0x10015420
1000cba0:	10015380 	.word	0x10015380
1000cba4:	100138d2 	.word	0x100138d2
1000cba8:	1000f4cd 	.word	0x1000f4cd
1000cbac:	1000cf25 	.word	0x1000cf25
1000cbb0:	1000d585 	.word	0x1000d585
1000cbb4:	1000d839 	.word	0x1000d839
1000cbb8:	1000d5c1 	.word	0x1000d5c1
1000cbbc:	1000b255 	.word	0x1000b255
1000cbc0:	1000db81 	.word	0x1000db81
1000cbc4:	1000b499 	.word	0x1000b499
1000cbc8:	1000dc29 	.word	0x1000dc29
1000cbcc:	1000c125 	.word	0x1000c125
1000cbd0:	1000c1e1 	.word	0x1000c1e1
1000cbd4:	1000e925 	.word	0x1000e925
1000cbd8:	100160d6 	.word	0x100160d6
1000cbdc:	10016166 	.word	0x10016166
1000cbe0:	00003a98 	.word	0x00003a98
1000cbe4:	10016171 	.word	0x10016171
1000cbe8:	1000c9a9 	.word	0x1000c9a9

1000cbec <at_ble_addr_set>:
1000cbec:	b538      	push	{r3, r4, r5, lr}
1000cbee:	1c45      	adds	r5, r0, #1
1000cbf0:	1c03      	adds	r3, r0, #0
1000cbf2:	20cf      	movs	r0, #207	; 0xcf
1000cbf4:	2d00      	cmp	r5, #0
1000cbf6:	d018      	beq.n	1000cc2a <at_ble_addr_set+0x3e>
1000cbf8:	781a      	ldrb	r2, [r3, #0]
1000cbfa:	2a03      	cmp	r2, #3
1000cbfc:	d815      	bhi.n	1000cc2a <at_ble_addr_set+0x3e>
1000cbfe:	2a01      	cmp	r2, #1
1000cc00:	d102      	bne.n	1000cc08 <at_ble_addr_set+0x1c>
1000cc02:	785a      	ldrb	r2, [r3, #1]
1000cc04:	2a00      	cmp	r2, #0
1000cc06:	d010      	beq.n	1000cc2a <at_ble_addr_set+0x3e>
1000cc08:	1c1c      	adds	r4, r3, #0
1000cc0a:	1c29      	adds	r1, r5, #0
1000cc0c:	2206      	movs	r2, #6
1000cc0e:	4b07      	ldr	r3, [pc, #28]	; (1000cc2c <at_ble_addr_set+0x40>)
1000cc10:	4807      	ldr	r0, [pc, #28]	; (1000cc30 <at_ble_addr_set+0x44>)
1000cc12:	4798      	blx	r3
1000cc14:	7823      	ldrb	r3, [r4, #0]
1000cc16:	4807      	ldr	r0, [pc, #28]	; (1000cc34 <at_ble_addr_set+0x48>)
1000cc18:	7103      	strb	r3, [r0, #4]
1000cc1a:	4b07      	ldr	r3, [pc, #28]	; (1000cc38 <at_ble_addr_set+0x4c>)
1000cc1c:	4798      	blx	r3
1000cc1e:	7823      	ldrb	r3, [r4, #0]
1000cc20:	2b00      	cmp	r3, #0
1000cc22:	d102      	bne.n	1000cc2a <at_ble_addr_set+0x3e>
1000cc24:	1c28      	adds	r0, r5, #0
1000cc26:	4b05      	ldr	r3, [pc, #20]	; (1000cc3c <at_ble_addr_set+0x50>)
1000cc28:	4798      	blx	r3
1000cc2a:	bd38      	pop	{r3, r4, r5, pc}
1000cc2c:	100116f3 	.word	0x100116f3
1000cc30:	1001616b 	.word	0x1001616b
1000cc34:	10016166 	.word	0x10016166
1000cc38:	1000c9a9 	.word	0x1000c9a9
1000cc3c:	1000dcad 	.word	0x1000dcad

1000cc40 <at_ble_adv_data_set>:
1000cc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cc42:	4684      	mov	ip, r0
1000cc44:	1c0f      	adds	r7, r1, #0
1000cc46:	1c16      	adds	r6, r2, #0
1000cc48:	1c1c      	adds	r4, r3, #0
1000cc4a:	2800      	cmp	r0, #0
1000cc4c:	d102      	bne.n	1000cc54 <at_ble_adv_data_set+0x14>
1000cc4e:	20e2      	movs	r0, #226	; 0xe2
1000cc50:	2a00      	cmp	r2, #0
1000cc52:	d02b      	beq.n	1000ccac <at_ble_adv_data_set+0x6c>
1000cc54:	20cf      	movs	r0, #207	; 0xcf
1000cc56:	2f1f      	cmp	r7, #31
1000cc58:	d828      	bhi.n	1000ccac <at_ble_adv_data_set+0x6c>
1000cc5a:	2c1f      	cmp	r4, #31
1000cc5c:	d826      	bhi.n	1000ccac <at_ble_adv_data_set+0x6c>
1000cc5e:	4663      	mov	r3, ip
1000cc60:	2b00      	cmp	r3, #0
1000cc62:	d00e      	beq.n	1000cc82 <at_ble_adv_data_set+0x42>
1000cc64:	4812      	ldr	r0, [pc, #72]	; (1000ccb0 <at_ble_adv_data_set+0x70>)
1000cc66:	4d13      	ldr	r5, [pc, #76]	; (1000ccb4 <at_ble_adv_data_set+0x74>)
1000cc68:	2f00      	cmp	r7, #0
1000cc6a:	d104      	bne.n	1000cc76 <at_ble_adv_data_set+0x36>
1000cc6c:	1c39      	adds	r1, r7, #0
1000cc6e:	221f      	movs	r2, #31
1000cc70:	4b11      	ldr	r3, [pc, #68]	; (1000ccb8 <at_ble_adv_data_set+0x78>)
1000cc72:	4798      	blx	r3
1000cc74:	e003      	b.n	1000cc7e <at_ble_adv_data_set+0x3e>
1000cc76:	4661      	mov	r1, ip
1000cc78:	1c3a      	adds	r2, r7, #0
1000cc7a:	4b10      	ldr	r3, [pc, #64]	; (1000ccbc <at_ble_adv_data_set+0x7c>)
1000cc7c:	4798      	blx	r3
1000cc7e:	3572      	adds	r5, #114	; 0x72
1000cc80:	702f      	strb	r7, [r5, #0]
1000cc82:	1e30      	subs	r0, r6, #0
1000cc84:	d012      	beq.n	1000ccac <at_ble_adv_data_set+0x6c>
1000cc86:	4d0b      	ldr	r5, [pc, #44]	; (1000ccb4 <at_ble_adv_data_set+0x74>)
1000cc88:	480d      	ldr	r0, [pc, #52]	; (1000ccc0 <at_ble_adv_data_set+0x80>)
1000cc8a:	2c00      	cmp	r4, #0
1000cc8c:	d107      	bne.n	1000cc9e <at_ble_adv_data_set+0x5e>
1000cc8e:	1c21      	adds	r1, r4, #0
1000cc90:	221f      	movs	r2, #31
1000cc92:	4b09      	ldr	r3, [pc, #36]	; (1000ccb8 <at_ble_adv_data_set+0x78>)
1000cc94:	3573      	adds	r5, #115	; 0x73
1000cc96:	4798      	blx	r3
1000cc98:	702c      	strb	r4, [r5, #0]
1000cc9a:	1c20      	adds	r0, r4, #0
1000cc9c:	e006      	b.n	1000ccac <at_ble_adv_data_set+0x6c>
1000cc9e:	1c31      	adds	r1, r6, #0
1000cca0:	1c22      	adds	r2, r4, #0
1000cca2:	4b06      	ldr	r3, [pc, #24]	; (1000ccbc <at_ble_adv_data_set+0x7c>)
1000cca4:	4798      	blx	r3
1000cca6:	2000      	movs	r0, #0
1000cca8:	3573      	adds	r5, #115	; 0x73
1000ccaa:	702c      	strb	r4, [r5, #0]
1000ccac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ccae:	46c0      	nop			; (mov r8, r8)
1000ccb0:	1001619a 	.word	0x1001619a
1000ccb4:	10016166 	.word	0x10016166
1000ccb8:	10011705 	.word	0x10011705
1000ccbc:	100116f3 	.word	0x100116f3
1000ccc0:	100161b9 	.word	0x100161b9

1000ccc4 <at_ble_adv_start>:
1000ccc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ccc6:	b091      	sub	sp, #68	; 0x44
1000ccc8:	1c1f      	adds	r7, r3, #0
1000ccca:	ab16      	add	r3, sp, #88	; 0x58
1000cccc:	881d      	ldrh	r5, [r3, #0]
1000ccce:	ab17      	add	r3, sp, #92	; 0x5c
1000ccd0:	881b      	ldrh	r3, [r3, #0]
1000ccd2:	910d      	str	r1, [sp, #52]	; 0x34
1000ccd4:	930e      	str	r3, [sp, #56]	; 0x38
1000ccd6:	ab18      	add	r3, sp, #96	; 0x60
1000ccd8:	781b      	ldrb	r3, [r3, #0]
1000ccda:	1c04      	adds	r4, r0, #0
1000ccdc:	930f      	str	r3, [sp, #60]	; 0x3c
1000ccde:	4b42      	ldr	r3, [pc, #264]	; (1000cde8 <at_ble_adv_start+0x124>)
1000cce0:	1c16      	adds	r6, r2, #0
1000cce2:	3373      	adds	r3, #115	; 0x73
1000cce4:	781b      	ldrb	r3, [r3, #0]
1000cce6:	20cf      	movs	r0, #207	; 0xcf
1000cce8:	930c      	str	r3, [sp, #48]	; 0x30
1000ccea:	2c01      	cmp	r4, #1
1000ccec:	d103      	bne.n	1000ccf6 <at_ble_adv_start+0x32>
1000ccee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000ccf0:	2b00      	cmp	r3, #0
1000ccf2:	d176      	bne.n	1000cde2 <at_ble_adv_start+0x11e>
1000ccf4:	e024      	b.n	1000cd40 <at_ble_adv_start+0x7c>
1000ccf6:	2c04      	cmp	r4, #4
1000ccf8:	d873      	bhi.n	1000cde2 <at_ble_adv_start+0x11e>
1000ccfa:	2380      	movs	r3, #128	; 0x80
1000ccfc:	01db      	lsls	r3, r3, #7
1000ccfe:	429d      	cmp	r5, r3
1000cd00:	d86f      	bhi.n	1000cde2 <at_ble_adv_start+0x11e>
1000cd02:	2c00      	cmp	r4, #0
1000cd04:	d102      	bne.n	1000cd0c <at_ble_adv_start+0x48>
1000cd06:	2d1f      	cmp	r5, #31
1000cd08:	d96b      	bls.n	1000cde2 <at_ble_adv_start+0x11e>
1000cd0a:	e003      	b.n	1000cd14 <at_ble_adv_start+0x50>
1000cd0c:	2d9f      	cmp	r5, #159	; 0x9f
1000cd0e:	d801      	bhi.n	1000cd14 <at_ble_adv_start+0x50>
1000cd10:	2c01      	cmp	r4, #1
1000cd12:	d166      	bne.n	1000cde2 <at_ble_adv_start+0x11e>
1000cd14:	2f00      	cmp	r7, #0
1000cd16:	d009      	beq.n	1000cd2c <at_ble_adv_start+0x68>
1000cd18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000cd1a:	20cf      	movs	r0, #207	; 0xcf
1000cd1c:	3b01      	subs	r3, #1
1000cd1e:	2b01      	cmp	r3, #1
1000cd20:	d95f      	bls.n	1000cde2 <at_ble_adv_start+0x11e>
1000cd22:	2c01      	cmp	r4, #1
1000cd24:	d102      	bne.n	1000cd2c <at_ble_adv_start+0x68>
1000cd26:	2d00      	cmp	r5, #0
1000cd28:	d100      	bne.n	1000cd2c <at_ble_adv_start+0x68>
1000cd2a:	3520      	adds	r5, #32
1000cd2c:	4b2f      	ldr	r3, [pc, #188]	; (1000cdec <at_ble_adv_start+0x128>)
1000cd2e:	4798      	blx	r3
1000cd30:	1c01      	adds	r1, r0, #0
1000cd32:	2e00      	cmp	r6, #0
1000cd34:	d043      	beq.n	1000cdbe <at_ble_adv_start+0xfa>
1000cd36:	7833      	ldrb	r3, [r6, #0]
1000cd38:	1e60      	subs	r0, r4, #1
1000cd3a:	2b00      	cmp	r3, #0
1000cd3c:	d109      	bne.n	1000cd52 <at_ble_adv_start+0x8e>
1000cd3e:	e03b      	b.n	1000cdb8 <at_ble_adv_start+0xf4>
1000cd40:	2380      	movs	r3, #128	; 0x80
1000cd42:	01db      	lsls	r3, r3, #7
1000cd44:	429d      	cmp	r5, r3
1000cd46:	d84c      	bhi.n	1000cde2 <at_ble_adv_start+0x11e>
1000cd48:	2e00      	cmp	r6, #0
1000cd4a:	d04a      	beq.n	1000cde2 <at_ble_adv_start+0x11e>
1000cd4c:	2f00      	cmp	r7, #0
1000cd4e:	d1e3      	bne.n	1000cd18 <at_ble_adv_start+0x54>
1000cd50:	e02b      	b.n	1000cdaa <at_ble_adv_start+0xe6>
1000cd52:	2301      	movs	r3, #1
1000cd54:	2803      	cmp	r0, #3
1000cd56:	d93a      	bls.n	1000cdce <at_ble_adv_start+0x10a>
1000cd58:	200d      	movs	r0, #13
1000cd5a:	1c72      	adds	r2, r6, #1
1000cd5c:	e002      	b.n	1000cd64 <at_ble_adv_start+0xa0>
1000cd5e:	200e      	movs	r0, #14
1000cd60:	1e32      	subs	r2, r6, #0
1000cd62:	d1fa      	bne.n	1000cd5a <at_ble_adv_start+0x96>
1000cd64:	4c20      	ldr	r4, [pc, #128]	; (1000cde8 <at_ble_adv_start+0x124>)
1000cd66:	3474      	adds	r4, #116	; 0x74
1000cd68:	7826      	ldrb	r6, [r4, #0]
1000cd6a:	2407      	movs	r4, #7
1000cd6c:	2e00      	cmp	r6, #0
1000cd6e:	d000      	beq.n	1000cd72 <at_ble_adv_start+0xae>
1000cd70:	1c34      	adds	r4, r6, #0
1000cd72:	9200      	str	r2, [sp, #0]
1000cd74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000cd76:	9403      	str	r4, [sp, #12]
1000cd78:	9204      	str	r2, [sp, #16]
1000cd7a:	4a1b      	ldr	r2, [pc, #108]	; (1000cde8 <at_ble_adv_start+0x124>)
1000cd7c:	9501      	str	r5, [sp, #4]
1000cd7e:	9502      	str	r5, [sp, #8]
1000cd80:	9705      	str	r7, [sp, #20]
1000cd82:	3272      	adds	r2, #114	; 0x72
1000cd84:	7812      	ldrb	r2, [r2, #0]
1000cd86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000cd88:	9206      	str	r2, [sp, #24]
1000cd8a:	4a19      	ldr	r2, [pc, #100]	; (1000cdf0 <at_ble_adv_start+0x12c>)
1000cd8c:	9207      	str	r2, [sp, #28]
1000cd8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000cd90:	9208      	str	r2, [sp, #32]
1000cd92:	4a18      	ldr	r2, [pc, #96]	; (1000cdf4 <at_ble_adv_start+0x130>)
1000cd94:	9209      	str	r2, [sp, #36]	; 0x24
1000cd96:	2264      	movs	r2, #100	; 0x64
1000cd98:	4362      	muls	r2, r4
1000cd9a:	b292      	uxth	r2, r2
1000cd9c:	920a      	str	r2, [sp, #40]	; 0x28
1000cd9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000cda0:	4c15      	ldr	r4, [pc, #84]	; (1000cdf8 <at_ble_adv_start+0x134>)
1000cda2:	920b      	str	r2, [sp, #44]	; 0x2c
1000cda4:	4a15      	ldr	r2, [pc, #84]	; (1000cdfc <at_ble_adv_start+0x138>)
1000cda6:	47a0      	blx	r4
1000cda8:	e01b      	b.n	1000cde2 <at_ble_adv_start+0x11e>
1000cdaa:	2d00      	cmp	r5, #0
1000cdac:	d1be      	bne.n	1000cd2c <at_ble_adv_start+0x68>
1000cdae:	4b0f      	ldr	r3, [pc, #60]	; (1000cdec <at_ble_adv_start+0x128>)
1000cdb0:	4798      	blx	r3
1000cdb2:	2520      	movs	r5, #32
1000cdb4:	1c01      	adds	r1, r0, #0
1000cdb6:	e7be      	b.n	1000cd36 <at_ble_adv_start+0x72>
1000cdb8:	2803      	cmp	r0, #3
1000cdba:	d8cd      	bhi.n	1000cd58 <at_ble_adv_start+0x94>
1000cdbc:	e006      	b.n	1000cdcc <at_ble_adv_start+0x108>
1000cdbe:	1e60      	subs	r0, r4, #1
1000cdc0:	2803      	cmp	r0, #3
1000cdc2:	d903      	bls.n	1000cdcc <at_ble_adv_start+0x108>
1000cdc4:	1c33      	adds	r3, r6, #0
1000cdc6:	200d      	movs	r0, #13
1000cdc8:	1c32      	adds	r2, r6, #0
1000cdca:	e7cb      	b.n	1000cd64 <at_ble_adv_start+0xa0>
1000cdcc:	2300      	movs	r3, #0
1000cdce:	f002 fd6b 	bl	1000f8a8 <__gnu_thumb1_case_sqi>
1000cdd2:	06c6      	.short	0x06c6
1000cdd4:	0204      	.short	0x0204
1000cdd6:	200f      	movs	r0, #15
1000cdd8:	e7c2      	b.n	1000cd60 <at_ble_adv_start+0x9c>
1000cdda:	2200      	movs	r2, #0
1000cddc:	920c      	str	r2, [sp, #48]	; 0x30
1000cdde:	200c      	movs	r0, #12
1000cde0:	e7be      	b.n	1000cd60 <at_ble_adv_start+0x9c>
1000cde2:	b011      	add	sp, #68	; 0x44
1000cde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cde6:	46c0      	nop			; (mov r8, r8)
1000cde8:	10016166 	.word	0x10016166
1000cdec:	1000ee71 	.word	0x1000ee71
1000cdf0:	1001619a 	.word	0x1001619a
1000cdf4:	100161b9 	.word	0x100161b9
1000cdf8:	1000ed51 	.word	0x1000ed51
1000cdfc:	00003a98 	.word	0x00003a98

1000ce00 <at_ble_scan_stop>:
1000ce00:	b510      	push	{r4, lr}
1000ce02:	4b05      	ldr	r3, [pc, #20]	; (1000ce18 <at_ble_scan_stop+0x18>)
1000ce04:	4798      	blx	r3
1000ce06:	1e04      	subs	r4, r0, #0
1000ce08:	d103      	bne.n	1000ce12 <at_ble_scan_stop+0x12>
1000ce0a:	20d1      	movs	r0, #209	; 0xd1
1000ce0c:	4b03      	ldr	r3, [pc, #12]	; (1000ce1c <at_ble_scan_stop+0x1c>)
1000ce0e:	0100      	lsls	r0, r0, #4
1000ce10:	4798      	blx	r3
1000ce12:	1c20      	adds	r0, r4, #0
1000ce14:	bd10      	pop	{r4, pc}
1000ce16:	46c0      	nop			; (mov r8, r8)
1000ce18:	1000eb7d 	.word	0x1000eb7d
1000ce1c:	1000c8b9 	.word	0x1000c8b9

1000ce20 <at_ble_disconnect>:
1000ce20:	b538      	push	{r3, r4, r5, lr}
1000ce22:	1c04      	adds	r4, r0, #0
1000ce24:	4b04      	ldr	r3, [pc, #16]	; (1000ce38 <at_ble_disconnect+0x18>)
1000ce26:	1c08      	adds	r0, r1, #0
1000ce28:	1c21      	adds	r1, r4, #0
1000ce2a:	4798      	blx	r3
1000ce2c:	1c05      	adds	r5, r0, #0
1000ce2e:	4b03      	ldr	r3, [pc, #12]	; (1000ce3c <at_ble_disconnect+0x1c>)
1000ce30:	1c20      	adds	r0, r4, #0
1000ce32:	4798      	blx	r3
1000ce34:	1c28      	adds	r0, r5, #0
1000ce36:	bd38      	pop	{r3, r4, r5, pc}
1000ce38:	1000e179 	.word	0x1000e179
1000ce3c:	1000c8fd 	.word	0x1000c8fd

1000ce40 <at_ble_connection_param_update>:
1000ce40:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ce42:	1c05      	adds	r5, r0, #0
1000ce44:	b087      	sub	sp, #28
1000ce46:	20cf      	movs	r0, #207	; 0xcf
1000ce48:	2900      	cmp	r1, #0
1000ce4a:	d023      	beq.n	1000ce94 <at_ble_connection_param_update+0x54>
1000ce4c:	884a      	ldrh	r2, [r1, #2]
1000ce4e:	4c12      	ldr	r4, [pc, #72]	; (1000ce98 <at_ble_connection_param_update+0x58>)
1000ce50:	1f93      	subs	r3, r2, #6
1000ce52:	b29b      	uxth	r3, r3
1000ce54:	42a3      	cmp	r3, r4
1000ce56:	d81d      	bhi.n	1000ce94 <at_ble_connection_param_update+0x54>
1000ce58:	880e      	ldrh	r6, [r1, #0]
1000ce5a:	1fb3      	subs	r3, r6, #6
1000ce5c:	b29b      	uxth	r3, r3
1000ce5e:	42a3      	cmp	r3, r4
1000ce60:	d818      	bhi.n	1000ce94 <at_ble_connection_param_update+0x54>
1000ce62:	24f4      	movs	r4, #244	; 0xf4
1000ce64:	888b      	ldrh	r3, [r1, #4]
1000ce66:	34ff      	adds	r4, #255	; 0xff
1000ce68:	42a3      	cmp	r3, r4
1000ce6a:	d813      	bhi.n	1000ce94 <at_ble_connection_param_update+0x54>
1000ce6c:	88cf      	ldrh	r7, [r1, #6]
1000ce6e:	1c3c      	adds	r4, r7, #0
1000ce70:	3c0a      	subs	r4, #10
1000ce72:	b2a4      	uxth	r4, r4
1000ce74:	9405      	str	r4, [sp, #20]
1000ce76:	4c09      	ldr	r4, [pc, #36]	; (1000ce9c <at_ble_connection_param_update+0x5c>)
1000ce78:	46a4      	mov	ip, r4
1000ce7a:	9c05      	ldr	r4, [sp, #20]
1000ce7c:	4564      	cmp	r4, ip
1000ce7e:	d809      	bhi.n	1000ce94 <at_ble_connection_param_update+0x54>
1000ce80:	1c0c      	adds	r4, r1, #0
1000ce82:	9700      	str	r7, [sp, #0]
1000ce84:	8909      	ldrh	r1, [r1, #8]
1000ce86:	1c28      	adds	r0, r5, #0
1000ce88:	9101      	str	r1, [sp, #4]
1000ce8a:	8961      	ldrh	r1, [r4, #10]
1000ce8c:	4c04      	ldr	r4, [pc, #16]	; (1000cea0 <at_ble_connection_param_update+0x60>)
1000ce8e:	9102      	str	r1, [sp, #8]
1000ce90:	1c31      	adds	r1, r6, #0
1000ce92:	47a0      	blx	r4
1000ce94:	b007      	add	sp, #28
1000ce96:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce98:	00000c7a 	.word	0x00000c7a
1000ce9c:	00000c76 	.word	0x00000c76
1000cea0:	1000e669 	.word	0x1000e669

1000cea4 <at_ble_conn_update_reply>:
1000cea4:	b510      	push	{r4, lr}
1000cea6:	4c01      	ldr	r4, [pc, #4]	; (1000ceac <at_ble_conn_update_reply+0x8>)
1000cea8:	47a0      	blx	r4
1000ceaa:	bd10      	pop	{r4, pc}
1000ceac:	1000e6e5 	.word	0x1000e6e5

1000ceb0 <at_ble_random_address_resolve>:
1000ceb0:	b510      	push	{r4, lr}
1000ceb2:	23cf      	movs	r3, #207	; 0xcf
1000ceb4:	2800      	cmp	r0, #0
1000ceb6:	d00a      	beq.n	1000cece <at_ble_random_address_resolve+0x1e>
1000ceb8:	2900      	cmp	r1, #0
1000ceba:	d008      	beq.n	1000cece <at_ble_random_address_resolve+0x1e>
1000cebc:	2a00      	cmp	r2, #0
1000cebe:	d006      	beq.n	1000cece <at_ble_random_address_resolve+0x1e>
1000cec0:	780c      	ldrb	r4, [r1, #0]
1000cec2:	2c02      	cmp	r4, #2
1000cec4:	d103      	bne.n	1000cece <at_ble_random_address_resolve+0x1e>
1000cec6:	4b03      	ldr	r3, [pc, #12]	; (1000ced4 <at_ble_random_address_resolve+0x24>)
1000cec8:	3101      	adds	r1, #1
1000ceca:	4798      	blx	r3
1000cecc:	2300      	movs	r3, #0
1000cece:	1c18      	adds	r0, r3, #0
1000ced0:	bd10      	pop	{r4, pc}
1000ced2:	46c0      	nop			; (mov r8, r8)
1000ced4:	1000ef11 	.word	0x1000ef11

1000ced8 <at_ble_tx_power_set>:
1000ced8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000ceda:	231f      	movs	r3, #31
1000cedc:	4018      	ands	r0, r3
1000cede:	2300      	movs	r3, #0
1000cee0:	9003      	str	r0, [sp, #12]
1000cee2:	9300      	str	r3, [sp, #0]
1000cee4:	a903      	add	r1, sp, #12
1000cee6:	2204      	movs	r2, #4
1000cee8:	3320      	adds	r3, #32
1000ceea:	4c02      	ldr	r4, [pc, #8]	; (1000cef4 <at_ble_tx_power_set+0x1c>)
1000ceec:	4802      	ldr	r0, [pc, #8]	; (1000cef8 <at_ble_tx_power_set+0x20>)
1000ceee:	47a0      	blx	r4
1000cef0:	b004      	add	sp, #16
1000cef2:	bd10      	pop	{r4, pc}
1000cef4:	1000dd29 	.word	0x1000dd29
1000cef8:	4002084c 	.word	0x4002084c

1000cefc <at_ble_uuid_type2len>:
1000cefc:	23cf      	movs	r3, #207	; 0xcf
1000cefe:	2802      	cmp	r0, #2
1000cf00:	d801      	bhi.n	1000cf06 <at_ble_uuid_type2len+0xa>
1000cf02:	4b02      	ldr	r3, [pc, #8]	; (1000cf0c <at_ble_uuid_type2len+0x10>)
1000cf04:	5c1b      	ldrb	r3, [r3, r0]
1000cf06:	1c18      	adds	r0, r3, #0
1000cf08:	4770      	bx	lr
1000cf0a:	46c0      	nop			; (mov r8, r8)
1000cf0c:	100136e7 	.word	0x100136e7

1000cf10 <at_ble_uuid_len2type>:
1000cf10:	1e83      	subs	r3, r0, #2
1000cf12:	b2db      	uxtb	r3, r3
1000cf14:	2003      	movs	r0, #3
1000cf16:	2b0e      	cmp	r3, #14
1000cf18:	d801      	bhi.n	1000cf1e <at_ble_uuid_len2type+0xe>
1000cf1a:	4a01      	ldr	r2, [pc, #4]	; (1000cf20 <at_ble_uuid_len2type+0x10>)
1000cf1c:	5cd0      	ldrb	r0, [r2, r3]
1000cf1e:	4770      	bx	lr
1000cf20:	100136ea 	.word	0x100136ea

1000cf24 <init_gatt_client_module>:
1000cf24:	2200      	movs	r2, #0
1000cf26:	4b01      	ldr	r3, [pc, #4]	; (1000cf2c <init_gatt_client_module+0x8>)
1000cf28:	801a      	strh	r2, [r3, #0]
1000cf2a:	4770      	bx	lr
1000cf2c:	10015378 	.word	0x10015378

1000cf30 <db_searchATT>:
1000cf30:	b570      	push	{r4, r5, r6, lr}
1000cf32:	1c05      	adds	r5, r0, #0
1000cf34:	2400      	movs	r4, #0
1000cf36:	4b0c      	ldr	r3, [pc, #48]	; (1000cf68 <db_searchATT+0x38>)
1000cf38:	6819      	ldr	r1, [r3, #0]
1000cf3a:	4b0c      	ldr	r3, [pc, #48]	; (1000cf6c <db_searchATT+0x3c>)
1000cf3c:	681e      	ldr	r6, [r3, #0]
1000cf3e:	428c      	cmp	r4, r1
1000cf40:	dc10      	bgt.n	1000cf64 <db_searchATT+0x34>
1000cf42:	200c      	movs	r0, #12
1000cf44:	1863      	adds	r3, r4, r1
1000cf46:	0fda      	lsrs	r2, r3, #31
1000cf48:	18d3      	adds	r3, r2, r3
1000cf4a:	1c02      	adds	r2, r0, #0
1000cf4c:	105b      	asrs	r3, r3, #1
1000cf4e:	435a      	muls	r2, r3
1000cf50:	18b0      	adds	r0, r6, r2
1000cf52:	8802      	ldrh	r2, [r0, #0]
1000cf54:	42aa      	cmp	r2, r5
1000cf56:	d201      	bcs.n	1000cf5c <db_searchATT+0x2c>
1000cf58:	1e59      	subs	r1, r3, #1
1000cf5a:	e7f0      	b.n	1000cf3e <db_searchATT+0xe>
1000cf5c:	42aa      	cmp	r2, r5
1000cf5e:	d902      	bls.n	1000cf66 <db_searchATT+0x36>
1000cf60:	1c5c      	adds	r4, r3, #1
1000cf62:	e7ec      	b.n	1000cf3e <db_searchATT+0xe>
1000cf64:	2000      	movs	r0, #0
1000cf66:	bd70      	pop	{r4, r5, r6, pc}
1000cf68:	1001538c 	.word	0x1001538c
1000cf6c:	10015384 	.word	0x10015384

1000cf70 <att_permissions>:
1000cf70:	b530      	push	{r4, r5, lr}
1000cf72:	2403      	movs	r4, #3
1000cf74:	1c05      	adds	r5, r0, #0
1000cf76:	2301      	movs	r3, #1
1000cf78:	4025      	ands	r5, r4
1000cf7a:	42a5      	cmp	r5, r4
1000cf7c:	d009      	beq.n	1000cf92 <att_permissions+0x22>
1000cf7e:	1c23      	adds	r3, r4, #0
1000cf80:	1924      	adds	r4, r4, r4
1000cf82:	4220      	tst	r0, r4
1000cf84:	d105      	bne.n	1000cf92 <att_permissions+0x22>
1000cf86:	3b02      	subs	r3, #2
1000cf88:	4218      	tst	r0, r3
1000cf8a:	d102      	bne.n	1000cf92 <att_permissions+0x22>
1000cf8c:	1e4b      	subs	r3, r1, #1
1000cf8e:	4199      	sbcs	r1, r3
1000cf90:	b28b      	uxth	r3, r1
1000cf92:	2130      	movs	r1, #48	; 0x30
1000cf94:	4001      	ands	r1, r0
1000cf96:	2930      	cmp	r1, #48	; 0x30
1000cf98:	d007      	beq.n	1000cfaa <att_permissions+0x3a>
1000cf9a:	0641      	lsls	r1, r0, #25
1000cf9c:	d401      	bmi.n	1000cfa2 <att_permissions+0x32>
1000cf9e:	0681      	lsls	r1, r0, #26
1000cfa0:	d501      	bpl.n	1000cfa6 <att_permissions+0x36>
1000cfa2:	4807      	ldr	r0, [pc, #28]	; (1000cfc0 <att_permissions+0x50>)
1000cfa4:	e009      	b.n	1000cfba <att_permissions+0x4a>
1000cfa6:	06c1      	lsls	r1, r0, #27
1000cfa8:	d501      	bpl.n	1000cfae <att_permissions+0x3e>
1000cfaa:	4806      	ldr	r0, [pc, #24]	; (1000cfc4 <att_permissions+0x54>)
1000cfac:	e005      	b.n	1000cfba <att_permissions+0x4a>
1000cfae:	2a00      	cmp	r2, #0
1000cfb0:	d001      	beq.n	1000cfb6 <att_permissions+0x46>
1000cfb2:	2204      	movs	r2, #4
1000cfb4:	4313      	orrs	r3, r2
1000cfb6:	2080      	movs	r0, #128	; 0x80
1000cfb8:	0180      	lsls	r0, r0, #6
1000cfba:	4318      	orrs	r0, r3
1000cfbc:	bd30      	pop	{r4, r5, pc}
1000cfbe:	46c0      	nop			; (mov r8, r8)
1000cfc0:	0000200c 	.word	0x0000200c
1000cfc4:	00002004 	.word	0x00002004

1000cfc8 <char_permissions>:
1000cfc8:	b530      	push	{r4, r5, lr}
1000cfca:	2300      	movs	r3, #0
1000cfcc:	0784      	lsls	r4, r0, #30
1000cfce:	d503      	bpl.n	1000cfd8 <char_permissions+0x10>
1000cfd0:	3301      	adds	r3, #1
1000cfd2:	4219      	tst	r1, r3
1000cfd4:	d100      	bne.n	1000cfd8 <char_permissions+0x10>
1000cfd6:	3302      	adds	r3, #2
1000cfd8:	0704      	lsls	r4, r0, #28
1000cfda:	d508      	bpl.n	1000cfee <char_permissions+0x26>
1000cfdc:	06cc      	lsls	r4, r1, #27
1000cfde:	d501      	bpl.n	1000cfe4 <char_permissions+0x1c>
1000cfe0:	2404      	movs	r4, #4
1000cfe2:	e000      	b.n	1000cfe6 <char_permissions+0x1e>
1000cfe4:	240c      	movs	r4, #12
1000cfe6:	4323      	orrs	r3, r4
1000cfe8:	2480      	movs	r4, #128	; 0x80
1000cfea:	01a4      	lsls	r4, r4, #6
1000cfec:	4323      	orrs	r3, r4
1000cfee:	0684      	lsls	r4, r0, #26
1000cff0:	d506      	bpl.n	1000d000 <char_permissions+0x38>
1000cff2:	2406      	movs	r4, #6
1000cff4:	4221      	tst	r1, r4
1000cff6:	d101      	bne.n	1000cffc <char_permissions+0x34>
1000cff8:	340a      	adds	r4, #10
1000cffa:	e000      	b.n	1000cffe <char_permissions+0x36>
1000cffc:	2430      	movs	r4, #48	; 0x30
1000cffe:	4323      	orrs	r3, r4
1000d000:	06c4      	lsls	r4, r0, #27
1000d002:	d506      	bpl.n	1000d012 <char_permissions+0x4a>
1000d004:	2406      	movs	r4, #6
1000d006:	4221      	tst	r1, r4
1000d008:	d101      	bne.n	1000d00e <char_permissions+0x46>
1000d00a:	343a      	adds	r4, #58	; 0x3a
1000d00c:	e000      	b.n	1000d010 <char_permissions+0x48>
1000d00e:	24c0      	movs	r4, #192	; 0xc0
1000d010:	4323      	orrs	r3, r4
1000d012:	2480      	movs	r4, #128	; 0x80
1000d014:	0064      	lsls	r4, r4, #1
1000d016:	4220      	tst	r0, r4
1000d018:	d000      	beq.n	1000d01c <char_permissions+0x54>
1000d01a:	4323      	orrs	r3, r4
1000d01c:	07c4      	lsls	r4, r0, #31
1000d01e:	d502      	bpl.n	1000d026 <char_permissions+0x5e>
1000d020:	2480      	movs	r4, #128	; 0x80
1000d022:	00a4      	lsls	r4, r4, #2
1000d024:	4323      	orrs	r3, r4
1000d026:	2404      	movs	r4, #4
1000d028:	4220      	tst	r0, r4
1000d02a:	d006      	beq.n	1000d03a <char_permissions+0x72>
1000d02c:	06cd      	lsls	r5, r1, #27
1000d02e:	d400      	bmi.n	1000d032 <char_permissions+0x6a>
1000d030:	240c      	movs	r4, #12
1000d032:	4323      	orrs	r3, r4
1000d034:	2480      	movs	r4, #128	; 0x80
1000d036:	0124      	lsls	r4, r4, #4
1000d038:	4323      	orrs	r3, r4
1000d03a:	0644      	lsls	r4, r0, #25
1000d03c:	d501      	bpl.n	1000d042 <char_permissions+0x7a>
1000d03e:	4c08      	ldr	r4, [pc, #32]	; (1000d060 <char_permissions+0x98>)
1000d040:	4323      	orrs	r3, r4
1000d042:	0600      	lsls	r0, r0, #24
1000d044:	d507      	bpl.n	1000d056 <char_permissions+0x8e>
1000d046:	2004      	movs	r0, #4
1000d048:	06c9      	lsls	r1, r1, #27
1000d04a:	d400      	bmi.n	1000d04e <char_permissions+0x86>
1000d04c:	200c      	movs	r0, #12
1000d04e:	4303      	orrs	r3, r0
1000d050:	2084      	movs	r0, #132	; 0x84
1000d052:	0180      	lsls	r0, r0, #6
1000d054:	4303      	orrs	r3, r0
1000d056:	0390      	lsls	r0, r2, #14
1000d058:	4303      	orrs	r3, r0
1000d05a:	b298      	uxth	r0, r3
1000d05c:	bd30      	pop	{r4, r5, pc}
1000d05e:	46c0      	nop			; (mov r8, r8)
1000d060:	00001004 	.word	0x00001004

1000d064 <presentation_format_define>:
1000d064:	b507      	push	{r0, r1, r2, lr}
1000d066:	466a      	mov	r2, sp
1000d068:	780b      	ldrb	r3, [r1, #0]
1000d06a:	7013      	strb	r3, [r2, #0]
1000d06c:	784b      	ldrb	r3, [r1, #1]
1000d06e:	7053      	strb	r3, [r2, #1]
1000d070:	884b      	ldrh	r3, [r1, #2]
1000d072:	7093      	strb	r3, [r2, #2]
1000d074:	0a1b      	lsrs	r3, r3, #8
1000d076:	70d3      	strb	r3, [r2, #3]
1000d078:	790b      	ldrb	r3, [r1, #4]
1000d07a:	7113      	strb	r3, [r2, #4]
1000d07c:	88cb      	ldrh	r3, [r1, #6]
1000d07e:	2107      	movs	r1, #7
1000d080:	7153      	strb	r3, [r2, #5]
1000d082:	0a1b      	lsrs	r3, r3, #8
1000d084:	7193      	strb	r3, [r2, #6]
1000d086:	4b01      	ldr	r3, [pc, #4]	; (1000d08c <presentation_format_define+0x28>)
1000d088:	4798      	blx	r3
1000d08a:	bd0e      	pop	{r1, r2, r3, pc}
1000d08c:	1000f65d 	.word	0x1000f65d

1000d090 <db_addATT>:
1000d090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d092:	4c29      	ldr	r4, [pc, #164]	; (1000d138 <db_addATT+0xa8>)
1000d094:	1c1d      	adds	r5, r3, #0
1000d096:	6823      	ldr	r3, [r4, #0]
1000d098:	9001      	str	r0, [sp, #4]
1000d09a:	26d3      	movs	r6, #211	; 0xd3
1000d09c:	2b00      	cmp	r3, #0
1000d09e:	d048      	beq.n	1000d132 <db_addATT+0xa2>
1000d0a0:	1c1e      	adds	r6, r3, #0
1000d0a2:	3e0c      	subs	r6, #12
1000d0a4:	6026      	str	r6, [r4, #0]
1000d0a6:	2900      	cmp	r1, #0
1000d0a8:	d005      	beq.n	1000d0b6 <db_addATT+0x26>
1000d0aa:	4f24      	ldr	r7, [pc, #144]	; (1000d13c <db_addATT+0xac>)
1000d0ac:	46bc      	mov	ip, r7
1000d0ae:	4660      	mov	r0, ip
1000d0b0:	683f      	ldr	r7, [r7, #0]
1000d0b2:	18bf      	adds	r7, r7, r2
1000d0b4:	6007      	str	r7, [r0, #0]
1000d0b6:	4821      	ldr	r0, [pc, #132]	; (1000d13c <db_addATT+0xac>)
1000d0b8:	6807      	ldr	r7, [r0, #0]
1000d0ba:	4684      	mov	ip, r0
1000d0bc:	42be      	cmp	r6, r7
1000d0be:	d932      	bls.n	1000d126 <db_addATT+0x96>
1000d0c0:	4668      	mov	r0, sp
1000d0c2:	8880      	ldrh	r0, [r0, #4]
1000d0c4:	3b0c      	subs	r3, #12
1000d0c6:	8018      	strh	r0, [r3, #0]
1000d0c8:	6823      	ldr	r3, [r4, #0]
1000d0ca:	2900      	cmp	r1, #0
1000d0cc:	d009      	beq.n	1000d0e2 <db_addATT+0x52>
1000d0ce:	2a00      	cmp	r2, #0
1000d0d0:	d007      	beq.n	1000d0e2 <db_addATT+0x52>
1000d0d2:	4660      	mov	r0, ip
1000d0d4:	6800      	ldr	r0, [r0, #0]
1000d0d6:	809a      	strh	r2, [r3, #4]
1000d0d8:	1a80      	subs	r0, r0, r2
1000d0da:	6098      	str	r0, [r3, #8]
1000d0dc:	4b18      	ldr	r3, [pc, #96]	; (1000d140 <db_addATT+0xb0>)
1000d0de:	4798      	blx	r3
1000d0e0:	e002      	b.n	1000d0e8 <db_addATT+0x58>
1000d0e2:	2100      	movs	r1, #0
1000d0e4:	809a      	strh	r2, [r3, #4]
1000d0e6:	6099      	str	r1, [r3, #8]
1000d0e8:	2300      	movs	r3, #0
1000d0ea:	6822      	ldr	r2, [r4, #0]
1000d0ec:	7093      	strb	r3, [r2, #2]
1000d0ee:	3303      	adds	r3, #3
1000d0f0:	402b      	ands	r3, r5
1000d0f2:	2b03      	cmp	r3, #3
1000d0f4:	d001      	beq.n	1000d0fa <db_addATT+0x6a>
1000d0f6:	076b      	lsls	r3, r5, #29
1000d0f8:	d504      	bpl.n	1000d104 <db_addATT+0x74>
1000d0fa:	2101      	movs	r1, #1
1000d0fc:	6822      	ldr	r2, [r4, #0]
1000d0fe:	7893      	ldrb	r3, [r2, #2]
1000d100:	430b      	orrs	r3, r1
1000d102:	7093      	strb	r3, [r2, #2]
1000d104:	2330      	movs	r3, #48	; 0x30
1000d106:	402b      	ands	r3, r5
1000d108:	2b30      	cmp	r3, #48	; 0x30
1000d10a:	d001      	beq.n	1000d110 <db_addATT+0x80>
1000d10c:	066b      	lsls	r3, r5, #25
1000d10e:	d504      	bpl.n	1000d11a <db_addATT+0x8a>
1000d110:	2102      	movs	r1, #2
1000d112:	6822      	ldr	r2, [r4, #0]
1000d114:	7893      	ldrb	r3, [r2, #2]
1000d116:	430b      	orrs	r3, r1
1000d118:	7093      	strb	r3, [r2, #2]
1000d11a:	4a0a      	ldr	r2, [pc, #40]	; (1000d144 <db_addATT+0xb4>)
1000d11c:	2600      	movs	r6, #0
1000d11e:	6813      	ldr	r3, [r2, #0]
1000d120:	3301      	adds	r3, #1
1000d122:	6013      	str	r3, [r2, #0]
1000d124:	e005      	b.n	1000d132 <db_addATT+0xa2>
1000d126:	6023      	str	r3, [r4, #0]
1000d128:	2611      	movs	r6, #17
1000d12a:	2900      	cmp	r1, #0
1000d12c:	d001      	beq.n	1000d132 <db_addATT+0xa2>
1000d12e:	1aba      	subs	r2, r7, r2
1000d130:	6002      	str	r2, [r0, #0]
1000d132:	1c30      	adds	r0, r6, #0
1000d134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d136:	46c0      	nop			; (mov r8, r8)
1000d138:	10015384 	.word	0x10015384
1000d13c:	10015388 	.word	0x10015388
1000d140:	100116f3 	.word	0x100116f3
1000d144:	1001538c 	.word	0x1001538c

1000d148 <user_description_define>:
1000d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d14a:	1c05      	adds	r5, r0, #0
1000d14c:	20cf      	movs	r0, #207	; 0xcf
1000d14e:	2a00      	cmp	r2, #0
1000d150:	d01c      	beq.n	1000d18c <user_description_define+0x44>
1000d152:	1c14      	adds	r4, r2, #0
1000d154:	2203      	movs	r2, #3
1000d156:	1c1e      	adds	r6, r3, #0
1000d158:	400a      	ands	r2, r1
1000d15a:	1c0b      	adds	r3, r1, #0
1000d15c:	3a03      	subs	r2, #3
1000d15e:	4251      	negs	r1, r2
1000d160:	4151      	adcs	r1, r2
1000d162:	075a      	lsls	r2, r3, #29
1000d164:	0fd2      	lsrs	r2, r2, #31
1000d166:	430a      	orrs	r2, r1
1000d168:	03d2      	lsls	r2, r2, #15
1000d16a:	4f09      	ldr	r7, [pc, #36]	; (1000d190 <user_description_define+0x48>)
1000d16c:	1c28      	adds	r0, r5, #0
1000d16e:	2a00      	cmp	r2, #0
1000d170:	d003      	beq.n	1000d17a <user_description_define+0x32>
1000d172:	1c21      	adds	r1, r4, #0
1000d174:	1c32      	adds	r2, r6, #0
1000d176:	47b8      	blx	r7
1000d178:	e008      	b.n	1000d18c <user_description_define+0x44>
1000d17a:	1c11      	adds	r1, r2, #0
1000d17c:	47b8      	blx	r7
1000d17e:	2800      	cmp	r0, #0
1000d180:	d104      	bne.n	1000d18c <user_description_define+0x44>
1000d182:	1c28      	adds	r0, r5, #0
1000d184:	1c31      	adds	r1, r6, #0
1000d186:	1c22      	adds	r2, r4, #0
1000d188:	4b02      	ldr	r3, [pc, #8]	; (1000d194 <user_description_define+0x4c>)
1000d18a:	4798      	blx	r3
1000d18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d18e:	46c0      	nop			; (mov r8, r8)
1000d190:	1000d091 	.word	0x1000d091
1000d194:	1000f65d 	.word	0x1000f65d

1000d198 <at_ble_read_authorize_reply.part.1>:
1000d198:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d19a:	4b09      	ldr	r3, [pc, #36]	; (1000d1c0 <at_ble_read_authorize_reply.part.1+0x28>)
1000d19c:	1c05      	adds	r5, r0, #0
1000d19e:	1c08      	adds	r0, r1, #0
1000d1a0:	1c0c      	adds	r4, r1, #0
1000d1a2:	4798      	blx	r3
1000d1a4:	2800      	cmp	r0, #0
1000d1a6:	d009      	beq.n	1000d1bc <at_ble_read_authorize_reply.part.1+0x24>
1000d1a8:	6882      	ldr	r2, [r0, #8]
1000d1aa:	2a00      	cmp	r2, #0
1000d1ac:	d006      	beq.n	1000d1bc <at_ble_read_authorize_reply.part.1+0x24>
1000d1ae:	8883      	ldrh	r3, [r0, #4]
1000d1b0:	1c29      	adds	r1, r5, #0
1000d1b2:	9200      	str	r2, [sp, #0]
1000d1b4:	1c20      	adds	r0, r4, #0
1000d1b6:	2200      	movs	r2, #0
1000d1b8:	4c02      	ldr	r4, [pc, #8]	; (1000d1c4 <at_ble_read_authorize_reply.part.1+0x2c>)
1000d1ba:	47a0      	blx	r4
1000d1bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d1be:	46c0      	nop			; (mov r8, r8)
1000d1c0:	1000cf31 	.word	0x1000cf31
1000d1c4:	1000f0f5 	.word	0x1000f0f5

1000d1c8 <internal_at_ble_service_define>:
1000d1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d1ca:	b08b      	sub	sp, #44	; 0x2c
1000d1cc:	9306      	str	r3, [sp, #24]
1000d1ce:	ab10      	add	r3, sp, #64	; 0x40
1000d1d0:	9202      	str	r2, [sp, #8]
1000d1d2:	cb04      	ldmia	r3!, {r2}
1000d1d4:	1c05      	adds	r5, r0, #0
1000d1d6:	881b      	ldrh	r3, [r3, #0]
1000d1d8:	9105      	str	r1, [sp, #20]
1000d1da:	9303      	str	r3, [sp, #12]
1000d1dc:	ab12      	add	r3, sp, #72	; 0x48
1000d1de:	781b      	ldrb	r3, [r3, #0]
1000d1e0:	20cf      	movs	r0, #207	; 0xcf
1000d1e2:	9304      	str	r3, [sp, #16]
1000d1e4:	2d00      	cmp	r5, #0
1000d1e6:	d100      	bne.n	1000d1ea <internal_at_ble_service_define+0x22>
1000d1e8:	e1ca      	b.n	1000d580 <internal_at_ble_service_define+0x3b8>
1000d1ea:	2900      	cmp	r1, #0
1000d1ec:	d100      	bne.n	1000d1f0 <internal_at_ble_service_define+0x28>
1000d1ee:	e1c7      	b.n	1000d580 <internal_at_ble_service_define+0x3b8>
1000d1f0:	2a00      	cmp	r2, #0
1000d1f2:	d100      	bne.n	1000d1f6 <internal_at_ble_service_define+0x2e>
1000d1f4:	e1c4      	b.n	1000d580 <internal_at_ble_service_define+0x3b8>
1000d1f6:	9b03      	ldr	r3, [sp, #12]
1000d1f8:	2b00      	cmp	r3, #0
1000d1fa:	d100      	bne.n	1000d1fe <internal_at_ble_service_define+0x36>
1000d1fc:	e1c0      	b.n	1000d580 <internal_at_ble_service_define+0x3b8>
1000d1fe:	4bc9      	ldr	r3, [pc, #804]	; (1000d524 <internal_at_ble_service_define+0x35c>)
1000d200:	3004      	adds	r0, #4
1000d202:	681e      	ldr	r6, [r3, #0]
1000d204:	2e00      	cmp	r6, #0
1000d206:	d100      	bne.n	1000d20a <internal_at_ble_service_define+0x42>
1000d208:	e1ba      	b.n	1000d580 <internal_at_ble_service_define+0x3b8>
1000d20a:	2400      	movs	r4, #0
1000d20c:	4bc6      	ldr	r3, [pc, #792]	; (1000d528 <internal_at_ble_service_define+0x360>)
1000d20e:	8034      	strh	r4, [r6, #0]
1000d210:	881b      	ldrh	r3, [r3, #0]
1000d212:	1db7      	adds	r7, r6, #6
1000d214:	1c21      	adds	r1, r4, #0
1000d216:	2210      	movs	r2, #16
1000d218:	8073      	strh	r3, [r6, #2]
1000d21a:	1c38      	adds	r0, r7, #0
1000d21c:	4bc3      	ldr	r3, [pc, #780]	; (1000d52c <internal_at_ble_service_define+0x364>)
1000d21e:	4798      	blx	r3
1000d220:	7828      	ldrb	r0, [r5, #0]
1000d222:	4bc3      	ldr	r3, [pc, #780]	; (1000d530 <internal_at_ble_service_define+0x368>)
1000d224:	4798      	blx	r3
1000d226:	1c69      	adds	r1, r5, #1
1000d228:	1c02      	adds	r2, r0, #0
1000d22a:	4bc2      	ldr	r3, [pc, #776]	; (1000d534 <internal_at_ble_service_define+0x36c>)
1000d22c:	1c38      	adds	r0, r7, #0
1000d22e:	4798      	blx	r3
1000d230:	2204      	movs	r2, #4
1000d232:	782b      	ldrb	r3, [r5, #0]
1000d234:	9d02      	ldr	r5, [sp, #8]
1000d236:	011b      	lsls	r3, r3, #4
1000d238:	4313      	orrs	r3, r2
1000d23a:	9a04      	ldr	r2, [sp, #16]
1000d23c:	7174      	strb	r4, [r6, #5]
1000d23e:	0192      	lsls	r2, r2, #6
1000d240:	4313      	orrs	r3, r2
1000d242:	7133      	strb	r3, [r6, #4]
1000d244:	2316      	movs	r3, #22
1000d246:	9a06      	ldr	r2, [sp, #24]
1000d248:	3512      	adds	r5, #18
1000d24a:	4353      	muls	r3, r2
1000d24c:	9a02      	ldr	r2, [sp, #8]
1000d24e:	3312      	adds	r3, #18
1000d250:	18d7      	adds	r7, r2, r3
1000d252:	42bd      	cmp	r5, r7
1000d254:	d00f      	beq.n	1000d276 <internal_at_ble_service_define+0xae>
1000d256:	4bb8      	ldr	r3, [pc, #736]	; (1000d538 <internal_at_ble_service_define+0x370>)
1000d258:	8829      	ldrh	r1, [r5, #0]
1000d25a:	9300      	str	r3, [sp, #0]
1000d25c:	230e      	movs	r3, #14
1000d25e:	aa06      	add	r2, sp, #24
1000d260:	189b      	adds	r3, r3, r2
1000d262:	9301      	str	r3, [sp, #4]
1000d264:	4cb5      	ldr	r4, [pc, #724]	; (1000d53c <internal_at_ble_service_define+0x374>)
1000d266:	1c30      	adds	r0, r6, #0
1000d268:	2201      	movs	r2, #1
1000d26a:	2302      	movs	r3, #2
1000d26c:	47a0      	blx	r4
1000d26e:	3516      	adds	r5, #22
1000d270:	1e04      	subs	r4, r0, #0
1000d272:	d0ee      	beq.n	1000d252 <internal_at_ble_service_define+0x8a>
1000d274:	e183      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d276:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000d278:	2300      	movs	r3, #0
1000d27a:	3714      	adds	r7, #20
1000d27c:	1c3d      	adds	r5, r7, #0
1000d27e:	9302      	str	r3, [sp, #8]
1000d280:	9b02      	ldr	r3, [sp, #8]
1000d282:	9a03      	ldr	r2, [sp, #12]
1000d284:	4293      	cmp	r3, r2
1000d286:	db00      	blt.n	1000d28a <internal_at_ble_service_define+0xc2>
1000d288:	e0bf      	b.n	1000d40a <internal_at_ble_service_define+0x242>
1000d28a:	4bad      	ldr	r3, [pc, #692]	; (1000d540 <internal_at_ble_service_define+0x378>)
1000d28c:	aa06      	add	r2, sp, #24
1000d28e:	9300      	str	r3, [sp, #0]
1000d290:	230e      	movs	r3, #14
1000d292:	189b      	adds	r3, r3, r2
1000d294:	9301      	str	r3, [sp, #4]
1000d296:	4ca9      	ldr	r4, [pc, #676]	; (1000d53c <internal_at_ble_service_define+0x374>)
1000d298:	1c30      	adds	r0, r6, #0
1000d29a:	2104      	movs	r1, #4
1000d29c:	2201      	movs	r2, #1
1000d29e:	2302      	movs	r3, #2
1000d2a0:	47a0      	blx	r4
1000d2a2:	1e04      	subs	r4, r0, #0
1000d2a4:	d000      	beq.n	1000d2a8 <internal_at_ble_service_define+0xe0>
1000d2a6:	e16a      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d2a8:	1c2b      	adds	r3, r5, #0
1000d2aa:	3b12      	subs	r3, #18
1000d2ac:	7b2c      	ldrb	r4, [r5, #12]
1000d2ae:	781b      	ldrb	r3, [r3, #0]
1000d2b0:	1c21      	adds	r1, r4, #0
1000d2b2:	1c1a      	adds	r2, r3, #0
1000d2b4:	9304      	str	r3, [sp, #16]
1000d2b6:	8828      	ldrh	r0, [r5, #0]
1000d2b8:	4ba2      	ldr	r3, [pc, #648]	; (1000d544 <internal_at_ble_service_define+0x37c>)
1000d2ba:	4798      	blx	r3
1000d2bc:	2303      	movs	r3, #3
1000d2be:	4023      	ands	r3, r4
1000d2c0:	3b03      	subs	r3, #3
1000d2c2:	4259      	negs	r1, r3
1000d2c4:	4159      	adcs	r1, r3
1000d2c6:	2301      	movs	r3, #1
1000d2c8:	08a4      	lsrs	r4, r4, #2
1000d2ca:	401c      	ands	r4, r3
1000d2cc:	430c      	orrs	r4, r1
1000d2ce:	896b      	ldrh	r3, [r5, #10]
1000d2d0:	03e4      	lsls	r4, r4, #15
1000d2d2:	431c      	orrs	r4, r3
1000d2d4:	9007      	str	r0, [sp, #28]
1000d2d6:	4b96      	ldr	r3, [pc, #600]	; (1000d530 <internal_at_ble_service_define+0x368>)
1000d2d8:	9804      	ldr	r0, [sp, #16]
1000d2da:	4798      	blx	r3
1000d2dc:	1c2a      	adds	r2, r5, #0
1000d2de:	3a11      	subs	r2, #17
1000d2e0:	9200      	str	r2, [sp, #0]
1000d2e2:	3a03      	subs	r2, #3
1000d2e4:	1c03      	adds	r3, r0, #0
1000d2e6:	9201      	str	r2, [sp, #4]
1000d2e8:	1c21      	adds	r1, r4, #0
1000d2ea:	1c30      	adds	r0, r6, #0
1000d2ec:	4c93      	ldr	r4, [pc, #588]	; (1000d53c <internal_at_ble_service_define+0x374>)
1000d2ee:	9a07      	ldr	r2, [sp, #28]
1000d2f0:	47a0      	blx	r4
1000d2f2:	1e04      	subs	r4, r0, #0
1000d2f4:	d000      	beq.n	1000d2f8 <internal_at_ble_service_define+0x130>
1000d2f6:	e142      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d2f8:	22c0      	movs	r2, #192	; 0xc0
1000d2fa:	882b      	ldrh	r3, [r5, #0]
1000d2fc:	0052      	lsls	r2, r2, #1
1000d2fe:	4213      	tst	r3, r2
1000d300:	d104      	bne.n	1000d30c <internal_at_ble_service_define+0x144>
1000d302:	8aab      	ldrh	r3, [r5, #20]
1000d304:	9304      	str	r3, [sp, #16]
1000d306:	2b00      	cmp	r3, #0
1000d308:	d116      	bne.n	1000d338 <internal_at_ble_service_define+0x170>
1000d30a:	e03a      	b.n	1000d382 <internal_at_ble_service_define+0x1ba>
1000d30c:	2201      	movs	r2, #1
1000d30e:	09d9      	lsrs	r1, r3, #7
1000d310:	4011      	ands	r1, r2
1000d312:	05db      	lsls	r3, r3, #23
1000d314:	d501      	bpl.n	1000d31a <internal_at_ble_service_define+0x152>
1000d316:	2302      	movs	r3, #2
1000d318:	4319      	orrs	r1, r3
1000d31a:	4b8b      	ldr	r3, [pc, #556]	; (1000d548 <internal_at_ble_service_define+0x380>)
1000d31c:	aa06      	add	r2, sp, #24
1000d31e:	9300      	str	r3, [sp, #0]
1000d320:	230e      	movs	r3, #14
1000d322:	189b      	adds	r3, r3, r2
1000d324:	9301      	str	r3, [sp, #4]
1000d326:	4c85      	ldr	r4, [pc, #532]	; (1000d53c <internal_at_ble_service_define+0x374>)
1000d328:	0209      	lsls	r1, r1, #8
1000d32a:	1c30      	adds	r0, r6, #0
1000d32c:	2201      	movs	r2, #1
1000d32e:	2302      	movs	r3, #2
1000d330:	47a0      	blx	r4
1000d332:	1e04      	subs	r4, r0, #0
1000d334:	d0e5      	beq.n	1000d302 <internal_at_ble_service_define+0x13a>
1000d336:	e122      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d338:	2380      	movs	r3, #128	; 0x80
1000d33a:	882a      	ldrh	r2, [r5, #0]
1000d33c:	7f2c      	ldrb	r4, [r5, #28]
1000d33e:	005b      	lsls	r3, r3, #1
1000d340:	401a      	ands	r2, r3
1000d342:	1c20      	adds	r0, r4, #0
1000d344:	2101      	movs	r1, #1
1000d346:	2a00      	cmp	r2, #0
1000d348:	d000      	beq.n	1000d34c <internal_at_ble_service_define+0x184>
1000d34a:	1c0a      	adds	r2, r1, #0
1000d34c:	4b7f      	ldr	r3, [pc, #508]	; (1000d54c <internal_at_ble_service_define+0x384>)
1000d34e:	4798      	blx	r3
1000d350:	2203      	movs	r2, #3
1000d352:	4022      	ands	r2, r4
1000d354:	3a03      	subs	r2, #3
1000d356:	4251      	negs	r1, r2
1000d358:	4151      	adcs	r1, r2
1000d35a:	4b7d      	ldr	r3, [pc, #500]	; (1000d550 <internal_at_ble_service_define+0x388>)
1000d35c:	1c0a      	adds	r2, r1, #0
1000d35e:	9300      	str	r3, [sp, #0]
1000d360:	1c2b      	adds	r3, r5, #0
1000d362:	0764      	lsls	r4, r4, #29
1000d364:	0fe4      	lsrs	r4, r4, #31
1000d366:	4322      	orrs	r2, r4
1000d368:	03d2      	lsls	r2, r2, #15
1000d36a:	4310      	orrs	r0, r2
1000d36c:	3320      	adds	r3, #32
1000d36e:	b282      	uxth	r2, r0
1000d370:	9301      	str	r3, [sp, #4]
1000d372:	4c72      	ldr	r4, [pc, #456]	; (1000d53c <internal_at_ble_service_define+0x374>)
1000d374:	1c30      	adds	r0, r6, #0
1000d376:	9904      	ldr	r1, [sp, #16]
1000d378:	2302      	movs	r3, #2
1000d37a:	47a0      	blx	r4
1000d37c:	1e04      	subs	r4, r0, #0
1000d37e:	d000      	beq.n	1000d382 <internal_at_ble_service_define+0x1ba>
1000d380:	e0fd      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d382:	2101      	movs	r1, #1
1000d384:	882b      	ldrh	r3, [r5, #0]
1000d386:	420b      	tst	r3, r1
1000d388:	d011      	beq.n	1000d3ae <internal_at_ble_service_define+0x1e6>
1000d38a:	7fa8      	ldrb	r0, [r5, #30]
1000d38c:	4b6f      	ldr	r3, [pc, #444]	; (1000d54c <internal_at_ble_service_define+0x384>)
1000d38e:	2200      	movs	r2, #0
1000d390:	4798      	blx	r3
1000d392:	4b70      	ldr	r3, [pc, #448]	; (1000d554 <internal_at_ble_service_define+0x38c>)
1000d394:	1c02      	adds	r2, r0, #0
1000d396:	9300      	str	r3, [sp, #0]
1000d398:	1c2b      	adds	r3, r5, #0
1000d39a:	3324      	adds	r3, #36	; 0x24
1000d39c:	9301      	str	r3, [sp, #4]
1000d39e:	4c67      	ldr	r4, [pc, #412]	; (1000d53c <internal_at_ble_service_define+0x374>)
1000d3a0:	1c30      	adds	r0, r6, #0
1000d3a2:	496d      	ldr	r1, [pc, #436]	; (1000d558 <internal_at_ble_service_define+0x390>)
1000d3a4:	2302      	movs	r3, #2
1000d3a6:	47a0      	blx	r4
1000d3a8:	1e04      	subs	r4, r0, #0
1000d3aa:	d000      	beq.n	1000d3ae <internal_at_ble_service_define+0x1e6>
1000d3ac:	e0e7      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d3ae:	2330      	movs	r3, #48	; 0x30
1000d3b0:	882a      	ldrh	r2, [r5, #0]
1000d3b2:	421a      	tst	r2, r3
1000d3b4:	d012      	beq.n	1000d3dc <internal_at_ble_service_define+0x214>
1000d3b6:	2101      	movs	r1, #1
1000d3b8:	7f68      	ldrb	r0, [r5, #29]
1000d3ba:	1c0a      	adds	r2, r1, #0
1000d3bc:	4b63      	ldr	r3, [pc, #396]	; (1000d54c <internal_at_ble_service_define+0x384>)
1000d3be:	4798      	blx	r3
1000d3c0:	4b66      	ldr	r3, [pc, #408]	; (1000d55c <internal_at_ble_service_define+0x394>)
1000d3c2:	1c02      	adds	r2, r0, #0
1000d3c4:	9300      	str	r3, [sp, #0]
1000d3c6:	1c2b      	adds	r3, r5, #0
1000d3c8:	3322      	adds	r3, #34	; 0x22
1000d3ca:	9301      	str	r3, [sp, #4]
1000d3cc:	4c5b      	ldr	r4, [pc, #364]	; (1000d53c <internal_at_ble_service_define+0x374>)
1000d3ce:	1c30      	adds	r0, r6, #0
1000d3d0:	4961      	ldr	r1, [pc, #388]	; (1000d558 <internal_at_ble_service_define+0x390>)
1000d3d2:	2302      	movs	r3, #2
1000d3d4:	47a0      	blx	r4
1000d3d6:	1e04      	subs	r4, r0, #0
1000d3d8:	d000      	beq.n	1000d3dc <internal_at_ble_service_define+0x214>
1000d3da:	e0d0      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d3dc:	69ab      	ldr	r3, [r5, #24]
1000d3de:	2b00      	cmp	r3, #0
1000d3e0:	d00e      	beq.n	1000d400 <internal_at_ble_service_define+0x238>
1000d3e2:	4b5f      	ldr	r3, [pc, #380]	; (1000d560 <internal_at_ble_service_define+0x398>)
1000d3e4:	aa06      	add	r2, sp, #24
1000d3e6:	9300      	str	r3, [sp, #0]
1000d3e8:	230e      	movs	r3, #14
1000d3ea:	189b      	adds	r3, r3, r2
1000d3ec:	9301      	str	r3, [sp, #4]
1000d3ee:	4c53      	ldr	r4, [pc, #332]	; (1000d53c <internal_at_ble_service_define+0x374>)
1000d3f0:	1c30      	adds	r0, r6, #0
1000d3f2:	2107      	movs	r1, #7
1000d3f4:	2201      	movs	r2, #1
1000d3f6:	2302      	movs	r3, #2
1000d3f8:	47a0      	blx	r4
1000d3fa:	1e04      	subs	r4, r0, #0
1000d3fc:	d000      	beq.n	1000d400 <internal_at_ble_service_define+0x238>
1000d3fe:	e0be      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d400:	9b02      	ldr	r3, [sp, #8]
1000d402:	353c      	adds	r5, #60	; 0x3c
1000d404:	3301      	adds	r3, #1
1000d406:	9302      	str	r3, [sp, #8]
1000d408:	e73a      	b.n	1000d280 <internal_at_ble_service_define+0xb8>
1000d40a:	1c30      	adds	r0, r6, #0
1000d40c:	4b55      	ldr	r3, [pc, #340]	; (1000d564 <internal_at_ble_service_define+0x39c>)
1000d40e:	4798      	blx	r3
1000d410:	1e04      	subs	r4, r0, #0
1000d412:	d000      	beq.n	1000d416 <internal_at_ble_service_define+0x24e>
1000d414:	e0b3      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d416:	8833      	ldrh	r3, [r6, #0]
1000d418:	9a05      	ldr	r2, [sp, #20]
1000d41a:	8013      	strh	r3, [r2, #0]
1000d41c:	8836      	ldrh	r6, [r6, #0]
1000d41e:	9b06      	ldr	r3, [sp, #24]
1000d420:	9a03      	ldr	r2, [sp, #12]
1000d422:	18f6      	adds	r6, r6, r3
1000d424:	b2b3      	uxth	r3, r6
1000d426:	9302      	str	r3, [sp, #8]
1000d428:	233c      	movs	r3, #60	; 0x3c
1000d42a:	4353      	muls	r3, r2
1000d42c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000d42e:	3314      	adds	r3, #20
1000d430:	18d3      	adds	r3, r2, r3
1000d432:	9304      	str	r3, [sp, #16]
1000d434:	9b04      	ldr	r3, [sp, #16]
1000d436:	429f      	cmp	r7, r3
1000d438:	d100      	bne.n	1000d43c <internal_at_ble_service_define+0x274>
1000d43a:	e0a0      	b.n	1000d57e <internal_at_ble_service_define+0x3b6>
1000d43c:	9b02      	ldr	r3, [sp, #8]
1000d43e:	1c9d      	adds	r5, r3, #2
1000d440:	1c3b      	adds	r3, r7, #0
1000d442:	b2ad      	uxth	r5, r5
1000d444:	3b14      	subs	r3, #20
1000d446:	801d      	strh	r5, [r3, #0]
1000d448:	9303      	str	r3, [sp, #12]
1000d44a:	893b      	ldrh	r3, [r7, #8]
1000d44c:	2b00      	cmp	r3, #0
1000d44e:	d108      	bne.n	1000d462 <internal_at_ble_service_define+0x29a>
1000d450:	23c0      	movs	r3, #192	; 0xc0
1000d452:	883a      	ldrh	r2, [r7, #0]
1000d454:	005b      	lsls	r3, r3, #1
1000d456:	421a      	tst	r2, r3
1000d458:	d026      	beq.n	1000d4a8 <internal_at_ble_service_define+0x2e0>
1000d45a:	9e02      	ldr	r6, [sp, #8]
1000d45c:	3603      	adds	r6, #3
1000d45e:	b2b5      	uxth	r5, r6
1000d460:	e022      	b.n	1000d4a8 <internal_at_ble_service_define+0x2e0>
1000d462:	2103      	movs	r1, #3
1000d464:	7b3b      	ldrb	r3, [r7, #12]
1000d466:	4019      	ands	r1, r3
1000d468:	3903      	subs	r1, #3
1000d46a:	424a      	negs	r2, r1
1000d46c:	414a      	adcs	r2, r1
1000d46e:	0759      	lsls	r1, r3, #29
1000d470:	0fc9      	lsrs	r1, r1, #31
1000d472:	4311      	orrs	r1, r2
1000d474:	03c9      	lsls	r1, r1, #15
1000d476:	897a      	ldrh	r2, [r7, #10]
1000d478:	2900      	cmp	r1, #0
1000d47a:	d007      	beq.n	1000d48c <internal_at_ble_service_define+0x2c4>
1000d47c:	6879      	ldr	r1, [r7, #4]
1000d47e:	2900      	cmp	r1, #0
1000d480:	d100      	bne.n	1000d484 <internal_at_ble_service_define+0x2bc>
1000d482:	4939      	ldr	r1, [pc, #228]	; (1000d568 <internal_at_ble_service_define+0x3a0>)
1000d484:	1c28      	adds	r0, r5, #0
1000d486:	4e39      	ldr	r6, [pc, #228]	; (1000d56c <internal_at_ble_service_define+0x3a4>)
1000d488:	47b0      	blx	r6
1000d48a:	e00a      	b.n	1000d4a2 <internal_at_ble_service_define+0x2da>
1000d48c:	1c28      	adds	r0, r5, #0
1000d48e:	4e37      	ldr	r6, [pc, #220]	; (1000d56c <internal_at_ble_service_define+0x3a4>)
1000d490:	47b0      	blx	r6
1000d492:	2800      	cmp	r0, #0
1000d494:	d172      	bne.n	1000d57c <internal_at_ble_service_define+0x3b4>
1000d496:	9b03      	ldr	r3, [sp, #12]
1000d498:	8939      	ldrh	r1, [r7, #8]
1000d49a:	8818      	ldrh	r0, [r3, #0]
1000d49c:	687a      	ldr	r2, [r7, #4]
1000d49e:	4b34      	ldr	r3, [pc, #208]	; (1000d570 <internal_at_ble_service_define+0x3a8>)
1000d4a0:	4798      	blx	r3
1000d4a2:	2800      	cmp	r0, #0
1000d4a4:	d0d4      	beq.n	1000d450 <internal_at_ble_service_define+0x288>
1000d4a6:	e069      	b.n	1000d57c <internal_at_ble_service_define+0x3b4>
1000d4a8:	8abb      	ldrh	r3, [r7, #20]
1000d4aa:	2b00      	cmp	r3, #0
1000d4ac:	d00a      	beq.n	1000d4c4 <internal_at_ble_service_define+0x2fc>
1000d4ae:	3501      	adds	r5, #1
1000d4b0:	b2ad      	uxth	r5, r5
1000d4b2:	843d      	strh	r5, [r7, #32]
1000d4b4:	7f39      	ldrb	r1, [r7, #28]
1000d4b6:	8afb      	ldrh	r3, [r7, #22]
1000d4b8:	1c28      	adds	r0, r5, #0
1000d4ba:	693a      	ldr	r2, [r7, #16]
1000d4bc:	4e2d      	ldr	r6, [pc, #180]	; (1000d574 <internal_at_ble_service_define+0x3ac>)
1000d4be:	47b0      	blx	r6
1000d4c0:	2800      	cmp	r0, #0
1000d4c2:	d15b      	bne.n	1000d57c <internal_at_ble_service_define+0x3b4>
1000d4c4:	883b      	ldrh	r3, [r7, #0]
1000d4c6:	07db      	lsls	r3, r3, #31
1000d4c8:	d50d      	bpl.n	1000d4e6 <internal_at_ble_service_define+0x31e>
1000d4ca:	2200      	movs	r2, #0
1000d4cc:	3501      	adds	r5, #1
1000d4ce:	b2ad      	uxth	r5, r5
1000d4d0:	a909      	add	r1, sp, #36	; 0x24
1000d4d2:	84bd      	strh	r5, [r7, #36]	; 0x24
1000d4d4:	7fbb      	ldrb	r3, [r7, #30]
1000d4d6:	1c28      	adds	r0, r5, #0
1000d4d8:	700a      	strb	r2, [r1, #0]
1000d4da:	704a      	strb	r2, [r1, #1]
1000d4dc:	4e23      	ldr	r6, [pc, #140]	; (1000d56c <internal_at_ble_service_define+0x3a4>)
1000d4de:	3202      	adds	r2, #2
1000d4e0:	47b0      	blx	r6
1000d4e2:	2800      	cmp	r0, #0
1000d4e4:	d14a      	bne.n	1000d57c <internal_at_ble_service_define+0x3b4>
1000d4e6:	2330      	movs	r3, #48	; 0x30
1000d4e8:	883a      	ldrh	r2, [r7, #0]
1000d4ea:	421a      	tst	r2, r3
1000d4ec:	d00d      	beq.n	1000d50a <internal_at_ble_service_define+0x342>
1000d4ee:	2200      	movs	r2, #0
1000d4f0:	3501      	adds	r5, #1
1000d4f2:	b2ad      	uxth	r5, r5
1000d4f4:	a909      	add	r1, sp, #36	; 0x24
1000d4f6:	847d      	strh	r5, [r7, #34]	; 0x22
1000d4f8:	7f7b      	ldrb	r3, [r7, #29]
1000d4fa:	1c28      	adds	r0, r5, #0
1000d4fc:	700a      	strb	r2, [r1, #0]
1000d4fe:	704a      	strb	r2, [r1, #1]
1000d500:	4e1a      	ldr	r6, [pc, #104]	; (1000d56c <internal_at_ble_service_define+0x3a4>)
1000d502:	3202      	adds	r2, #2
1000d504:	47b0      	blx	r6
1000d506:	2800      	cmp	r0, #0
1000d508:	d138      	bne.n	1000d57c <internal_at_ble_service_define+0x3b4>
1000d50a:	69b9      	ldr	r1, [r7, #24]
1000d50c:	2900      	cmp	r1, #0
1000d50e:	d006      	beq.n	1000d51e <internal_at_ble_service_define+0x356>
1000d510:	3501      	adds	r5, #1
1000d512:	b2ad      	uxth	r5, r5
1000d514:	1c28      	adds	r0, r5, #0
1000d516:	4b18      	ldr	r3, [pc, #96]	; (1000d578 <internal_at_ble_service_define+0x3b0>)
1000d518:	4798      	blx	r3
1000d51a:	2800      	cmp	r0, #0
1000d51c:	d12e      	bne.n	1000d57c <internal_at_ble_service_define+0x3b4>
1000d51e:	373c      	adds	r7, #60	; 0x3c
1000d520:	9502      	str	r5, [sp, #8]
1000d522:	e787      	b.n	1000d434 <internal_at_ble_service_define+0x26c>
1000d524:	10015394 	.word	0x10015394
1000d528:	100160d4 	.word	0x100160d4
1000d52c:	10011705 	.word	0x10011705
1000d530:	1000cefd 	.word	0x1000cefd
1000d534:	100116f3 	.word	0x100116f3
1000d538:	10013703 	.word	0x10013703
1000d53c:	1000f5ed 	.word	0x1000f5ed
1000d540:	10013705 	.word	0x10013705
1000d544:	1000cfc9 	.word	0x1000cfc9
1000d548:	10013701 	.word	0x10013701
1000d54c:	1000cf71 	.word	0x1000cf71
1000d550:	100136fd 	.word	0x100136fd
1000d554:	100136ff 	.word	0x100136ff
1000d558:	00008002 	.word	0x00008002
1000d55c:	100136f9 	.word	0x100136f9
1000d560:	100136fb 	.word	0x100136fb
1000d564:	1000f4e1 	.word	0x1000f4e1
1000d568:	10015380 	.word	0x10015380
1000d56c:	1000d091 	.word	0x1000d091
1000d570:	1000f65d 	.word	0x1000f65d
1000d574:	1000d149 	.word	0x1000d149
1000d578:	1000d065 	.word	0x1000d065
1000d57c:	1c04      	adds	r4, r0, #0
1000d57e:	1c20      	adds	r0, r4, #0
1000d580:	b00b      	add	sp, #44	; 0x2c
1000d582:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000d584 <initi_gatt_server_module>:
1000d584:	2300      	movs	r3, #0
1000d586:	4a07      	ldr	r2, [pc, #28]	; (1000d5a4 <initi_gatt_server_module+0x20>)
1000d588:	7013      	strb	r3, [r2, #0]
1000d58a:	4a07      	ldr	r2, [pc, #28]	; (1000d5a8 <initi_gatt_server_module+0x24>)
1000d58c:	6013      	str	r3, [r2, #0]
1000d58e:	4a07      	ldr	r2, [pc, #28]	; (1000d5ac <initi_gatt_server_module+0x28>)
1000d590:	6013      	str	r3, [r2, #0]
1000d592:	4a07      	ldr	r2, [pc, #28]	; (1000d5b0 <initi_gatt_server_module+0x2c>)
1000d594:	6013      	str	r3, [r2, #0]
1000d596:	4a07      	ldr	r2, [pc, #28]	; (1000d5b4 <initi_gatt_server_module+0x30>)
1000d598:	6013      	str	r3, [r2, #0]
1000d59a:	4a07      	ldr	r2, [pc, #28]	; (1000d5b8 <initi_gatt_server_module+0x34>)
1000d59c:	6013      	str	r3, [r2, #0]
1000d59e:	4a07      	ldr	r2, [pc, #28]	; (1000d5bc <initi_gatt_server_module+0x38>)
1000d5a0:	6013      	str	r3, [r2, #0]
1000d5a2:	4770      	bx	lr
1000d5a4:	10015380 	.word	0x10015380
1000d5a8:	10015390 	.word	0x10015390
1000d5ac:	1001538c 	.word	0x1001538c
1000d5b0:	1001537c 	.word	0x1001537c
1000d5b4:	10015388 	.word	0x10015388
1000d5b8:	10015384 	.word	0x10015384
1000d5bc:	10015394 	.word	0x10015394

1000d5c0 <db_init>:
1000d5c0:	4b0a      	ldr	r3, [pc, #40]	; (1000d5ec <db_init+0x2c>)
1000d5c2:	4a0b      	ldr	r2, [pc, #44]	; (1000d5f0 <db_init+0x30>)
1000d5c4:	6018      	str	r0, [r3, #0]
1000d5c6:	084b      	lsrs	r3, r1, #1
1000d5c8:	6013      	str	r3, [r2, #0]
1000d5ca:	4a0a      	ldr	r2, [pc, #40]	; (1000d5f4 <db_init+0x34>)
1000d5cc:	18c3      	adds	r3, r0, r3
1000d5ce:	6013      	str	r3, [r2, #0]
1000d5d0:	4a09      	ldr	r2, [pc, #36]	; (1000d5f8 <db_init+0x38>)
1000d5d2:	1841      	adds	r1, r0, r1
1000d5d4:	6013      	str	r3, [r2, #0]
1000d5d6:	2303      	movs	r3, #3
1000d5d8:	2200      	movs	r2, #0
1000d5da:	3103      	adds	r1, #3
1000d5dc:	4399      	bics	r1, r3
1000d5de:	4b07      	ldr	r3, [pc, #28]	; (1000d5fc <db_init+0x3c>)
1000d5e0:	3904      	subs	r1, #4
1000d5e2:	6019      	str	r1, [r3, #0]
1000d5e4:	4b06      	ldr	r3, [pc, #24]	; (1000d600 <db_init+0x40>)
1000d5e6:	601a      	str	r2, [r3, #0]
1000d5e8:	4770      	bx	lr
1000d5ea:	46c0      	nop			; (mov r8, r8)
1000d5ec:	10015394 	.word	0x10015394
1000d5f0:	10015390 	.word	0x10015390
1000d5f4:	1001537c 	.word	0x1001537c
1000d5f8:	10015388 	.word	0x10015388
1000d5fc:	10015384 	.word	0x10015384
1000d600:	1001538c 	.word	0x1001538c

1000d604 <at_ble_primary_service_define>:
1000d604:	b530      	push	{r4, r5, lr}
1000d606:	b085      	sub	sp, #20
1000d608:	ac08      	add	r4, sp, #32
1000d60a:	cc20      	ldmia	r4!, {r5}
1000d60c:	8824      	ldrh	r4, [r4, #0]
1000d60e:	9500      	str	r5, [sp, #0]
1000d610:	9401      	str	r4, [sp, #4]
1000d612:	2401      	movs	r4, #1
1000d614:	9402      	str	r4, [sp, #8]
1000d616:	4c02      	ldr	r4, [pc, #8]	; (1000d620 <at_ble_primary_service_define+0x1c>)
1000d618:	47a0      	blx	r4
1000d61a:	b005      	add	sp, #20
1000d61c:	bd30      	pop	{r4, r5, pc}
1000d61e:	46c0      	nop			; (mov r8, r8)
1000d620:	1000d1c9 	.word	0x1000d1c9

1000d624 <at_ble_characteristic_value_set>:
1000d624:	b570      	push	{r4, r5, r6, lr}
1000d626:	4b0b      	ldr	r3, [pc, #44]	; (1000d654 <at_ble_characteristic_value_set+0x30>)
1000d628:	1c06      	adds	r6, r0, #0
1000d62a:	1c0c      	adds	r4, r1, #0
1000d62c:	1c15      	adds	r5, r2, #0
1000d62e:	4798      	blx	r3
1000d630:	2800      	cmp	r0, #0
1000d632:	d008      	beq.n	1000d646 <at_ble_characteristic_value_set+0x22>
1000d634:	6880      	ldr	r0, [r0, #8]
1000d636:	2800      	cmp	r0, #0
1000d638:	d005      	beq.n	1000d646 <at_ble_characteristic_value_set+0x22>
1000d63a:	1c21      	adds	r1, r4, #0
1000d63c:	1c2a      	adds	r2, r5, #0
1000d63e:	4b06      	ldr	r3, [pc, #24]	; (1000d658 <at_ble_characteristic_value_set+0x34>)
1000d640:	4798      	blx	r3
1000d642:	2000      	movs	r0, #0
1000d644:	e004      	b.n	1000d650 <at_ble_characteristic_value_set+0x2c>
1000d646:	1c30      	adds	r0, r6, #0
1000d648:	1c29      	adds	r1, r5, #0
1000d64a:	1c22      	adds	r2, r4, #0
1000d64c:	4b03      	ldr	r3, [pc, #12]	; (1000d65c <at_ble_characteristic_value_set+0x38>)
1000d64e:	4798      	blx	r3
1000d650:	bd70      	pop	{r4, r5, r6, pc}
1000d652:	46c0      	nop			; (mov r8, r8)
1000d654:	1000cf31 	.word	0x1000cf31
1000d658:	100116f3 	.word	0x100116f3
1000d65c:	1000f65d 	.word	0x1000f65d

1000d660 <at_ble_characteristic_value_get>:
1000d660:	b570      	push	{r4, r5, r6, lr}
1000d662:	4b0c      	ldr	r3, [pc, #48]	; (1000d694 <at_ble_characteristic_value_get+0x34>)
1000d664:	1c06      	adds	r6, r0, #0
1000d666:	1c0c      	adds	r4, r1, #0
1000d668:	1c15      	adds	r5, r2, #0
1000d66a:	4798      	blx	r3
1000d66c:	2800      	cmp	r0, #0
1000d66e:	d00b      	beq.n	1000d688 <at_ble_characteristic_value_get+0x28>
1000d670:	6883      	ldr	r3, [r0, #8]
1000d672:	2b00      	cmp	r3, #0
1000d674:	d008      	beq.n	1000d688 <at_ble_characteristic_value_get+0x28>
1000d676:	8883      	ldrh	r3, [r0, #4]
1000d678:	802b      	strh	r3, [r5, #0]
1000d67a:	8882      	ldrh	r2, [r0, #4]
1000d67c:	6881      	ldr	r1, [r0, #8]
1000d67e:	4b06      	ldr	r3, [pc, #24]	; (1000d698 <at_ble_characteristic_value_get+0x38>)
1000d680:	1c20      	adds	r0, r4, #0
1000d682:	4798      	blx	r3
1000d684:	2000      	movs	r0, #0
1000d686:	e004      	b.n	1000d692 <at_ble_characteristic_value_get+0x32>
1000d688:	1c30      	adds	r0, r6, #0
1000d68a:	1c29      	adds	r1, r5, #0
1000d68c:	1c22      	adds	r2, r4, #0
1000d68e:	4b03      	ldr	r3, [pc, #12]	; (1000d69c <at_ble_characteristic_value_get+0x3c>)
1000d690:	4798      	blx	r3
1000d692:	bd70      	pop	{r4, r5, r6, pc}
1000d694:	1000cf31 	.word	0x1000cf31
1000d698:	100116f3 	.word	0x100116f3
1000d69c:	1000f6e9 	.word	0x1000f6e9

1000d6a0 <at_ble_write_authorize_reply>:
1000d6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6a2:	b085      	sub	sp, #20
1000d6a4:	1c04      	adds	r4, r0, #0
1000d6a6:	9101      	str	r1, [sp, #4]
1000d6a8:	2900      	cmp	r1, #0
1000d6aa:	d128      	bne.n	1000d6fe <at_ble_write_authorize_reply+0x5e>
1000d6ac:	8843      	ldrh	r3, [r0, #2]
1000d6ae:	1c27      	adds	r7, r4, #0
1000d6b0:	9300      	str	r3, [sp, #0]
1000d6b2:	1c18      	adds	r0, r3, #0
1000d6b4:	4b16      	ldr	r3, [pc, #88]	; (1000d710 <at_ble_write_authorize_reply+0x70>)
1000d6b6:	4798      	blx	r3
1000d6b8:	3708      	adds	r7, #8
1000d6ba:	2800      	cmp	r0, #0
1000d6bc:	d009      	beq.n	1000d6d2 <at_ble_write_authorize_reply+0x32>
1000d6be:	6880      	ldr	r0, [r0, #8]
1000d6c0:	2800      	cmp	r0, #0
1000d6c2:	d006      	beq.n	1000d6d2 <at_ble_write_authorize_reply+0x32>
1000d6c4:	88a3      	ldrh	r3, [r4, #4]
1000d6c6:	88e2      	ldrh	r2, [r4, #6]
1000d6c8:	18c0      	adds	r0, r0, r3
1000d6ca:	1c39      	adds	r1, r7, #0
1000d6cc:	4b11      	ldr	r3, [pc, #68]	; (1000d714 <at_ble_write_authorize_reply+0x74>)
1000d6ce:	4798      	blx	r3
1000d6d0:	e015      	b.n	1000d6fe <at_ble_write_authorize_reply+0x5e>
1000d6d2:	ab02      	add	r3, sp, #8
1000d6d4:	1d9e      	adds	r6, r3, #6
1000d6d6:	2300      	movs	r3, #0
1000d6d8:	4d0f      	ldr	r5, [pc, #60]	; (1000d718 <at_ble_write_authorize_reply+0x78>)
1000d6da:	8033      	strh	r3, [r6, #0]
1000d6dc:	6829      	ldr	r1, [r5, #0]
1000d6de:	1c32      	adds	r2, r6, #0
1000d6e0:	4b0e      	ldr	r3, [pc, #56]	; (1000d71c <at_ble_write_authorize_reply+0x7c>)
1000d6e2:	9800      	ldr	r0, [sp, #0]
1000d6e4:	4798      	blx	r3
1000d6e6:	682b      	ldr	r3, [r5, #0]
1000d6e8:	88a0      	ldrh	r0, [r4, #4]
1000d6ea:	88e2      	ldrh	r2, [r4, #6]
1000d6ec:	1818      	adds	r0, r3, r0
1000d6ee:	1c39      	adds	r1, r7, #0
1000d6f0:	4b08      	ldr	r3, [pc, #32]	; (1000d714 <at_ble_write_authorize_reply+0x74>)
1000d6f2:	4798      	blx	r3
1000d6f4:	8860      	ldrh	r0, [r4, #2]
1000d6f6:	8832      	ldrh	r2, [r6, #0]
1000d6f8:	6829      	ldr	r1, [r5, #0]
1000d6fa:	4b09      	ldr	r3, [pc, #36]	; (1000d720 <at_ble_write_authorize_reply+0x80>)
1000d6fc:	4798      	blx	r3
1000d6fe:	8860      	ldrh	r0, [r4, #2]
1000d700:	8821      	ldrh	r1, [r4, #0]
1000d702:	9a01      	ldr	r2, [sp, #4]
1000d704:	4b07      	ldr	r3, [pc, #28]	; (1000d724 <at_ble_write_authorize_reply+0x84>)
1000d706:	4798      	blx	r3
1000d708:	2000      	movs	r0, #0
1000d70a:	b005      	add	sp, #20
1000d70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d70e:	46c0      	nop			; (mov r8, r8)
1000d710:	1000cf31 	.word	0x1000cf31
1000d714:	100116f3 	.word	0x100116f3
1000d718:	100138d4 	.word	0x100138d4
1000d71c:	1000d661 	.word	0x1000d661
1000d720:	1000d625 	.word	0x1000d625
1000d724:	1000f161 	.word	0x1000f161

1000d728 <gatts_handle_read_req>:
1000d728:	b538      	push	{r3, r4, r5, lr}
1000d72a:	1c0c      	adds	r4, r1, #0
1000d72c:	4b07      	ldr	r3, [pc, #28]	; (1000d74c <gatts_handle_read_req+0x24>)
1000d72e:	4798      	blx	r3
1000d730:	8865      	ldrh	r5, [r4, #2]
1000d732:	4b07      	ldr	r3, [pc, #28]	; (1000d750 <gatts_handle_read_req+0x28>)
1000d734:	1c28      	adds	r0, r5, #0
1000d736:	4798      	blx	r3
1000d738:	7883      	ldrb	r3, [r0, #2]
1000d73a:	2026      	movs	r0, #38	; 0x26
1000d73c:	07db      	lsls	r3, r3, #31
1000d73e:	d404      	bmi.n	1000d74a <gatts_handle_read_req+0x22>
1000d740:	8820      	ldrh	r0, [r4, #0]
1000d742:	1c29      	adds	r1, r5, #0
1000d744:	4b03      	ldr	r3, [pc, #12]	; (1000d754 <gatts_handle_read_req+0x2c>)
1000d746:	4798      	blx	r3
1000d748:	203b      	movs	r0, #59	; 0x3b
1000d74a:	bd38      	pop	{r3, r4, r5, pc}
1000d74c:	1000f0a5 	.word	0x1000f0a5
1000d750:	1000cf31 	.word	0x1000cf31
1000d754:	1000d199 	.word	0x1000d199

1000d758 <gatts_handle_att_info_req>:
1000d758:	b538      	push	{r3, r4, r5, lr}
1000d75a:	1c0d      	adds	r5, r1, #0
1000d75c:	4b0a      	ldr	r3, [pc, #40]	; (1000d788 <gatts_handle_att_info_req+0x30>)
1000d75e:	1c14      	adds	r4, r2, #0
1000d760:	4798      	blx	r3
1000d762:	882d      	ldrh	r5, [r5, #0]
1000d764:	4b09      	ldr	r3, [pc, #36]	; (1000d78c <gatts_handle_att_info_req+0x34>)
1000d766:	1c28      	adds	r0, r5, #0
1000d768:	4798      	blx	r3
1000d76a:	0a22      	lsrs	r2, r4, #8
1000d76c:	1c03      	adds	r3, r0, #0
1000d76e:	4c08      	ldr	r4, [pc, #32]	; (1000d790 <gatts_handle_att_info_req+0x38>)
1000d770:	b291      	uxth	r1, r2
1000d772:	2800      	cmp	r0, #0
1000d774:	d003      	beq.n	1000d77e <gatts_handle_att_info_req+0x26>
1000d776:	8882      	ldrh	r2, [r0, #4]
1000d778:	2300      	movs	r3, #0
1000d77a:	1c28      	adds	r0, r5, #0
1000d77c:	e001      	b.n	1000d782 <gatts_handle_att_info_req+0x2a>
1000d77e:	1c28      	adds	r0, r5, #0
1000d780:	2201      	movs	r2, #1
1000d782:	47a0      	blx	r4
1000d784:	203b      	movs	r0, #59	; 0x3b
1000d786:	bd38      	pop	{r3, r4, r5, pc}
1000d788:	1000f0e9 	.word	0x1000f0e9
1000d78c:	1000cf31 	.word	0x1000cf31
1000d790:	1000f1a5 	.word	0x1000f1a5

1000d794 <gatts_handle_write_req>:
1000d794:	b510      	push	{r4, lr}
1000d796:	1c14      	adds	r4, r2, #0
1000d798:	4b07      	ldr	r3, [pc, #28]	; (1000d7b8 <gatts_handle_write_req+0x24>)
1000d79a:	4798      	blx	r3
1000d79c:	4b07      	ldr	r3, [pc, #28]	; (1000d7bc <gatts_handle_write_req+0x28>)
1000d79e:	8860      	ldrh	r0, [r4, #2]
1000d7a0:	4798      	blx	r3
1000d7a2:	2302      	movs	r3, #2
1000d7a4:	7881      	ldrb	r1, [r0, #2]
1000d7a6:	2022      	movs	r0, #34	; 0x22
1000d7a8:	4019      	ands	r1, r3
1000d7aa:	d103      	bne.n	1000d7b4 <gatts_handle_write_req+0x20>
1000d7ac:	1c20      	adds	r0, r4, #0
1000d7ae:	4b04      	ldr	r3, [pc, #16]	; (1000d7c0 <gatts_handle_write_req+0x2c>)
1000d7b0:	4798      	blx	r3
1000d7b2:	201f      	movs	r0, #31
1000d7b4:	bd10      	pop	{r4, pc}
1000d7b6:	46c0      	nop			; (mov r8, r8)
1000d7b8:	1000f0b1 	.word	0x1000f0b1
1000d7bc:	1000cf31 	.word	0x1000cf31
1000d7c0:	1000d6a1 	.word	0x1000d6a1

1000d7c4 <at_ble_notification_send>:
1000d7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7c6:	4d17      	ldr	r5, [pc, #92]	; (1000d824 <at_ble_notification_send+0x60>)
1000d7c8:	4c17      	ldr	r4, [pc, #92]	; (1000d828 <at_ble_notification_send+0x64>)
1000d7ca:	682a      	ldr	r2, [r5, #0]
1000d7cc:	44a5      	add	sp, r4
1000d7ce:	23d2      	movs	r3, #210	; 0xd2
1000d7d0:	2a04      	cmp	r2, #4
1000d7d2:	d822      	bhi.n	1000d81a <at_ble_notification_send+0x56>
1000d7d4:	1c06      	adds	r6, r0, #0
1000d7d6:	4b15      	ldr	r3, [pc, #84]	; (1000d82c <at_ble_notification_send+0x68>)
1000d7d8:	1c08      	adds	r0, r1, #0
1000d7da:	1c0c      	adds	r4, r1, #0
1000d7dc:	4798      	blx	r3
1000d7de:	2800      	cmp	r0, #0
1000d7e0:	d008      	beq.n	1000d7f4 <at_ble_notification_send+0x30>
1000d7e2:	6883      	ldr	r3, [r0, #8]
1000d7e4:	2b00      	cmp	r3, #0
1000d7e6:	d005      	beq.n	1000d7f4 <at_ble_notification_send+0x30>
1000d7e8:	8882      	ldrh	r2, [r0, #4]
1000d7ea:	1c21      	adds	r1, r4, #0
1000d7ec:	9200      	str	r2, [sp, #0]
1000d7ee:	2012      	movs	r0, #18
1000d7f0:	1c32      	adds	r2, r6, #0
1000d7f2:	e00c      	b.n	1000d80e <at_ble_notification_send+0x4a>
1000d7f4:	270e      	movs	r7, #14
1000d7f6:	446f      	add	r7, sp
1000d7f8:	1c39      	adds	r1, r7, #0
1000d7fa:	aa04      	add	r2, sp, #16
1000d7fc:	4b0c      	ldr	r3, [pc, #48]	; (1000d830 <at_ble_notification_send+0x6c>)
1000d7fe:	1c20      	adds	r0, r4, #0
1000d800:	4798      	blx	r3
1000d802:	2012      	movs	r0, #18
1000d804:	1c21      	adds	r1, r4, #0
1000d806:	1c32      	adds	r2, r6, #0
1000d808:	883b      	ldrh	r3, [r7, #0]
1000d80a:	9300      	str	r3, [sp, #0]
1000d80c:	ab04      	add	r3, sp, #16
1000d80e:	4c09      	ldr	r4, [pc, #36]	; (1000d834 <at_ble_notification_send+0x70>)
1000d810:	47a0      	blx	r4
1000d812:	682b      	ldr	r3, [r5, #0]
1000d814:	3301      	adds	r3, #1
1000d816:	602b      	str	r3, [r5, #0]
1000d818:	2300      	movs	r3, #0
1000d81a:	1c18      	adds	r0, r3, #0
1000d81c:	2385      	movs	r3, #133	; 0x85
1000d81e:	009b      	lsls	r3, r3, #2
1000d820:	449d      	add	sp, r3
1000d822:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d824:	10015420 	.word	0x10015420
1000d828:	fffffdec 	.word	0xfffffdec
1000d82c:	1000cf31 	.word	0x1000cf31
1000d830:	1000f6e9 	.word	0x1000f6e9
1000d834:	1000f1ed 	.word	0x1000f1ed

1000d838 <init_l2cc_task_module>:
1000d838:	220a      	movs	r2, #10
1000d83a:	4b01      	ldr	r3, [pc, #4]	; (1000d840 <init_l2cc_task_module+0x8>)
1000d83c:	701a      	strb	r2, [r3, #0]
1000d83e:	4770      	bx	lr
1000d840:	100138d2 	.word	0x100138d2

1000d844 <l2cc_data_send_rsp_handler>:
1000d844:	b510      	push	{r4, lr}
1000d846:	7802      	ldrb	r2, [r0, #0]
1000d848:	700a      	strb	r2, [r1, #0]
1000d84a:	7883      	ldrb	r3, [r0, #2]
1000d84c:	7844      	ldrb	r4, [r0, #1]
1000d84e:	021b      	lsls	r3, r3, #8
1000d850:	4323      	orrs	r3, r4
1000d852:	804b      	strh	r3, [r1, #2]
1000d854:	7903      	ldrb	r3, [r0, #4]
1000d856:	78c0      	ldrb	r0, [r0, #3]
1000d858:	021b      	lsls	r3, r3, #8
1000d85a:	4303      	orrs	r3, r0
1000d85c:	808b      	strh	r3, [r1, #4]
1000d85e:	2a00      	cmp	r2, #0
1000d860:	d103      	bne.n	1000d86a <l2cc_data_send_rsp_handler+0x26>
1000d862:	4a02      	ldr	r2, [pc, #8]	; (1000d86c <l2cc_data_send_rsp_handler+0x28>)
1000d864:	7813      	ldrb	r3, [r2, #0]
1000d866:	3301      	adds	r3, #1
1000d868:	7013      	strb	r3, [r2, #0]
1000d86a:	bd10      	pop	{r4, pc}
1000d86c:	100138d2 	.word	0x100138d2

1000d870 <l2cc_data_received_handler>:
1000d870:	b508      	push	{r3, lr}
1000d872:	1c03      	adds	r3, r0, #0
1000d874:	7842      	ldrb	r2, [r0, #1]
1000d876:	7800      	ldrb	r0, [r0, #0]
1000d878:	0212      	lsls	r2, r2, #8
1000d87a:	4302      	orrs	r2, r0
1000d87c:	800a      	strh	r2, [r1, #0]
1000d87e:	78da      	ldrb	r2, [r3, #3]
1000d880:	7898      	ldrb	r0, [r3, #2]
1000d882:	0212      	lsls	r2, r2, #8
1000d884:	4302      	orrs	r2, r0
1000d886:	804a      	strh	r2, [r1, #2]
1000d888:	795a      	ldrb	r2, [r3, #5]
1000d88a:	7918      	ldrb	r0, [r3, #4]
1000d88c:	0212      	lsls	r2, r2, #8
1000d88e:	4302      	orrs	r2, r0
1000d890:	808a      	strh	r2, [r1, #4]
1000d892:	1d88      	adds	r0, r1, #6
1000d894:	1d99      	adds	r1, r3, #6
1000d896:	4b01      	ldr	r3, [pc, #4]	; (1000d89c <l2cc_data_received_handler+0x2c>)
1000d898:	4798      	blx	r3
1000d89a:	bd08      	pop	{r3, pc}
1000d89c:	100116f3 	.word	0x100116f3

1000d8a0 <at_ble_authenticate>:
1000d8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d8a2:	1c0c      	adds	r4, r1, #0
1000d8a4:	211f      	movs	r1, #31
1000d8a6:	b08b      	sub	sp, #44	; 0x2c
1000d8a8:	9307      	str	r3, [sp, #28]
1000d8aa:	ab02      	add	r3, sp, #8
1000d8ac:	18c9      	adds	r1, r1, r3
1000d8ae:	230f      	movs	r3, #15
1000d8b0:	700b      	strb	r3, [r1, #0]
1000d8b2:	4b40      	ldr	r3, [pc, #256]	; (1000d9b4 <at_ble_authenticate+0x114>)
1000d8b4:	1c05      	adds	r5, r0, #0
1000d8b6:	1c16      	adds	r6, r2, #0
1000d8b8:	4798      	blx	r3
1000d8ba:	1c07      	adds	r7, r0, #0
1000d8bc:	2001      	movs	r0, #1
1000d8be:	2f07      	cmp	r7, #7
1000d8c0:	d875      	bhi.n	1000d9ae <at_ble_authenticate+0x10e>
1000d8c2:	2c00      	cmp	r4, #0
1000d8c4:	d113      	bne.n	1000d8ee <at_ble_authenticate+0x4e>
1000d8c6:	2312      	movs	r3, #18
1000d8c8:	435f      	muls	r7, r3
1000d8ca:	4b3b      	ldr	r3, [pc, #236]	; (1000d9b8 <at_ble_authenticate+0x118>)
1000d8cc:	5cfb      	ldrb	r3, [r7, r3]
1000d8ce:	4283      	cmp	r3, r0
1000d8d0:	d001      	beq.n	1000d8d6 <at_ble_authenticate+0x36>
1000d8d2:	20cf      	movs	r0, #207	; 0xcf
1000d8d4:	e06b      	b.n	1000d9ae <at_ble_authenticate+0x10e>
1000d8d6:	9504      	str	r5, [sp, #16]
1000d8d8:	9400      	str	r4, [sp, #0]
1000d8da:	9401      	str	r4, [sp, #4]
1000d8dc:	9402      	str	r4, [sp, #8]
1000d8de:	9403      	str	r4, [sp, #12]
1000d8e0:	1c20      	adds	r0, r4, #0
1000d8e2:	1c21      	adds	r1, r4, #0
1000d8e4:	1c22      	adds	r2, r4, #0
1000d8e6:	1c23      	adds	r3, r4, #0
1000d8e8:	4d34      	ldr	r5, [pc, #208]	; (1000d9bc <at_ble_authenticate+0x11c>)
1000d8ea:	47a8      	blx	r5
1000d8ec:	e05e      	b.n	1000d9ac <at_ble_authenticate+0x10c>
1000d8ee:	7922      	ldrb	r2, [r4, #4]
1000d8f0:	2a06      	cmp	r2, #6
1000d8f2:	d9ee      	bls.n	1000d8d2 <at_ble_authenticate+0x32>
1000d8f4:	7963      	ldrb	r3, [r4, #5]
1000d8f6:	2b10      	cmp	r3, #16
1000d8f8:	d8eb      	bhi.n	1000d8d2 <at_ble_authenticate+0x32>
1000d8fa:	429a      	cmp	r2, r3
1000d8fc:	d8e9      	bhi.n	1000d8d2 <at_ble_authenticate+0x32>
1000d8fe:	7a23      	ldrb	r3, [r4, #8]
1000d900:	2b04      	cmp	r3, #4
1000d902:	d8e6      	bhi.n	1000d8d2 <at_ble_authenticate+0x32>
1000d904:	79a3      	ldrb	r3, [r4, #6]
1000d906:	2b07      	cmp	r3, #7
1000d908:	d8e3      	bhi.n	1000d8d2 <at_ble_authenticate+0x32>
1000d90a:	79e3      	ldrb	r3, [r4, #7]
1000d90c:	2b07      	cmp	r3, #7
1000d90e:	d8e0      	bhi.n	1000d8d2 <at_ble_authenticate+0x32>
1000d910:	78a3      	ldrb	r3, [r4, #2]
1000d912:	2b00      	cmp	r3, #0
1000d914:	d006      	beq.n	1000d924 <at_ble_authenticate+0x84>
1000d916:	2e00      	cmp	r6, #0
1000d918:	d0db      	beq.n	1000d8d2 <at_ble_authenticate+0x32>
1000d91a:	4829      	ldr	r0, [pc, #164]	; (1000d9c0 <at_ble_authenticate+0x120>)
1000d91c:	1c31      	adds	r1, r6, #0
1000d91e:	221c      	movs	r2, #28
1000d920:	4b28      	ldr	r3, [pc, #160]	; (1000d9c4 <at_ble_authenticate+0x124>)
1000d922:	4798      	blx	r3
1000d924:	9b07      	ldr	r3, [sp, #28]
1000d926:	2b00      	cmp	r3, #0
1000d928:	d005      	beq.n	1000d936 <at_ble_authenticate+0x96>
1000d92a:	4827      	ldr	r0, [pc, #156]	; (1000d9c8 <at_ble_authenticate+0x128>)
1000d92c:	1c19      	adds	r1, r3, #0
1000d92e:	309a      	adds	r0, #154	; 0x9a
1000d930:	2210      	movs	r2, #16
1000d932:	4b24      	ldr	r3, [pc, #144]	; (1000d9c4 <at_ble_authenticate+0x124>)
1000d934:	4798      	blx	r3
1000d936:	7863      	ldrb	r3, [r4, #1]
1000d938:	78a2      	ldrb	r2, [r4, #2]
1000d93a:	009b      	lsls	r3, r3, #2
1000d93c:	4313      	orrs	r3, r2
1000d93e:	2212      	movs	r2, #18
1000d940:	4357      	muls	r7, r2
1000d942:	4a1d      	ldr	r2, [pc, #116]	; (1000d9b8 <at_ble_authenticate+0x118>)
1000d944:	b2db      	uxtb	r3, r3
1000d946:	5cba      	ldrb	r2, [r7, r2]
1000d948:	2a00      	cmp	r2, #0
1000d94a:	d116      	bne.n	1000d97a <at_ble_authenticate+0xda>
1000d94c:	79a0      	ldrb	r0, [r4, #6]
1000d94e:	0742      	lsls	r2, r0, #29
1000d950:	d502      	bpl.n	1000d958 <at_ble_authenticate+0xb8>
1000d952:	9a07      	ldr	r2, [sp, #28]
1000d954:	2a00      	cmp	r2, #0
1000d956:	d0bc      	beq.n	1000d8d2 <at_ble_authenticate+0x32>
1000d958:	07c2      	lsls	r2, r0, #31
1000d95a:	d501      	bpl.n	1000d960 <at_ble_authenticate+0xc0>
1000d95c:	2e00      	cmp	r6, #0
1000d95e:	d0b8      	beq.n	1000d8d2 <at_ble_authenticate+0x32>
1000d960:	7966      	ldrb	r6, [r4, #5]
1000d962:	7821      	ldrb	r1, [r4, #0]
1000d964:	78e2      	ldrb	r2, [r4, #3]
1000d966:	9600      	str	r6, [sp, #0]
1000d968:	9001      	str	r0, [sp, #4]
1000d96a:	79e0      	ldrb	r0, [r4, #7]
1000d96c:	9002      	str	r0, [sp, #8]
1000d96e:	7a20      	ldrb	r0, [r4, #8]
1000d970:	4c16      	ldr	r4, [pc, #88]	; (1000d9cc <at_ble_authenticate+0x12c>)
1000d972:	9003      	str	r0, [sp, #12]
1000d974:	1c28      	adds	r0, r5, #0
1000d976:	47a0      	blx	r4
1000d978:	e018      	b.n	1000d9ac <at_ble_authenticate+0x10c>
1000d97a:	2a01      	cmp	r2, #1
1000d97c:	d1a9      	bne.n	1000d8d2 <at_ble_authenticate+0x32>
1000d97e:	79e0      	ldrb	r0, [r4, #7]
1000d980:	0742      	lsls	r2, r0, #29
1000d982:	d502      	bpl.n	1000d98a <at_ble_authenticate+0xea>
1000d984:	9a07      	ldr	r2, [sp, #28]
1000d986:	2a00      	cmp	r2, #0
1000d988:	d0a3      	beq.n	1000d8d2 <at_ble_authenticate+0x32>
1000d98a:	07c2      	lsls	r2, r0, #31
1000d98c:	d501      	bpl.n	1000d992 <at_ble_authenticate+0xf2>
1000d98e:	2e00      	cmp	r6, #0
1000d990:	d09f      	beq.n	1000d8d2 <at_ble_authenticate+0x32>
1000d992:	7966      	ldrb	r6, [r4, #5]
1000d994:	7821      	ldrb	r1, [r4, #0]
1000d996:	78e2      	ldrb	r2, [r4, #3]
1000d998:	9600      	str	r6, [sp, #0]
1000d99a:	79a6      	ldrb	r6, [r4, #6]
1000d99c:	9002      	str	r0, [sp, #8]
1000d99e:	9601      	str	r6, [sp, #4]
1000d9a0:	7a20      	ldrb	r0, [r4, #8]
1000d9a2:	9504      	str	r5, [sp, #16]
1000d9a4:	9003      	str	r0, [sp, #12]
1000d9a6:	4c05      	ldr	r4, [pc, #20]	; (1000d9bc <at_ble_authenticate+0x11c>)
1000d9a8:	2001      	movs	r0, #1
1000d9aa:	47a0      	blx	r4
1000d9ac:	2000      	movs	r0, #0
1000d9ae:	b00b      	add	sp, #44	; 0x2c
1000d9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d9b2:	46c0      	nop			; (mov r8, r8)
1000d9b4:	1000dea1 	.word	0x1000dea1
1000d9b8:	100160d6 	.word	0x100160d6
1000d9bc:	1000e411 	.word	0x1000e411
1000d9c0:	100161e4 	.word	0x100161e4
1000d9c4:	100116f3 	.word	0x100116f3
1000d9c8:	10016166 	.word	0x10016166
1000d9cc:	1000e1f1 	.word	0x1000e1f1

1000d9d0 <at_ble_pair_key_reply>:
1000d9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d9d2:	b085      	sub	sp, #20
1000d9d4:	1c05      	adds	r5, r0, #0
1000d9d6:	1c0c      	adds	r4, r1, #0
1000d9d8:	1c16      	adds	r6, r2, #0
1000d9da:	2100      	movs	r1, #0
1000d9dc:	4668      	mov	r0, sp
1000d9de:	2210      	movs	r2, #16
1000d9e0:	4b18      	ldr	r3, [pc, #96]	; (1000da44 <at_ble_pair_key_reply+0x74>)
1000d9e2:	4798      	blx	r3
1000d9e4:	2101      	movs	r1, #1
1000d9e6:	2e00      	cmp	r6, #0
1000d9e8:	d101      	bne.n	1000d9ee <at_ble_pair_key_reply+0x1e>
1000d9ea:	1c31      	adds	r1, r6, #0
1000d9ec:	466e      	mov	r6, sp
1000d9ee:	2c00      	cmp	r4, #0
1000d9f0:	d116      	bne.n	1000da20 <at_ble_pair_key_reply+0x50>
1000d9f2:	2701      	movs	r7, #1
1000d9f4:	1c23      	adds	r3, r4, #0
1000d9f6:	1d70      	adds	r0, r6, #5
1000d9f8:	3e01      	subs	r6, #1
1000d9fa:	7802      	ldrb	r2, [r0, #0]
1000d9fc:	3801      	subs	r0, #1
1000d9fe:	3a30      	subs	r2, #48	; 0x30
1000da00:	437a      	muls	r2, r7
1000da02:	189b      	adds	r3, r3, r2
1000da04:	220a      	movs	r2, #10
1000da06:	4357      	muls	r7, r2
1000da08:	42b0      	cmp	r0, r6
1000da0a:	d1f6      	bne.n	1000d9fa <at_ble_pair_key_reply+0x2a>
1000da0c:	466a      	mov	r2, sp
1000da0e:	4668      	mov	r0, sp
1000da10:	7013      	strb	r3, [r2, #0]
1000da12:	0a1a      	lsrs	r2, r3, #8
1000da14:	7042      	strb	r2, [r0, #1]
1000da16:	0c1a      	lsrs	r2, r3, #16
1000da18:	0e1b      	lsrs	r3, r3, #24
1000da1a:	7082      	strb	r2, [r0, #2]
1000da1c:	70c3      	strb	r3, [r0, #3]
1000da1e:	e009      	b.n	1000da34 <at_ble_pair_key_reply+0x64>
1000da20:	20cf      	movs	r0, #207	; 0xcf
1000da22:	2c01      	cmp	r4, #1
1000da24:	d10c      	bne.n	1000da40 <at_ble_pair_key_reply+0x70>
1000da26:	2300      	movs	r3, #0
1000da28:	4668      	mov	r0, sp
1000da2a:	5cf2      	ldrb	r2, [r6, r3]
1000da2c:	54c2      	strb	r2, [r0, r3]
1000da2e:	3301      	adds	r3, #1
1000da30:	2b10      	cmp	r3, #16
1000da32:	d1f9      	bne.n	1000da28 <at_ble_pair_key_reply+0x58>
1000da34:	2004      	movs	r0, #4
1000da36:	466a      	mov	r2, sp
1000da38:	1c2b      	adds	r3, r5, #0
1000da3a:	4c03      	ldr	r4, [pc, #12]	; (1000da48 <at_ble_pair_key_reply+0x78>)
1000da3c:	47a0      	blx	r4
1000da3e:	2000      	movs	r0, #0
1000da40:	b005      	add	sp, #20
1000da42:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da44:	10011705 	.word	0x10011705
1000da48:	1000e48d 	.word	0x1000e48d

1000da4c <at_ble_send_slave_sec_request>:
1000da4c:	b570      	push	{r4, r5, r6, lr}
1000da4e:	4b0c      	ldr	r3, [pc, #48]	; (1000da80 <at_ble_send_slave_sec_request+0x34>)
1000da50:	1c0e      	adds	r6, r1, #0
1000da52:	2100      	movs	r1, #0
1000da54:	1c05      	adds	r5, r0, #0
1000da56:	1c14      	adds	r4, r2, #0
1000da58:	4798      	blx	r3
1000da5a:	2301      	movs	r3, #1
1000da5c:	2807      	cmp	r0, #7
1000da5e:	d80d      	bhi.n	1000da7c <at_ble_send_slave_sec_request+0x30>
1000da60:	3311      	adds	r3, #17
1000da62:	4358      	muls	r0, r3
1000da64:	4b07      	ldr	r3, [pc, #28]	; (1000da84 <at_ble_send_slave_sec_request+0x38>)
1000da66:	5cc2      	ldrb	r2, [r0, r3]
1000da68:	23e0      	movs	r3, #224	; 0xe0
1000da6a:	2a01      	cmp	r2, #1
1000da6c:	d106      	bne.n	1000da7c <at_ble_send_slave_sec_request+0x30>
1000da6e:	00b1      	lsls	r1, r6, #2
1000da70:	430c      	orrs	r4, r1
1000da72:	4b05      	ldr	r3, [pc, #20]	; (1000da88 <at_ble_send_slave_sec_request+0x3c>)
1000da74:	b2e1      	uxtb	r1, r4
1000da76:	1c28      	adds	r0, r5, #0
1000da78:	4798      	blx	r3
1000da7a:	2300      	movs	r3, #0
1000da7c:	1c18      	adds	r0, r3, #0
1000da7e:	bd70      	pop	{r4, r5, r6, pc}
1000da80:	1000dea1 	.word	0x1000dea1
1000da84:	100160d6 	.word	0x100160d6
1000da88:	1000e4dd 	.word	0x1000e4dd

1000da8c <at_ble_encryption_start>:
1000da8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000da8e:	23cf      	movs	r3, #207	; 0xcf
1000da90:	2900      	cmp	r1, #0
1000da92:	d02b      	beq.n	1000daec <at_ble_encryption_start+0x60>
1000da94:	2a05      	cmp	r2, #5
1000da96:	d829      	bhi.n	1000daec <at_ble_encryption_start+0x60>
1000da98:	2701      	movs	r7, #1
1000da9a:	1c3d      	adds	r5, r7, #0
1000da9c:	2433      	movs	r4, #51	; 0x33
1000da9e:	4095      	lsls	r5, r2
1000daa0:	4225      	tst	r5, r4
1000daa2:	d023      	beq.n	1000daec <at_ble_encryption_start+0x60>
1000daa4:	7e8c      	ldrb	r4, [r1, #26]
1000daa6:	3c07      	subs	r4, #7
1000daa8:	2c09      	cmp	r4, #9
1000daaa:	d81f      	bhi.n	1000daec <at_ble_encryption_start+0x60>
1000daac:	4b10      	ldr	r3, [pc, #64]	; (1000daf0 <at_ble_encryption_start+0x64>)
1000daae:	1c0c      	adds	r4, r1, #0
1000dab0:	2100      	movs	r1, #0
1000dab2:	1c15      	adds	r5, r2, #0
1000dab4:	1c06      	adds	r6, r0, #0
1000dab6:	4798      	blx	r3
1000dab8:	1c3b      	adds	r3, r7, #0
1000daba:	2807      	cmp	r0, #7
1000dabc:	d816      	bhi.n	1000daec <at_ble_encryption_start+0x60>
1000dabe:	2312      	movs	r3, #18
1000dac0:	4358      	muls	r0, r3
1000dac2:	4b0c      	ldr	r3, [pc, #48]	; (1000daf4 <at_ble_encryption_start+0x68>)
1000dac4:	5cc7      	ldrb	r7, [r0, r3]
1000dac6:	23e0      	movs	r3, #224	; 0xe0
1000dac8:	2f00      	cmp	r7, #0
1000daca:	d10f      	bne.n	1000daec <at_ble_encryption_start+0x60>
1000dacc:	1c21      	adds	r1, r4, #0
1000dace:	221c      	movs	r2, #28
1000dad0:	4b09      	ldr	r3, [pc, #36]	; (1000daf8 <at_ble_encryption_start+0x6c>)
1000dad2:	480a      	ldr	r0, [pc, #40]	; (1000dafc <at_ble_encryption_start+0x70>)
1000dad4:	4798      	blx	r3
1000dad6:	1c23      	adds	r3, r4, #0
1000dad8:	7ea1      	ldrb	r1, [r4, #26]
1000dada:	8a22      	ldrh	r2, [r4, #16]
1000dadc:	3312      	adds	r3, #18
1000dade:	9100      	str	r1, [sp, #0]
1000dae0:	9501      	str	r5, [sp, #4]
1000dae2:	1c21      	adds	r1, r4, #0
1000dae4:	1c30      	adds	r0, r6, #0
1000dae6:	4c06      	ldr	r4, [pc, #24]	; (1000db00 <at_ble_encryption_start+0x74>)
1000dae8:	47a0      	blx	r4
1000daea:	1c3b      	adds	r3, r7, #0
1000daec:	1c18      	adds	r0, r3, #0
1000daee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000daf0:	1000dea1 	.word	0x1000dea1
1000daf4:	100160d6 	.word	0x100160d6
1000daf8:	100116f3 	.word	0x100116f3
1000dafc:	100161e4 	.word	0x100161e4
1000db00:	1000e51d 	.word	0x1000e51d

1000db04 <at_ble_encryption_request_reply>:
1000db04:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000db06:	24cf      	movs	r4, #207	; 0xcf
1000db08:	2b00      	cmp	r3, #0
1000db0a:	d011      	beq.n	1000db30 <at_ble_encryption_request_reply+0x2c>
1000db0c:	2a00      	cmp	r2, #0
1000db0e:	d00a      	beq.n	1000db26 <at_ble_encryption_request_reply+0x22>
1000db10:	2905      	cmp	r1, #5
1000db12:	d80d      	bhi.n	1000db30 <at_ble_encryption_request_reply+0x2c>
1000db14:	2501      	movs	r5, #1
1000db16:	2633      	movs	r6, #51	; 0x33
1000db18:	408d      	lsls	r5, r1
1000db1a:	4235      	tst	r5, r6
1000db1c:	d008      	beq.n	1000db30 <at_ble_encryption_request_reply+0x2c>
1000db1e:	7e9d      	ldrb	r5, [r3, #26]
1000db20:	3d07      	subs	r5, #7
1000db22:	2d09      	cmp	r5, #9
1000db24:	d804      	bhi.n	1000db30 <at_ble_encryption_request_reply+0x2c>
1000db26:	7e9c      	ldrb	r4, [r3, #26]
1000db28:	9400      	str	r4, [sp, #0]
1000db2a:	4c02      	ldr	r4, [pc, #8]	; (1000db34 <at_ble_encryption_request_reply+0x30>)
1000db2c:	47a0      	blx	r4
1000db2e:	2400      	movs	r4, #0
1000db30:	1c20      	adds	r0, r4, #0
1000db32:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000db34:	1000e5d9 	.word	0x1000e5d9

1000db38 <at_ble_htpt_create_db>:
1000db38:	b530      	push	{r4, r5, lr}
1000db3a:	b085      	sub	sp, #20
1000db3c:	ac08      	add	r4, sp, #32
1000db3e:	8825      	ldrh	r5, [r4, #0]
1000db40:	ac09      	add	r4, sp, #36	; 0x24
1000db42:	7824      	ldrb	r4, [r4, #0]
1000db44:	9500      	str	r5, [sp, #0]
1000db46:	9401      	str	r4, [sp, #4]
1000db48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000db4a:	9402      	str	r4, [sp, #8]
1000db4c:	4c01      	ldr	r4, [pc, #4]	; (1000db54 <at_ble_htpt_create_db+0x1c>)
1000db4e:	47a0      	blx	r4
1000db50:	b005      	add	sp, #20
1000db52:	bd30      	pop	{r4, r5, pc}
1000db54:	1000f785 	.word	0x1000f785

1000db58 <at_ble_htpt_enable>:
1000db58:	b508      	push	{r3, lr}
1000db5a:	4b01      	ldr	r3, [pc, #4]	; (1000db60 <at_ble_htpt_enable+0x8>)
1000db5c:	4798      	blx	r3
1000db5e:	bd08      	pop	{r3, pc}
1000db60:	1000f7c5 	.word	0x1000f7c5

1000db64 <at_ble_htpt_temp_send>:
1000db64:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000db66:	1c04      	adds	r4, r0, #0
1000db68:	a806      	add	r0, sp, #24
1000db6a:	7805      	ldrb	r5, [r0, #0]
1000db6c:	20cf      	movs	r0, #207	; 0xcf
1000db6e:	2900      	cmp	r1, #0
1000db70:	d003      	beq.n	1000db7a <at_ble_htpt_temp_send+0x16>
1000db72:	1c20      	adds	r0, r4, #0
1000db74:	9500      	str	r5, [sp, #0]
1000db76:	4c01      	ldr	r4, [pc, #4]	; (1000db7c <at_ble_htpt_temp_send+0x18>)
1000db78:	47a0      	blx	r4
1000db7a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000db7c:	1000f805 	.word	0x1000f805

1000db80 <rx_callback>:
1000db80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000db82:	8883      	ldrh	r3, [r0, #4]
1000db84:	1c01      	adds	r1, r0, #0
1000db86:	9301      	str	r3, [sp, #4]
1000db88:	88c5      	ldrh	r5, [r0, #6]
1000db8a:	8806      	ldrh	r6, [r0, #0]
1000db8c:	2d00      	cmp	r5, #0
1000db8e:	d10f      	bne.n	1000dbb0 <rx_callback+0x30>
1000db90:	1c19      	adds	r1, r3, #0
1000db92:	1c30      	adds	r0, r6, #0
1000db94:	4b19      	ldr	r3, [pc, #100]	; (1000dbfc <rx_callback+0x7c>)
1000db96:	1c2a      	adds	r2, r5, #0
1000db98:	4798      	blx	r3
1000db9a:	1e03      	subs	r3, r0, #0
1000db9c:	d105      	bne.n	1000dbaa <rx_callback+0x2a>
1000db9e:	1c30      	adds	r0, r6, #0
1000dba0:	9901      	ldr	r1, [sp, #4]
1000dba2:	1c1a      	adds	r2, r3, #0
1000dba4:	4c16      	ldr	r4, [pc, #88]	; (1000dc00 <rx_callback+0x80>)
1000dba6:	47a0      	blx	r4
1000dba8:	e027      	b.n	1000dbfa <rx_callback+0x7a>
1000dbaa:	4b16      	ldr	r3, [pc, #88]	; (1000dc04 <rx_callback+0x84>)
1000dbac:	4798      	blx	r3
1000dbae:	e024      	b.n	1000dbfa <rx_callback+0x7a>
1000dbb0:	4c15      	ldr	r4, [pc, #84]	; (1000dc08 <rx_callback+0x88>)
1000dbb2:	4a16      	ldr	r2, [pc, #88]	; (1000dc0c <rx_callback+0x8c>)
1000dbb4:	6823      	ldr	r3, [r4, #0]
1000dbb6:	6812      	ldr	r2, [r2, #0]
1000dbb8:	18eb      	adds	r3, r5, r3
1000dbba:	4293      	cmp	r3, r2
1000dbbc:	d901      	bls.n	1000dbc2 <rx_callback+0x42>
1000dbbe:	2300      	movs	r3, #0
1000dbc0:	6023      	str	r3, [r4, #0]
1000dbc2:	4f13      	ldr	r7, [pc, #76]	; (1000dc10 <rx_callback+0x90>)
1000dbc4:	6822      	ldr	r2, [r4, #0]
1000dbc6:	683b      	ldr	r3, [r7, #0]
1000dbc8:	3108      	adds	r1, #8
1000dbca:	1898      	adds	r0, r3, r2
1000dbcc:	1c2a      	adds	r2, r5, #0
1000dbce:	4b11      	ldr	r3, [pc, #68]	; (1000dc14 <rx_callback+0x94>)
1000dbd0:	4798      	blx	r3
1000dbd2:	683b      	ldr	r3, [r7, #0]
1000dbd4:	6822      	ldr	r2, [r4, #0]
1000dbd6:	1c30      	adds	r0, r6, #0
1000dbd8:	189a      	adds	r2, r3, r2
1000dbda:	9901      	ldr	r1, [sp, #4]
1000dbdc:	4b07      	ldr	r3, [pc, #28]	; (1000dbfc <rx_callback+0x7c>)
1000dbde:	4798      	blx	r3
1000dbe0:	2800      	cmp	r0, #0
1000dbe2:	d1e2      	bne.n	1000dbaa <rx_callback+0x2a>
1000dbe4:	6823      	ldr	r3, [r4, #0]
1000dbe6:	683a      	ldr	r2, [r7, #0]
1000dbe8:	1c30      	adds	r0, r6, #0
1000dbea:	18d2      	adds	r2, r2, r3
1000dbec:	9901      	ldr	r1, [sp, #4]
1000dbee:	1c2b      	adds	r3, r5, #0
1000dbf0:	4e03      	ldr	r6, [pc, #12]	; (1000dc00 <rx_callback+0x80>)
1000dbf2:	47b0      	blx	r6
1000dbf4:	6823      	ldr	r3, [r4, #0]
1000dbf6:	18ed      	adds	r5, r5, r3
1000dbf8:	6025      	str	r5, [r4, #0]
1000dbfa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000dbfc:	1000c151 	.word	0x1000c151
1000dc00:	1000c0c9 	.word	0x1000c0c9
1000dc04:	1000b7a9 	.word	0x1000b7a9
1000dc08:	10016240 	.word	0x10016240
1000dc0c:	1001539c 	.word	0x1001539c
1000dc10:	10015398 	.word	0x10015398
1000dc14:	100116f3 	.word	0x100116f3

1000dc18 <interface_send>:
1000dc18:	b508      	push	{r3, lr}
1000dc1a:	4b02      	ldr	r3, [pc, #8]	; (1000dc24 <interface_send+0xc>)
1000dc1c:	4798      	blx	r3
1000dc1e:	2000      	movs	r0, #0
1000dc20:	bd08      	pop	{r3, pc}
1000dc22:	46c0      	nop			; (mov r8, r8)
1000dc24:	1000b4b5 	.word	0x1000b4b5

1000dc28 <interface_init>:
1000dc28:	2280      	movs	r2, #128	; 0x80
1000dc2a:	b510      	push	{r4, lr}
1000dc2c:	2100      	movs	r1, #0
1000dc2e:	1c04      	adds	r4, r0, #0
1000dc30:	0092      	lsls	r2, r2, #2
1000dc32:	4b08      	ldr	r3, [pc, #32]	; (1000dc54 <interface_init+0x2c>)
1000dc34:	4808      	ldr	r0, [pc, #32]	; (1000dc58 <interface_init+0x30>)
1000dc36:	4798      	blx	r3
1000dc38:	2200      	movs	r2, #0
1000dc3a:	4b08      	ldr	r3, [pc, #32]	; (1000dc5c <interface_init+0x34>)
1000dc3c:	601a      	str	r2, [r3, #0]
1000dc3e:	4a08      	ldr	r2, [pc, #32]	; (1000dc60 <interface_init+0x38>)
1000dc40:	4b08      	ldr	r3, [pc, #32]	; (1000dc64 <interface_init+0x3c>)
1000dc42:	601a      	str	r2, [r3, #0]
1000dc44:	4b08      	ldr	r3, [pc, #32]	; (1000dc68 <interface_init+0x40>)
1000dc46:	6922      	ldr	r2, [r4, #16]
1000dc48:	601a      	str	r2, [r3, #0]
1000dc4a:	6962      	ldr	r2, [r4, #20]
1000dc4c:	4b07      	ldr	r3, [pc, #28]	; (1000dc6c <interface_init+0x44>)
1000dc4e:	601a      	str	r2, [r3, #0]
1000dc50:	bd10      	pop	{r4, pc}
1000dc52:	46c0      	nop			; (mov r8, r8)
1000dc54:	10011705 	.word	0x10011705
1000dc58:	10016444 	.word	0x10016444
1000dc5c:	10016240 	.word	0x10016240
1000dc60:	10016244 	.word	0x10016244
1000dc64:	100138d4 	.word	0x100138d4
1000dc68:	10015398 	.word	0x10015398
1000dc6c:	1001539c 	.word	0x1001539c

1000dc70 <platform_cmd_cmpl_signal>:
1000dc70:	2201      	movs	r2, #1
1000dc72:	4b01      	ldr	r3, [pc, #4]	; (1000dc78 <platform_cmd_cmpl_signal+0x8>)
1000dc74:	601a      	str	r2, [r3, #0]
1000dc76:	4770      	bx	lr
1000dc78:	100153a0 	.word	0x100153a0

1000dc7c <platform_cmd_cmpl_wait>:
1000dc7c:	b510      	push	{r4, lr}
1000dc7e:	1c04      	adds	r4, r0, #0
1000dc80:	4b07      	ldr	r3, [pc, #28]	; (1000dca0 <platform_cmd_cmpl_wait+0x24>)
1000dc82:	681a      	ldr	r2, [r3, #0]
1000dc84:	2a01      	cmp	r2, #1
1000dc86:	d003      	beq.n	1000dc90 <platform_cmd_cmpl_wait+0x14>
1000dc88:	4b06      	ldr	r3, [pc, #24]	; (1000dca4 <platform_cmd_cmpl_wait+0x28>)
1000dc8a:	2000      	movs	r0, #0
1000dc8c:	4798      	blx	r3
1000dc8e:	e7f7      	b.n	1000dc80 <platform_cmd_cmpl_wait+0x4>
1000dc90:	6819      	ldr	r1, [r3, #0]
1000dc92:	2901      	cmp	r1, #1
1000dc94:	d102      	bne.n	1000dc9c <platform_cmd_cmpl_wait+0x20>
1000dc96:	2200      	movs	r2, #0
1000dc98:	601a      	str	r2, [r3, #0]
1000dc9a:	e000      	b.n	1000dc9e <platform_cmd_cmpl_wait+0x22>
1000dc9c:	7022      	strb	r2, [r4, #0]
1000dc9e:	bd10      	pop	{r4, pc}
1000dca0:	100153a0 	.word	0x100153a0
1000dca4:	1000b545 	.word	0x1000b545

1000dca8 <start_timer>:
1000dca8:	4770      	bx	lr

1000dcaa <stop_timer>:
1000dcaa:	4770      	bx	lr

1000dcac <dbg_le_set_bd_addr_req_handler>:
1000dcac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dcae:	466b      	mov	r3, sp
1000dcb0:	1dde      	adds	r6, r3, #7
1000dcb2:	2300      	movs	r3, #0
1000dcb4:	7033      	strb	r3, [r6, #0]
1000dcb6:	230f      	movs	r3, #15
1000dcb8:	4c13      	ldr	r4, [pc, #76]	; (1000dd08 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000dcba:	2703      	movs	r7, #3
1000dcbc:	7023      	strb	r3, [r4, #0]
1000dcbe:	2300      	movs	r3, #0
1000dcc0:	70e3      	strb	r3, [r4, #3]
1000dcc2:	4b12      	ldr	r3, [pc, #72]	; (1000dd0c <dbg_le_set_bd_addr_req_handler+0x60>)
1000dcc4:	1c01      	adds	r1, r0, #0
1000dcc6:	881a      	ldrh	r2, [r3, #0]
1000dcc8:	881b      	ldrh	r3, [r3, #0]
1000dcca:	7122      	strb	r2, [r4, #4]
1000dccc:	0a1b      	lsrs	r3, r3, #8
1000dcce:	2206      	movs	r2, #6
1000dcd0:	7163      	strb	r3, [r4, #5]
1000dcd2:	480f      	ldr	r0, [pc, #60]	; (1000dd10 <dbg_le_set_bd_addr_req_handler+0x64>)
1000dcd4:	4b0f      	ldr	r3, [pc, #60]	; (1000dd14 <dbg_le_set_bd_addr_req_handler+0x68>)
1000dcd6:	7067      	strb	r7, [r4, #1]
1000dcd8:	70a7      	strb	r7, [r4, #2]
1000dcda:	4798      	blx	r3
1000dcdc:	4d0e      	ldr	r5, [pc, #56]	; (1000dd18 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000dcde:	4b0f      	ldr	r3, [pc, #60]	; (1000dd1c <dbg_le_set_bd_addr_req_handler+0x70>)
1000dce0:	210e      	movs	r1, #14
1000dce2:	802b      	strh	r3, [r5, #0]
1000dce4:	2306      	movs	r3, #6
1000dce6:	71a3      	strb	r3, [r4, #6]
1000dce8:	2300      	movs	r3, #0
1000dcea:	1c20      	adds	r0, r4, #0
1000dcec:	71e3      	strb	r3, [r4, #7]
1000dcee:	4b0c      	ldr	r3, [pc, #48]	; (1000dd20 <dbg_le_set_bd_addr_req_handler+0x74>)
1000dcf0:	80af      	strh	r7, [r5, #4]
1000dcf2:	4798      	blx	r3
1000dcf4:	1c30      	adds	r0, r6, #0
1000dcf6:	4b0b      	ldr	r3, [pc, #44]	; (1000dd24 <dbg_le_set_bd_addr_req_handler+0x78>)
1000dcf8:	4798      	blx	r3
1000dcfa:	7833      	ldrb	r3, [r6, #0]
1000dcfc:	20e2      	movs	r0, #226	; 0xe2
1000dcfe:	2b00      	cmp	r3, #0
1000dd00:	d101      	bne.n	1000dd06 <dbg_le_set_bd_addr_req_handler+0x5a>
1000dd02:	68ab      	ldr	r3, [r5, #8]
1000dd04:	7818      	ldrb	r0, [r3, #0]
1000dd06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dd08:	10016444 	.word	0x10016444
1000dd0c:	100160d4 	.word	0x100160d4
1000dd10:	1001644c 	.word	0x1001644c
1000dd14:	100116f3 	.word	0x100116f3
1000dd18:	100160c8 	.word	0x100160c8
1000dd1c:	00000329 	.word	0x00000329
1000dd20:	1000dc19 	.word	0x1000dc19
1000dd24:	1000dc7d 	.word	0x1000dc7d

1000dd28 <dbg_wr_mem_req_handler>:
1000dd28:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd2a:	b085      	sub	sp, #20
1000dd2c:	1c15      	adds	r5, r2, #0
1000dd2e:	aa0a      	add	r2, sp, #40	; 0x28
1000dd30:	7812      	ldrb	r2, [r2, #0]
1000dd32:	4c23      	ldr	r4, [pc, #140]	; (1000ddc0 <dbg_wr_mem_req_handler+0x98>)
1000dd34:	9201      	str	r2, [sp, #4]
1000dd36:	aa02      	add	r2, sp, #8
1000dd38:	1dd6      	adds	r6, r2, #7
1000dd3a:	2200      	movs	r2, #0
1000dd3c:	7032      	strb	r2, [r6, #0]
1000dd3e:	2201      	movs	r2, #1
1000dd40:	7022      	strb	r2, [r4, #0]
1000dd42:	2200      	movs	r2, #0
1000dd44:	70e2      	strb	r2, [r4, #3]
1000dd46:	4a1f      	ldr	r2, [pc, #124]	; (1000ddc4 <dbg_wr_mem_req_handler+0x9c>)
1000dd48:	9300      	str	r3, [sp, #0]
1000dd4a:	8813      	ldrh	r3, [r2, #0]
1000dd4c:	2703      	movs	r7, #3
1000dd4e:	7123      	strb	r3, [r4, #4]
1000dd50:	466b      	mov	r3, sp
1000dd52:	8812      	ldrh	r2, [r2, #0]
1000dd54:	781b      	ldrb	r3, [r3, #0]
1000dd56:	0a12      	lsrs	r2, r2, #8
1000dd58:	7162      	strb	r2, [r4, #5]
1000dd5a:	0a02      	lsrs	r2, r0, #8
1000dd5c:	7220      	strb	r0, [r4, #8]
1000dd5e:	7262      	strb	r2, [r4, #9]
1000dd60:	0c02      	lsrs	r2, r0, #16
1000dd62:	0e00      	lsrs	r0, r0, #24
1000dd64:	72a2      	strb	r2, [r4, #10]
1000dd66:	72e0      	strb	r0, [r4, #11]
1000dd68:	7323      	strb	r3, [r4, #12]
1000dd6a:	1c2a      	adds	r2, r5, #0
1000dd6c:	4b16      	ldr	r3, [pc, #88]	; (1000ddc8 <dbg_wr_mem_req_handler+0xa0>)
1000dd6e:	4817      	ldr	r0, [pc, #92]	; (1000ddcc <dbg_wr_mem_req_handler+0xa4>)
1000dd70:	7067      	strb	r7, [r4, #1]
1000dd72:	70a7      	strb	r7, [r4, #2]
1000dd74:	7365      	strb	r5, [r4, #13]
1000dd76:	4798      	blx	r3
1000dd78:	1c29      	adds	r1, r5, #0
1000dd7a:	310e      	adds	r1, #14
1000dd7c:	1c0b      	adds	r3, r1, #0
1000dd7e:	9801      	ldr	r0, [sp, #4]
1000dd80:	3b08      	subs	r3, #8
1000dd82:	4a13      	ldr	r2, [pc, #76]	; (1000ddd0 <dbg_wr_mem_req_handler+0xa8>)
1000dd84:	2801      	cmp	r0, #1
1000dd86:	d012      	beq.n	1000ddae <dbg_wr_mem_req_handler+0x86>
1000dd88:	4d12      	ldr	r5, [pc, #72]	; (1000ddd4 <dbg_wr_mem_req_handler+0xac>)
1000dd8a:	4813      	ldr	r0, [pc, #76]	; (1000ddd8 <dbg_wr_mem_req_handler+0xb0>)
1000dd8c:	71a3      	strb	r3, [r4, #6]
1000dd8e:	8028      	strh	r0, [r5, #0]
1000dd90:	121b      	asrs	r3, r3, #8
1000dd92:	1c20      	adds	r0, r4, #0
1000dd94:	71e3      	strb	r3, [r4, #7]
1000dd96:	80af      	strh	r7, [r5, #4]
1000dd98:	4790      	blx	r2
1000dd9a:	1c30      	adds	r0, r6, #0
1000dd9c:	4b0f      	ldr	r3, [pc, #60]	; (1000dddc <dbg_wr_mem_req_handler+0xb4>)
1000dd9e:	4798      	blx	r3
1000dda0:	7833      	ldrb	r3, [r6, #0]
1000dda2:	20e2      	movs	r0, #226	; 0xe2
1000dda4:	2b00      	cmp	r3, #0
1000dda6:	d108      	bne.n	1000ddba <dbg_wr_mem_req_handler+0x92>
1000dda8:	68ab      	ldr	r3, [r5, #8]
1000ddaa:	7818      	ldrb	r0, [r3, #0]
1000ddac:	e005      	b.n	1000ddba <dbg_wr_mem_req_handler+0x92>
1000ddae:	71a3      	strb	r3, [r4, #6]
1000ddb0:	1c20      	adds	r0, r4, #0
1000ddb2:	121b      	asrs	r3, r3, #8
1000ddb4:	71e3      	strb	r3, [r4, #7]
1000ddb6:	4790      	blx	r2
1000ddb8:	2000      	movs	r0, #0
1000ddba:	b005      	add	sp, #20
1000ddbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ddbe:	46c0      	nop			; (mov r8, r8)
1000ddc0:	10016444 	.word	0x10016444
1000ddc4:	100160d4 	.word	0x100160d4
1000ddc8:	100116f3 	.word	0x100116f3
1000ddcc:	10016452 	.word	0x10016452
1000ddd0:	1000dc19 	.word	0x1000dc19
1000ddd4:	100160c8 	.word	0x100160c8
1000ddd8:	0000031a 	.word	0x0000031a
1000dddc:	1000dc7d 	.word	0x1000dc7d

1000dde0 <gapc_get_dev_info_cfm.constprop.1>:
1000dde0:	b538      	push	{r3, r4, r5, lr}
1000dde2:	230b      	movs	r3, #11
1000dde4:	4c27      	ldr	r4, [pc, #156]	; (1000de84 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000dde6:	7023      	strb	r3, [r4, #0]
1000dde8:	3303      	adds	r3, #3
1000ddea:	7063      	strb	r3, [r4, #1]
1000ddec:	3329      	adds	r3, #41	; 0x29
1000ddee:	70a3      	strb	r3, [r4, #2]
1000ddf0:	4b25      	ldr	r3, [pc, #148]	; (1000de88 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000ddf2:	70e1      	strb	r1, [r4, #3]
1000ddf4:	881a      	ldrh	r2, [r3, #0]
1000ddf6:	881b      	ldrh	r3, [r3, #0]
1000ddf8:	7122      	strb	r2, [r4, #4]
1000ddfa:	0a1b      	lsrs	r3, r3, #8
1000ddfc:	7163      	strb	r3, [r4, #5]
1000ddfe:	2300      	movs	r3, #0
1000de00:	7220      	strb	r0, [r4, #8]
1000de02:	7263      	strb	r3, [r4, #9]
1000de04:	2801      	cmp	r0, #1
1000de06:	d02b      	beq.n	1000de60 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000de08:	4298      	cmp	r0, r3
1000de0a:	d01b      	beq.n	1000de44 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000de0c:	2802      	cmp	r0, #2
1000de0e:	d12f      	bne.n	1000de70 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000de10:	4b1e      	ldr	r3, [pc, #120]	; (1000de8c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000de12:	2112      	movs	r1, #18
1000de14:	1c1a      	adds	r2, r3, #0
1000de16:	32ce      	adds	r2, #206	; 0xce
1000de18:	8812      	ldrh	r2, [r2, #0]
1000de1a:	72a2      	strb	r2, [r4, #10]
1000de1c:	0a12      	lsrs	r2, r2, #8
1000de1e:	72e2      	strb	r2, [r4, #11]
1000de20:	1c1a      	adds	r2, r3, #0
1000de22:	32d0      	adds	r2, #208	; 0xd0
1000de24:	8812      	ldrh	r2, [r2, #0]
1000de26:	7322      	strb	r2, [r4, #12]
1000de28:	0a12      	lsrs	r2, r2, #8
1000de2a:	7362      	strb	r2, [r4, #13]
1000de2c:	1c1a      	adds	r2, r3, #0
1000de2e:	32d2      	adds	r2, #210	; 0xd2
1000de30:	8812      	ldrh	r2, [r2, #0]
1000de32:	33d4      	adds	r3, #212	; 0xd4
1000de34:	73a2      	strb	r2, [r4, #14]
1000de36:	0a12      	lsrs	r2, r2, #8
1000de38:	73e2      	strb	r2, [r4, #15]
1000de3a:	881b      	ldrh	r3, [r3, #0]
1000de3c:	7423      	strb	r3, [r4, #16]
1000de3e:	0a1b      	lsrs	r3, r3, #8
1000de40:	7463      	strb	r3, [r4, #17]
1000de42:	e016      	b.n	1000de72 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000de44:	4b11      	ldr	r3, [pc, #68]	; (1000de8c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000de46:	4912      	ldr	r1, [pc, #72]	; (1000de90 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000de48:	33aa      	adds	r3, #170	; 0xaa
1000de4a:	881d      	ldrh	r5, [r3, #0]
1000de4c:	4811      	ldr	r0, [pc, #68]	; (1000de94 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000de4e:	0a2b      	lsrs	r3, r5, #8
1000de50:	72a5      	strb	r5, [r4, #10]
1000de52:	72e3      	strb	r3, [r4, #11]
1000de54:	1c2a      	adds	r2, r5, #0
1000de56:	4b10      	ldr	r3, [pc, #64]	; (1000de98 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000de58:	350c      	adds	r5, #12
1000de5a:	4798      	blx	r3
1000de5c:	b2a9      	uxth	r1, r5
1000de5e:	e008      	b.n	1000de72 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000de60:	4b0a      	ldr	r3, [pc, #40]	; (1000de8c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000de62:	210c      	movs	r1, #12
1000de64:	33cc      	adds	r3, #204	; 0xcc
1000de66:	881b      	ldrh	r3, [r3, #0]
1000de68:	72a3      	strb	r3, [r4, #10]
1000de6a:	0a1b      	lsrs	r3, r3, #8
1000de6c:	72e3      	strb	r3, [r4, #11]
1000de6e:	e000      	b.n	1000de72 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000de70:	210a      	movs	r1, #10
1000de72:	1c0b      	adds	r3, r1, #0
1000de74:	3b08      	subs	r3, #8
1000de76:	71a3      	strb	r3, [r4, #6]
1000de78:	121b      	asrs	r3, r3, #8
1000de7a:	71e3      	strb	r3, [r4, #7]
1000de7c:	1c20      	adds	r0, r4, #0
1000de7e:	4b07      	ldr	r3, [pc, #28]	; (1000de9c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000de80:	4798      	blx	r3
1000de82:	bd38      	pop	{r3, r4, r5, pc}
1000de84:	10016444 	.word	0x10016444
1000de88:	100160d4 	.word	0x100160d4
1000de8c:	10016166 	.word	0x10016166
1000de90:	10016212 	.word	0x10016212
1000de94:	10016450 	.word	0x10016450
1000de98:	100116f3 	.word	0x100116f3
1000de9c:	1000dc19 	.word	0x1000dc19

1000dea0 <check_ConnData_idx_role>:
1000dea0:	4b0c      	ldr	r3, [pc, #48]	; (1000ded4 <check_ConnData_idx_role+0x34>)
1000dea2:	b570      	push	{r4, r5, r6, lr}
1000dea4:	1c04      	adds	r4, r0, #0
1000dea6:	2008      	movs	r0, #8
1000dea8:	429c      	cmp	r4, r3
1000deaa:	d011      	beq.n	1000ded0 <check_ConnData_idx_role+0x30>
1000deac:	2300      	movs	r3, #0
1000deae:	2212      	movs	r2, #18
1000deb0:	435a      	muls	r2, r3
1000deb2:	4d09      	ldr	r5, [pc, #36]	; (1000ded8 <check_ConnData_idx_role+0x38>)
1000deb4:	b2d8      	uxtb	r0, r3
1000deb6:	1956      	adds	r6, r2, r5
1000deb8:	8976      	ldrh	r6, [r6, #10]
1000deba:	42a6      	cmp	r6, r4
1000debc:	d104      	bne.n	1000dec8 <check_ConnData_idx_role+0x28>
1000debe:	2900      	cmp	r1, #0
1000dec0:	d006      	beq.n	1000ded0 <check_ConnData_idx_role+0x30>
1000dec2:	5d53      	ldrb	r3, [r2, r5]
1000dec4:	700b      	strb	r3, [r1, #0]
1000dec6:	e003      	b.n	1000ded0 <check_ConnData_idx_role+0x30>
1000dec8:	3301      	adds	r3, #1
1000deca:	2b08      	cmp	r3, #8
1000decc:	d1ef      	bne.n	1000deae <check_ConnData_idx_role+0xe>
1000dece:	1c18      	adds	r0, r3, #0
1000ded0:	bd70      	pop	{r4, r5, r6, pc}
1000ded2:	46c0      	nop			; (mov r8, r8)
1000ded4:	0000ffff 	.word	0x0000ffff
1000ded8:	100160d6 	.word	0x100160d6

1000dedc <check_ConnData_emptyEntry>:
1000dedc:	2300      	movs	r3, #0
1000dede:	2212      	movs	r2, #18
1000dee0:	435a      	muls	r2, r3
1000dee2:	4906      	ldr	r1, [pc, #24]	; (1000defc <check_ConnData_emptyEntry+0x20>)
1000dee4:	b2d8      	uxtb	r0, r3
1000dee6:	1852      	adds	r2, r2, r1
1000dee8:	8951      	ldrh	r1, [r2, #10]
1000deea:	4a05      	ldr	r2, [pc, #20]	; (1000df00 <check_ConnData_emptyEntry+0x24>)
1000deec:	4291      	cmp	r1, r2
1000deee:	d003      	beq.n	1000def8 <check_ConnData_emptyEntry+0x1c>
1000def0:	3301      	adds	r3, #1
1000def2:	2b08      	cmp	r3, #8
1000def4:	d1f3      	bne.n	1000dede <check_ConnData_emptyEntry+0x2>
1000def6:	1c18      	adds	r0, r3, #0
1000def8:	4770      	bx	lr
1000defa:	46c0      	nop			; (mov r8, r8)
1000defc:	100160d6 	.word	0x100160d6
1000df00:	0000ffff 	.word	0x0000ffff

1000df04 <gapc_cmp_evt>:
1000df04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000df06:	780b      	ldrb	r3, [r1, #0]
1000df08:	1c05      	adds	r5, r0, #0
1000df0a:	1e58      	subs	r0, r3, #1
1000df0c:	784e      	ldrb	r6, [r1, #1]
1000df0e:	280f      	cmp	r0, #15
1000df10:	d85a      	bhi.n	1000dfc8 <gapc_cmp_evt+0xc4>
1000df12:	1c14      	adds	r4, r2, #0
1000df14:	f001 fcd2 	bl	1000f8bc <__gnu_thumb1_case_uqi>
1000df18:	5858440a 	.word	0x5858440a
1000df1c:	4b584444 	.word	0x4b584444
1000df20:	0825122d 	.word	0x0825122d
1000df24:	3e395858 	.word	0x3e395858
1000df28:	203b      	movs	r0, #59	; 0x3b
1000df2a:	e04e      	b.n	1000dfca <gapc_cmp_evt+0xc6>
1000df2c:	203b      	movs	r0, #59	; 0x3b
1000df2e:	2e00      	cmp	r6, #0
1000df30:	d04b      	beq.n	1000dfca <gapc_cmp_evt+0xc6>
1000df32:	0a2d      	lsrs	r5, r5, #8
1000df34:	8015      	strh	r5, [r2, #0]
1000df36:	7096      	strb	r6, [r2, #2]
1000df38:	3835      	subs	r0, #53	; 0x35
1000df3a:	e046      	b.n	1000dfca <gapc_cmp_evt+0xc6>
1000df3c:	466b      	mov	r3, sp
1000df3e:	1ddf      	adds	r7, r3, #7
1000df40:	2301      	movs	r3, #1
1000df42:	0a2d      	lsrs	r5, r5, #8
1000df44:	703b      	strb	r3, [r7, #0]
1000df46:	1c28      	adds	r0, r5, #0
1000df48:	1c39      	adds	r1, r7, #0
1000df4a:	4b20      	ldr	r3, [pc, #128]	; (1000dfcc <gapc_cmp_evt+0xc8>)
1000df4c:	4798      	blx	r3
1000df4e:	2807      	cmp	r0, #7
1000df50:	d803      	bhi.n	1000df5a <gapc_cmp_evt+0x56>
1000df52:	783b      	ldrb	r3, [r7, #0]
1000df54:	203b      	movs	r0, #59	; 0x3b
1000df56:	2b00      	cmp	r3, #0
1000df58:	d037      	beq.n	1000dfca <gapc_cmp_evt+0xc6>
1000df5a:	8065      	strh	r5, [r4, #2]
1000df5c:	7126      	strb	r6, [r4, #4]
1000df5e:	2009      	movs	r0, #9
1000df60:	e033      	b.n	1000dfca <gapc_cmp_evt+0xc6>
1000df62:	203b      	movs	r0, #59	; 0x3b
1000df64:	2e00      	cmp	r6, #0
1000df66:	d030      	beq.n	1000dfca <gapc_cmp_evt+0xc6>
1000df68:	0a2d      	lsrs	r5, r5, #8
1000df6a:	8015      	strh	r5, [r2, #0]
1000df6c:	7096      	strb	r6, [r2, #2]
1000df6e:	382d      	subs	r0, #45	; 0x2d
1000df70:	e02b      	b.n	1000dfca <gapc_cmp_evt+0xc6>
1000df72:	203b      	movs	r0, #59	; 0x3b
1000df74:	2e00      	cmp	r6, #0
1000df76:	d028      	beq.n	1000dfca <gapc_cmp_evt+0xc6>
1000df78:	2300      	movs	r3, #0
1000df7a:	0a2d      	lsrs	r5, r5, #8
1000df7c:	8015      	strh	r5, [r2, #0]
1000df7e:	7096      	strb	r6, [r2, #2]
1000df80:	8093      	strh	r3, [r2, #4]
1000df82:	80d3      	strh	r3, [r2, #6]
1000df84:	8113      	strh	r3, [r2, #8]
1000df86:	3834      	subs	r0, #52	; 0x34
1000df88:	e01f      	b.n	1000dfca <gapc_cmp_evt+0xc6>
1000df8a:	203b      	movs	r0, #59	; 0x3b
1000df8c:	2e00      	cmp	r6, #0
1000df8e:	d01c      	beq.n	1000dfca <gapc_cmp_evt+0xc6>
1000df90:	7216      	strb	r6, [r2, #8]
1000df92:	e003      	b.n	1000df9c <gapc_cmp_evt+0x98>
1000df94:	203b      	movs	r0, #59	; 0x3b
1000df96:	2e00      	cmp	r6, #0
1000df98:	d017      	beq.n	1000dfca <gapc_cmp_evt+0xc6>
1000df9a:	7116      	strb	r6, [r2, #4]
1000df9c:	3812      	subs	r0, #18
1000df9e:	e014      	b.n	1000dfca <gapc_cmp_evt+0xc6>
1000dfa0:	203b      	movs	r0, #59	; 0x3b
1000dfa2:	2e00      	cmp	r6, #0
1000dfa4:	d011      	beq.n	1000dfca <gapc_cmp_evt+0xc6>
1000dfa6:	7093      	strb	r3, [r2, #2]
1000dfa8:	70d6      	strb	r6, [r2, #3]
1000dfaa:	382a      	subs	r0, #42	; 0x2a
1000dfac:	e00d      	b.n	1000dfca <gapc_cmp_evt+0xc6>
1000dfae:	203b      	movs	r0, #59	; 0x3b
1000dfb0:	2e00      	cmp	r6, #0
1000dfb2:	d00a      	beq.n	1000dfca <gapc_cmp_evt+0xc6>
1000dfb4:	0a2d      	lsrs	r5, r5, #8
1000dfb6:	7016      	strb	r6, [r2, #0]
1000dfb8:	8055      	strh	r5, [r2, #2]
1000dfba:	1d10      	adds	r0, r2, #4
1000dfbc:	2100      	movs	r1, #0
1000dfbe:	2205      	movs	r2, #5
1000dfc0:	4b03      	ldr	r3, [pc, #12]	; (1000dfd0 <gapc_cmp_evt+0xcc>)
1000dfc2:	4798      	blx	r3
1000dfc4:	2012      	movs	r0, #18
1000dfc6:	e000      	b.n	1000dfca <gapc_cmp_evt+0xc6>
1000dfc8:	2000      	movs	r0, #0
1000dfca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dfcc:	1000dea1 	.word	0x1000dea1
1000dfd0:	10011705 	.word	0x10011705

1000dfd4 <gapc_connection_cfm_handler>:
1000dfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfd6:	b085      	sub	sp, #20
1000dfd8:	1c1d      	adds	r5, r3, #0
1000dfda:	ab0a      	add	r3, sp, #40	; 0x28
1000dfdc:	781b      	ldrb	r3, [r3, #0]
1000dfde:	9201      	str	r2, [sp, #4]
1000dfe0:	9302      	str	r3, [sp, #8]
1000dfe2:	ab0b      	add	r3, sp, #44	; 0x2c
1000dfe4:	781b      	ldrb	r3, [r3, #0]
1000dfe6:	1c07      	adds	r7, r0, #0
1000dfe8:	9303      	str	r3, [sp, #12]
1000dfea:	ab0c      	add	r3, sp, #48	; 0x30
1000dfec:	881a      	ldrh	r2, [r3, #0]
1000dfee:	2302      	movs	r3, #2
1000dff0:	1c0e      	adds	r6, r1, #0
1000dff2:	4c23      	ldr	r4, [pc, #140]	; (1000e080 <gapc_connection_cfm_handler+0xac>)
1000dff4:	1c39      	adds	r1, r7, #0
1000dff6:	7023      	strb	r3, [r4, #0]
1000dff8:	330c      	adds	r3, #12
1000dffa:	7063      	strb	r3, [r4, #1]
1000dffc:	70a3      	strb	r3, [r4, #2]
1000dffe:	4b21      	ldr	r3, [pc, #132]	; (1000e084 <gapc_connection_cfm_handler+0xb0>)
1000e000:	70e2      	strb	r2, [r4, #3]
1000e002:	881a      	ldrh	r2, [r3, #0]
1000e004:	881b      	ldrh	r3, [r3, #0]
1000e006:	7122      	strb	r2, [r4, #4]
1000e008:	0a1b      	lsrs	r3, r3, #8
1000e00a:	4f1f      	ldr	r7, [pc, #124]	; (1000e088 <gapc_connection_cfm_handler+0xb4>)
1000e00c:	2210      	movs	r2, #16
1000e00e:	481f      	ldr	r0, [pc, #124]	; (1000e08c <gapc_connection_cfm_handler+0xb8>)
1000e010:	7163      	strb	r3, [r4, #5]
1000e012:	47b8      	blx	r7
1000e014:	0a33      	lsrs	r3, r6, #8
1000e016:	7626      	strb	r6, [r4, #24]
1000e018:	7663      	strb	r3, [r4, #25]
1000e01a:	9901      	ldr	r1, [sp, #4]
1000e01c:	0c33      	lsrs	r3, r6, #16
1000e01e:	2210      	movs	r2, #16
1000e020:	0e36      	lsrs	r6, r6, #24
1000e022:	481b      	ldr	r0, [pc, #108]	; (1000e090 <gapc_connection_cfm_handler+0xbc>)
1000e024:	76a3      	strb	r3, [r4, #26]
1000e026:	76e6      	strb	r6, [r4, #27]
1000e028:	47b8      	blx	r7
1000e02a:	1c23      	adds	r3, r4, #0
1000e02c:	332c      	adds	r3, #44	; 0x2c
1000e02e:	701d      	strb	r5, [r3, #0]
1000e030:	1c23      	adds	r3, r4, #0
1000e032:	0a2a      	lsrs	r2, r5, #8
1000e034:	332d      	adds	r3, #45	; 0x2d
1000e036:	701a      	strb	r2, [r3, #0]
1000e038:	1c23      	adds	r3, r4, #0
1000e03a:	0c2a      	lsrs	r2, r5, #16
1000e03c:	332e      	adds	r3, #46	; 0x2e
1000e03e:	701a      	strb	r2, [r3, #0]
1000e040:	1c23      	adds	r3, r4, #0
1000e042:	0e2d      	lsrs	r5, r5, #24
1000e044:	332f      	adds	r3, #47	; 0x2f
1000e046:	466a      	mov	r2, sp
1000e048:	701d      	strb	r5, [r3, #0]
1000e04a:	1c23      	adds	r3, r4, #0
1000e04c:	7a12      	ldrb	r2, [r2, #8]
1000e04e:	3330      	adds	r3, #48	; 0x30
1000e050:	701a      	strb	r2, [r3, #0]
1000e052:	1c23      	adds	r3, r4, #0
1000e054:	2500      	movs	r5, #0
1000e056:	3331      	adds	r3, #49	; 0x31
1000e058:	466a      	mov	r2, sp
1000e05a:	701d      	strb	r5, [r3, #0]
1000e05c:	1c23      	adds	r3, r4, #0
1000e05e:	7b12      	ldrb	r2, [r2, #12]
1000e060:	3332      	adds	r3, #50	; 0x32
1000e062:	701a      	strb	r2, [r3, #0]
1000e064:	1c23      	adds	r3, r4, #0
1000e066:	3333      	adds	r3, #51	; 0x33
1000e068:	701d      	strb	r5, [r3, #0]
1000e06a:	232c      	movs	r3, #44	; 0x2c
1000e06c:	1c20      	adds	r0, r4, #0
1000e06e:	71a3      	strb	r3, [r4, #6]
1000e070:	2134      	movs	r1, #52	; 0x34
1000e072:	4b08      	ldr	r3, [pc, #32]	; (1000e094 <gapc_connection_cfm_handler+0xc0>)
1000e074:	71e5      	strb	r5, [r4, #7]
1000e076:	4798      	blx	r3
1000e078:	1c28      	adds	r0, r5, #0
1000e07a:	b005      	add	sp, #20
1000e07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e07e:	46c0      	nop			; (mov r8, r8)
1000e080:	10016444 	.word	0x10016444
1000e084:	100160d4 	.word	0x100160d4
1000e088:	100116f3 	.word	0x100116f3
1000e08c:	1001644c 	.word	0x1001644c
1000e090:	10016460 	.word	0x10016460
1000e094:	1000dc19 	.word	0x1000dc19

1000e098 <gapc_con_req_ind>:
1000e098:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e09a:	7845      	ldrb	r5, [r0, #1]
1000e09c:	7803      	ldrb	r3, [r0, #0]
1000e09e:	4c30      	ldr	r4, [pc, #192]	; (1000e160 <gapc_con_req_ind+0xc8>)
1000e0a0:	022d      	lsls	r5, r5, #8
1000e0a2:	431d      	orrs	r5, r3
1000e0a4:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000e0a6:	78c3      	ldrb	r3, [r0, #3]
1000e0a8:	7882      	ldrb	r2, [r0, #2]
1000e0aa:	b08b      	sub	sp, #44	; 0x2c
1000e0ac:	021b      	lsls	r3, r3, #8
1000e0ae:	431a      	orrs	r2, r3
1000e0b0:	466b      	mov	r3, sp
1000e0b2:	9205      	str	r2, [sp, #20]
1000e0b4:	8a9b      	ldrh	r3, [r3, #20]
1000e0b6:	2120      	movs	r1, #32
1000e0b8:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000e0ba:	7943      	ldrb	r3, [r0, #5]
1000e0bc:	7902      	ldrb	r2, [r0, #4]
1000e0be:	021b      	lsls	r3, r3, #8
1000e0c0:	431a      	orrs	r2, r3
1000e0c2:	466b      	mov	r3, sp
1000e0c4:	9206      	str	r2, [sp, #24]
1000e0c6:	8b1b      	ldrh	r3, [r3, #24]
1000e0c8:	1c06      	adds	r6, r0, #0
1000e0ca:	8623      	strh	r3, [r4, #48]	; 0x30
1000e0cc:	79c3      	ldrb	r3, [r0, #7]
1000e0ce:	7982      	ldrb	r2, [r0, #6]
1000e0d0:	021b      	lsls	r3, r3, #8
1000e0d2:	431a      	orrs	r2, r3
1000e0d4:	466b      	mov	r3, sp
1000e0d6:	9207      	str	r2, [sp, #28]
1000e0d8:	466a      	mov	r2, sp
1000e0da:	8b9b      	ldrh	r3, [r3, #28]
1000e0dc:	1852      	adds	r2, r2, r1
1000e0de:	8663      	strh	r3, [r4, #50]	; 0x32
1000e0e0:	7a43      	ldrb	r3, [r0, #9]
1000e0e2:	1c01      	adds	r1, r0, #0
1000e0e4:	9308      	str	r3, [sp, #32]
1000e0e6:	1c23      	adds	r3, r4, #0
1000e0e8:	7812      	ldrb	r2, [r2, #0]
1000e0ea:	3377      	adds	r3, #119	; 0x77
1000e0ec:	3478      	adds	r4, #120	; 0x78
1000e0ee:	701a      	strb	r2, [r3, #0]
1000e0f0:	310a      	adds	r1, #10
1000e0f2:	2206      	movs	r2, #6
1000e0f4:	4b1b      	ldr	r3, [pc, #108]	; (1000e164 <gapc_con_req_ind+0xcc>)
1000e0f6:	1c20      	adds	r0, r4, #0
1000e0f8:	4798      	blx	r3
1000e0fa:	7c33      	ldrb	r3, [r6, #16]
1000e0fc:	9309      	str	r3, [sp, #36]	; 0x24
1000e0fe:	4b1a      	ldr	r3, [pc, #104]	; (1000e168 <gapc_con_req_ind+0xd0>)
1000e100:	4798      	blx	r3
1000e102:	4e1a      	ldr	r6, [pc, #104]	; (1000e16c <gapc_con_req_ind+0xd4>)
1000e104:	1e07      	subs	r7, r0, #0
1000e106:	2f07      	cmp	r7, #7
1000e108:	d81b      	bhi.n	1000e142 <gapc_con_req_ind+0xaa>
1000e10a:	2312      	movs	r3, #18
1000e10c:	4343      	muls	r3, r0
1000e10e:	18f0      	adds	r0, r6, r3
1000e110:	8145      	strh	r5, [r0, #10]
1000e112:	4669      	mov	r1, sp
1000e114:	2524      	movs	r5, #36	; 0x24
1000e116:	1949      	adds	r1, r1, r5
1000e118:	7809      	ldrb	r1, [r1, #0]
1000e11a:	2206      	movs	r2, #6
1000e11c:	54f1      	strb	r1, [r6, r3]
1000e11e:	2120      	movs	r1, #32
1000e120:	466b      	mov	r3, sp
1000e122:	185b      	adds	r3, r3, r1
1000e124:	781b      	ldrb	r3, [r3, #0]
1000e126:	1c21      	adds	r1, r4, #0
1000e128:	7043      	strb	r3, [r0, #1]
1000e12a:	466b      	mov	r3, sp
1000e12c:	8a9b      	ldrh	r3, [r3, #20]
1000e12e:	3002      	adds	r0, #2
1000e130:	8143      	strh	r3, [r0, #10]
1000e132:	466b      	mov	r3, sp
1000e134:	8b1b      	ldrh	r3, [r3, #24]
1000e136:	8183      	strh	r3, [r0, #12]
1000e138:	466b      	mov	r3, sp
1000e13a:	8b9b      	ldrh	r3, [r3, #28]
1000e13c:	81c3      	strh	r3, [r0, #14]
1000e13e:	4b09      	ldr	r3, [pc, #36]	; (1000e164 <gapc_con_req_ind+0xcc>)
1000e140:	4798      	blx	r3
1000e142:	2112      	movs	r1, #18
1000e144:	2300      	movs	r3, #0
1000e146:	434f      	muls	r7, r1
1000e148:	9300      	str	r3, [sp, #0]
1000e14a:	9301      	str	r3, [sp, #4]
1000e14c:	19f6      	adds	r6, r6, r7
1000e14e:	8971      	ldrh	r1, [r6, #10]
1000e150:	4a07      	ldr	r2, [pc, #28]	; (1000e170 <gapc_con_req_ind+0xd8>)
1000e152:	9102      	str	r1, [sp, #8]
1000e154:	1c10      	adds	r0, r2, #0
1000e156:	1c19      	adds	r1, r3, #0
1000e158:	4c06      	ldr	r4, [pc, #24]	; (1000e174 <gapc_con_req_ind+0xdc>)
1000e15a:	47a0      	blx	r4
1000e15c:	b00b      	add	sp, #44	; 0x2c
1000e15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e160:	10016166 	.word	0x10016166
1000e164:	100116f3 	.word	0x100116f3
1000e168:	1000dedd 	.word	0x1000dedd
1000e16c:	100160d6 	.word	0x100160d6
1000e170:	100153a4 	.word	0x100153a4
1000e174:	1000dfd5 	.word	0x1000dfd5

1000e178 <gapc_disconnect_cmd_handler>:
1000e178:	2204      	movs	r2, #4
1000e17a:	b510      	push	{r4, lr}
1000e17c:	4b0c      	ldr	r3, [pc, #48]	; (1000e1b0 <gapc_disconnect_cmd_handler+0x38>)
1000e17e:	2400      	movs	r4, #0
1000e180:	701a      	strb	r2, [r3, #0]
1000e182:	320a      	adds	r2, #10
1000e184:	705a      	strb	r2, [r3, #1]
1000e186:	709a      	strb	r2, [r3, #2]
1000e188:	4a0a      	ldr	r2, [pc, #40]	; (1000e1b4 <gapc_disconnect_cmd_handler+0x3c>)
1000e18a:	70d9      	strb	r1, [r3, #3]
1000e18c:	8811      	ldrh	r1, [r2, #0]
1000e18e:	8812      	ldrh	r2, [r2, #0]
1000e190:	7119      	strb	r1, [r3, #4]
1000e192:	0a12      	lsrs	r2, r2, #8
1000e194:	715a      	strb	r2, [r3, #5]
1000e196:	2201      	movs	r2, #1
1000e198:	721a      	strb	r2, [r3, #8]
1000e19a:	1892      	adds	r2, r2, r2
1000e19c:	7258      	strb	r0, [r3, #9]
1000e19e:	719a      	strb	r2, [r3, #6]
1000e1a0:	71dc      	strb	r4, [r3, #7]
1000e1a2:	1c18      	adds	r0, r3, #0
1000e1a4:	210a      	movs	r1, #10
1000e1a6:	4b04      	ldr	r3, [pc, #16]	; (1000e1b8 <gapc_disconnect_cmd_handler+0x40>)
1000e1a8:	4798      	blx	r3
1000e1aa:	1c20      	adds	r0, r4, #0
1000e1ac:	bd10      	pop	{r4, pc}
1000e1ae:	46c0      	nop			; (mov r8, r8)
1000e1b0:	10016444 	.word	0x10016444
1000e1b4:	100160d4 	.word	0x100160d4
1000e1b8:	1000dc19 	.word	0x1000dc19

1000e1bc <gapc_disconnect_ind>:
1000e1bc:	1c02      	adds	r2, r0, #0
1000e1be:	b508      	push	{r3, lr}
1000e1c0:	7843      	ldrb	r3, [r0, #1]
1000e1c2:	7800      	ldrb	r0, [r0, #0]
1000e1c4:	021b      	lsls	r3, r3, #8
1000e1c6:	4318      	orrs	r0, r3
1000e1c8:	8008      	strh	r0, [r1, #0]
1000e1ca:	7893      	ldrb	r3, [r2, #2]
1000e1cc:	708b      	strb	r3, [r1, #2]
1000e1ce:	2100      	movs	r1, #0
1000e1d0:	4b05      	ldr	r3, [pc, #20]	; (1000e1e8 <gapc_disconnect_ind+0x2c>)
1000e1d2:	4798      	blx	r3
1000e1d4:	2807      	cmp	r0, #7
1000e1d6:	d806      	bhi.n	1000e1e6 <gapc_disconnect_ind+0x2a>
1000e1d8:	2312      	movs	r3, #18
1000e1da:	4358      	muls	r0, r3
1000e1dc:	4b03      	ldr	r3, [pc, #12]	; (1000e1ec <gapc_disconnect_ind+0x30>)
1000e1de:	1818      	adds	r0, r3, r0
1000e1e0:	2301      	movs	r3, #1
1000e1e2:	425b      	negs	r3, r3
1000e1e4:	8143      	strh	r3, [r0, #10]
1000e1e6:	bd08      	pop	{r3, pc}
1000e1e8:	1000dea1 	.word	0x1000dea1
1000e1ec:	100160d6 	.word	0x100160d6

1000e1f0 <gapc_bond_cmd_handler>:
1000e1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e1f2:	9300      	str	r3, [sp, #0]
1000e1f4:	2312      	movs	r3, #18
1000e1f6:	1c04      	adds	r4, r0, #0
1000e1f8:	a808      	add	r0, sp, #32
1000e1fa:	7807      	ldrb	r7, [r0, #0]
1000e1fc:	a809      	add	r0, sp, #36	; 0x24
1000e1fe:	7806      	ldrb	r6, [r0, #0]
1000e200:	a80a      	add	r0, sp, #40	; 0x28
1000e202:	7805      	ldrb	r5, [r0, #0]
1000e204:	a80b      	add	r0, sp, #44	; 0x2c
1000e206:	7800      	ldrb	r0, [r0, #0]
1000e208:	9001      	str	r0, [sp, #4]
1000e20a:	4810      	ldr	r0, [pc, #64]	; (1000e24c <gapc_bond_cmd_handler+0x5c>)
1000e20c:	7003      	strb	r3, [r0, #0]
1000e20e:	230e      	movs	r3, #14
1000e210:	70c4      	strb	r4, [r0, #3]
1000e212:	4c0f      	ldr	r4, [pc, #60]	; (1000e250 <gapc_bond_cmd_handler+0x60>)
1000e214:	7043      	strb	r3, [r0, #1]
1000e216:	7083      	strb	r3, [r0, #2]
1000e218:	8823      	ldrh	r3, [r4, #0]
1000e21a:	8824      	ldrh	r4, [r4, #0]
1000e21c:	7103      	strb	r3, [r0, #4]
1000e21e:	466b      	mov	r3, sp
1000e220:	781b      	ldrb	r3, [r3, #0]
1000e222:	0a24      	lsrs	r4, r4, #8
1000e224:	72c3      	strb	r3, [r0, #11]
1000e226:	466b      	mov	r3, sp
1000e228:	791b      	ldrb	r3, [r3, #4]
1000e22a:	7144      	strb	r4, [r0, #5]
1000e22c:	73c3      	strb	r3, [r0, #15]
1000e22e:	2308      	movs	r3, #8
1000e230:	7183      	strb	r3, [r0, #6]
1000e232:	2300      	movs	r3, #0
1000e234:	240a      	movs	r4, #10
1000e236:	7241      	strb	r1, [r0, #9]
1000e238:	71c3      	strb	r3, [r0, #7]
1000e23a:	2110      	movs	r1, #16
1000e23c:	4b05      	ldr	r3, [pc, #20]	; (1000e254 <gapc_bond_cmd_handler+0x64>)
1000e23e:	7307      	strb	r7, [r0, #12]
1000e240:	7346      	strb	r6, [r0, #13]
1000e242:	7385      	strb	r5, [r0, #14]
1000e244:	7204      	strb	r4, [r0, #8]
1000e246:	7282      	strb	r2, [r0, #10]
1000e248:	4798      	blx	r3
1000e24a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e24c:	10016444 	.word	0x10016444
1000e250:	100160d4 	.word	0x100160d4
1000e254:	1000dc19 	.word	0x1000dc19

1000e258 <gapc_bond_ind>:
1000e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e25a:	780e      	ldrb	r6, [r1, #0]
1000e25c:	1c03      	adds	r3, r0, #0
1000e25e:	1eb0      	subs	r0, r6, #2
1000e260:	2805      	cmp	r0, #5
1000e262:	d85d      	bhi.n	1000e320 <gapc_bond_ind+0xc8>
1000e264:	1c15      	adds	r5, r2, #0
1000e266:	1c0c      	adds	r4, r1, #0
1000e268:	f001 fb28 	bl	1000f8bc <__gnu_thumb1_case_uqi>
1000e26c:	2f5a030d 	.word	0x2f5a030d
1000e270:	4740      	.short	0x4740
1000e272:	2009      	movs	r0, #9
1000e274:	2a00      	cmp	r2, #0
1000e276:	d054      	beq.n	1000e322 <gapc_bond_ind+0xca>
1000e278:	0a1b      	lsrs	r3, r3, #8
1000e27a:	8053      	strh	r3, [r2, #2]
1000e27c:	788b      	ldrb	r3, [r1, #2]
1000e27e:	4829      	ldr	r0, [pc, #164]	; (1000e324 <gapc_bond_ind+0xcc>)
1000e280:	7113      	strb	r3, [r2, #4]
1000e282:	2100      	movs	r1, #0
1000e284:	e01c      	b.n	1000e2c0 <gapc_bond_ind+0x68>
1000e286:	2009      	movs	r0, #9
1000e288:	2a00      	cmp	r2, #0
1000e28a:	d04a      	beq.n	1000e322 <gapc_bond_ind+0xca>
1000e28c:	4c25      	ldr	r4, [pc, #148]	; (1000e324 <gapc_bond_ind+0xcc>)
1000e28e:	0a1b      	lsrs	r3, r3, #8
1000e290:	8053      	strh	r3, [r2, #2]
1000e292:	788b      	ldrb	r3, [r1, #2]
1000e294:	2700      	movs	r7, #0
1000e296:	1c10      	adds	r0, r2, #0
1000e298:	1c21      	adds	r1, r4, #0
1000e29a:	7013      	strb	r3, [r2, #0]
1000e29c:	4e22      	ldr	r6, [pc, #136]	; (1000e328 <gapc_bond_ind+0xd0>)
1000e29e:	7117      	strb	r7, [r2, #4]
1000e2a0:	312e      	adds	r1, #46	; 0x2e
1000e2a2:	2217      	movs	r2, #23
1000e2a4:	3032      	adds	r0, #50	; 0x32
1000e2a6:	47b0      	blx	r6
1000e2a8:	1c28      	adds	r0, r5, #0
1000e2aa:	1c21      	adds	r1, r4, #0
1000e2ac:	2210      	movs	r2, #16
1000e2ae:	311e      	adds	r1, #30
1000e2b0:	3022      	adds	r0, #34	; 0x22
1000e2b2:	47b0      	blx	r6
1000e2b4:	1ca1      	adds	r1, r4, #2
1000e2b6:	1da8      	adds	r0, r5, #6
1000e2b8:	221c      	movs	r2, #28
1000e2ba:	47b0      	blx	r6
1000e2bc:	1c20      	adds	r0, r4, #0
1000e2be:	1c39      	adds	r1, r7, #0
1000e2c0:	2246      	movs	r2, #70	; 0x46
1000e2c2:	4b1a      	ldr	r3, [pc, #104]	; (1000e32c <gapc_bond_ind+0xd4>)
1000e2c4:	4798      	blx	r3
1000e2c6:	2009      	movs	r0, #9
1000e2c8:	e02b      	b.n	1000e322 <gapc_bond_ind+0xca>
1000e2ca:	4d16      	ldr	r5, [pc, #88]	; (1000e324 <gapc_bond_ind+0xcc>)
1000e2cc:	3102      	adds	r1, #2
1000e2ce:	1c28      	adds	r0, r5, #0
1000e2d0:	2210      	movs	r2, #16
1000e2d2:	4e15      	ldr	r6, [pc, #84]	; (1000e328 <gapc_bond_ind+0xd0>)
1000e2d4:	302e      	adds	r0, #46	; 0x2e
1000e2d6:	47b0      	blx	r6
1000e2d8:	1c28      	adds	r0, r5, #0
1000e2da:	1c21      	adds	r1, r4, #0
1000e2dc:	303f      	adds	r0, #63	; 0x3f
1000e2de:	3112      	adds	r1, #18
1000e2e0:	2206      	movs	r2, #6
1000e2e2:	47b0      	blx	r6
1000e2e4:	7e23      	ldrb	r3, [r4, #24]
1000e2e6:	353e      	adds	r5, #62	; 0x3e
1000e2e8:	702b      	strb	r3, [r5, #0]
1000e2ea:	e019      	b.n	1000e320 <gapc_bond_ind+0xc8>
1000e2ec:	480d      	ldr	r0, [pc, #52]	; (1000e324 <gapc_bond_ind+0xcc>)
1000e2ee:	3102      	adds	r1, #2
1000e2f0:	2210      	movs	r2, #16
1000e2f2:	4b0d      	ldr	r3, [pc, #52]	; (1000e328 <gapc_bond_ind+0xd0>)
1000e2f4:	301e      	adds	r0, #30
1000e2f6:	4798      	blx	r3
1000e2f8:	e012      	b.n	1000e320 <gapc_bond_ind+0xc8>
1000e2fa:	4d0a      	ldr	r5, [pc, #40]	; (1000e324 <gapc_bond_ind+0xcc>)
1000e2fc:	3102      	adds	r1, #2
1000e2fe:	2210      	movs	r2, #16
1000e300:	4e09      	ldr	r6, [pc, #36]	; (1000e328 <gapc_bond_ind+0xd0>)
1000e302:	1ca8      	adds	r0, r5, #2
1000e304:	47b0      	blx	r6
1000e306:	1c28      	adds	r0, r5, #0
1000e308:	1c21      	adds	r1, r4, #0
1000e30a:	7ce3      	ldrb	r3, [r4, #19]
1000e30c:	7ca2      	ldrb	r2, [r4, #18]
1000e30e:	021b      	lsls	r3, r3, #8
1000e310:	4313      	orrs	r3, r2
1000e312:	3014      	adds	r0, #20
1000e314:	3114      	adds	r1, #20
1000e316:	2208      	movs	r2, #8
1000e318:	826b      	strh	r3, [r5, #18]
1000e31a:	47b0      	blx	r6
1000e31c:	7f23      	ldrb	r3, [r4, #28]
1000e31e:	772b      	strb	r3, [r5, #28]
1000e320:	2000      	movs	r0, #0
1000e322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e324:	100153d4 	.word	0x100153d4
1000e328:	100116f3 	.word	0x100116f3
1000e32c:	10011705 	.word	0x10011705

1000e330 <gapc_bond_req_ind>:
1000e330:	b570      	push	{r4, r5, r6, lr}
1000e332:	780c      	ldrb	r4, [r1, #0]
1000e334:	1c03      	adds	r3, r0, #0
1000e336:	7849      	ldrb	r1, [r1, #1]
1000e338:	2c07      	cmp	r4, #7
1000e33a:	d85c      	bhi.n	1000e3f6 <gapc_bond_req_ind+0xc6>
1000e33c:	1c20      	adds	r0, r4, #0
1000e33e:	f001 fabd 	bl	1000f8bc <__gnu_thumb1_case_uqi>
1000e342:	5a04      	.short	0x5a04
1000e344:	5a0b5a5a 	.word	0x5a0b5a5a
1000e348:	1f1f      	.short	0x1f1f
1000e34a:	200a      	movs	r0, #10
1000e34c:	2a00      	cmp	r2, #0
1000e34e:	d053      	beq.n	1000e3f8 <gapc_bond_req_ind+0xc8>
1000e350:	0a1b      	lsrs	r3, r3, #8
1000e352:	8013      	strh	r3, [r2, #0]
1000e354:	7091      	strb	r1, [r2, #2]
1000e356:	e04f      	b.n	1000e3f8 <gapc_bond_req_ind+0xc8>
1000e358:	2a00      	cmp	r2, #0
1000e35a:	d00b      	beq.n	1000e374 <gapc_bond_req_ind+0x44>
1000e35c:	0a1b      	lsrs	r3, r3, #8
1000e35e:	8013      	strh	r3, [r2, #0]
1000e360:	2900      	cmp	r1, #0
1000e362:	d102      	bne.n	1000e36a <gapc_bond_req_ind+0x3a>
1000e364:	2301      	movs	r3, #1
1000e366:	7093      	strb	r3, [r2, #2]
1000e368:	e004      	b.n	1000e374 <gapc_bond_req_ind+0x44>
1000e36a:	2300      	movs	r3, #0
1000e36c:	7093      	strb	r3, [r2, #2]
1000e36e:	2902      	cmp	r1, #2
1000e370:	d102      	bne.n	1000e378 <gapc_bond_req_ind+0x48>
1000e372:	70d3      	strb	r3, [r2, #3]
1000e374:	200c      	movs	r0, #12
1000e376:	e03f      	b.n	1000e3f8 <gapc_bond_req_ind+0xc8>
1000e378:	2901      	cmp	r1, #1
1000e37a:	d1fb      	bne.n	1000e374 <gapc_bond_req_ind+0x44>
1000e37c:	70d1      	strb	r1, [r2, #3]
1000e37e:	e7f9      	b.n	1000e374 <gapc_bond_req_ind+0x44>
1000e380:	2214      	movs	r2, #20
1000e382:	481e      	ldr	r0, [pc, #120]	; (1000e3fc <gapc_bond_req_ind+0xcc>)
1000e384:	0a1b      	lsrs	r3, r3, #8
1000e386:	70c3      	strb	r3, [r0, #3]
1000e388:	4b1d      	ldr	r3, [pc, #116]	; (1000e400 <gapc_bond_req_ind+0xd0>)
1000e38a:	7002      	strb	r2, [r0, #0]
1000e38c:	3a06      	subs	r2, #6
1000e38e:	7042      	strb	r2, [r0, #1]
1000e390:	7082      	strb	r2, [r0, #2]
1000e392:	881a      	ldrh	r2, [r3, #0]
1000e394:	881b      	ldrh	r3, [r3, #0]
1000e396:	4e1b      	ldr	r6, [pc, #108]	; (1000e404 <gapc_bond_req_ind+0xd4>)
1000e398:	0a1b      	lsrs	r3, r3, #8
1000e39a:	7143      	strb	r3, [r0, #5]
1000e39c:	2301      	movs	r3, #1
1000e39e:	7102      	strb	r2, [r0, #4]
1000e3a0:	7204      	strb	r4, [r0, #8]
1000e3a2:	7243      	strb	r3, [r0, #9]
1000e3a4:	1c05      	adds	r5, r0, #0
1000e3a6:	1c31      	adds	r1, r6, #0
1000e3a8:	300a      	adds	r0, #10
1000e3aa:	2c07      	cmp	r4, #7
1000e3ac:	d116      	bne.n	1000e3dc <gapc_bond_req_ind+0xac>
1000e3ae:	317e      	adds	r1, #126	; 0x7e
1000e3b0:	2210      	movs	r2, #16
1000e3b2:	4c15      	ldr	r4, [pc, #84]	; (1000e408 <gapc_bond_req_ind+0xd8>)
1000e3b4:	47a0      	blx	r4
1000e3b6:	1c33      	adds	r3, r6, #0
1000e3b8:	1c31      	adds	r1, r6, #0
1000e3ba:	1c28      	adds	r0, r5, #0
1000e3bc:	338e      	adds	r3, #142	; 0x8e
1000e3be:	881b      	ldrh	r3, [r3, #0]
1000e3c0:	3190      	adds	r1, #144	; 0x90
1000e3c2:	76ab      	strb	r3, [r5, #26]
1000e3c4:	2208      	movs	r2, #8
1000e3c6:	0a1b      	lsrs	r3, r3, #8
1000e3c8:	301c      	adds	r0, #28
1000e3ca:	76eb      	strb	r3, [r5, #27]
1000e3cc:	47a0      	blx	r4
1000e3ce:	1c31      	adds	r1, r6, #0
1000e3d0:	3198      	adds	r1, #152	; 0x98
1000e3d2:	780a      	ldrb	r2, [r1, #0]
1000e3d4:	1d6b      	adds	r3, r5, #5
1000e3d6:	77da      	strb	r2, [r3, #31]
1000e3d8:	2125      	movs	r1, #37	; 0x25
1000e3da:	e004      	b.n	1000e3e6 <gapc_bond_req_ind+0xb6>
1000e3dc:	319a      	adds	r1, #154	; 0x9a
1000e3de:	2210      	movs	r2, #16
1000e3e0:	4b09      	ldr	r3, [pc, #36]	; (1000e408 <gapc_bond_req_ind+0xd8>)
1000e3e2:	4798      	blx	r3
1000e3e4:	211a      	movs	r1, #26
1000e3e6:	1c0b      	adds	r3, r1, #0
1000e3e8:	2400      	movs	r4, #0
1000e3ea:	3b08      	subs	r3, #8
1000e3ec:	71ab      	strb	r3, [r5, #6]
1000e3ee:	1c28      	adds	r0, r5, #0
1000e3f0:	4b06      	ldr	r3, [pc, #24]	; (1000e40c <gapc_bond_req_ind+0xdc>)
1000e3f2:	71ec      	strb	r4, [r5, #7]
1000e3f4:	4798      	blx	r3
1000e3f6:	2000      	movs	r0, #0
1000e3f8:	bd70      	pop	{r4, r5, r6, pc}
1000e3fa:	46c0      	nop			; (mov r8, r8)
1000e3fc:	10016444 	.word	0x10016444
1000e400:	100160d4 	.word	0x100160d4
1000e404:	10016166 	.word	0x10016166
1000e408:	100116f3 	.word	0x100116f3
1000e40c:	1000dc19 	.word	0x1000dc19

1000e410 <gapc_bond_cfm_handler_pair_resp>:
1000e410:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e412:	b085      	sub	sp, #20
1000e414:	1c07      	adds	r7, r0, #0
1000e416:	a80a      	add	r0, sp, #40	; 0x28
1000e418:	7806      	ldrb	r6, [r0, #0]
1000e41a:	a80b      	add	r0, sp, #44	; 0x2c
1000e41c:	7805      	ldrb	r5, [r0, #0]
1000e41e:	a80c      	add	r0, sp, #48	; 0x30
1000e420:	7800      	ldrb	r0, [r0, #0]
1000e422:	2414      	movs	r4, #20
1000e424:	9002      	str	r0, [sp, #8]
1000e426:	a80d      	add	r0, sp, #52	; 0x34
1000e428:	7800      	ldrb	r0, [r0, #0]
1000e42a:	9301      	str	r3, [sp, #4]
1000e42c:	9003      	str	r0, [sp, #12]
1000e42e:	a80e      	add	r0, sp, #56	; 0x38
1000e430:	8800      	ldrh	r0, [r0, #0]
1000e432:	4684      	mov	ip, r0
1000e434:	4812      	ldr	r0, [pc, #72]	; (1000e480 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e436:	7004      	strb	r4, [r0, #0]
1000e438:	3c06      	subs	r4, #6
1000e43a:	7044      	strb	r4, [r0, #1]
1000e43c:	7084      	strb	r4, [r0, #2]
1000e43e:	4664      	mov	r4, ip
1000e440:	70c4      	strb	r4, [r0, #3]
1000e442:	4c10      	ldr	r4, [pc, #64]	; (1000e484 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e444:	7247      	strb	r7, [r0, #9]
1000e446:	8823      	ldrh	r3, [r4, #0]
1000e448:	8824      	ldrh	r4, [r4, #0]
1000e44a:	7103      	strb	r3, [r0, #4]
1000e44c:	466b      	mov	r3, sp
1000e44e:	791b      	ldrb	r3, [r3, #4]
1000e450:	0a24      	lsrs	r4, r4, #8
1000e452:	7303      	strb	r3, [r0, #12]
1000e454:	466b      	mov	r3, sp
1000e456:	7a1b      	ldrb	r3, [r3, #8]
1000e458:	7144      	strb	r4, [r0, #5]
1000e45a:	73c3      	strb	r3, [r0, #15]
1000e45c:	466b      	mov	r3, sp
1000e45e:	7b1b      	ldrb	r3, [r3, #12]
1000e460:	2401      	movs	r4, #1
1000e462:	7403      	strb	r3, [r0, #16]
1000e464:	2309      	movs	r3, #9
1000e466:	7183      	strb	r3, [r0, #6]
1000e468:	2300      	movs	r3, #0
1000e46a:	7204      	strb	r4, [r0, #8]
1000e46c:	7281      	strb	r1, [r0, #10]
1000e46e:	72c2      	strb	r2, [r0, #11]
1000e470:	7346      	strb	r6, [r0, #13]
1000e472:	7385      	strb	r5, [r0, #14]
1000e474:	71c3      	strb	r3, [r0, #7]
1000e476:	2111      	movs	r1, #17
1000e478:	4b03      	ldr	r3, [pc, #12]	; (1000e488 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e47a:	4798      	blx	r3
1000e47c:	b005      	add	sp, #20
1000e47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e480:	10016444 	.word	0x10016444
1000e484:	100160d4 	.word	0x100160d4
1000e488:	1000dc19 	.word	0x1000dc19

1000e48c <gapc_bond_cfm_handler_key_exch>:
1000e48c:	b538      	push	{r3, r4, r5, lr}
1000e48e:	2514      	movs	r5, #20
1000e490:	4c0d      	ldr	r4, [pc, #52]	; (1000e4c8 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e492:	70e3      	strb	r3, [r4, #3]
1000e494:	4b0d      	ldr	r3, [pc, #52]	; (1000e4cc <gapc_bond_cfm_handler_key_exch+0x40>)
1000e496:	7025      	strb	r5, [r4, #0]
1000e498:	3d06      	subs	r5, #6
1000e49a:	7065      	strb	r5, [r4, #1]
1000e49c:	70a5      	strb	r5, [r4, #2]
1000e49e:	881d      	ldrh	r5, [r3, #0]
1000e4a0:	881b      	ldrh	r3, [r3, #0]
1000e4a2:	7220      	strb	r0, [r4, #8]
1000e4a4:	0a1b      	lsrs	r3, r3, #8
1000e4a6:	7163      	strb	r3, [r4, #5]
1000e4a8:	7261      	strb	r1, [r4, #9]
1000e4aa:	4b09      	ldr	r3, [pc, #36]	; (1000e4d0 <gapc_bond_cfm_handler_key_exch+0x44>)
1000e4ac:	1c11      	adds	r1, r2, #0
1000e4ae:	4809      	ldr	r0, [pc, #36]	; (1000e4d4 <gapc_bond_cfm_handler_key_exch+0x48>)
1000e4b0:	2210      	movs	r2, #16
1000e4b2:	7125      	strb	r5, [r4, #4]
1000e4b4:	4798      	blx	r3
1000e4b6:	2312      	movs	r3, #18
1000e4b8:	71a3      	strb	r3, [r4, #6]
1000e4ba:	2300      	movs	r3, #0
1000e4bc:	1c20      	adds	r0, r4, #0
1000e4be:	71e3      	strb	r3, [r4, #7]
1000e4c0:	211a      	movs	r1, #26
1000e4c2:	4b05      	ldr	r3, [pc, #20]	; (1000e4d8 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e4c4:	4798      	blx	r3
1000e4c6:	bd38      	pop	{r3, r4, r5, pc}
1000e4c8:	10016444 	.word	0x10016444
1000e4cc:	100160d4 	.word	0x100160d4
1000e4d0:	100116f3 	.word	0x100116f3
1000e4d4:	1001644e 	.word	0x1001644e
1000e4d8:	1000dc19 	.word	0x1000dc19

1000e4dc <gapc_security_cmd_handler>:
1000e4dc:	221a      	movs	r2, #26
1000e4de:	b508      	push	{r3, lr}
1000e4e0:	4b0b      	ldr	r3, [pc, #44]	; (1000e510 <gapc_security_cmd_handler+0x34>)
1000e4e2:	701a      	strb	r2, [r3, #0]
1000e4e4:	3a0c      	subs	r2, #12
1000e4e6:	705a      	strb	r2, [r3, #1]
1000e4e8:	709a      	strb	r2, [r3, #2]
1000e4ea:	4a0a      	ldr	r2, [pc, #40]	; (1000e514 <gapc_security_cmd_handler+0x38>)
1000e4ec:	70d8      	strb	r0, [r3, #3]
1000e4ee:	8810      	ldrh	r0, [r2, #0]
1000e4f0:	8812      	ldrh	r2, [r2, #0]
1000e4f2:	7118      	strb	r0, [r3, #4]
1000e4f4:	0a12      	lsrs	r2, r2, #8
1000e4f6:	715a      	strb	r2, [r3, #5]
1000e4f8:	220c      	movs	r2, #12
1000e4fa:	721a      	strb	r2, [r3, #8]
1000e4fc:	3a0a      	subs	r2, #10
1000e4fe:	719a      	strb	r2, [r3, #6]
1000e500:	2200      	movs	r2, #0
1000e502:	7259      	strb	r1, [r3, #9]
1000e504:	71da      	strb	r2, [r3, #7]
1000e506:	1c18      	adds	r0, r3, #0
1000e508:	210a      	movs	r1, #10
1000e50a:	4b03      	ldr	r3, [pc, #12]	; (1000e518 <gapc_security_cmd_handler+0x3c>)
1000e50c:	4798      	blx	r3
1000e50e:	bd08      	pop	{r3, pc}
1000e510:	10016444 	.word	0x10016444
1000e514:	100160d4 	.word	0x100160d4
1000e518:	1000dc19 	.word	0x1000dc19

1000e51c <gapc_encrypt_cmd_handler>:
1000e51c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e51e:	2500      	movs	r5, #0
1000e520:	b089      	sub	sp, #36	; 0x24
1000e522:	9306      	str	r3, [sp, #24]
1000e524:	ab0e      	add	r3, sp, #56	; 0x38
1000e526:	781b      	ldrb	r3, [r3, #0]
1000e528:	1c17      	adds	r7, r2, #0
1000e52a:	9307      	str	r3, [sp, #28]
1000e52c:	ab0f      	add	r3, sp, #60	; 0x3c
1000e52e:	781b      	ldrb	r3, [r3, #0]
1000e530:	4a19      	ldr	r2, [pc, #100]	; (1000e598 <gapc_encrypt_cmd_handler+0x7c>)
1000e532:	1c06      	adds	r6, r0, #0
1000e534:	9105      	str	r1, [sp, #20]
1000e536:	9300      	str	r3, [sp, #0]
1000e538:	9002      	str	r0, [sp, #8]
1000e53a:	1c29      	adds	r1, r5, #0
1000e53c:	1c2b      	adds	r3, r5, #0
1000e53e:	9501      	str	r5, [sp, #4]
1000e540:	1c10      	adds	r0, r2, #0
1000e542:	4c16      	ldr	r4, [pc, #88]	; (1000e59c <gapc_encrypt_cmd_handler+0x80>)
1000e544:	47a0      	blx	r4
1000e546:	2316      	movs	r3, #22
1000e548:	4c15      	ldr	r4, [pc, #84]	; (1000e5a0 <gapc_encrypt_cmd_handler+0x84>)
1000e54a:	9905      	ldr	r1, [sp, #20]
1000e54c:	7023      	strb	r3, [r4, #0]
1000e54e:	3b08      	subs	r3, #8
1000e550:	7063      	strb	r3, [r4, #1]
1000e552:	70a3      	strb	r3, [r4, #2]
1000e554:	4b13      	ldr	r3, [pc, #76]	; (1000e5a4 <gapc_encrypt_cmd_handler+0x88>)
1000e556:	70e6      	strb	r6, [r4, #3]
1000e558:	881a      	ldrh	r2, [r3, #0]
1000e55a:	881b      	ldrh	r3, [r3, #0]
1000e55c:	7122      	strb	r2, [r4, #4]
1000e55e:	0a1b      	lsrs	r3, r3, #8
1000e560:	7163      	strb	r3, [r4, #5]
1000e562:	230b      	movs	r3, #11
1000e564:	4e10      	ldr	r6, [pc, #64]	; (1000e5a8 <gapc_encrypt_cmd_handler+0x8c>)
1000e566:	2210      	movs	r2, #16
1000e568:	4810      	ldr	r0, [pc, #64]	; (1000e5ac <gapc_encrypt_cmd_handler+0x90>)
1000e56a:	7223      	strb	r3, [r4, #8]
1000e56c:	7265      	strb	r5, [r4, #9]
1000e56e:	47b0      	blx	r6
1000e570:	0a3b      	lsrs	r3, r7, #8
1000e572:	9906      	ldr	r1, [sp, #24]
1000e574:	2208      	movs	r2, #8
1000e576:	480e      	ldr	r0, [pc, #56]	; (1000e5b0 <gapc_encrypt_cmd_handler+0x94>)
1000e578:	76e3      	strb	r3, [r4, #27]
1000e57a:	76a7      	strb	r7, [r4, #26]
1000e57c:	47b0      	blx	r6
1000e57e:	466a      	mov	r2, sp
1000e580:	7f12      	ldrb	r2, [r2, #28]
1000e582:	1d63      	adds	r3, r4, #5
1000e584:	77da      	strb	r2, [r3, #31]
1000e586:	231d      	movs	r3, #29
1000e588:	1c20      	adds	r0, r4, #0
1000e58a:	71a3      	strb	r3, [r4, #6]
1000e58c:	2125      	movs	r1, #37	; 0x25
1000e58e:	4b09      	ldr	r3, [pc, #36]	; (1000e5b4 <gapc_encrypt_cmd_handler+0x98>)
1000e590:	71e5      	strb	r5, [r4, #7]
1000e592:	4798      	blx	r3
1000e594:	b009      	add	sp, #36	; 0x24
1000e596:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e598:	100153b4 	.word	0x100153b4
1000e59c:	1000dfd5 	.word	0x1000dfd5
1000e5a0:	10016444 	.word	0x10016444
1000e5a4:	100160d4 	.word	0x100160d4
1000e5a8:	100116f3 	.word	0x100116f3
1000e5ac:	1001644e 	.word	0x1001644e
1000e5b0:	10016460 	.word	0x10016460
1000e5b4:	1000dc19 	.word	0x1000dc19

1000e5b8 <gapc_encrypt_req_ind>:
1000e5b8:	b508      	push	{r3, lr}
1000e5ba:	0a00      	lsrs	r0, r0, #8
1000e5bc:	8010      	strh	r0, [r2, #0]
1000e5be:	784b      	ldrb	r3, [r1, #1]
1000e5c0:	7808      	ldrb	r0, [r1, #0]
1000e5c2:	021b      	lsls	r3, r3, #8
1000e5c4:	4303      	orrs	r3, r0
1000e5c6:	8053      	strh	r3, [r2, #2]
1000e5c8:	1d10      	adds	r0, r2, #4
1000e5ca:	3102      	adds	r1, #2
1000e5cc:	2208      	movs	r2, #8
1000e5ce:	4b01      	ldr	r3, [pc, #4]	; (1000e5d4 <gapc_encrypt_req_ind+0x1c>)
1000e5d0:	4798      	blx	r3
1000e5d2:	bd08      	pop	{r3, pc}
1000e5d4:	100116f3 	.word	0x100116f3

1000e5d8 <gapc_encrypt_cfm_handler>:
1000e5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e5da:	2500      	movs	r5, #0
1000e5dc:	b087      	sub	sp, #28
1000e5de:	9304      	str	r3, [sp, #16]
1000e5e0:	ab0c      	add	r3, sp, #48	; 0x30
1000e5e2:	781b      	ldrb	r3, [r3, #0]
1000e5e4:	1c17      	adds	r7, r2, #0
1000e5e6:	4a15      	ldr	r2, [pc, #84]	; (1000e63c <gapc_encrypt_cfm_handler+0x64>)
1000e5e8:	1c06      	adds	r6, r0, #0
1000e5ea:	9305      	str	r3, [sp, #20]
1000e5ec:	9100      	str	r1, [sp, #0]
1000e5ee:	9002      	str	r0, [sp, #8]
1000e5f0:	1c29      	adds	r1, r5, #0
1000e5f2:	1c2b      	adds	r3, r5, #0
1000e5f4:	9501      	str	r5, [sp, #4]
1000e5f6:	1c10      	adds	r0, r2, #0
1000e5f8:	4c11      	ldr	r4, [pc, #68]	; (1000e640 <gapc_encrypt_cfm_handler+0x68>)
1000e5fa:	47a0      	blx	r4
1000e5fc:	2318      	movs	r3, #24
1000e5fe:	4c11      	ldr	r4, [pc, #68]	; (1000e644 <gapc_encrypt_cfm_handler+0x6c>)
1000e600:	9904      	ldr	r1, [sp, #16]
1000e602:	7023      	strb	r3, [r4, #0]
1000e604:	3b0a      	subs	r3, #10
1000e606:	7063      	strb	r3, [r4, #1]
1000e608:	70a3      	strb	r3, [r4, #2]
1000e60a:	4b0f      	ldr	r3, [pc, #60]	; (1000e648 <gapc_encrypt_cfm_handler+0x70>)
1000e60c:	480f      	ldr	r0, [pc, #60]	; (1000e64c <gapc_encrypt_cfm_handler+0x74>)
1000e60e:	881a      	ldrh	r2, [r3, #0]
1000e610:	881b      	ldrh	r3, [r3, #0]
1000e612:	7122      	strb	r2, [r4, #4]
1000e614:	0a1b      	lsrs	r3, r3, #8
1000e616:	7163      	strb	r3, [r4, #5]
1000e618:	2210      	movs	r2, #16
1000e61a:	4b0d      	ldr	r3, [pc, #52]	; (1000e650 <gapc_encrypt_cfm_handler+0x78>)
1000e61c:	70e6      	strb	r6, [r4, #3]
1000e61e:	7227      	strb	r7, [r4, #8]
1000e620:	4798      	blx	r3
1000e622:	466b      	mov	r3, sp
1000e624:	7d1b      	ldrb	r3, [r3, #20]
1000e626:	1c20      	adds	r0, r4, #0
1000e628:	7663      	strb	r3, [r4, #25]
1000e62a:	2312      	movs	r3, #18
1000e62c:	211a      	movs	r1, #26
1000e62e:	71a3      	strb	r3, [r4, #6]
1000e630:	4b08      	ldr	r3, [pc, #32]	; (1000e654 <gapc_encrypt_cfm_handler+0x7c>)
1000e632:	71e5      	strb	r5, [r4, #7]
1000e634:	4798      	blx	r3
1000e636:	b007      	add	sp, #28
1000e638:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e63a:	46c0      	nop			; (mov r8, r8)
1000e63c:	100153c4 	.word	0x100153c4
1000e640:	1000dfd5 	.word	0x1000dfd5
1000e644:	10016444 	.word	0x10016444
1000e648:	100160d4 	.word	0x100160d4
1000e64c:	1001644d 	.word	0x1001644d
1000e650:	100116f3 	.word	0x100116f3
1000e654:	1000dc19 	.word	0x1000dc19

1000e658 <gapc_encrypt_ind>:
1000e658:	780b      	ldrb	r3, [r1, #0]
1000e65a:	0a00      	lsrs	r0, r0, #8
1000e65c:	70d3      	strb	r3, [r2, #3]
1000e65e:	2300      	movs	r3, #0
1000e660:	8010      	strh	r0, [r2, #0]
1000e662:	7093      	strb	r3, [r2, #2]
1000e664:	4770      	bx	lr
	...

1000e668 <gapc_param_update_cmd_handler>:
1000e668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e66a:	1c06      	adds	r6, r0, #0
1000e66c:	a808      	add	r0, sp, #32
1000e66e:	8807      	ldrh	r7, [r0, #0]
1000e670:	a809      	add	r0, sp, #36	; 0x24
1000e672:	8805      	ldrh	r5, [r0, #0]
1000e674:	a80a      	add	r0, sp, #40	; 0x28
1000e676:	8800      	ldrh	r0, [r0, #0]
1000e678:	9301      	str	r3, [sp, #4]
1000e67a:	4684      	mov	ip, r0
1000e67c:	4816      	ldr	r0, [pc, #88]	; (1000e6d8 <gapc_param_update_cmd_handler+0x70>)
1000e67e:	240e      	movs	r4, #14
1000e680:	70c6      	strb	r6, [r0, #3]
1000e682:	4e16      	ldr	r6, [pc, #88]	; (1000e6dc <gapc_param_update_cmd_handler+0x74>)
1000e684:	7281      	strb	r1, [r0, #10]
1000e686:	8833      	ldrh	r3, [r6, #0]
1000e688:	8836      	ldrh	r6, [r6, #0]
1000e68a:	7103      	strb	r3, [r0, #4]
1000e68c:	466b      	mov	r3, sp
1000e68e:	791b      	ldrb	r3, [r3, #4]
1000e690:	0a36      	lsrs	r6, r6, #8
1000e692:	7383      	strb	r3, [r0, #14]
1000e694:	9b01      	ldr	r3, [sp, #4]
1000e696:	7146      	strb	r6, [r0, #5]
1000e698:	0a1b      	lsrs	r3, r3, #8
1000e69a:	73c3      	strb	r3, [r0, #15]
1000e69c:	4663      	mov	r3, ip
1000e69e:	2609      	movs	r6, #9
1000e6a0:	7503      	strb	r3, [r0, #20]
1000e6a2:	4663      	mov	r3, ip
1000e6a4:	7206      	strb	r6, [r0, #8]
1000e6a6:	2600      	movs	r6, #0
1000e6a8:	7302      	strb	r2, [r0, #12]
1000e6aa:	7407      	strb	r7, [r0, #16]
1000e6ac:	0a12      	lsrs	r2, r2, #8
1000e6ae:	0a3f      	lsrs	r7, r7, #8
1000e6b0:	7485      	strb	r5, [r0, #18]
1000e6b2:	0a09      	lsrs	r1, r1, #8
1000e6b4:	0a2d      	lsrs	r5, r5, #8
1000e6b6:	0a1b      	lsrs	r3, r3, #8
1000e6b8:	7246      	strb	r6, [r0, #9]
1000e6ba:	7447      	strb	r7, [r0, #17]
1000e6bc:	74c5      	strb	r5, [r0, #19]
1000e6be:	71c6      	strb	r6, [r0, #7]
1000e6c0:	7004      	strb	r4, [r0, #0]
1000e6c2:	7044      	strb	r4, [r0, #1]
1000e6c4:	7084      	strb	r4, [r0, #2]
1000e6c6:	72c1      	strb	r1, [r0, #11]
1000e6c8:	7342      	strb	r2, [r0, #13]
1000e6ca:	7184      	strb	r4, [r0, #6]
1000e6cc:	7543      	strb	r3, [r0, #21]
1000e6ce:	2116      	movs	r1, #22
1000e6d0:	4b03      	ldr	r3, [pc, #12]	; (1000e6e0 <gapc_param_update_cmd_handler+0x78>)
1000e6d2:	4798      	blx	r3
1000e6d4:	1c30      	adds	r0, r6, #0
1000e6d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e6d8:	10016444 	.word	0x10016444
1000e6dc:	100160d4 	.word	0x100160d4
1000e6e0:	1000dc19 	.word	0x1000dc19

1000e6e4 <gapc_param_update_cfm_handler>:
1000e6e4:	b538      	push	{r3, r4, r5, lr}
1000e6e6:	2410      	movs	r4, #16
1000e6e8:	1c05      	adds	r5, r0, #0
1000e6ea:	480e      	ldr	r0, [pc, #56]	; (1000e724 <gapc_param_update_cfm_handler+0x40>)
1000e6ec:	7004      	strb	r4, [r0, #0]
1000e6ee:	3c02      	subs	r4, #2
1000e6f0:	7044      	strb	r4, [r0, #1]
1000e6f2:	7084      	strb	r4, [r0, #2]
1000e6f4:	4c0c      	ldr	r4, [pc, #48]	; (1000e728 <gapc_param_update_cfm_handler+0x44>)
1000e6f6:	70c5      	strb	r5, [r0, #3]
1000e6f8:	8825      	ldrh	r5, [r4, #0]
1000e6fa:	8824      	ldrh	r4, [r4, #0]
1000e6fc:	72c3      	strb	r3, [r0, #11]
1000e6fe:	0a1b      	lsrs	r3, r3, #8
1000e700:	0a24      	lsrs	r4, r4, #8
1000e702:	7303      	strb	r3, [r0, #12]
1000e704:	2305      	movs	r3, #5
1000e706:	7144      	strb	r4, [r0, #5]
1000e708:	2400      	movs	r4, #0
1000e70a:	7201      	strb	r1, [r0, #8]
1000e70c:	7242      	strb	r2, [r0, #9]
1000e70e:	7183      	strb	r3, [r0, #6]
1000e710:	0a12      	lsrs	r2, r2, #8
1000e712:	210d      	movs	r1, #13
1000e714:	4b05      	ldr	r3, [pc, #20]	; (1000e72c <gapc_param_update_cfm_handler+0x48>)
1000e716:	7105      	strb	r5, [r0, #4]
1000e718:	7282      	strb	r2, [r0, #10]
1000e71a:	71c4      	strb	r4, [r0, #7]
1000e71c:	4798      	blx	r3
1000e71e:	1c20      	adds	r0, r4, #0
1000e720:	bd38      	pop	{r3, r4, r5, pc}
1000e722:	46c0      	nop			; (mov r8, r8)
1000e724:	10016444 	.word	0x10016444
1000e728:	100160d4 	.word	0x100160d4
1000e72c:	1000dc19 	.word	0x1000dc19

1000e730 <gapc_param_updated_ind>:
1000e730:	2300      	movs	r3, #0
1000e732:	0a00      	lsrs	r0, r0, #8
1000e734:	8010      	strh	r0, [r2, #0]
1000e736:	7093      	strb	r3, [r2, #2]
1000e738:	784b      	ldrb	r3, [r1, #1]
1000e73a:	7808      	ldrb	r0, [r1, #0]
1000e73c:	021b      	lsls	r3, r3, #8
1000e73e:	4303      	orrs	r3, r0
1000e740:	8093      	strh	r3, [r2, #4]
1000e742:	78cb      	ldrb	r3, [r1, #3]
1000e744:	7888      	ldrb	r0, [r1, #2]
1000e746:	021b      	lsls	r3, r3, #8
1000e748:	4303      	orrs	r3, r0
1000e74a:	80d3      	strh	r3, [r2, #6]
1000e74c:	794b      	ldrb	r3, [r1, #5]
1000e74e:	7909      	ldrb	r1, [r1, #4]
1000e750:	021b      	lsls	r3, r3, #8
1000e752:	430b      	orrs	r3, r1
1000e754:	2007      	movs	r0, #7
1000e756:	8113      	strh	r3, [r2, #8]
1000e758:	4770      	bx	lr

1000e75a <gapc_param_updated_req_ind>:
1000e75a:	0a00      	lsrs	r0, r0, #8
1000e75c:	8010      	strh	r0, [r2, #0]
1000e75e:	784b      	ldrb	r3, [r1, #1]
1000e760:	7808      	ldrb	r0, [r1, #0]
1000e762:	021b      	lsls	r3, r3, #8
1000e764:	4303      	orrs	r3, r0
1000e766:	8053      	strh	r3, [r2, #2]
1000e768:	78cb      	ldrb	r3, [r1, #3]
1000e76a:	7888      	ldrb	r0, [r1, #2]
1000e76c:	021b      	lsls	r3, r3, #8
1000e76e:	4303      	orrs	r3, r0
1000e770:	8093      	strh	r3, [r2, #4]
1000e772:	794b      	ldrb	r3, [r1, #5]
1000e774:	7908      	ldrb	r0, [r1, #4]
1000e776:	021b      	lsls	r3, r3, #8
1000e778:	4303      	orrs	r3, r0
1000e77a:	80d3      	strh	r3, [r2, #6]
1000e77c:	79cb      	ldrb	r3, [r1, #7]
1000e77e:	7989      	ldrb	r1, [r1, #6]
1000e780:	021b      	lsls	r3, r3, #8
1000e782:	430b      	orrs	r3, r1
1000e784:	2008      	movs	r0, #8
1000e786:	8113      	strh	r3, [r2, #8]
1000e788:	4770      	bx	lr
	...

1000e78c <gapc_dev_info_req_ind_handler>:
1000e78c:	b508      	push	{r3, lr}
1000e78e:	1c0b      	adds	r3, r1, #0
1000e790:	0a01      	lsrs	r1, r0, #8
1000e792:	8011      	strh	r1, [r2, #0]
1000e794:	7818      	ldrb	r0, [r3, #0]
1000e796:	7090      	strb	r0, [r2, #2]
1000e798:	2800      	cmp	r0, #0
1000e79a:	d104      	bne.n	1000e7a6 <gapc_dev_info_req_ind_handler+0x1a>
1000e79c:	4b03      	ldr	r3, [pc, #12]	; (1000e7ac <gapc_dev_info_req_ind_handler+0x20>)
1000e79e:	33aa      	adds	r3, #170	; 0xaa
1000e7a0:	881b      	ldrh	r3, [r3, #0]
1000e7a2:	2b00      	cmp	r3, #0
1000e7a4:	d001      	beq.n	1000e7aa <gapc_dev_info_req_ind_handler+0x1e>
1000e7a6:	4b02      	ldr	r3, [pc, #8]	; (1000e7b0 <gapc_dev_info_req_ind_handler+0x24>)
1000e7a8:	4798      	blx	r3
1000e7aa:	bd08      	pop	{r3, pc}
1000e7ac:	10016166 	.word	0x10016166
1000e7b0:	1000dde1 	.word	0x1000dde1

1000e7b4 <gapc_sec_req_ind>:
1000e7b4:	0a00      	lsrs	r0, r0, #8
1000e7b6:	8010      	strh	r0, [r2, #0]
1000e7b8:	7809      	ldrb	r1, [r1, #0]
1000e7ba:	2301      	movs	r3, #1
1000e7bc:	1c08      	adds	r0, r1, #0
1000e7be:	0889      	lsrs	r1, r1, #2
1000e7c0:	4018      	ands	r0, r3
1000e7c2:	400b      	ands	r3, r1
1000e7c4:	70d0      	strb	r0, [r2, #3]
1000e7c6:	7113      	strb	r3, [r2, #4]
1000e7c8:	4770      	bx	lr

1000e7ca <gapc_sign_counter_ind_handler>:
1000e7ca:	0a00      	lsrs	r0, r0, #8
1000e7cc:	8010      	strh	r0, [r2, #0]
1000e7ce:	784b      	ldrb	r3, [r1, #1]
1000e7d0:	0218      	lsls	r0, r3, #8
1000e7d2:	788b      	ldrb	r3, [r1, #2]
1000e7d4:	041b      	lsls	r3, r3, #16
1000e7d6:	4303      	orrs	r3, r0
1000e7d8:	7808      	ldrb	r0, [r1, #0]
1000e7da:	4303      	orrs	r3, r0
1000e7dc:	78c8      	ldrb	r0, [r1, #3]
1000e7de:	0600      	lsls	r0, r0, #24
1000e7e0:	4303      	orrs	r3, r0
1000e7e2:	6053      	str	r3, [r2, #4]
1000e7e4:	794b      	ldrb	r3, [r1, #5]
1000e7e6:	0218      	lsls	r0, r3, #8
1000e7e8:	798b      	ldrb	r3, [r1, #6]
1000e7ea:	041b      	lsls	r3, r3, #16
1000e7ec:	4303      	orrs	r3, r0
1000e7ee:	7908      	ldrb	r0, [r1, #4]
1000e7f0:	79c9      	ldrb	r1, [r1, #7]
1000e7f2:	4303      	orrs	r3, r0
1000e7f4:	0609      	lsls	r1, r1, #24
1000e7f6:	430b      	orrs	r3, r1
1000e7f8:	2000      	movs	r0, #0
1000e7fa:	6093      	str	r3, [r2, #8]
1000e7fc:	4770      	bx	lr
	...

1000e800 <gapc_peer_att_info_ind_handler>:
1000e800:	b510      	push	{r4, lr}
1000e802:	0a00      	lsrs	r0, r0, #8
1000e804:	8010      	strh	r0, [r2, #0]
1000e806:	7808      	ldrb	r0, [r1, #0]
1000e808:	7090      	strb	r0, [r2, #2]
1000e80a:	788b      	ldrb	r3, [r1, #2]
1000e80c:	784c      	ldrb	r4, [r1, #1]
1000e80e:	021b      	lsls	r3, r3, #8
1000e810:	4323      	orrs	r3, r4
1000e812:	8093      	strh	r3, [r2, #4]
1000e814:	2801      	cmp	r0, #1
1000e816:	d027      	beq.n	1000e868 <gapc_peer_att_info_ind_handler+0x68>
1000e818:	2800      	cmp	r0, #0
1000e81a:	d017      	beq.n	1000e84c <gapc_peer_att_info_ind_handler+0x4c>
1000e81c:	2802      	cmp	r0, #2
1000e81e:	d12a      	bne.n	1000e876 <gapc_peer_att_info_ind_handler+0x76>
1000e820:	790b      	ldrb	r3, [r1, #4]
1000e822:	78c8      	ldrb	r0, [r1, #3]
1000e824:	021b      	lsls	r3, r3, #8
1000e826:	4303      	orrs	r3, r0
1000e828:	8113      	strh	r3, [r2, #8]
1000e82a:	798b      	ldrb	r3, [r1, #6]
1000e82c:	7948      	ldrb	r0, [r1, #5]
1000e82e:	021b      	lsls	r3, r3, #8
1000e830:	4303      	orrs	r3, r0
1000e832:	80d3      	strh	r3, [r2, #6]
1000e834:	7a0b      	ldrb	r3, [r1, #8]
1000e836:	79c8      	ldrb	r0, [r1, #7]
1000e838:	021b      	lsls	r3, r3, #8
1000e83a:	4303      	orrs	r3, r0
1000e83c:	8193      	strh	r3, [r2, #12]
1000e83e:	7a8b      	ldrb	r3, [r1, #10]
1000e840:	7a49      	ldrb	r1, [r1, #9]
1000e842:	021b      	lsls	r3, r3, #8
1000e844:	430b      	orrs	r3, r1
1000e846:	8153      	strh	r3, [r2, #10]
1000e848:	2306      	movs	r3, #6
1000e84a:	e013      	b.n	1000e874 <gapc_peer_att_info_ind_handler+0x74>
1000e84c:	1c14      	adds	r4, r2, #0
1000e84e:	1c20      	adds	r0, r4, #0
1000e850:	790a      	ldrb	r2, [r1, #4]
1000e852:	78cb      	ldrb	r3, [r1, #3]
1000e854:	0212      	lsls	r2, r2, #8
1000e856:	431a      	orrs	r2, r3
1000e858:	80e2      	strh	r2, [r4, #6]
1000e85a:	4b07      	ldr	r3, [pc, #28]	; (1000e878 <gapc_peer_att_info_ind_handler+0x78>)
1000e85c:	3008      	adds	r0, #8
1000e85e:	3105      	adds	r1, #5
1000e860:	4798      	blx	r3
1000e862:	2302      	movs	r3, #2
1000e864:	70a3      	strb	r3, [r4, #2]
1000e866:	e006      	b.n	1000e876 <gapc_peer_att_info_ind_handler+0x76>
1000e868:	790b      	ldrb	r3, [r1, #4]
1000e86a:	78c9      	ldrb	r1, [r1, #3]
1000e86c:	021b      	lsls	r3, r3, #8
1000e86e:	430b      	orrs	r3, r1
1000e870:	80d3      	strh	r3, [r2, #6]
1000e872:	2305      	movs	r3, #5
1000e874:	7093      	strb	r3, [r2, #2]
1000e876:	bd10      	pop	{r4, pc}
1000e878:	100116f3 	.word	0x100116f3

1000e87c <gapc_con_channel_map_ind_handler>:
1000e87c:	b508      	push	{r3, lr}
1000e87e:	2300      	movs	r3, #0
1000e880:	0a00      	lsrs	r0, r0, #8
1000e882:	7013      	strb	r3, [r2, #0]
1000e884:	8050      	strh	r0, [r2, #2]
1000e886:	4b02      	ldr	r3, [pc, #8]	; (1000e890 <gapc_con_channel_map_ind_handler+0x14>)
1000e888:	1d10      	adds	r0, r2, #4
1000e88a:	2205      	movs	r2, #5
1000e88c:	4798      	blx	r3
1000e88e:	bd08      	pop	{r3, pc}
1000e890:	100116f3 	.word	0x100116f3

1000e894 <gapc_lecb_connected>:
1000e894:	7843      	ldrb	r3, [r0, #1]
1000e896:	7802      	ldrb	r2, [r0, #0]
1000e898:	021b      	lsls	r3, r3, #8
1000e89a:	4313      	orrs	r3, r2
1000e89c:	800b      	strh	r3, [r1, #0]
1000e89e:	78c3      	ldrb	r3, [r0, #3]
1000e8a0:	7882      	ldrb	r2, [r0, #2]
1000e8a2:	021b      	lsls	r3, r3, #8
1000e8a4:	4313      	orrs	r3, r2
1000e8a6:	804b      	strh	r3, [r1, #2]
1000e8a8:	7943      	ldrb	r3, [r0, #5]
1000e8aa:	7902      	ldrb	r2, [r0, #4]
1000e8ac:	021b      	lsls	r3, r3, #8
1000e8ae:	4313      	orrs	r3, r2
1000e8b0:	808b      	strh	r3, [r1, #4]
1000e8b2:	79c3      	ldrb	r3, [r0, #7]
1000e8b4:	7982      	ldrb	r2, [r0, #6]
1000e8b6:	021b      	lsls	r3, r3, #8
1000e8b8:	4313      	orrs	r3, r2
1000e8ba:	80cb      	strh	r3, [r1, #6]
1000e8bc:	2300      	movs	r3, #0
1000e8be:	720b      	strb	r3, [r1, #8]
1000e8c0:	4770      	bx	lr

1000e8c2 <gapc_lecb_disconnected>:
1000e8c2:	7843      	ldrb	r3, [r0, #1]
1000e8c4:	7802      	ldrb	r2, [r0, #0]
1000e8c6:	021b      	lsls	r3, r3, #8
1000e8c8:	4313      	orrs	r3, r2
1000e8ca:	800b      	strh	r3, [r1, #0]
1000e8cc:	78c3      	ldrb	r3, [r0, #3]
1000e8ce:	7882      	ldrb	r2, [r0, #2]
1000e8d0:	021b      	lsls	r3, r3, #8
1000e8d2:	4313      	orrs	r3, r2
1000e8d4:	804b      	strh	r3, [r1, #2]
1000e8d6:	4770      	bx	lr

1000e8d8 <gapc_lecb_connect_req_ind>:
1000e8d8:	7843      	ldrb	r3, [r0, #1]
1000e8da:	7802      	ldrb	r2, [r0, #0]
1000e8dc:	021b      	lsls	r3, r3, #8
1000e8de:	4313      	orrs	r3, r2
1000e8e0:	800b      	strh	r3, [r1, #0]
1000e8e2:	78c3      	ldrb	r3, [r0, #3]
1000e8e4:	7882      	ldrb	r2, [r0, #2]
1000e8e6:	021b      	lsls	r3, r3, #8
1000e8e8:	4313      	orrs	r3, r2
1000e8ea:	804b      	strh	r3, [r1, #2]
1000e8ec:	7943      	ldrb	r3, [r0, #5]
1000e8ee:	7902      	ldrb	r2, [r0, #4]
1000e8f0:	021b      	lsls	r3, r3, #8
1000e8f2:	4313      	orrs	r3, r2
1000e8f4:	808b      	strh	r3, [r1, #4]
1000e8f6:	79c3      	ldrb	r3, [r0, #7]
1000e8f8:	7982      	ldrb	r2, [r0, #6]
1000e8fa:	021b      	lsls	r3, r3, #8
1000e8fc:	4313      	orrs	r3, r2
1000e8fe:	80cb      	strh	r3, [r1, #6]
1000e900:	4770      	bx	lr

1000e902 <gapc_lecb_add_credit_resp_handler>:
1000e902:	7843      	ldrb	r3, [r0, #1]
1000e904:	7802      	ldrb	r2, [r0, #0]
1000e906:	021b      	lsls	r3, r3, #8
1000e908:	4313      	orrs	r3, r2
1000e90a:	800b      	strh	r3, [r1, #0]
1000e90c:	78c3      	ldrb	r3, [r0, #3]
1000e90e:	7882      	ldrb	r2, [r0, #2]
1000e910:	021b      	lsls	r3, r3, #8
1000e912:	4313      	orrs	r3, r2
1000e914:	804b      	strh	r3, [r1, #2]
1000e916:	7943      	ldrb	r3, [r0, #5]
1000e918:	7902      	ldrb	r2, [r0, #4]
1000e91a:	021b      	lsls	r3, r3, #8
1000e91c:	4313      	orrs	r3, r2
1000e91e:	808b      	strh	r3, [r1, #4]
1000e920:	4770      	bx	lr
	...

1000e924 <gapm_reset_req_handler>:
1000e924:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e926:	466b      	mov	r3, sp
1000e928:	4915      	ldr	r1, [pc, #84]	; (1000e980 <gapm_reset_req_handler+0x5c>)
1000e92a:	4816      	ldr	r0, [pc, #88]	; (1000e984 <gapm_reset_req_handler+0x60>)
1000e92c:	880c      	ldrh	r4, [r1, #0]
1000e92e:	8809      	ldrh	r1, [r1, #0]
1000e930:	1ddd      	adds	r5, r3, #7
1000e932:	0a09      	lsrs	r1, r1, #8
1000e934:	2300      	movs	r3, #0
1000e936:	2202      	movs	r2, #2
1000e938:	7141      	strb	r1, [r0, #5]
1000e93a:	26d0      	movs	r6, #208	; 0xd0
1000e93c:	2101      	movs	r1, #1
1000e93e:	7104      	strb	r4, [r0, #4]
1000e940:	4c11      	ldr	r4, [pc, #68]	; (1000e988 <gapm_reset_req_handler+0x64>)
1000e942:	702b      	strb	r3, [r5, #0]
1000e944:	7002      	strb	r2, [r0, #0]
1000e946:	70c3      	strb	r3, [r0, #3]
1000e948:	320b      	adds	r2, #11
1000e94a:	7201      	strb	r1, [r0, #8]
1000e94c:	7181      	strb	r1, [r0, #6]
1000e94e:	71c3      	strb	r3, [r0, #7]
1000e950:	3108      	adds	r1, #8
1000e952:	4b0e      	ldr	r3, [pc, #56]	; (1000e98c <gapm_reset_req_handler+0x68>)
1000e954:	0136      	lsls	r6, r6, #4
1000e956:	7042      	strb	r2, [r0, #1]
1000e958:	7082      	strb	r2, [r0, #2]
1000e95a:	80a2      	strh	r2, [r4, #4]
1000e95c:	8026      	strh	r6, [r4, #0]
1000e95e:	4798      	blx	r3
1000e960:	1c28      	adds	r0, r5, #0
1000e962:	4b0b      	ldr	r3, [pc, #44]	; (1000e990 <gapm_reset_req_handler+0x6c>)
1000e964:	4798      	blx	r3
1000e966:	782b      	ldrb	r3, [r5, #0]
1000e968:	20e2      	movs	r0, #226	; 0xe2
1000e96a:	2b00      	cmp	r3, #0
1000e96c:	d106      	bne.n	1000e97c <gapm_reset_req_handler+0x58>
1000e96e:	68a3      	ldr	r3, [r4, #8]
1000e970:	20e2      	movs	r0, #226	; 0xe2
1000e972:	781a      	ldrb	r2, [r3, #0]
1000e974:	785b      	ldrb	r3, [r3, #1]
1000e976:	2a01      	cmp	r2, #1
1000e978:	d100      	bne.n	1000e97c <gapm_reset_req_handler+0x58>
1000e97a:	1c18      	adds	r0, r3, #0
1000e97c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e97e:	46c0      	nop			; (mov r8, r8)
1000e980:	100160d4 	.word	0x100160d4
1000e984:	10016444 	.word	0x10016444
1000e988:	100160c8 	.word	0x100160c8
1000e98c:	1000dc19 	.word	0x1000dc19
1000e990:	1000dc7d 	.word	0x1000dc7d

1000e994 <gapm_set_dev_config_cmd_handler>:
1000e994:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e996:	b089      	sub	sp, #36	; 0x24
1000e998:	9303      	str	r3, [sp, #12]
1000e99a:	ab0e      	add	r3, sp, #56	; 0x38
1000e99c:	781b      	ldrb	r3, [r3, #0]
1000e99e:	4c37      	ldr	r4, [pc, #220]	; (1000ea7c <gapm_set_dev_config_cmd_handler+0xe8>)
1000e9a0:	9304      	str	r3, [sp, #16]
1000e9a2:	ab0f      	add	r3, sp, #60	; 0x3c
1000e9a4:	781b      	ldrb	r3, [r3, #0]
1000e9a6:	270d      	movs	r7, #13
1000e9a8:	9305      	str	r3, [sp, #20]
1000e9aa:	ab10      	add	r3, sp, #64	; 0x40
1000e9ac:	881b      	ldrh	r3, [r3, #0]
1000e9ae:	72a1      	strb	r1, [r4, #10]
1000e9b0:	9300      	str	r3, [sp, #0]
1000e9b2:	ab11      	add	r3, sp, #68	; 0x44
1000e9b4:	881b      	ldrh	r3, [r3, #0]
1000e9b6:	0a09      	lsrs	r1, r1, #8
1000e9b8:	9301      	str	r3, [sp, #4]
1000e9ba:	ab12      	add	r3, sp, #72	; 0x48
1000e9bc:	881b      	ldrh	r3, [r3, #0]
1000e9be:	7260      	strb	r0, [r4, #9]
1000e9c0:	9302      	str	r3, [sp, #8]
1000e9c2:	ab06      	add	r3, sp, #24
1000e9c4:	1dde      	adds	r6, r3, #7
1000e9c6:	2300      	movs	r3, #0
1000e9c8:	7033      	strb	r3, [r6, #0]
1000e9ca:	2304      	movs	r3, #4
1000e9cc:	7023      	strb	r3, [r4, #0]
1000e9ce:	2300      	movs	r3, #0
1000e9d0:	70e3      	strb	r3, [r4, #3]
1000e9d2:	4b2b      	ldr	r3, [pc, #172]	; (1000ea80 <gapm_set_dev_config_cmd_handler+0xec>)
1000e9d4:	72e1      	strb	r1, [r4, #11]
1000e9d6:	881d      	ldrh	r5, [r3, #0]
1000e9d8:	881b      	ldrh	r3, [r3, #0]
1000e9da:	1c11      	adds	r1, r2, #0
1000e9dc:	0a1b      	lsrs	r3, r3, #8
1000e9de:	7163      	strb	r3, [r4, #5]
1000e9e0:	2303      	movs	r3, #3
1000e9e2:	7125      	strb	r5, [r4, #4]
1000e9e4:	2206      	movs	r2, #6
1000e9e6:	4d27      	ldr	r5, [pc, #156]	; (1000ea84 <gapm_set_dev_config_cmd_handler+0xf0>)
1000e9e8:	4827      	ldr	r0, [pc, #156]	; (1000ea88 <gapm_set_dev_config_cmd_handler+0xf4>)
1000e9ea:	7223      	strb	r3, [r4, #8]
1000e9ec:	7067      	strb	r7, [r4, #1]
1000e9ee:	70a7      	strb	r7, [r4, #2]
1000e9f0:	47a8      	blx	r5
1000e9f2:	9903      	ldr	r1, [sp, #12]
1000e9f4:	2210      	movs	r2, #16
1000e9f6:	4825      	ldr	r0, [pc, #148]	; (1000ea8c <gapm_set_dev_config_cmd_handler+0xf8>)
1000e9f8:	47a8      	blx	r5
1000e9fa:	466a      	mov	r2, sp
1000e9fc:	7c12      	ldrb	r2, [r2, #16]
1000e9fe:	1ce3      	adds	r3, r4, #3
1000ea00:	77da      	strb	r2, [r3, #31]
1000ea02:	466a      	mov	r2, sp
1000ea04:	7d12      	ldrb	r2, [r2, #20]
1000ea06:	1d23      	adds	r3, r4, #4
1000ea08:	77da      	strb	r2, [r3, #31]
1000ea0a:	466a      	mov	r2, sp
1000ea0c:	7812      	ldrb	r2, [r2, #0]
1000ea0e:	1d63      	adds	r3, r4, #5
1000ea10:	77da      	strb	r2, [r3, #31]
1000ea12:	9b00      	ldr	r3, [sp, #0]
1000ea14:	1da2      	adds	r2, r4, #6
1000ea16:	0a1b      	lsrs	r3, r3, #8
1000ea18:	77d3      	strb	r3, [r2, #31]
1000ea1a:	466a      	mov	r2, sp
1000ea1c:	7912      	ldrb	r2, [r2, #4]
1000ea1e:	1de3      	adds	r3, r4, #7
1000ea20:	77da      	strb	r2, [r3, #31]
1000ea22:	1c22      	adds	r2, r4, #0
1000ea24:	9b01      	ldr	r3, [sp, #4]
1000ea26:	3208      	adds	r2, #8
1000ea28:	0a1b      	lsrs	r3, r3, #8
1000ea2a:	77d3      	strb	r3, [r2, #31]
1000ea2c:	466a      	mov	r2, sp
1000ea2e:	1c23      	adds	r3, r4, #0
1000ea30:	7a12      	ldrb	r2, [r2, #8]
1000ea32:	3328      	adds	r3, #40	; 0x28
1000ea34:	701a      	strb	r2, [r3, #0]
1000ea36:	1c22      	adds	r2, r4, #0
1000ea38:	9b02      	ldr	r3, [sp, #8]
1000ea3a:	3229      	adds	r2, #41	; 0x29
1000ea3c:	0a1b      	lsrs	r3, r3, #8
1000ea3e:	7013      	strb	r3, [r2, #0]
1000ea40:	23d0      	movs	r3, #208	; 0xd0
1000ea42:	4d13      	ldr	r5, [pc, #76]	; (1000ea90 <gapm_set_dev_config_cmd_handler+0xfc>)
1000ea44:	011b      	lsls	r3, r3, #4
1000ea46:	802b      	strh	r3, [r5, #0]
1000ea48:	2322      	movs	r3, #34	; 0x22
1000ea4a:	71a3      	strb	r3, [r4, #6]
1000ea4c:	2300      	movs	r3, #0
1000ea4e:	212a      	movs	r1, #42	; 0x2a
1000ea50:	71e3      	strb	r3, [r4, #7]
1000ea52:	1c20      	adds	r0, r4, #0
1000ea54:	4b0f      	ldr	r3, [pc, #60]	; (1000ea94 <gapm_set_dev_config_cmd_handler+0x100>)
1000ea56:	80af      	strh	r7, [r5, #4]
1000ea58:	4798      	blx	r3
1000ea5a:	1c30      	adds	r0, r6, #0
1000ea5c:	4b0e      	ldr	r3, [pc, #56]	; (1000ea98 <gapm_set_dev_config_cmd_handler+0x104>)
1000ea5e:	4798      	blx	r3
1000ea60:	7833      	ldrb	r3, [r6, #0]
1000ea62:	20e2      	movs	r0, #226	; 0xe2
1000ea64:	2b00      	cmp	r3, #0
1000ea66:	d106      	bne.n	1000ea76 <gapm_set_dev_config_cmd_handler+0xe2>
1000ea68:	68ab      	ldr	r3, [r5, #8]
1000ea6a:	20e2      	movs	r0, #226	; 0xe2
1000ea6c:	781a      	ldrb	r2, [r3, #0]
1000ea6e:	785b      	ldrb	r3, [r3, #1]
1000ea70:	2a03      	cmp	r2, #3
1000ea72:	d100      	bne.n	1000ea76 <gapm_set_dev_config_cmd_handler+0xe2>
1000ea74:	1c18      	adds	r0, r3, #0
1000ea76:	b009      	add	sp, #36	; 0x24
1000ea78:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea7a:	46c0      	nop			; (mov r8, r8)
1000ea7c:	10016444 	.word	0x10016444
1000ea80:	100160d4 	.word	0x100160d4
1000ea84:	100116f3 	.word	0x100116f3
1000ea88:	10016450 	.word	0x10016450
1000ea8c:	10016456 	.word	0x10016456
1000ea90:	100160c8 	.word	0x100160c8
1000ea94:	1000dc19 	.word	0x1000dc19
1000ea98:	1000dc7d 	.word	0x1000dc7d

1000ea9c <gapm_get_dev_config_cmd_handler>:
1000ea9c:	4684      	mov	ip, r0
1000ea9e:	4663      	mov	r3, ip
1000eaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eaa2:	b085      	sub	sp, #20
1000eaa4:	9100      	str	r1, [sp, #0]
1000eaa6:	20cf      	movs	r0, #207	; 0xcf
1000eaa8:	2b01      	cmp	r3, #1
1000eaaa:	d854      	bhi.n	1000eb56 <gapm_get_dev_config_cmd_handler+0xba>
1000eaac:	2900      	cmp	r1, #0
1000eaae:	d052      	beq.n	1000eb56 <gapm_get_dev_config_cmd_handler+0xba>
1000eab0:	2200      	movs	r2, #0
1000eab2:	492a      	ldr	r1, [pc, #168]	; (1000eb5c <gapm_get_dev_config_cmd_handler+0xc0>)
1000eab4:	ab02      	add	r3, sp, #8
1000eab6:	880c      	ldrh	r4, [r1, #0]
1000eab8:	8809      	ldrh	r1, [r1, #0]
1000eaba:	1d9f      	adds	r7, r3, #6
1000eabc:	719a      	strb	r2, [r3, #6]
1000eabe:	4b28      	ldr	r3, [pc, #160]	; (1000eb60 <gapm_get_dev_config_cmd_handler+0xc4>)
1000eac0:	0a09      	lsrs	r1, r1, #8
1000eac2:	250d      	movs	r5, #13
1000eac4:	2606      	movs	r6, #6
1000eac6:	7159      	strb	r1, [r3, #5]
1000eac8:	4661      	mov	r1, ip
1000eaca:	701e      	strb	r6, [r3, #0]
1000eacc:	705d      	strb	r5, [r3, #1]
1000eace:	709d      	strb	r5, [r3, #2]
1000ead0:	70da      	strb	r2, [r3, #3]
1000ead2:	711c      	strb	r4, [r3, #4]
1000ead4:	2901      	cmp	r1, #1
1000ead6:	d13e      	bne.n	1000eb56 <gapm_get_dev_config_cmd_handler+0xba>
1000ead8:	21d0      	movs	r1, #208	; 0xd0
1000eada:	4c22      	ldr	r4, [pc, #136]	; (1000eb64 <gapm_get_dev_config_cmd_handler+0xc8>)
1000eadc:	0109      	lsls	r1, r1, #4
1000eade:	8061      	strh	r1, [r4, #2]
1000eae0:	4921      	ldr	r1, [pc, #132]	; (1000eb68 <gapm_get_dev_config_cmd_handler+0xcc>)
1000eae2:	71da      	strb	r2, [r3, #7]
1000eae4:	8021      	strh	r1, [r4, #0]
1000eae6:	4661      	mov	r1, ip
1000eae8:	721e      	strb	r6, [r3, #8]
1000eaea:	7199      	strb	r1, [r3, #6]
1000eaec:	1c18      	adds	r0, r3, #0
1000eaee:	2109      	movs	r1, #9
1000eaf0:	4b1e      	ldr	r3, [pc, #120]	; (1000eb6c <gapm_get_dev_config_cmd_handler+0xd0>)
1000eaf2:	80a5      	strh	r5, [r4, #4]
1000eaf4:	4798      	blx	r3
1000eaf6:	1c38      	adds	r0, r7, #0
1000eaf8:	4b1d      	ldr	r3, [pc, #116]	; (1000eb70 <gapm_get_dev_config_cmd_handler+0xd4>)
1000eafa:	4798      	blx	r3
1000eafc:	783b      	ldrb	r3, [r7, #0]
1000eafe:	20e2      	movs	r0, #226	; 0xe2
1000eb00:	9301      	str	r3, [sp, #4]
1000eb02:	2b00      	cmp	r3, #0
1000eb04:	d127      	bne.n	1000eb56 <gapm_get_dev_config_cmd_handler+0xba>
1000eb06:	8821      	ldrh	r1, [r4, #0]
1000eb08:	4a1a      	ldr	r2, [pc, #104]	; (1000eb74 <gapm_get_dev_config_cmd_handler+0xd8>)
1000eb0a:	68a7      	ldr	r7, [r4, #8]
1000eb0c:	3b01      	subs	r3, #1
1000eb0e:	4291      	cmp	r1, r2
1000eb10:	d001      	beq.n	1000eb16 <gapm_get_dev_config_cmd_handler+0x7a>
1000eb12:	8023      	strh	r3, [r4, #0]
1000eb14:	e01a      	b.n	1000eb4c <gapm_get_dev_config_cmd_handler+0xb0>
1000eb16:	8063      	strh	r3, [r4, #2]
1000eb18:	9b00      	ldr	r3, [sp, #0]
1000eb1a:	1c39      	adds	r1, r7, #0
1000eb1c:	1c58      	adds	r0, r3, #1
1000eb1e:	1c32      	adds	r2, r6, #0
1000eb20:	4b15      	ldr	r3, [pc, #84]	; (1000eb78 <gapm_get_dev_config_cmd_handler+0xdc>)
1000eb22:	4798      	blx	r3
1000eb24:	79bb      	ldrb	r3, [r7, #6]
1000eb26:	9a00      	ldr	r2, [sp, #0]
1000eb28:	7013      	strb	r3, [r2, #0]
1000eb2a:	23d0      	movs	r3, #208	; 0xd0
1000eb2c:	011b      	lsls	r3, r3, #4
1000eb2e:	8023      	strh	r3, [r4, #0]
1000eb30:	ab02      	add	r3, sp, #8
1000eb32:	80a5      	strh	r5, [r4, #4]
1000eb34:	1ddd      	adds	r5, r3, #7
1000eb36:	466b      	mov	r3, sp
1000eb38:	791b      	ldrb	r3, [r3, #4]
1000eb3a:	1c28      	adds	r0, r5, #0
1000eb3c:	702b      	strb	r3, [r5, #0]
1000eb3e:	4b0c      	ldr	r3, [pc, #48]	; (1000eb70 <gapm_get_dev_config_cmd_handler+0xd4>)
1000eb40:	4798      	blx	r3
1000eb42:	782b      	ldrb	r3, [r5, #0]
1000eb44:	20d0      	movs	r0, #208	; 0xd0
1000eb46:	2b00      	cmp	r3, #0
1000eb48:	d105      	bne.n	1000eb56 <gapm_get_dev_config_cmd_handler+0xba>
1000eb4a:	68a7      	ldr	r7, [r4, #8]
1000eb4c:	783b      	ldrb	r3, [r7, #0]
1000eb4e:	7878      	ldrb	r0, [r7, #1]
1000eb50:	2b06      	cmp	r3, #6
1000eb52:	d000      	beq.n	1000eb56 <gapm_get_dev_config_cmd_handler+0xba>
1000eb54:	20e2      	movs	r0, #226	; 0xe2
1000eb56:	b005      	add	sp, #20
1000eb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb5a:	46c0      	nop			; (mov r8, r8)
1000eb5c:	100160d4 	.word	0x100160d4
1000eb60:	10016444 	.word	0x10016444
1000eb64:	100160c8 	.word	0x100160c8
1000eb68:	00000d08 	.word	0x00000d08
1000eb6c:	1000dc19 	.word	0x1000dc19
1000eb70:	1000dc7d 	.word	0x1000dc7d
1000eb74:	0000ffff 	.word	0x0000ffff
1000eb78:	100116f3 	.word	0x100116f3

1000eb7c <gapm_cancel_cmd_handler>:
1000eb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000eb7e:	4916      	ldr	r1, [pc, #88]	; (1000ebd8 <gapm_cancel_cmd_handler+0x5c>)
1000eb80:	4816      	ldr	r0, [pc, #88]	; (1000ebdc <gapm_cancel_cmd_handler+0x60>)
1000eb82:	880c      	ldrh	r4, [r1, #0]
1000eb84:	8809      	ldrh	r1, [r1, #0]
1000eb86:	466b      	mov	r3, sp
1000eb88:	0a09      	lsrs	r1, r1, #8
1000eb8a:	7141      	strb	r1, [r0, #5]
1000eb8c:	2102      	movs	r1, #2
1000eb8e:	2203      	movs	r2, #3
1000eb90:	7201      	strb	r1, [r0, #8]
1000eb92:	21d0      	movs	r1, #208	; 0xd0
1000eb94:	1ddd      	adds	r5, r3, #7
1000eb96:	2300      	movs	r3, #0
1000eb98:	7104      	strb	r4, [r0, #4]
1000eb9a:	4c11      	ldr	r4, [pc, #68]	; (1000ebe0 <gapm_cancel_cmd_handler+0x64>)
1000eb9c:	7002      	strb	r2, [r0, #0]
1000eb9e:	0109      	lsls	r1, r1, #4
1000eba0:	320a      	adds	r2, #10
1000eba2:	702b      	strb	r3, [r5, #0]
1000eba4:	7042      	strb	r2, [r0, #1]
1000eba6:	7082      	strb	r2, [r0, #2]
1000eba8:	70c3      	strb	r3, [r0, #3]
1000ebaa:	8021      	strh	r1, [r4, #0]
1000ebac:	80a2      	strh	r2, [r4, #4]
1000ebae:	71c3      	strb	r3, [r0, #7]
1000ebb0:	3a0c      	subs	r2, #12
1000ebb2:	2109      	movs	r1, #9
1000ebb4:	4b0b      	ldr	r3, [pc, #44]	; (1000ebe4 <gapm_cancel_cmd_handler+0x68>)
1000ebb6:	7182      	strb	r2, [r0, #6]
1000ebb8:	4798      	blx	r3
1000ebba:	1c28      	adds	r0, r5, #0
1000ebbc:	4b0a      	ldr	r3, [pc, #40]	; (1000ebe8 <gapm_cancel_cmd_handler+0x6c>)
1000ebbe:	4798      	blx	r3
1000ebc0:	7828      	ldrb	r0, [r5, #0]
1000ebc2:	2800      	cmp	r0, #0
1000ebc4:	d001      	beq.n	1000ebca <gapm_cancel_cmd_handler+0x4e>
1000ebc6:	20e2      	movs	r0, #226	; 0xe2
1000ebc8:	e004      	b.n	1000ebd4 <gapm_cancel_cmd_handler+0x58>
1000ebca:	68a3      	ldr	r3, [r4, #8]
1000ebcc:	785b      	ldrb	r3, [r3, #1]
1000ebce:	2b44      	cmp	r3, #68	; 0x44
1000ebd0:	d000      	beq.n	1000ebd4 <gapm_cancel_cmd_handler+0x58>
1000ebd2:	1c18      	adds	r0, r3, #0
1000ebd4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ebd6:	46c0      	nop			; (mov r8, r8)
1000ebd8:	100160d4 	.word	0x100160d4
1000ebdc:	10016444 	.word	0x10016444
1000ebe0:	100160c8 	.word	0x100160c8
1000ebe4:	1000dc19 	.word	0x1000dc19
1000ebe8:	1000dc7d 	.word	0x1000dc7d

1000ebec <gapm_dev_bdaddr_ind_handler>:
1000ebec:	b538      	push	{r3, r4, r5, lr}
1000ebee:	1c05      	adds	r5, r0, #0
1000ebf0:	1c0c      	adds	r4, r1, #0
1000ebf2:	1c48      	adds	r0, r1, #1
1000ebf4:	2206      	movs	r2, #6
1000ebf6:	1c29      	adds	r1, r5, #0
1000ebf8:	4b02      	ldr	r3, [pc, #8]	; (1000ec04 <gapm_dev_bdaddr_ind_handler+0x18>)
1000ebfa:	4798      	blx	r3
1000ebfc:	79ab      	ldrb	r3, [r5, #6]
1000ebfe:	2000      	movs	r0, #0
1000ec00:	7023      	strb	r3, [r4, #0]
1000ec02:	bd38      	pop	{r3, r4, r5, pc}
1000ec04:	100116f3 	.word	0x100116f3

1000ec08 <gapm_cmp_evt>:
1000ec08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ec0a:	7803      	ldrb	r3, [r0, #0]
1000ec0c:	7845      	ldrb	r5, [r0, #1]
1000ec0e:	3b0c      	subs	r3, #12
1000ec10:	1e18      	subs	r0, r3, #0
1000ec12:	280b      	cmp	r0, #11
1000ec14:	d900      	bls.n	1000ec18 <gapm_cmp_evt+0x10>
1000ec16:	e08d      	b.n	1000ed34 <gapm_cmp_evt+0x12c>
1000ec18:	1c0c      	adds	r4, r1, #0
1000ec1a:	f000 fe4f 	bl	1000f8bc <__gnu_thumb1_case_uqi>
1000ec1e:	1952      	.short	0x1952
1000ec20:	068b1919 	.word	0x068b1919
1000ec24:	8b595906 	.word	0x8b595906
1000ec28:	0d8b      	.short	0x0d8b
1000ec2a:	2300      	movs	r3, #0
1000ec2c:	2d45      	cmp	r5, #69	; 0x45
1000ec2e:	d000      	beq.n	1000ec32 <gapm_cmp_evt+0x2a>
1000ec30:	1c2b      	adds	r3, r5, #0
1000ec32:	7023      	strb	r3, [r4, #0]
1000ec34:	2002      	movs	r0, #2
1000ec36:	e07e      	b.n	1000ed36 <gapm_cmp_evt+0x12e>
1000ec38:	203b      	movs	r0, #59	; 0x3b
1000ec3a:	2d00      	cmp	r5, #0
1000ec3c:	d100      	bne.n	1000ec40 <gapm_cmp_evt+0x38>
1000ec3e:	e07a      	b.n	1000ed36 <gapm_cmp_evt+0x12e>
1000ec40:	700d      	strb	r5, [r1, #0]
1000ec42:	1c48      	adds	r0, r1, #1
1000ec44:	2210      	movs	r2, #16
1000ec46:	2100      	movs	r1, #0
1000ec48:	4b3b      	ldr	r3, [pc, #236]	; (1000ed38 <gapm_cmp_evt+0x130>)
1000ec4a:	4798      	blx	r3
1000ec4c:	200f      	movs	r0, #15
1000ec4e:	e072      	b.n	1000ed36 <gapm_cmp_evt+0x12e>
1000ec50:	2d00      	cmp	r5, #0
1000ec52:	d134      	bne.n	1000ecbe <gapm_cmp_evt+0xb6>
1000ec54:	4b39      	ldr	r3, [pc, #228]	; (1000ed3c <gapm_cmp_evt+0x134>)
1000ec56:	4798      	blx	r3
1000ec58:	1e43      	subs	r3, r0, #1
1000ec5a:	b2db      	uxtb	r3, r3
1000ec5c:	1c28      	adds	r0, r5, #0
1000ec5e:	2b06      	cmp	r3, #6
1000ec60:	d869      	bhi.n	1000ed36 <gapm_cmp_evt+0x12e>
1000ec62:	466b      	mov	r3, sp
1000ec64:	4e36      	ldr	r6, [pc, #216]	; (1000ed40 <gapm_cmp_evt+0x138>)
1000ec66:	1dd9      	adds	r1, r3, #7
1000ec68:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000ec6a:	4b36      	ldr	r3, [pc, #216]	; (1000ed44 <gapm_cmp_evt+0x13c>)
1000ec6c:	4798      	blx	r3
1000ec6e:	2312      	movs	r3, #18
1000ec70:	4358      	muls	r0, r3
1000ec72:	4935      	ldr	r1, [pc, #212]	; (1000ed48 <gapm_cmp_evt+0x140>)
1000ec74:	1809      	adds	r1, r1, r0
1000ec76:	1c0b      	adds	r3, r1, #0
1000ec78:	894a      	ldrh	r2, [r1, #10]
1000ec7a:	3308      	adds	r3, #8
1000ec7c:	8122      	strh	r2, [r4, #8]
1000ec7e:	784f      	ldrb	r7, [r1, #1]
1000ec80:	72a5      	strb	r5, [r4, #10]
1000ec82:	7027      	strb	r7, [r4, #0]
1000ec84:	898a      	ldrh	r2, [r1, #12]
1000ec86:	1c60      	adds	r0, r4, #1
1000ec88:	81a2      	strh	r2, [r4, #12]
1000ec8a:	88db      	ldrh	r3, [r3, #6]
1000ec8c:	3102      	adds	r1, #2
1000ec8e:	81e3      	strh	r3, [r4, #14]
1000ec90:	89cb      	ldrh	r3, [r1, #14]
1000ec92:	2206      	movs	r2, #6
1000ec94:	8223      	strh	r3, [r4, #16]
1000ec96:	4b2d      	ldr	r3, [pc, #180]	; (1000ed4c <gapm_cmp_evt+0x144>)
1000ec98:	4798      	blx	r3
1000ec9a:	2f00      	cmp	r7, #0
1000ec9c:	d00a      	beq.n	1000ecb4 <gapm_cmp_evt+0xac>
1000ec9e:	79a3      	ldrb	r3, [r4, #6]
1000eca0:	223f      	movs	r2, #63	; 0x3f
1000eca2:	1c19      	adds	r1, r3, #0
1000eca4:	3501      	adds	r5, #1
1000eca6:	4391      	bics	r1, r2
1000eca8:	29c0      	cmp	r1, #192	; 0xc0
1000ecaa:	d003      	beq.n	1000ecb4 <gapm_cmp_evt+0xac>
1000ecac:	065b      	lsls	r3, r3, #25
1000ecae:	0fdb      	lsrs	r3, r3, #31
1000ecb0:	3502      	adds	r5, #2
1000ecb2:	1aed      	subs	r5, r5, r3
1000ecb4:	2301      	movs	r3, #1
1000ecb6:	425b      	negs	r3, r3
1000ecb8:	7025      	strb	r5, [r4, #0]
1000ecba:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000ecbc:	e038      	b.n	1000ed30 <gapm_cmp_evt+0x128>
1000ecbe:	700d      	strb	r5, [r1, #0]
1000ecc0:	e004      	b.n	1000eccc <gapm_cmp_evt+0xc4>
1000ecc2:	2300      	movs	r3, #0
1000ecc4:	2d45      	cmp	r5, #69	; 0x45
1000ecc6:	d000      	beq.n	1000ecca <gapm_cmp_evt+0xc2>
1000ecc8:	1c2b      	adds	r3, r5, #0
1000ecca:	7023      	strb	r3, [r4, #0]
1000eccc:	2003      	movs	r0, #3
1000ecce:	e032      	b.n	1000ed36 <gapm_cmp_evt+0x12e>
1000ecd0:	4e1b      	ldr	r6, [pc, #108]	; (1000ed40 <gapm_cmp_evt+0x138>)
1000ecd2:	2100      	movs	r1, #0
1000ecd4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000ecd6:	4b1b      	ldr	r3, [pc, #108]	; (1000ed44 <gapm_cmp_evt+0x13c>)
1000ecd8:	4798      	blx	r3
1000ecda:	2807      	cmp	r0, #7
1000ecdc:	d818      	bhi.n	1000ed10 <gapm_cmp_evt+0x108>
1000ecde:	2301      	movs	r3, #1
1000ece0:	425b      	negs	r3, r3
1000ece2:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000ece4:	3313      	adds	r3, #19
1000ece6:	4358      	muls	r0, r3
1000ece8:	4917      	ldr	r1, [pc, #92]	; (1000ed48 <gapm_cmp_evt+0x140>)
1000ecea:	1809      	adds	r1, r1, r0
1000ecec:	1c0b      	adds	r3, r1, #0
1000ecee:	894a      	ldrh	r2, [r1, #10]
1000ecf0:	3308      	adds	r3, #8
1000ecf2:	8122      	strh	r2, [r4, #8]
1000ecf4:	784a      	ldrb	r2, [r1, #1]
1000ecf6:	72a5      	strb	r5, [r4, #10]
1000ecf8:	7022      	strb	r2, [r4, #0]
1000ecfa:	898a      	ldrh	r2, [r1, #12]
1000ecfc:	1c60      	adds	r0, r4, #1
1000ecfe:	81a2      	strh	r2, [r4, #12]
1000ed00:	88db      	ldrh	r3, [r3, #6]
1000ed02:	3102      	adds	r1, #2
1000ed04:	81e3      	strh	r3, [r4, #14]
1000ed06:	89cb      	ldrh	r3, [r1, #14]
1000ed08:	2206      	movs	r2, #6
1000ed0a:	8223      	strh	r3, [r4, #16]
1000ed0c:	4b0f      	ldr	r3, [pc, #60]	; (1000ed4c <gapm_cmp_evt+0x144>)
1000ed0e:	4798      	blx	r3
1000ed10:	2200      	movs	r2, #0
1000ed12:	7823      	ldrb	r3, [r4, #0]
1000ed14:	4293      	cmp	r3, r2
1000ed16:	d00a      	beq.n	1000ed2e <gapm_cmp_evt+0x126>
1000ed18:	79a3      	ldrb	r3, [r4, #6]
1000ed1a:	323f      	adds	r2, #63	; 0x3f
1000ed1c:	1c19      	adds	r1, r3, #0
1000ed1e:	4391      	bics	r1, r2
1000ed20:	3a3e      	subs	r2, #62	; 0x3e
1000ed22:	29c0      	cmp	r1, #192	; 0xc0
1000ed24:	d003      	beq.n	1000ed2e <gapm_cmp_evt+0x126>
1000ed26:	065b      	lsls	r3, r3, #25
1000ed28:	0fdb      	lsrs	r3, r3, #31
1000ed2a:	3202      	adds	r2, #2
1000ed2c:	1ad2      	subs	r2, r2, r3
1000ed2e:	7022      	strb	r2, [r4, #0]
1000ed30:	2005      	movs	r0, #5
1000ed32:	e000      	b.n	1000ed36 <gapm_cmp_evt+0x12e>
1000ed34:	2000      	movs	r0, #0
1000ed36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ed38:	10011705 	.word	0x10011705
1000ed3c:	1000dedd 	.word	0x1000dedd
1000ed40:	10016166 	.word	0x10016166
1000ed44:	1000dea1 	.word	0x1000dea1
1000ed48:	100160d6 	.word	0x100160d6
1000ed4c:	100116f3 	.word	0x100116f3

1000ed50 <gapm_start_adv_cmd_handler>:
1000ed50:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed52:	b089      	sub	sp, #36	; 0x24
1000ed54:	9303      	str	r3, [sp, #12]
1000ed56:	ab0e      	add	r3, sp, #56	; 0x38
1000ed58:	9102      	str	r1, [sp, #8]
1000ed5a:	cb02      	ldmia	r3!, {r1}
1000ed5c:	aa08      	add	r2, sp, #32
1000ed5e:	881b      	ldrh	r3, [r3, #0]
1000ed60:	4e3c      	ldr	r6, [pc, #240]	; (1000ee54 <gapm_start_adv_cmd_handler+0x104>)
1000ed62:	9300      	str	r3, [sp, #0]
1000ed64:	ab10      	add	r3, sp, #64	; 0x40
1000ed66:	881b      	ldrh	r3, [r3, #0]
1000ed68:	240d      	movs	r4, #13
1000ed6a:	469c      	mov	ip, r3
1000ed6c:	ab11      	add	r3, sp, #68	; 0x44
1000ed6e:	781b      	ldrb	r3, [r3, #0]
1000ed70:	9304      	str	r3, [sp, #16]
1000ed72:	ab12      	add	r3, sp, #72	; 0x48
1000ed74:	781b      	ldrb	r3, [r3, #0]
1000ed76:	9305      	str	r3, [sp, #20]
1000ed78:	ab13      	add	r3, sp, #76	; 0x4c
1000ed7a:	781b      	ldrb	r3, [r3, #0]
1000ed7c:	9306      	str	r3, [sp, #24]
1000ed7e:	ab14      	add	r3, sp, #80	; 0x50
1000ed80:	781b      	ldrb	r3, [r3, #0]
1000ed82:	9301      	str	r3, [sp, #4]
1000ed84:	2319      	movs	r3, #25
1000ed86:	189b      	adds	r3, r3, r2
1000ed88:	7fdd      	ldrb	r5, [r3, #31]
1000ed8a:	ab18      	add	r3, sp, #96	; 0x60
1000ed8c:	881f      	ldrh	r7, [r3, #0]
1000ed8e:	ab19      	add	r3, sp, #100	; 0x64
1000ed90:	781b      	ldrb	r3, [r3, #0]
1000ed92:	8832      	ldrh	r2, [r6, #0]
1000ed94:	9307      	str	r3, [sp, #28]
1000ed96:	4b30      	ldr	r3, [pc, #192]	; (1000ee58 <gapm_start_adv_cmd_handler+0x108>)
1000ed98:	8836      	ldrh	r6, [r6, #0]
1000ed9a:	711a      	strb	r2, [r3, #4]
1000ed9c:	466a      	mov	r2, sp
1000ed9e:	7a12      	ldrb	r2, [r2, #8]
1000eda0:	701c      	strb	r4, [r3, #0]
1000eda2:	705c      	strb	r4, [r3, #1]
1000eda4:	709c      	strb	r4, [r3, #2]
1000eda6:	725a      	strb	r2, [r3, #9]
1000eda8:	2400      	movs	r4, #0
1000edaa:	466a      	mov	r2, sp
1000edac:	0a36      	lsrs	r6, r6, #8
1000edae:	70dc      	strb	r4, [r3, #3]
1000edb0:	7218      	strb	r0, [r3, #8]
1000edb2:	729c      	strb	r4, [r3, #10]
1000edb4:	715e      	strb	r6, [r3, #5]
1000edb6:	72dc      	strb	r4, [r3, #11]
1000edb8:	7812      	ldrb	r2, [r2, #0]
1000edba:	380e      	subs	r0, #14
1000edbc:	731a      	strb	r2, [r3, #12]
1000edbe:	9a00      	ldr	r2, [sp, #0]
1000edc0:	0a14      	lsrs	r4, r2, #8
1000edc2:	4662      	mov	r2, ip
1000edc4:	739a      	strb	r2, [r3, #14]
1000edc6:	4662      	mov	r2, ip
1000edc8:	735c      	strb	r4, [r3, #13]
1000edca:	0a14      	lsrs	r4, r2, #8
1000edcc:	466a      	mov	r2, sp
1000edce:	7c12      	ldrb	r2, [r2, #16]
1000edd0:	73dc      	strb	r4, [r3, #15]
1000edd2:	741a      	strb	r2, [r3, #16]
1000edd4:	1c1c      	adds	r4, r3, #0
1000edd6:	2801      	cmp	r0, #1
1000edd8:	d809      	bhi.n	1000edee <gapm_start_adv_cmd_handler+0x9e>
1000edda:	2900      	cmp	r1, #0
1000eddc:	d003      	beq.n	1000ede6 <gapm_start_adv_cmd_handler+0x96>
1000edde:	481f      	ldr	r0, [pc, #124]	; (1000ee5c <gapm_start_adv_cmd_handler+0x10c>)
1000ede0:	2206      	movs	r2, #6
1000ede2:	4b1f      	ldr	r3, [pc, #124]	; (1000ee60 <gapm_start_adv_cmd_handler+0x110>)
1000ede4:	4798      	blx	r3
1000ede6:	466b      	mov	r3, sp
1000ede8:	7b1b      	ldrb	r3, [r3, #12]
1000edea:	75e3      	strb	r3, [r4, #23]
1000edec:	e014      	b.n	1000ee18 <gapm_start_adv_cmd_handler+0xc8>
1000edee:	466b      	mov	r3, sp
1000edf0:	7d1b      	ldrb	r3, [r3, #20]
1000edf2:	9915      	ldr	r1, [sp, #84]	; 0x54
1000edf4:	7463      	strb	r3, [r4, #17]
1000edf6:	466b      	mov	r3, sp
1000edf8:	7e1b      	ldrb	r3, [r3, #24]
1000edfa:	9a01      	ldr	r2, [sp, #4]
1000edfc:	74a3      	strb	r3, [r4, #18]
1000edfe:	466b      	mov	r3, sp
1000ee00:	791b      	ldrb	r3, [r3, #4]
1000ee02:	4818      	ldr	r0, [pc, #96]	; (1000ee64 <gapm_start_adv_cmd_handler+0x114>)
1000ee04:	4e16      	ldr	r6, [pc, #88]	; (1000ee60 <gapm_start_adv_cmd_handler+0x110>)
1000ee06:	74e3      	strb	r3, [r4, #19]
1000ee08:	47b0      	blx	r6
1000ee0a:	1c23      	adds	r3, r4, #0
1000ee0c:	4816      	ldr	r0, [pc, #88]	; (1000ee68 <gapm_start_adv_cmd_handler+0x118>)
1000ee0e:	3330      	adds	r3, #48	; 0x30
1000ee10:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000ee12:	1c2a      	adds	r2, r5, #0
1000ee14:	701d      	strb	r5, [r3, #0]
1000ee16:	47b0      	blx	r6
1000ee18:	1c22      	adds	r2, r4, #0
1000ee1a:	23a5      	movs	r3, #165	; 0xa5
1000ee1c:	3250      	adds	r2, #80	; 0x50
1000ee1e:	7013      	strb	r3, [r2, #0]
1000ee20:	1c22      	adds	r2, r4, #0
1000ee22:	3251      	adds	r2, #81	; 0x51
1000ee24:	7013      	strb	r3, [r2, #0]
1000ee26:	1c23      	adds	r3, r4, #0
1000ee28:	1c22      	adds	r2, r4, #0
1000ee2a:	3352      	adds	r3, #82	; 0x52
1000ee2c:	701f      	strb	r7, [r3, #0]
1000ee2e:	3253      	adds	r2, #83	; 0x53
1000ee30:	0a3b      	lsrs	r3, r7, #8
1000ee32:	7013      	strb	r3, [r2, #0]
1000ee34:	466a      	mov	r2, sp
1000ee36:	1c23      	adds	r3, r4, #0
1000ee38:	7f12      	ldrb	r2, [r2, #28]
1000ee3a:	3354      	adds	r3, #84	; 0x54
1000ee3c:	701a      	strb	r2, [r3, #0]
1000ee3e:	234d      	movs	r3, #77	; 0x4d
1000ee40:	2500      	movs	r5, #0
1000ee42:	71a3      	strb	r3, [r4, #6]
1000ee44:	1c20      	adds	r0, r4, #0
1000ee46:	2155      	movs	r1, #85	; 0x55
1000ee48:	4b08      	ldr	r3, [pc, #32]	; (1000ee6c <gapm_start_adv_cmd_handler+0x11c>)
1000ee4a:	71e5      	strb	r5, [r4, #7]
1000ee4c:	4798      	blx	r3
1000ee4e:	1c28      	adds	r0, r5, #0
1000ee50:	b009      	add	sp, #36	; 0x24
1000ee52:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee54:	100160d4 	.word	0x100160d4
1000ee58:	10016444 	.word	0x10016444
1000ee5c:	10016455 	.word	0x10016455
1000ee60:	100116f3 	.word	0x100116f3
1000ee64:	10016458 	.word	0x10016458
1000ee68:	10016475 	.word	0x10016475
1000ee6c:	1000dc19 	.word	0x1000dc19

1000ee70 <get_gap_local_addr_type>:
1000ee70:	4b04      	ldr	r3, [pc, #16]	; (1000ee84 <get_gap_local_addr_type+0x14>)
1000ee72:	2001      	movs	r0, #1
1000ee74:	791b      	ldrb	r3, [r3, #4]
1000ee76:	2b02      	cmp	r3, #2
1000ee78:	d003      	beq.n	1000ee82 <get_gap_local_addr_type+0x12>
1000ee7a:	3b03      	subs	r3, #3
1000ee7c:	4258      	negs	r0, r3
1000ee7e:	4158      	adcs	r0, r3
1000ee80:	0040      	lsls	r0, r0, #1
1000ee82:	4770      	bx	lr
1000ee84:	10016166 	.word	0x10016166

1000ee88 <gapm_adv_report_evt_handler>:
1000ee88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ee8a:	7843      	ldrb	r3, [r0, #1]
1000ee8c:	1c05      	adds	r5, r0, #0
1000ee8e:	9301      	str	r3, [sp, #4]
1000ee90:	466b      	mov	r3, sp
1000ee92:	1c0c      	adds	r4, r1, #0
1000ee94:	791b      	ldrb	r3, [r3, #4]
1000ee96:	7806      	ldrb	r6, [r0, #0]
1000ee98:	2206      	movs	r2, #6
1000ee9a:	704b      	strb	r3, [r1, #1]
1000ee9c:	1c88      	adds	r0, r1, #2
1000ee9e:	4f1b      	ldr	r7, [pc, #108]	; (1000ef0c <gapm_adv_report_evt_handler+0x84>)
1000eea0:	1ca9      	adds	r1, r5, #2
1000eea2:	47b8      	blx	r7
1000eea4:	1c20      	adds	r0, r4, #0
1000eea6:	1c29      	adds	r1, r5, #0
1000eea8:	7a2a      	ldrb	r2, [r5, #8]
1000eeaa:	3008      	adds	r0, #8
1000eeac:	77c2      	strb	r2, [r0, #31]
1000eeae:	3109      	adds	r1, #9
1000eeb0:	3528      	adds	r5, #40	; 0x28
1000eeb2:	47b8      	blx	r7
1000eeb4:	782b      	ldrb	r3, [r5, #0]
1000eeb6:	b25a      	sxtb	r2, r3
1000eeb8:	2a00      	cmp	r2, #0
1000eeba:	da01      	bge.n	1000eec0 <gapm_adv_report_evt_handler+0x38>
1000eebc:	3301      	adds	r3, #1
1000eebe:	b2db      	uxtb	r3, r3
1000eec0:	1c22      	adds	r2, r4, #0
1000eec2:	3228      	adds	r2, #40	; 0x28
1000eec4:	7013      	strb	r3, [r2, #0]
1000eec6:	2200      	movs	r2, #0
1000eec8:	9b01      	ldr	r3, [sp, #4]
1000eeca:	4293      	cmp	r3, r2
1000eecc:	d00a      	beq.n	1000eee4 <gapm_adv_report_evt_handler+0x5c>
1000eece:	79e3      	ldrb	r3, [r4, #7]
1000eed0:	323f      	adds	r2, #63	; 0x3f
1000eed2:	1c19      	adds	r1, r3, #0
1000eed4:	4391      	bics	r1, r2
1000eed6:	3a3e      	subs	r2, #62	; 0x3e
1000eed8:	29c0      	cmp	r1, #192	; 0xc0
1000eeda:	d003      	beq.n	1000eee4 <gapm_adv_report_evt_handler+0x5c>
1000eedc:	065b      	lsls	r3, r3, #25
1000eede:	0fdb      	lsrs	r3, r3, #31
1000eee0:	3202      	adds	r2, #2
1000eee2:	1ad2      	subs	r2, r2, r3
1000eee4:	7062      	strb	r2, [r4, #1]
1000eee6:	2e04      	cmp	r6, #4
1000eee8:	d80f      	bhi.n	1000ef0a <gapm_adv_report_evt_handler+0x82>
1000eeea:	1c30      	adds	r0, r6, #0
1000eeec:	f000 fce6 	bl	1000f8bc <__gnu_thumb1_case_uqi>
1000eef0:	09070503 	.word	0x09070503
1000eef4:	0b          	.byte	0x0b
1000eef5:	00          	.byte	0x00
1000eef6:	2300      	movs	r3, #0
1000eef8:	e006      	b.n	1000ef08 <gapm_adv_report_evt_handler+0x80>
1000eefa:	2301      	movs	r3, #1
1000eefc:	e004      	b.n	1000ef08 <gapm_adv_report_evt_handler+0x80>
1000eefe:	2302      	movs	r3, #2
1000ef00:	e002      	b.n	1000ef08 <gapm_adv_report_evt_handler+0x80>
1000ef02:	2303      	movs	r3, #3
1000ef04:	e000      	b.n	1000ef08 <gapm_adv_report_evt_handler+0x80>
1000ef06:	2305      	movs	r3, #5
1000ef08:	7023      	strb	r3, [r4, #0]
1000ef0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ef0c:	100116f3 	.word	0x100116f3

1000ef10 <gapm_resolv_addr_cmd_handler>:
1000ef10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ef12:	2314      	movs	r3, #20
1000ef14:	4c12      	ldr	r4, [pc, #72]	; (1000ef60 <gapm_resolv_addr_cmd_handler+0x50>)
1000ef16:	1c17      	adds	r7, r2, #0
1000ef18:	7023      	strb	r3, [r4, #0]
1000ef1a:	3b07      	subs	r3, #7
1000ef1c:	7063      	strb	r3, [r4, #1]
1000ef1e:	70a3      	strb	r3, [r4, #2]
1000ef20:	2300      	movs	r3, #0
1000ef22:	70e3      	strb	r3, [r4, #3]
1000ef24:	4b0f      	ldr	r3, [pc, #60]	; (1000ef64 <gapm_resolv_addr_cmd_handler+0x54>)
1000ef26:	1c05      	adds	r5, r0, #0
1000ef28:	881a      	ldrh	r2, [r3, #0]
1000ef2a:	881b      	ldrh	r3, [r3, #0]
1000ef2c:	4e0e      	ldr	r6, [pc, #56]	; (1000ef68 <gapm_resolv_addr_cmd_handler+0x58>)
1000ef2e:	0a1b      	lsrs	r3, r3, #8
1000ef30:	7163      	strb	r3, [r4, #5]
1000ef32:	2317      	movs	r3, #23
1000ef34:	012d      	lsls	r5, r5, #4
1000ef36:	7122      	strb	r2, [r4, #4]
1000ef38:	7260      	strb	r0, [r4, #9]
1000ef3a:	2206      	movs	r2, #6
1000ef3c:	480b      	ldr	r0, [pc, #44]	; (1000ef6c <gapm_resolv_addr_cmd_handler+0x5c>)
1000ef3e:	7223      	strb	r3, [r4, #8]
1000ef40:	47b0      	blx	r6
1000ef42:	1c39      	adds	r1, r7, #0
1000ef44:	1c2a      	adds	r2, r5, #0
1000ef46:	480a      	ldr	r0, [pc, #40]	; (1000ef70 <gapm_resolv_addr_cmd_handler+0x60>)
1000ef48:	47b0      	blx	r6
1000ef4a:	1c29      	adds	r1, r5, #0
1000ef4c:	3110      	adds	r1, #16
1000ef4e:	1c0b      	adds	r3, r1, #0
1000ef50:	3b08      	subs	r3, #8
1000ef52:	71a3      	strb	r3, [r4, #6]
1000ef54:	121b      	asrs	r3, r3, #8
1000ef56:	71e3      	strb	r3, [r4, #7]
1000ef58:	1c20      	adds	r0, r4, #0
1000ef5a:	4b06      	ldr	r3, [pc, #24]	; (1000ef74 <gapm_resolv_addr_cmd_handler+0x64>)
1000ef5c:	4798      	blx	r3
1000ef5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ef60:	10016444 	.word	0x10016444
1000ef64:	100160d4 	.word	0x100160d4
1000ef68:	100116f3 	.word	0x100116f3
1000ef6c:	1001644e 	.word	0x1001644e
1000ef70:	10016454 	.word	0x10016454
1000ef74:	1000dc19 	.word	0x1000dc19

1000ef78 <gapm_addr_solved_ind_handler>:
1000ef78:	b570      	push	{r4, r5, r6, lr}
1000ef7a:	1c04      	adds	r4, r0, #0
1000ef7c:	1c08      	adds	r0, r1, #0
1000ef7e:	1c0d      	adds	r5, r1, #0
1000ef80:	4e05      	ldr	r6, [pc, #20]	; (1000ef98 <gapm_addr_solved_ind_handler+0x20>)
1000ef82:	1c21      	adds	r1, r4, #0
1000ef84:	2206      	movs	r2, #6
1000ef86:	3011      	adds	r0, #17
1000ef88:	47b0      	blx	r6
1000ef8a:	1c68      	adds	r0, r5, #1
1000ef8c:	1da1      	adds	r1, r4, #6
1000ef8e:	2210      	movs	r2, #16
1000ef90:	47b0      	blx	r6
1000ef92:	2300      	movs	r3, #0
1000ef94:	702b      	strb	r3, [r5, #0]
1000ef96:	bd70      	pop	{r4, r5, r6, pc}
1000ef98:	100116f3 	.word	0x100116f3

1000ef9c <gapm_profile_task_add_cmd_handler>:
1000ef9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ef9e:	4684      	mov	ip, r0
1000efa0:	a808      	add	r0, sp, #32
1000efa2:	c810      	ldmia	r0!, {r4}
1000efa4:	2500      	movs	r5, #0
1000efa6:	8807      	ldrh	r7, [r0, #0]
1000efa8:	4668      	mov	r0, sp
1000efaa:	1d86      	adds	r6, r0, #6
1000efac:	7185      	strb	r5, [r0, #6]
1000efae:	201b      	movs	r0, #27
1000efb0:	4c2b      	ldr	r4, [pc, #172]	; (1000f060 <gapm_profile_task_add_cmd_handler+0xc4>)
1000efb2:	7020      	strb	r0, [r4, #0]
1000efb4:	200d      	movs	r0, #13
1000efb6:	7060      	strb	r0, [r4, #1]
1000efb8:	200d      	movs	r0, #13
1000efba:	70e5      	strb	r5, [r4, #3]
1000efbc:	4d29      	ldr	r5, [pc, #164]	; (1000f064 <gapm_profile_task_add_cmd_handler+0xc8>)
1000efbe:	70a0      	strb	r0, [r4, #2]
1000efc0:	8828      	ldrh	r0, [r5, #0]
1000efc2:	882d      	ldrh	r5, [r5, #0]
1000efc4:	7120      	strb	r0, [r4, #4]
1000efc6:	201b      	movs	r0, #27
1000efc8:	7220      	strb	r0, [r4, #8]
1000efca:	4660      	mov	r0, ip
1000efcc:	72a1      	strb	r1, [r4, #10]
1000efce:	7322      	strb	r2, [r4, #12]
1000efd0:	73a3      	strb	r3, [r4, #14]
1000efd2:	0a09      	lsrs	r1, r1, #8
1000efd4:	0a12      	lsrs	r2, r2, #8
1000efd6:	0a1b      	lsrs	r3, r3, #8
1000efd8:	7260      	strb	r0, [r4, #9]
1000efda:	72e1      	strb	r1, [r4, #11]
1000efdc:	7362      	strb	r2, [r4, #13]
1000efde:	73e3      	strb	r3, [r4, #15]
1000efe0:	1c3a      	adds	r2, r7, #0
1000efe2:	0a2d      	lsrs	r5, r5, #8
1000efe4:	9908      	ldr	r1, [sp, #32]
1000efe6:	4b20      	ldr	r3, [pc, #128]	; (1000f068 <gapm_profile_task_add_cmd_handler+0xcc>)
1000efe8:	4820      	ldr	r0, [pc, #128]	; (1000f06c <gapm_profile_task_add_cmd_handler+0xd0>)
1000efea:	7165      	strb	r5, [r4, #5]
1000efec:	4798      	blx	r3
1000efee:	4d20      	ldr	r5, [pc, #128]	; (1000f070 <gapm_profile_task_add_cmd_handler+0xd4>)
1000eff0:	1c39      	adds	r1, r7, #0
1000eff2:	4b20      	ldr	r3, [pc, #128]	; (1000f074 <gapm_profile_task_add_cmd_handler+0xd8>)
1000eff4:	3110      	adds	r1, #16
1000eff6:	802b      	strh	r3, [r5, #0]
1000eff8:	230d      	movs	r3, #13
1000effa:	b289      	uxth	r1, r1
1000effc:	80ab      	strh	r3, [r5, #4]
1000effe:	1c0b      	adds	r3, r1, #0
1000f000:	27d0      	movs	r7, #208	; 0xd0
1000f002:	3b08      	subs	r3, #8
1000f004:	71a3      	strb	r3, [r4, #6]
1000f006:	121b      	asrs	r3, r3, #8
1000f008:	71e3      	strb	r3, [r4, #7]
1000f00a:	1c20      	adds	r0, r4, #0
1000f00c:	4b1a      	ldr	r3, [pc, #104]	; (1000f078 <gapm_profile_task_add_cmd_handler+0xdc>)
1000f00e:	013f      	lsls	r7, r7, #4
1000f010:	806f      	strh	r7, [r5, #2]
1000f012:	4798      	blx	r3
1000f014:	1c30      	adds	r0, r6, #0
1000f016:	4c19      	ldr	r4, [pc, #100]	; (1000f07c <gapm_profile_task_add_cmd_handler+0xe0>)
1000f018:	47a0      	blx	r4
1000f01a:	7831      	ldrb	r1, [r6, #0]
1000f01c:	20e2      	movs	r0, #226	; 0xe2
1000f01e:	2900      	cmp	r1, #0
1000f020:	d11d      	bne.n	1000f05e <gapm_profile_task_add_cmd_handler+0xc2>
1000f022:	2301      	movs	r3, #1
1000f024:	882e      	ldrh	r6, [r5, #0]
1000f026:	4816      	ldr	r0, [pc, #88]	; (1000f080 <gapm_profile_task_add_cmd_handler+0xe4>)
1000f028:	68aa      	ldr	r2, [r5, #8]
1000f02a:	425b      	negs	r3, r3
1000f02c:	4286      	cmp	r6, r0
1000f02e:	d001      	beq.n	1000f034 <gapm_profile_task_add_cmd_handler+0x98>
1000f030:	802b      	strh	r3, [r5, #0]
1000f032:	e013      	b.n	1000f05c <gapm_profile_task_add_cmd_handler+0xc0>
1000f034:	806b      	strh	r3, [r5, #2]
1000f036:	7953      	ldrb	r3, [r2, #5]
1000f038:	7912      	ldrb	r2, [r2, #4]
1000f03a:	021b      	lsls	r3, r3, #8
1000f03c:	4313      	orrs	r3, r2
1000f03e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000f040:	8013      	strh	r3, [r2, #0]
1000f042:	230d      	movs	r3, #13
1000f044:	80ab      	strh	r3, [r5, #4]
1000f046:	466b      	mov	r3, sp
1000f048:	1dde      	adds	r6, r3, #7
1000f04a:	1c30      	adds	r0, r6, #0
1000f04c:	71d9      	strb	r1, [r3, #7]
1000f04e:	802f      	strh	r7, [r5, #0]
1000f050:	47a0      	blx	r4
1000f052:	7833      	ldrb	r3, [r6, #0]
1000f054:	20d0      	movs	r0, #208	; 0xd0
1000f056:	2b00      	cmp	r3, #0
1000f058:	d101      	bne.n	1000f05e <gapm_profile_task_add_cmd_handler+0xc2>
1000f05a:	68aa      	ldr	r2, [r5, #8]
1000f05c:	7850      	ldrb	r0, [r2, #1]
1000f05e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f060:	10016444 	.word	0x10016444
1000f064:	100160d4 	.word	0x100160d4
1000f068:	100116f3 	.word	0x100116f3
1000f06c:	10016454 	.word	0x10016454
1000f070:	100160c8 	.word	0x100160c8
1000f074:	00000d1c 	.word	0x00000d1c
1000f078:	1000dc19 	.word	0x1000dc19
1000f07c:	1000dc7d 	.word	0x1000dc7d
1000f080:	0000ffff 	.word	0x0000ffff

1000f084 <gapm_profile_added_ind_handler>:
1000f084:	b510      	push	{r4, lr}
1000f086:	7843      	ldrb	r3, [r0, #1]
1000f088:	7902      	ldrb	r2, [r0, #4]
1000f08a:	7944      	ldrb	r4, [r0, #5]
1000f08c:	7800      	ldrb	r0, [r0, #0]
1000f08e:	021b      	lsls	r3, r3, #8
1000f090:	4303      	orrs	r3, r0
1000f092:	2b1b      	cmp	r3, #27
1000f094:	d104      	bne.n	1000f0a0 <gapm_profile_added_ind_handler+0x1c>
1000f096:	2300      	movs	r3, #0
1000f098:	700b      	strb	r3, [r1, #0]
1000f09a:	0223      	lsls	r3, r4, #8
1000f09c:	4313      	orrs	r3, r2
1000f09e:	804b      	strh	r3, [r1, #2]
1000f0a0:	203b      	movs	r0, #59	; 0x3b
1000f0a2:	bd10      	pop	{r4, pc}

1000f0a4 <gattc_read_req_ind_parser>:
1000f0a4:	7843      	ldrb	r3, [r0, #1]
1000f0a6:	7802      	ldrb	r2, [r0, #0]
1000f0a8:	021b      	lsls	r3, r3, #8
1000f0aa:	4313      	orrs	r3, r2
1000f0ac:	804b      	strh	r3, [r1, #2]
1000f0ae:	4770      	bx	lr

1000f0b0 <gattc_write_req_ind_parser>:
1000f0b0:	b508      	push	{r3, lr}
1000f0b2:	1c13      	adds	r3, r2, #0
1000f0b4:	0a00      	lsrs	r0, r0, #8
1000f0b6:	8010      	strh	r0, [r2, #0]
1000f0b8:	784a      	ldrb	r2, [r1, #1]
1000f0ba:	7808      	ldrb	r0, [r1, #0]
1000f0bc:	0212      	lsls	r2, r2, #8
1000f0be:	4302      	orrs	r2, r0
1000f0c0:	805a      	strh	r2, [r3, #2]
1000f0c2:	78ca      	ldrb	r2, [r1, #3]
1000f0c4:	7888      	ldrb	r0, [r1, #2]
1000f0c6:	0212      	lsls	r2, r2, #8
1000f0c8:	4302      	orrs	r2, r0
1000f0ca:	809a      	strh	r2, [r3, #4]
1000f0cc:	794a      	ldrb	r2, [r1, #5]
1000f0ce:	7908      	ldrb	r0, [r1, #4]
1000f0d0:	0212      	lsls	r2, r2, #8
1000f0d2:	4302      	orrs	r2, r0
1000f0d4:	80da      	strh	r2, [r3, #6]
1000f0d6:	3308      	adds	r3, #8
1000f0d8:	1c18      	adds	r0, r3, #0
1000f0da:	3106      	adds	r1, #6
1000f0dc:	4b01      	ldr	r3, [pc, #4]	; (1000f0e4 <gattc_write_req_ind_parser+0x34>)
1000f0de:	4798      	blx	r3
1000f0e0:	bd08      	pop	{r3, pc}
1000f0e2:	46c0      	nop			; (mov r8, r8)
1000f0e4:	100116f3 	.word	0x100116f3

1000f0e8 <gattc_att_info_req_parser>:
1000f0e8:	7843      	ldrb	r3, [r0, #1]
1000f0ea:	7802      	ldrb	r2, [r0, #0]
1000f0ec:	021b      	lsls	r3, r3, #8
1000f0ee:	4313      	orrs	r3, r2
1000f0f0:	800b      	strh	r3, [r1, #0]
1000f0f2:	4770      	bx	lr

1000f0f4 <gattc_read_cfm>:
1000f0f4:	b538      	push	{r3, r4, r5, lr}
1000f0f6:	2514      	movs	r5, #20
1000f0f8:	1c1c      	adds	r4, r3, #0
1000f0fa:	4b14      	ldr	r3, [pc, #80]	; (1000f14c <gattc_read_cfm+0x58>)
1000f0fc:	70d9      	strb	r1, [r3, #3]
1000f0fe:	4914      	ldr	r1, [pc, #80]	; (1000f150 <gattc_read_cfm+0x5c>)
1000f100:	701d      	strb	r5, [r3, #0]
1000f102:	3d08      	subs	r5, #8
1000f104:	705d      	strb	r5, [r3, #1]
1000f106:	709d      	strb	r5, [r3, #2]
1000f108:	880d      	ldrh	r5, [r1, #0]
1000f10a:	8809      	ldrh	r1, [r1, #0]
1000f10c:	7218      	strb	r0, [r3, #8]
1000f10e:	0a09      	lsrs	r1, r1, #8
1000f110:	7159      	strb	r1, [r3, #5]
1000f112:	0a00      	lsrs	r0, r0, #8
1000f114:	0a21      	lsrs	r1, r4, #8
1000f116:	711d      	strb	r5, [r3, #4]
1000f118:	7258      	strb	r0, [r3, #9]
1000f11a:	729c      	strb	r4, [r3, #10]
1000f11c:	72d9      	strb	r1, [r3, #11]
1000f11e:	731a      	strb	r2, [r3, #12]
1000f120:	1c1d      	adds	r5, r3, #0
1000f122:	2c00      	cmp	r4, #0
1000f124:	d007      	beq.n	1000f136 <gattc_read_cfm+0x42>
1000f126:	9904      	ldr	r1, [sp, #16]
1000f128:	1c22      	adds	r2, r4, #0
1000f12a:	480a      	ldr	r0, [pc, #40]	; (1000f154 <gattc_read_cfm+0x60>)
1000f12c:	4b0a      	ldr	r3, [pc, #40]	; (1000f158 <gattc_read_cfm+0x64>)
1000f12e:	340d      	adds	r4, #13
1000f130:	4798      	blx	r3
1000f132:	b2a1      	uxth	r1, r4
1000f134:	e001      	b.n	1000f13a <gattc_read_cfm+0x46>
1000f136:	210e      	movs	r1, #14
1000f138:	735c      	strb	r4, [r3, #13]
1000f13a:	1c0b      	adds	r3, r1, #0
1000f13c:	3b08      	subs	r3, #8
1000f13e:	71ab      	strb	r3, [r5, #6]
1000f140:	121b      	asrs	r3, r3, #8
1000f142:	71eb      	strb	r3, [r5, #7]
1000f144:	1c28      	adds	r0, r5, #0
1000f146:	4b05      	ldr	r3, [pc, #20]	; (1000f15c <gattc_read_cfm+0x68>)
1000f148:	4798      	blx	r3
1000f14a:	bd38      	pop	{r3, r4, r5, pc}
1000f14c:	10016444 	.word	0x10016444
1000f150:	100160d4 	.word	0x100160d4
1000f154:	10016451 	.word	0x10016451
1000f158:	100116f3 	.word	0x100116f3
1000f15c:	1000dc19 	.word	0x1000dc19

1000f160 <gattc_write_cfm>:
1000f160:	4b0d      	ldr	r3, [pc, #52]	; (1000f198 <gattc_write_cfm+0x38>)
1000f162:	b510      	push	{r4, lr}
1000f164:	729a      	strb	r2, [r3, #10]
1000f166:	2203      	movs	r2, #3
1000f168:	2416      	movs	r4, #22
1000f16a:	719a      	strb	r2, [r3, #6]
1000f16c:	2200      	movs	r2, #0
1000f16e:	70d9      	strb	r1, [r3, #3]
1000f170:	490a      	ldr	r1, [pc, #40]	; (1000f19c <gattc_write_cfm+0x3c>)
1000f172:	701c      	strb	r4, [r3, #0]
1000f174:	3c0a      	subs	r4, #10
1000f176:	705c      	strb	r4, [r3, #1]
1000f178:	709c      	strb	r4, [r3, #2]
1000f17a:	880c      	ldrh	r4, [r1, #0]
1000f17c:	8809      	ldrh	r1, [r1, #0]
1000f17e:	7218      	strb	r0, [r3, #8]
1000f180:	0a09      	lsrs	r1, r1, #8
1000f182:	0a00      	lsrs	r0, r0, #8
1000f184:	711c      	strb	r4, [r3, #4]
1000f186:	7159      	strb	r1, [r3, #5]
1000f188:	7258      	strb	r0, [r3, #9]
1000f18a:	71da      	strb	r2, [r3, #7]
1000f18c:	1c18      	adds	r0, r3, #0
1000f18e:	210b      	movs	r1, #11
1000f190:	4b03      	ldr	r3, [pc, #12]	; (1000f1a0 <gattc_write_cfm+0x40>)
1000f192:	4798      	blx	r3
1000f194:	bd10      	pop	{r4, pc}
1000f196:	46c0      	nop			; (mov r8, r8)
1000f198:	10016444 	.word	0x10016444
1000f19c:	100160d4 	.word	0x100160d4
1000f1a0:	1000dc19 	.word	0x1000dc19

1000f1a4 <gattc_att_info_cfm>:
1000f1a4:	b538      	push	{r3, r4, r5, lr}
1000f1a6:	4c0e      	ldr	r4, [pc, #56]	; (1000f1e0 <gattc_att_info_cfm+0x3c>)
1000f1a8:	2518      	movs	r5, #24
1000f1aa:	7323      	strb	r3, [r4, #12]
1000f1ac:	2305      	movs	r3, #5
1000f1ae:	71a3      	strb	r3, [r4, #6]
1000f1b0:	2300      	movs	r3, #0
1000f1b2:	70e1      	strb	r1, [r4, #3]
1000f1b4:	490b      	ldr	r1, [pc, #44]	; (1000f1e4 <gattc_att_info_cfm+0x40>)
1000f1b6:	7025      	strb	r5, [r4, #0]
1000f1b8:	3d0c      	subs	r5, #12
1000f1ba:	7065      	strb	r5, [r4, #1]
1000f1bc:	70a5      	strb	r5, [r4, #2]
1000f1be:	880d      	ldrh	r5, [r1, #0]
1000f1c0:	8809      	ldrh	r1, [r1, #0]
1000f1c2:	7220      	strb	r0, [r4, #8]
1000f1c4:	0a09      	lsrs	r1, r1, #8
1000f1c6:	0a00      	lsrs	r0, r0, #8
1000f1c8:	7161      	strb	r1, [r4, #5]
1000f1ca:	7260      	strb	r0, [r4, #9]
1000f1cc:	72a2      	strb	r2, [r4, #10]
1000f1ce:	71e3      	strb	r3, [r4, #7]
1000f1d0:	0a12      	lsrs	r2, r2, #8
1000f1d2:	1c20      	adds	r0, r4, #0
1000f1d4:	210d      	movs	r1, #13
1000f1d6:	4b04      	ldr	r3, [pc, #16]	; (1000f1e8 <gattc_att_info_cfm+0x44>)
1000f1d8:	7125      	strb	r5, [r4, #4]
1000f1da:	72e2      	strb	r2, [r4, #11]
1000f1dc:	4798      	blx	r3
1000f1de:	bd38      	pop	{r3, r4, r5, pc}
1000f1e0:	10016444 	.word	0x10016444
1000f1e4:	100160d4 	.word	0x100160d4
1000f1e8:	1000dc19 	.word	0x1000dc19

1000f1ec <gattc_send_evt_cmd_handler>:
1000f1ec:	b570      	push	{r4, r5, r6, lr}
1000f1ee:	2610      	movs	r6, #16
1000f1f0:	ac04      	add	r4, sp, #16
1000f1f2:	8825      	ldrh	r5, [r4, #0]
1000f1f4:	4c15      	ldr	r4, [pc, #84]	; (1000f24c <gattc_send_evt_cmd_handler+0x60>)
1000f1f6:	70e2      	strb	r2, [r4, #3]
1000f1f8:	4a15      	ldr	r2, [pc, #84]	; (1000f250 <gattc_send_evt_cmd_handler+0x64>)
1000f1fa:	7026      	strb	r6, [r4, #0]
1000f1fc:	3e04      	subs	r6, #4
1000f1fe:	7066      	strb	r6, [r4, #1]
1000f200:	70a6      	strb	r6, [r4, #2]
1000f202:	8816      	ldrh	r6, [r2, #0]
1000f204:	8812      	ldrh	r2, [r2, #0]
1000f206:	7220      	strb	r0, [r4, #8]
1000f208:	0a12      	lsrs	r2, r2, #8
1000f20a:	7162      	strb	r2, [r4, #5]
1000f20c:	4a11      	ldr	r2, [pc, #68]	; (1000f254 <gattc_send_evt_cmd_handler+0x68>)
1000f20e:	7321      	strb	r1, [r4, #12]
1000f210:	8812      	ldrh	r2, [r2, #0]
1000f212:	73a5      	strb	r5, [r4, #14]
1000f214:	3201      	adds	r2, #1
1000f216:	7262      	strb	r2, [r4, #9]
1000f218:	1212      	asrs	r2, r2, #8
1000f21a:	72a2      	strb	r2, [r4, #10]
1000f21c:	2200      	movs	r2, #0
1000f21e:	72e2      	strb	r2, [r4, #11]
1000f220:	0a0a      	lsrs	r2, r1, #8
1000f222:	7362      	strb	r2, [r4, #13]
1000f224:	0a2a      	lsrs	r2, r5, #8
1000f226:	73e2      	strb	r2, [r4, #15]
1000f228:	1c19      	adds	r1, r3, #0
1000f22a:	1c2a      	adds	r2, r5, #0
1000f22c:	4b0a      	ldr	r3, [pc, #40]	; (1000f258 <gattc_send_evt_cmd_handler+0x6c>)
1000f22e:	3510      	adds	r5, #16
1000f230:	480a      	ldr	r0, [pc, #40]	; (1000f25c <gattc_send_evt_cmd_handler+0x70>)
1000f232:	7126      	strb	r6, [r4, #4]
1000f234:	4798      	blx	r3
1000f236:	b2a9      	uxth	r1, r5
1000f238:	1c0b      	adds	r3, r1, #0
1000f23a:	3b08      	subs	r3, #8
1000f23c:	71a3      	strb	r3, [r4, #6]
1000f23e:	121b      	asrs	r3, r3, #8
1000f240:	71e3      	strb	r3, [r4, #7]
1000f242:	1c20      	adds	r0, r4, #0
1000f244:	4b06      	ldr	r3, [pc, #24]	; (1000f260 <gattc_send_evt_cmd_handler+0x74>)
1000f246:	4798      	blx	r3
1000f248:	bd70      	pop	{r4, r5, r6, pc}
1000f24a:	46c0      	nop			; (mov r8, r8)
1000f24c:	10016444 	.word	0x10016444
1000f250:	100160d4 	.word	0x100160d4
1000f254:	1001541c 	.word	0x1001541c
1000f258:	100116f3 	.word	0x100116f3
1000f25c:	10016454 	.word	0x10016454
1000f260:	1000dc19 	.word	0x1000dc19

1000f264 <gattc_event_cfm_handler>:
1000f264:	220e      	movs	r2, #14
1000f266:	b508      	push	{r3, lr}
1000f268:	4b0b      	ldr	r3, [pc, #44]	; (1000f298 <gattc_event_cfm_handler+0x34>)
1000f26a:	701a      	strb	r2, [r3, #0]
1000f26c:	3a02      	subs	r2, #2
1000f26e:	705a      	strb	r2, [r3, #1]
1000f270:	709a      	strb	r2, [r3, #2]
1000f272:	4a0a      	ldr	r2, [pc, #40]	; (1000f29c <gattc_event_cfm_handler+0x38>)
1000f274:	70d8      	strb	r0, [r3, #3]
1000f276:	8810      	ldrh	r0, [r2, #0]
1000f278:	8812      	ldrh	r2, [r2, #0]
1000f27a:	7219      	strb	r1, [r3, #8]
1000f27c:	0a12      	lsrs	r2, r2, #8
1000f27e:	715a      	strb	r2, [r3, #5]
1000f280:	2202      	movs	r2, #2
1000f282:	719a      	strb	r2, [r3, #6]
1000f284:	2200      	movs	r2, #0
1000f286:	0a09      	lsrs	r1, r1, #8
1000f288:	7118      	strb	r0, [r3, #4]
1000f28a:	7259      	strb	r1, [r3, #9]
1000f28c:	71da      	strb	r2, [r3, #7]
1000f28e:	1c18      	adds	r0, r3, #0
1000f290:	210a      	movs	r1, #10
1000f292:	4b03      	ldr	r3, [pc, #12]	; (1000f2a0 <gattc_event_cfm_handler+0x3c>)
1000f294:	4798      	blx	r3
1000f296:	bd08      	pop	{r3, pc}
1000f298:	10016444 	.word	0x10016444
1000f29c:	100160d4 	.word	0x100160d4
1000f2a0:	1000dc19 	.word	0x1000dc19

1000f2a4 <gattc_disc_svc_ind_parser>:
1000f2a4:	b570      	push	{r4, r5, r6, lr}
1000f2a6:	1c15      	adds	r5, r2, #0
1000f2a8:	0a00      	lsrs	r0, r0, #8
1000f2aa:	8010      	strh	r0, [r2, #0]
1000f2ac:	784b      	ldrb	r3, [r1, #1]
1000f2ae:	780a      	ldrb	r2, [r1, #0]
1000f2b0:	021b      	lsls	r3, r3, #8
1000f2b2:	4313      	orrs	r3, r2
1000f2b4:	806b      	strh	r3, [r5, #2]
1000f2b6:	78cb      	ldrb	r3, [r1, #3]
1000f2b8:	788a      	ldrb	r2, [r1, #2]
1000f2ba:	021b      	lsls	r3, r3, #8
1000f2bc:	4313      	orrs	r3, r2
1000f2be:	80ab      	strh	r3, [r5, #4]
1000f2c0:	790e      	ldrb	r6, [r1, #4]
1000f2c2:	4b05      	ldr	r3, [pc, #20]	; (1000f2d8 <gattc_disc_svc_ind_parser+0x34>)
1000f2c4:	1c30      	adds	r0, r6, #0
1000f2c6:	1c0c      	adds	r4, r1, #0
1000f2c8:	4798      	blx	r3
1000f2ca:	1c32      	adds	r2, r6, #0
1000f2cc:	71a8      	strb	r0, [r5, #6]
1000f2ce:	1d61      	adds	r1, r4, #5
1000f2d0:	1de8      	adds	r0, r5, #7
1000f2d2:	4b02      	ldr	r3, [pc, #8]	; (1000f2dc <gattc_disc_svc_ind_parser+0x38>)
1000f2d4:	4798      	blx	r3
1000f2d6:	bd70      	pop	{r4, r5, r6, pc}
1000f2d8:	1000cf11 	.word	0x1000cf11
1000f2dc:	100116f3 	.word	0x100116f3

1000f2e0 <gattc_disc_svc_incl_ind_parser>:
1000f2e0:	b570      	push	{r4, r5, r6, lr}
1000f2e2:	1c15      	adds	r5, r2, #0
1000f2e4:	0a00      	lsrs	r0, r0, #8
1000f2e6:	8010      	strh	r0, [r2, #0]
1000f2e8:	784b      	ldrb	r3, [r1, #1]
1000f2ea:	780a      	ldrb	r2, [r1, #0]
1000f2ec:	021b      	lsls	r3, r3, #8
1000f2ee:	4313      	orrs	r3, r2
1000f2f0:	806b      	strh	r3, [r5, #2]
1000f2f2:	78cb      	ldrb	r3, [r1, #3]
1000f2f4:	788a      	ldrb	r2, [r1, #2]
1000f2f6:	021b      	lsls	r3, r3, #8
1000f2f8:	4313      	orrs	r3, r2
1000f2fa:	80ab      	strh	r3, [r5, #4]
1000f2fc:	794b      	ldrb	r3, [r1, #5]
1000f2fe:	790a      	ldrb	r2, [r1, #4]
1000f300:	021b      	lsls	r3, r3, #8
1000f302:	4313      	orrs	r3, r2
1000f304:	80eb      	strh	r3, [r5, #6]
1000f306:	798e      	ldrb	r6, [r1, #6]
1000f308:	4b05      	ldr	r3, [pc, #20]	; (1000f320 <gattc_disc_svc_incl_ind_parser+0x40>)
1000f30a:	1c30      	adds	r0, r6, #0
1000f30c:	1c0c      	adds	r4, r1, #0
1000f30e:	4798      	blx	r3
1000f310:	7228      	strb	r0, [r5, #8]
1000f312:	1c28      	adds	r0, r5, #0
1000f314:	1c32      	adds	r2, r6, #0
1000f316:	1de1      	adds	r1, r4, #7
1000f318:	4b02      	ldr	r3, [pc, #8]	; (1000f324 <gattc_disc_svc_incl_ind_parser+0x44>)
1000f31a:	3009      	adds	r0, #9
1000f31c:	4798      	blx	r3
1000f31e:	bd70      	pop	{r4, r5, r6, pc}
1000f320:	1000cf11 	.word	0x1000cf11
1000f324:	100116f3 	.word	0x100116f3

1000f328 <gattc_disc_char_ind_parser>:
1000f328:	b570      	push	{r4, r5, r6, lr}
1000f32a:	1c15      	adds	r5, r2, #0
1000f32c:	0a00      	lsrs	r0, r0, #8
1000f32e:	8010      	strh	r0, [r2, #0]
1000f330:	784b      	ldrb	r3, [r1, #1]
1000f332:	780a      	ldrb	r2, [r1, #0]
1000f334:	021b      	lsls	r3, r3, #8
1000f336:	4313      	orrs	r3, r2
1000f338:	806b      	strh	r3, [r5, #2]
1000f33a:	78cb      	ldrb	r3, [r1, #3]
1000f33c:	788a      	ldrb	r2, [r1, #2]
1000f33e:	021b      	lsls	r3, r3, #8
1000f340:	4313      	orrs	r3, r2
1000f342:	80ab      	strh	r3, [r5, #4]
1000f344:	790b      	ldrb	r3, [r1, #4]
1000f346:	1c0c      	adds	r4, r1, #0
1000f348:	71ab      	strb	r3, [r5, #6]
1000f34a:	794e      	ldrb	r6, [r1, #5]
1000f34c:	4b05      	ldr	r3, [pc, #20]	; (1000f364 <gattc_disc_char_ind_parser+0x3c>)
1000f34e:	1c30      	adds	r0, r6, #0
1000f350:	4798      	blx	r3
1000f352:	71e8      	strb	r0, [r5, #7]
1000f354:	1c28      	adds	r0, r5, #0
1000f356:	1c32      	adds	r2, r6, #0
1000f358:	1da1      	adds	r1, r4, #6
1000f35a:	4b03      	ldr	r3, [pc, #12]	; (1000f368 <gattc_disc_char_ind_parser+0x40>)
1000f35c:	3008      	adds	r0, #8
1000f35e:	4798      	blx	r3
1000f360:	bd70      	pop	{r4, r5, r6, pc}
1000f362:	46c0      	nop			; (mov r8, r8)
1000f364:	1000cf11 	.word	0x1000cf11
1000f368:	100116f3 	.word	0x100116f3

1000f36c <gattc_disc_char_desc_ind_parser>:
1000f36c:	b570      	push	{r4, r5, r6, lr}
1000f36e:	1c15      	adds	r5, r2, #0
1000f370:	0a00      	lsrs	r0, r0, #8
1000f372:	8010      	strh	r0, [r2, #0]
1000f374:	784b      	ldrb	r3, [r1, #1]
1000f376:	780a      	ldrb	r2, [r1, #0]
1000f378:	021b      	lsls	r3, r3, #8
1000f37a:	4313      	orrs	r3, r2
1000f37c:	806b      	strh	r3, [r5, #2]
1000f37e:	788e      	ldrb	r6, [r1, #2]
1000f380:	4b05      	ldr	r3, [pc, #20]	; (1000f398 <gattc_disc_char_desc_ind_parser+0x2c>)
1000f382:	1c30      	adds	r0, r6, #0
1000f384:	1c0c      	adds	r4, r1, #0
1000f386:	4798      	blx	r3
1000f388:	1c32      	adds	r2, r6, #0
1000f38a:	7128      	strb	r0, [r5, #4]
1000f38c:	1ce1      	adds	r1, r4, #3
1000f38e:	1d68      	adds	r0, r5, #5
1000f390:	4b02      	ldr	r3, [pc, #8]	; (1000f39c <gattc_disc_char_desc_ind_parser+0x30>)
1000f392:	4798      	blx	r3
1000f394:	bd70      	pop	{r4, r5, r6, pc}
1000f396:	46c0      	nop			; (mov r8, r8)
1000f398:	1000cf11 	.word	0x1000cf11
1000f39c:	100116f3 	.word	0x100116f3

1000f3a0 <gattc_event_ind_and_notification_parser>:
1000f3a0:	b510      	push	{r4, lr}
1000f3a2:	780c      	ldrb	r4, [r1, #0]
1000f3a4:	1c13      	adds	r3, r2, #0
1000f3a6:	2c12      	cmp	r4, #18
1000f3a8:	d10e      	bne.n	1000f3c8 <gattc_event_ind_and_notification_parser+0x28>
1000f3aa:	0a00      	lsrs	r0, r0, #8
1000f3ac:	8010      	strh	r0, [r2, #0]
1000f3ae:	788a      	ldrb	r2, [r1, #2]
1000f3b0:	709a      	strb	r2, [r3, #2]
1000f3b2:	7948      	ldrb	r0, [r1, #5]
1000f3b4:	790c      	ldrb	r4, [r1, #4]
1000f3b6:	0200      	lsls	r0, r0, #8
1000f3b8:	4320      	orrs	r0, r4
1000f3ba:	8098      	strh	r0, [r3, #4]
1000f3bc:	3106      	adds	r1, #6
1000f3be:	1d98      	adds	r0, r3, #6
1000f3c0:	4b0b      	ldr	r3, [pc, #44]	; (1000f3f0 <gattc_event_ind_and_notification_parser+0x50>)
1000f3c2:	4798      	blx	r3
1000f3c4:	221b      	movs	r2, #27
1000f3c6:	e010      	b.n	1000f3ea <gattc_event_ind_and_notification_parser+0x4a>
1000f3c8:	2200      	movs	r2, #0
1000f3ca:	2c13      	cmp	r4, #19
1000f3cc:	d10d      	bne.n	1000f3ea <gattc_event_ind_and_notification_parser+0x4a>
1000f3ce:	0a00      	lsrs	r0, r0, #8
1000f3d0:	8018      	strh	r0, [r3, #0]
1000f3d2:	788a      	ldrb	r2, [r1, #2]
1000f3d4:	709a      	strb	r2, [r3, #2]
1000f3d6:	7908      	ldrb	r0, [r1, #4]
1000f3d8:	78cc      	ldrb	r4, [r1, #3]
1000f3da:	0200      	lsls	r0, r0, #8
1000f3dc:	4320      	orrs	r0, r4
1000f3de:	8098      	strh	r0, [r3, #4]
1000f3e0:	3106      	adds	r1, #6
1000f3e2:	1d98      	adds	r0, r3, #6
1000f3e4:	4b02      	ldr	r3, [pc, #8]	; (1000f3f0 <gattc_event_ind_and_notification_parser+0x50>)
1000f3e6:	4798      	blx	r3
1000f3e8:	221c      	movs	r2, #28
1000f3ea:	1c10      	adds	r0, r2, #0
1000f3ec:	bd10      	pop	{r4, pc}
1000f3ee:	46c0      	nop			; (mov r8, r8)
1000f3f0:	100116f3 	.word	0x100116f3

1000f3f4 <gattc_complete_evt_handler>:
1000f3f4:	b500      	push	{lr}
1000f3f6:	0a00      	lsrs	r0, r0, #8
1000f3f8:	8010      	strh	r0, [r2, #0]
1000f3fa:	7808      	ldrb	r0, [r1, #0]
1000f3fc:	7090      	strb	r0, [r2, #2]
1000f3fe:	784b      	ldrb	r3, [r1, #1]
1000f400:	3801      	subs	r0, #1
1000f402:	70d3      	strb	r3, [r2, #3]
1000f404:	2813      	cmp	r0, #19
1000f406:	d82c      	bhi.n	1000f462 <gattc_complete_evt_handler+0x6e>
1000f408:	f000 fa58 	bl	1000f8bc <__gnu_thumb1_case_uqi>
1000f40c:	0a0a0a0c 	.word	0x0a0a0a0c
1000f410:	210a0a0a 	.word	0x210a0a0a
1000f414:	111f2121 	.word	0x111f2121
1000f418:	2b111111 	.word	0x2b111111
1000f41c:	2919132b 	.word	0x2919132b
1000f420:	2017      	movs	r0, #23
1000f422:	e01f      	b.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f424:	2024      	movs	r0, #36	; 0x24
1000f426:	2b00      	cmp	r3, #0
1000f428:	d11c      	bne.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f42a:	3017      	adds	r0, #23
1000f42c:	e01a      	b.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f42e:	2025      	movs	r0, #37	; 0x25
1000f430:	e018      	b.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f432:	4a0d      	ldr	r2, [pc, #52]	; (1000f468 <gattc_complete_evt_handler+0x74>)
1000f434:	201d      	movs	r0, #29
1000f436:	6813      	ldr	r3, [r2, #0]
1000f438:	3b01      	subs	r3, #1
1000f43a:	6013      	str	r3, [r2, #0]
1000f43c:	e012      	b.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f43e:	4a0a      	ldr	r2, [pc, #40]	; (1000f468 <gattc_complete_evt_handler+0x74>)
1000f440:	201e      	movs	r0, #30
1000f442:	6813      	ldr	r3, [r2, #0]
1000f444:	3b01      	subs	r3, #1
1000f446:	6013      	str	r3, [r2, #0]
1000f448:	e00c      	b.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f44a:	2019      	movs	r0, #25
1000f44c:	e00a      	b.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f44e:	203b      	movs	r0, #59	; 0x3b
1000f450:	2b00      	cmp	r3, #0
1000f452:	d007      	beq.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f454:	2182      	movs	r1, #130	; 0x82
1000f456:	0089      	lsls	r1, r1, #2
1000f458:	5453      	strb	r3, [r2, r1]
1000f45a:	3823      	subs	r0, #35	; 0x23
1000f45c:	e002      	b.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f45e:	2021      	movs	r0, #33	; 0x21
1000f460:	e000      	b.n	1000f464 <gattc_complete_evt_handler+0x70>
1000f462:	2000      	movs	r0, #0
1000f464:	bd00      	pop	{pc}
1000f466:	46c0      	nop			; (mov r8, r8)
1000f468:	10015420 	.word	0x10015420

1000f46c <gattc_event_mtu_changed_ind_parser>:
1000f46c:	0a00      	lsrs	r0, r0, #8
1000f46e:	8010      	strh	r0, [r2, #0]
1000f470:	784b      	ldrb	r3, [r1, #1]
1000f472:	7809      	ldrb	r1, [r1, #0]
1000f474:	021b      	lsls	r3, r3, #8
1000f476:	430b      	orrs	r3, r1
1000f478:	8053      	strh	r3, [r2, #2]
1000f47a:	4770      	bx	lr

1000f47c <gattc_read_ind_parser>:
1000f47c:	0a00      	lsrs	r0, r0, #8
1000f47e:	b508      	push	{r3, lr}
1000f480:	8010      	strh	r0, [r2, #0]
1000f482:	1c13      	adds	r3, r2, #0
1000f484:	2282      	movs	r2, #130	; 0x82
1000f486:	2000      	movs	r0, #0
1000f488:	0092      	lsls	r2, r2, #2
1000f48a:	5498      	strb	r0, [r3, r2]
1000f48c:	784a      	ldrb	r2, [r1, #1]
1000f48e:	7808      	ldrb	r0, [r1, #0]
1000f490:	0212      	lsls	r2, r2, #8
1000f492:	4302      	orrs	r2, r0
1000f494:	805a      	strh	r2, [r3, #2]
1000f496:	78ca      	ldrb	r2, [r1, #3]
1000f498:	7888      	ldrb	r0, [r1, #2]
1000f49a:	0212      	lsls	r2, r2, #8
1000f49c:	4302      	orrs	r2, r0
1000f49e:	80da      	strh	r2, [r3, #6]
1000f4a0:	794a      	ldrb	r2, [r1, #5]
1000f4a2:	7908      	ldrb	r0, [r1, #4]
1000f4a4:	0212      	lsls	r2, r2, #8
1000f4a6:	4302      	orrs	r2, r0
1000f4a8:	809a      	strh	r2, [r3, #4]
1000f4aa:	3308      	adds	r3, #8
1000f4ac:	1c18      	adds	r0, r3, #0
1000f4ae:	3106      	adds	r1, #6
1000f4b0:	4b01      	ldr	r3, [pc, #4]	; (1000f4b8 <gattc_read_ind_parser+0x3c>)
1000f4b2:	4798      	blx	r3
1000f4b4:	bd08      	pop	{r3, pc}
1000f4b6:	46c0      	nop			; (mov r8, r8)
1000f4b8:	100116f3 	.word	0x100116f3

1000f4bc <gattc_svc_changed_cfg_ind_parser>:
1000f4bc:	0a00      	lsrs	r0, r0, #8
1000f4be:	8010      	strh	r0, [r2, #0]
1000f4c0:	784b      	ldrb	r3, [r1, #1]
1000f4c2:	7809      	ldrb	r1, [r1, #0]
1000f4c4:	021b      	lsls	r3, r3, #8
1000f4c6:	430b      	orrs	r3, r1
1000f4c8:	8053      	strh	r3, [r2, #2]
1000f4ca:	4770      	bx	lr

1000f4cc <init_gattc_task_module>:
1000f4cc:	2300      	movs	r3, #0
1000f4ce:	4a02      	ldr	r2, [pc, #8]	; (1000f4d8 <init_gattc_task_module+0xc>)
1000f4d0:	8013      	strh	r3, [r2, #0]
1000f4d2:	4a02      	ldr	r2, [pc, #8]	; (1000f4dc <init_gattc_task_module+0x10>)
1000f4d4:	8013      	strh	r3, [r2, #0]
1000f4d6:	4770      	bx	lr
1000f4d8:	1001541a 	.word	0x1001541a
1000f4dc:	1001541c 	.word	0x1001541c

1000f4e0 <gattm_add_svc_req_handler>:
1000f4e0:	2200      	movs	r2, #0
1000f4e2:	210b      	movs	r1, #11
1000f4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4e6:	1c04      	adds	r4, r0, #0
1000f4e8:	7943      	ldrb	r3, [r0, #5]
1000f4ea:	b085      	sub	sp, #20
1000f4ec:	9301      	str	r3, [sp, #4]
1000f4ee:	ab02      	add	r3, sp, #8
1000f4f0:	71da      	strb	r2, [r3, #7]
1000f4f2:	4b37      	ldr	r3, [pc, #220]	; (1000f5d0 <gattm_add_svc_req_handler+0xf0>)
1000f4f4:	7059      	strb	r1, [r3, #1]
1000f4f6:	7099      	strb	r1, [r3, #2]
1000f4f8:	4936      	ldr	r1, [pc, #216]	; (1000f5d4 <gattm_add_svc_req_handler+0xf4>)
1000f4fa:	701a      	strb	r2, [r3, #0]
1000f4fc:	8808      	ldrh	r0, [r1, #0]
1000f4fe:	8809      	ldrh	r1, [r1, #0]
1000f500:	70da      	strb	r2, [r3, #3]
1000f502:	0a09      	lsrs	r1, r1, #8
1000f504:	7118      	strb	r0, [r3, #4]
1000f506:	7159      	strb	r1, [r3, #5]
1000f508:	8821      	ldrh	r1, [r4, #0]
1000f50a:	7219      	strb	r1, [r3, #8]
1000f50c:	8821      	ldrh	r1, [r4, #0]
1000f50e:	0a09      	lsrs	r1, r1, #8
1000f510:	7259      	strb	r1, [r3, #9]
1000f512:	8861      	ldrh	r1, [r4, #2]
1000f514:	7299      	strb	r1, [r3, #10]
1000f516:	8861      	ldrh	r1, [r4, #2]
1000f518:	0a09      	lsrs	r1, r1, #8
1000f51a:	72d9      	strb	r1, [r3, #11]
1000f51c:	7921      	ldrb	r1, [r4, #4]
1000f51e:	7319      	strb	r1, [r3, #12]
1000f520:	4669      	mov	r1, sp
1000f522:	7909      	ldrb	r1, [r1, #4]
1000f524:	7359      	strb	r1, [r3, #13]
1000f526:	18a1      	adds	r1, r4, r2
1000f528:	7988      	ldrb	r0, [r1, #6]
1000f52a:	1899      	adds	r1, r3, r2
1000f52c:	3201      	adds	r2, #1
1000f52e:	7388      	strb	r0, [r1, #14]
1000f530:	2a10      	cmp	r2, #16
1000f532:	d1f8      	bne.n	1000f526 <gattm_add_svc_req_handler+0x46>
1000f534:	1c27      	adds	r7, r4, #0
1000f536:	2300      	movs	r3, #0
1000f538:	251e      	movs	r5, #30
1000f53a:	3716      	adds	r7, #22
1000f53c:	9300      	str	r3, [sp, #0]
1000f53e:	9b00      	ldr	r3, [sp, #0]
1000f540:	9a01      	ldr	r2, [sp, #4]
1000f542:	4e23      	ldr	r6, [pc, #140]	; (1000f5d0 <gattm_add_svc_req_handler+0xf0>)
1000f544:	4293      	cmp	r3, r2
1000f546:	da21      	bge.n	1000f58c <gattm_add_svc_req_handler+0xac>
1000f548:	1c39      	adds	r1, r7, #0
1000f54a:	1970      	adds	r0, r6, r5
1000f54c:	2210      	movs	r2, #16
1000f54e:	4b22      	ldr	r3, [pc, #136]	; (1000f5d8 <gattm_add_svc_req_handler+0xf8>)
1000f550:	4798      	blx	r3
1000f552:	1c2b      	adds	r3, r5, #0
1000f554:	8a3a      	ldrh	r2, [r7, #16]
1000f556:	3310      	adds	r3, #16
1000f558:	b29b      	uxth	r3, r3
1000f55a:	54f2      	strb	r2, [r6, r3]
1000f55c:	1c2b      	adds	r3, r5, #0
1000f55e:	8a3a      	ldrh	r2, [r7, #16]
1000f560:	3311      	adds	r3, #17
1000f562:	b29b      	uxth	r3, r3
1000f564:	0a12      	lsrs	r2, r2, #8
1000f566:	54f2      	strb	r2, [r6, r3]
1000f568:	1c2a      	adds	r2, r5, #0
1000f56a:	1c2b      	adds	r3, r5, #0
1000f56c:	8a79      	ldrh	r1, [r7, #18]
1000f56e:	3212      	adds	r2, #18
1000f570:	b292      	uxth	r2, r2
1000f572:	54b1      	strb	r1, [r6, r2]
1000f574:	8a7a      	ldrh	r2, [r7, #18]
1000f576:	3313      	adds	r3, #19
1000f578:	b29b      	uxth	r3, r3
1000f57a:	0a12      	lsrs	r2, r2, #8
1000f57c:	54f2      	strb	r2, [r6, r3]
1000f57e:	9b00      	ldr	r3, [sp, #0]
1000f580:	3514      	adds	r5, #20
1000f582:	3301      	adds	r3, #1
1000f584:	b2ad      	uxth	r5, r5
1000f586:	9300      	str	r3, [sp, #0]
1000f588:	3714      	adds	r7, #20
1000f58a:	e7d8      	b.n	1000f53e <gattm_add_svc_req_handler+0x5e>
1000f58c:	2114      	movs	r1, #20
1000f58e:	4d13      	ldr	r5, [pc, #76]	; (1000f5dc <gattm_add_svc_req_handler+0xfc>)
1000f590:	4b13      	ldr	r3, [pc, #76]	; (1000f5e0 <gattm_add_svc_req_handler+0x100>)
1000f592:	4351      	muls	r1, r2
1000f594:	802b      	strh	r3, [r5, #0]
1000f596:	230b      	movs	r3, #11
1000f598:	311e      	adds	r1, #30
1000f59a:	80ab      	strh	r3, [r5, #4]
1000f59c:	1c0b      	adds	r3, r1, #0
1000f59e:	3b08      	subs	r3, #8
1000f5a0:	71b3      	strb	r3, [r6, #6]
1000f5a2:	121b      	asrs	r3, r3, #8
1000f5a4:	71f3      	strb	r3, [r6, #7]
1000f5a6:	1c30      	adds	r0, r6, #0
1000f5a8:	4b0e      	ldr	r3, [pc, #56]	; (1000f5e4 <gattm_add_svc_req_handler+0x104>)
1000f5aa:	4798      	blx	r3
1000f5ac:	ab02      	add	r3, sp, #8
1000f5ae:	1dde      	adds	r6, r3, #7
1000f5b0:	1c30      	adds	r0, r6, #0
1000f5b2:	4b0d      	ldr	r3, [pc, #52]	; (1000f5e8 <gattm_add_svc_req_handler+0x108>)
1000f5b4:	4798      	blx	r3
1000f5b6:	7833      	ldrb	r3, [r6, #0]
1000f5b8:	20e2      	movs	r0, #226	; 0xe2
1000f5ba:	2b00      	cmp	r3, #0
1000f5bc:	d106      	bne.n	1000f5cc <gattm_add_svc_req_handler+0xec>
1000f5be:	68aa      	ldr	r2, [r5, #8]
1000f5c0:	7853      	ldrb	r3, [r2, #1]
1000f5c2:	7811      	ldrb	r1, [r2, #0]
1000f5c4:	021b      	lsls	r3, r3, #8
1000f5c6:	430b      	orrs	r3, r1
1000f5c8:	8023      	strh	r3, [r4, #0]
1000f5ca:	7890      	ldrb	r0, [r2, #2]
1000f5cc:	b005      	add	sp, #20
1000f5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f5d0:	10016444 	.word	0x10016444
1000f5d4:	100160d4 	.word	0x100160d4
1000f5d8:	100116f3 	.word	0x100116f3
1000f5dc:	100160c8 	.word	0x100160c8
1000f5e0:	00000b01 	.word	0x00000b01
1000f5e4:	1000dc19 	.word	0x1000dc19
1000f5e8:	1000dc7d 	.word	0x1000dc7d

1000f5ec <gattm_add_attribute_req_handler>:
1000f5ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f5ee:	1c1f      	adds	r7, r3, #0
1000f5f0:	4b16      	ldr	r3, [pc, #88]	; (1000f64c <gattm_add_attribute_req_handler+0x60>)
1000f5f2:	9100      	str	r1, [sp, #0]
1000f5f4:	9201      	str	r2, [sp, #4]
1000f5f6:	1c05      	adds	r5, r0, #0
1000f5f8:	7946      	ldrb	r6, [r0, #5]
1000f5fa:	6818      	ldr	r0, [r3, #0]
1000f5fc:	2114      	movs	r1, #20
1000f5fe:	4b14      	ldr	r3, [pc, #80]	; (1000f650 <gattm_add_attribute_req_handler+0x64>)
1000f600:	382a      	subs	r0, #42	; 0x2a
1000f602:	4798      	blx	r3
1000f604:	2311      	movs	r3, #17
1000f606:	4286      	cmp	r6, r0
1000f608:	d21e      	bcs.n	1000f648 <gattm_add_attribute_req_handler+0x5c>
1000f60a:	2414      	movs	r4, #20
1000f60c:	4366      	muls	r6, r4
1000f60e:	19a8      	adds	r0, r5, r6
1000f610:	2100      	movs	r1, #0
1000f612:	2210      	movs	r2, #16
1000f614:	4b0f      	ldr	r3, [pc, #60]	; (1000f654 <gattm_add_attribute_req_handler+0x68>)
1000f616:	3016      	adds	r0, #22
1000f618:	4798      	blx	r3
1000f61a:	7968      	ldrb	r0, [r5, #5]
1000f61c:	1c3a      	adds	r2, r7, #0
1000f61e:	4360      	muls	r0, r4
1000f620:	1828      	adds	r0, r5, r0
1000f622:	4b0d      	ldr	r3, [pc, #52]	; (1000f658 <gattm_add_attribute_req_handler+0x6c>)
1000f624:	3016      	adds	r0, #22
1000f626:	9908      	ldr	r1, [sp, #32]
1000f628:	4798      	blx	r3
1000f62a:	466a      	mov	r2, sp
1000f62c:	796b      	ldrb	r3, [r5, #5]
1000f62e:	8812      	ldrh	r2, [r2, #0]
1000f630:	435c      	muls	r4, r3
1000f632:	192c      	adds	r4, r5, r4
1000f634:	8522      	strh	r2, [r4, #40]	; 0x28
1000f636:	466a      	mov	r2, sp
1000f638:	8892      	ldrh	r2, [r2, #4]
1000f63a:	84e2      	strh	r2, [r4, #38]	; 0x26
1000f63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000f63e:	8013      	strh	r3, [r2, #0]
1000f640:	796b      	ldrb	r3, [r5, #5]
1000f642:	3301      	adds	r3, #1
1000f644:	716b      	strb	r3, [r5, #5]
1000f646:	2300      	movs	r3, #0
1000f648:	1c18      	adds	r0, r3, #0
1000f64a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f64c:	10015390 	.word	0x10015390
1000f650:	1000f8d1 	.word	0x1000f8d1
1000f654:	10011705 	.word	0x10011705
1000f658:	100116f3 	.word	0x100116f3

1000f65c <gattm_att_set_value_req_handler>:
1000f65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f65e:	466b      	mov	r3, sp
1000f660:	1dde      	adds	r6, r3, #7
1000f662:	2300      	movs	r3, #0
1000f664:	1c0d      	adds	r5, r1, #0
1000f666:	210c      	movs	r1, #12
1000f668:	270b      	movs	r7, #11
1000f66a:	4c17      	ldr	r4, [pc, #92]	; (1000f6c8 <gattm_att_set_value_req_handler+0x6c>)
1000f66c:	7033      	strb	r3, [r6, #0]
1000f66e:	70e3      	strb	r3, [r4, #3]
1000f670:	4b16      	ldr	r3, [pc, #88]	; (1000f6cc <gattm_att_set_value_req_handler+0x70>)
1000f672:	7021      	strb	r1, [r4, #0]
1000f674:	8819      	ldrh	r1, [r3, #0]
1000f676:	881b      	ldrh	r3, [r3, #0]
1000f678:	7220      	strb	r0, [r4, #8]
1000f67a:	0a1b      	lsrs	r3, r3, #8
1000f67c:	7163      	strb	r3, [r4, #5]
1000f67e:	0a00      	lsrs	r0, r0, #8
1000f680:	0a2b      	lsrs	r3, r5, #8
1000f682:	7121      	strb	r1, [r4, #4]
1000f684:	7260      	strb	r0, [r4, #9]
1000f686:	1c11      	adds	r1, r2, #0
1000f688:	72a5      	strb	r5, [r4, #10]
1000f68a:	1c2a      	adds	r2, r5, #0
1000f68c:	72e3      	strb	r3, [r4, #11]
1000f68e:	350c      	adds	r5, #12
1000f690:	4b0f      	ldr	r3, [pc, #60]	; (1000f6d0 <gattm_att_set_value_req_handler+0x74>)
1000f692:	4810      	ldr	r0, [pc, #64]	; (1000f6d4 <gattm_att_set_value_req_handler+0x78>)
1000f694:	7067      	strb	r7, [r4, #1]
1000f696:	70a7      	strb	r7, [r4, #2]
1000f698:	4798      	blx	r3
1000f69a:	b2a9      	uxth	r1, r5
1000f69c:	4b0e      	ldr	r3, [pc, #56]	; (1000f6d8 <gattm_att_set_value_req_handler+0x7c>)
1000f69e:	4d0f      	ldr	r5, [pc, #60]	; (1000f6dc <gattm_att_set_value_req_handler+0x80>)
1000f6a0:	1c20      	adds	r0, r4, #0
1000f6a2:	802b      	strh	r3, [r5, #0]
1000f6a4:	1c0b      	adds	r3, r1, #0
1000f6a6:	3b08      	subs	r3, #8
1000f6a8:	71a3      	strb	r3, [r4, #6]
1000f6aa:	121b      	asrs	r3, r3, #8
1000f6ac:	71e3      	strb	r3, [r4, #7]
1000f6ae:	4b0c      	ldr	r3, [pc, #48]	; (1000f6e0 <gattm_att_set_value_req_handler+0x84>)
1000f6b0:	80af      	strh	r7, [r5, #4]
1000f6b2:	4798      	blx	r3
1000f6b4:	1c30      	adds	r0, r6, #0
1000f6b6:	4b0b      	ldr	r3, [pc, #44]	; (1000f6e4 <gattm_att_set_value_req_handler+0x88>)
1000f6b8:	4798      	blx	r3
1000f6ba:	7833      	ldrb	r3, [r6, #0]
1000f6bc:	20e2      	movs	r0, #226	; 0xe2
1000f6be:	2b00      	cmp	r3, #0
1000f6c0:	d101      	bne.n	1000f6c6 <gattm_att_set_value_req_handler+0x6a>
1000f6c2:	68ab      	ldr	r3, [r5, #8]
1000f6c4:	7898      	ldrb	r0, [r3, #2]
1000f6c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f6c8:	10016444 	.word	0x10016444
1000f6cc:	100160d4 	.word	0x100160d4
1000f6d0:	100116f3 	.word	0x100116f3
1000f6d4:	10016450 	.word	0x10016450
1000f6d8:	00000b0d 	.word	0x00000b0d
1000f6dc:	100160c8 	.word	0x100160c8
1000f6e0:	1000dc19 	.word	0x1000dc19
1000f6e4:	1000dc7d 	.word	0x1000dc7d

1000f6e8 <gattm_att_get_value_req_handler>:
1000f6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6ea:	b085      	sub	sp, #20
1000f6ec:	9201      	str	r2, [sp, #4]
1000f6ee:	220a      	movs	r2, #10
1000f6f0:	1c04      	adds	r4, r0, #0
1000f6f2:	481d      	ldr	r0, [pc, #116]	; (1000f768 <gattm_att_get_value_req_handler+0x80>)
1000f6f4:	ab02      	add	r3, sp, #8
1000f6f6:	1dde      	adds	r6, r3, #7
1000f6f8:	7002      	strb	r2, [r0, #0]
1000f6fa:	2300      	movs	r3, #0
1000f6fc:	220b      	movs	r2, #11
1000f6fe:	4d1b      	ldr	r5, [pc, #108]	; (1000f76c <gattm_att_get_value_req_handler+0x84>)
1000f700:	1c0f      	adds	r7, r1, #0
1000f702:	8829      	ldrh	r1, [r5, #0]
1000f704:	882d      	ldrh	r5, [r5, #0]
1000f706:	7101      	strb	r1, [r0, #4]
1000f708:	0a2d      	lsrs	r5, r5, #8
1000f70a:	7145      	strb	r5, [r0, #5]
1000f70c:	0a25      	lsrs	r5, r4, #8
1000f70e:	7245      	strb	r5, [r0, #9]
1000f710:	4917      	ldr	r1, [pc, #92]	; (1000f770 <gattm_att_get_value_req_handler+0x88>)
1000f712:	4d18      	ldr	r5, [pc, #96]	; (1000f774 <gattm_att_get_value_req_handler+0x8c>)
1000f714:	7033      	strb	r3, [r6, #0]
1000f716:	7042      	strb	r2, [r0, #1]
1000f718:	7082      	strb	r2, [r0, #2]
1000f71a:	70c3      	strb	r3, [r0, #3]
1000f71c:	8029      	strh	r1, [r5, #0]
1000f71e:	80aa      	strh	r2, [r5, #4]
1000f720:	71c3      	strb	r3, [r0, #7]
1000f722:	3a09      	subs	r2, #9
1000f724:	210a      	movs	r1, #10
1000f726:	4b14      	ldr	r3, [pc, #80]	; (1000f778 <gattm_att_get_value_req_handler+0x90>)
1000f728:	7182      	strb	r2, [r0, #6]
1000f72a:	7204      	strb	r4, [r0, #8]
1000f72c:	4798      	blx	r3
1000f72e:	1c30      	adds	r0, r6, #0
1000f730:	4b12      	ldr	r3, [pc, #72]	; (1000f77c <gattm_att_get_value_req_handler+0x94>)
1000f732:	4798      	blx	r3
1000f734:	7833      	ldrb	r3, [r6, #0]
1000f736:	20e2      	movs	r0, #226	; 0xe2
1000f738:	2b00      	cmp	r3, #0
1000f73a:	d112      	bne.n	1000f762 <gattm_att_get_value_req_handler+0x7a>
1000f73c:	68a9      	ldr	r1, [r5, #8]
1000f73e:	9801      	ldr	r0, [sp, #4]
1000f740:	784d      	ldrb	r5, [r1, #1]
1000f742:	780b      	ldrb	r3, [r1, #0]
1000f744:	78ca      	ldrb	r2, [r1, #3]
1000f746:	022d      	lsls	r5, r5, #8
1000f748:	431d      	orrs	r5, r3
1000f74a:	788b      	ldrb	r3, [r1, #2]
1000f74c:	0212      	lsls	r2, r2, #8
1000f74e:	431a      	orrs	r2, r3
1000f750:	803a      	strh	r2, [r7, #0]
1000f752:	790e      	ldrb	r6, [r1, #4]
1000f754:	4b0a      	ldr	r3, [pc, #40]	; (1000f780 <gattm_att_get_value_req_handler+0x98>)
1000f756:	3105      	adds	r1, #5
1000f758:	4798      	blx	r3
1000f75a:	20e2      	movs	r0, #226	; 0xe2
1000f75c:	42ac      	cmp	r4, r5
1000f75e:	d100      	bne.n	1000f762 <gattm_att_get_value_req_handler+0x7a>
1000f760:	1c30      	adds	r0, r6, #0
1000f762:	b005      	add	sp, #20
1000f764:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f766:	46c0      	nop			; (mov r8, r8)
1000f768:	10016444 	.word	0x10016444
1000f76c:	100160d4 	.word	0x100160d4
1000f770:	00000b0b 	.word	0x00000b0b
1000f774:	100160c8 	.word	0x100160c8
1000f778:	1000dc19 	.word	0x1000dc19
1000f77c:	1000dc7d 	.word	0x1000dc7d
1000f780:	100116f3 	.word	0x100116f3

1000f784 <htpt_create_db_req_handler>:
1000f784:	b570      	push	{r4, r5, r6, lr}
1000f786:	b086      	sub	sp, #24
1000f788:	ac04      	add	r4, sp, #16
1000f78a:	80a3      	strh	r3, [r4, #4]
1000f78c:	4b0b      	ldr	r3, [pc, #44]	; (1000f7bc <htpt_create_db_req_handler+0x38>)
1000f78e:	8062      	strh	r2, [r4, #2]
1000f790:	1c06      	adds	r6, r0, #0
1000f792:	881a      	ldrh	r2, [r3, #0]
1000f794:	2308      	movs	r3, #8
1000f796:	a80a      	add	r0, sp, #40	; 0x28
1000f798:	8805      	ldrh	r5, [r0, #0]
1000f79a:	a80b      	add	r0, sp, #44	; 0x2c
1000f79c:	7026      	strb	r6, [r4, #0]
1000f79e:	7061      	strb	r1, [r4, #1]
1000f7a0:	80e5      	strh	r5, [r4, #6]
1000f7a2:	7800      	ldrb	r0, [r0, #0]
1000f7a4:	9301      	str	r3, [sp, #4]
1000f7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000f7a8:	9400      	str	r4, [sp, #0]
1000f7aa:	9302      	str	r3, [sp, #8]
1000f7ac:	b292      	uxth	r2, r2
1000f7ae:	211b      	movs	r1, #27
1000f7b0:	2300      	movs	r3, #0
1000f7b2:	4c03      	ldr	r4, [pc, #12]	; (1000f7c0 <htpt_create_db_req_handler+0x3c>)
1000f7b4:	47a0      	blx	r4
1000f7b6:	b006      	add	sp, #24
1000f7b8:	bd70      	pop	{r4, r5, r6, pc}
1000f7ba:	46c0      	nop			; (mov r8, r8)
1000f7bc:	100160d4 	.word	0x100160d4
1000f7c0:	1000ef9d 	.word	0x1000ef9d

1000f7c4 <htpt_enable_req_handler>:
1000f7c4:	221b      	movs	r2, #27
1000f7c6:	b538      	push	{r3, r4, r5, lr}
1000f7c8:	4b0b      	ldr	r3, [pc, #44]	; (1000f7f8 <htpt_enable_req_handler+0x34>)
1000f7ca:	2400      	movs	r4, #0
1000f7cc:	705a      	strb	r2, [r3, #1]
1000f7ce:	709a      	strb	r2, [r3, #2]
1000f7d0:	4a0a      	ldr	r2, [pc, #40]	; (1000f7fc <htpt_enable_req_handler+0x38>)
1000f7d2:	701c      	strb	r4, [r3, #0]
1000f7d4:	8815      	ldrh	r5, [r2, #0]
1000f7d6:	8812      	ldrh	r2, [r2, #0]
1000f7d8:	711d      	strb	r5, [r3, #4]
1000f7da:	0a12      	lsrs	r2, r2, #8
1000f7dc:	715a      	strb	r2, [r3, #5]
1000f7de:	2202      	movs	r2, #2
1000f7e0:	70dc      	strb	r4, [r3, #3]
1000f7e2:	7218      	strb	r0, [r3, #8]
1000f7e4:	7259      	strb	r1, [r3, #9]
1000f7e6:	719a      	strb	r2, [r3, #6]
1000f7e8:	71dc      	strb	r4, [r3, #7]
1000f7ea:	1c18      	adds	r0, r3, #0
1000f7ec:	210a      	movs	r1, #10
1000f7ee:	4b04      	ldr	r3, [pc, #16]	; (1000f800 <htpt_enable_req_handler+0x3c>)
1000f7f0:	4798      	blx	r3
1000f7f2:	1c20      	adds	r0, r4, #0
1000f7f4:	bd38      	pop	{r3, r4, r5, pc}
1000f7f6:	46c0      	nop			; (mov r8, r8)
1000f7f8:	10016444 	.word	0x10016444
1000f7fc:	100160d4 	.word	0x100160d4
1000f800:	1000dc19 	.word	0x1000dc19

1000f804 <htpt_temp_send_req_handler>:
1000f804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f806:	2502      	movs	r5, #2
1000f808:	ac08      	add	r4, sp, #32
1000f80a:	7826      	ldrb	r6, [r4, #0]
1000f80c:	4c18      	ldr	r4, [pc, #96]	; (1000f870 <htpt_temp_send_req_handler+0x6c>)
1000f80e:	4f19      	ldr	r7, [pc, #100]	; (1000f874 <htpt_temp_send_req_handler+0x70>)
1000f810:	7025      	strb	r5, [r4, #0]
1000f812:	3519      	adds	r5, #25
1000f814:	7065      	strb	r5, [r4, #1]
1000f816:	70a5      	strb	r5, [r4, #2]
1000f818:	2500      	movs	r5, #0
1000f81a:	9301      	str	r3, [sp, #4]
1000f81c:	883b      	ldrh	r3, [r7, #0]
1000f81e:	883f      	ldrh	r7, [r7, #0]
1000f820:	7123      	strb	r3, [r4, #4]
1000f822:	466b      	mov	r3, sp
1000f824:	0a3f      	lsrs	r7, r7, #8
1000f826:	7167      	strb	r7, [r4, #5]
1000f828:	0a07      	lsrs	r7, r0, #8
1000f82a:	7220      	strb	r0, [r4, #8]
1000f82c:	7267      	strb	r7, [r4, #9]
1000f82e:	0c07      	lsrs	r7, r0, #16
1000f830:	0e00      	lsrs	r0, r0, #24
1000f832:	70e5      	strb	r5, [r4, #3]
1000f834:	72a7      	strb	r7, [r4, #10]
1000f836:	72e0      	strb	r0, [r4, #11]
1000f838:	8808      	ldrh	r0, [r1, #0]
1000f83a:	791b      	ldrb	r3, [r3, #4]
1000f83c:	7320      	strb	r0, [r4, #12]
1000f83e:	8808      	ldrh	r0, [r1, #0]
1000f840:	0a00      	lsrs	r0, r0, #8
1000f842:	7360      	strb	r0, [r4, #13]
1000f844:	7888      	ldrb	r0, [r1, #2]
1000f846:	73a0      	strb	r0, [r4, #14]
1000f848:	78c8      	ldrb	r0, [r1, #3]
1000f84a:	73e0      	strb	r0, [r4, #15]
1000f84c:	7908      	ldrb	r0, [r1, #4]
1000f84e:	7420      	strb	r0, [r4, #16]
1000f850:	7948      	ldrb	r0, [r1, #5]
1000f852:	7460      	strb	r0, [r4, #17]
1000f854:	7989      	ldrb	r1, [r1, #6]
1000f856:	7522      	strb	r2, [r4, #20]
1000f858:	74a1      	strb	r1, [r4, #18]
1000f85a:	7563      	strb	r3, [r4, #21]
1000f85c:	2314      	movs	r3, #20
1000f85e:	1c20      	adds	r0, r4, #0
1000f860:	71a3      	strb	r3, [r4, #6]
1000f862:	211c      	movs	r1, #28
1000f864:	4b04      	ldr	r3, [pc, #16]	; (1000f878 <htpt_temp_send_req_handler+0x74>)
1000f866:	7626      	strb	r6, [r4, #24]
1000f868:	71e5      	strb	r5, [r4, #7]
1000f86a:	4798      	blx	r3
1000f86c:	1c28      	adds	r0, r5, #0
1000f86e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f870:	10016444 	.word	0x10016444
1000f874:	100160d4 	.word	0x100160d4
1000f878:	1000dc19 	.word	0x1000dc19

1000f87c <htpt_enable_rsp_handler>:
1000f87c:	780b      	ldrb	r3, [r1, #0]
1000f87e:	7013      	strb	r3, [r2, #0]
1000f880:	784b      	ldrb	r3, [r1, #1]
1000f882:	7053      	strb	r3, [r2, #1]
1000f884:	4770      	bx	lr

1000f886 <htpt_temp_send_rsp_handler>:
1000f886:	780b      	ldrb	r3, [r1, #0]
1000f888:	7013      	strb	r3, [r2, #0]
1000f88a:	4770      	bx	lr

1000f88c <htpt_meas_intv_upd_rsp_handler>:
1000f88c:	780b      	ldrb	r3, [r1, #0]
1000f88e:	7013      	strb	r3, [r2, #0]
1000f890:	4770      	bx	lr

1000f892 <htpt_meas_intv_chg_req_ind_handler>:
1000f892:	78cb      	ldrb	r3, [r1, #3]
1000f894:	7889      	ldrb	r1, [r1, #2]
1000f896:	021b      	lsls	r3, r3, #8
1000f898:	430b      	orrs	r3, r1
1000f89a:	8013      	strh	r3, [r2, #0]
1000f89c:	4770      	bx	lr

1000f89e <htpt_cfg_indntf_ind_handler>:
1000f89e:	780b      	ldrb	r3, [r1, #0]
1000f8a0:	7013      	strb	r3, [r2, #0]
1000f8a2:	784b      	ldrb	r3, [r1, #1]
1000f8a4:	7053      	strb	r3, [r2, #1]
1000f8a6:	4770      	bx	lr

1000f8a8 <__gnu_thumb1_case_sqi>:
1000f8a8:	b402      	push	{r1}
1000f8aa:	4671      	mov	r1, lr
1000f8ac:	0849      	lsrs	r1, r1, #1
1000f8ae:	0049      	lsls	r1, r1, #1
1000f8b0:	5609      	ldrsb	r1, [r1, r0]
1000f8b2:	0049      	lsls	r1, r1, #1
1000f8b4:	448e      	add	lr, r1
1000f8b6:	bc02      	pop	{r1}
1000f8b8:	4770      	bx	lr
1000f8ba:	46c0      	nop			; (mov r8, r8)

1000f8bc <__gnu_thumb1_case_uqi>:
1000f8bc:	b402      	push	{r1}
1000f8be:	4671      	mov	r1, lr
1000f8c0:	0849      	lsrs	r1, r1, #1
1000f8c2:	0049      	lsls	r1, r1, #1
1000f8c4:	5c09      	ldrb	r1, [r1, r0]
1000f8c6:	0049      	lsls	r1, r1, #1
1000f8c8:	448e      	add	lr, r1
1000f8ca:	bc02      	pop	{r1}
1000f8cc:	4770      	bx	lr
1000f8ce:	46c0      	nop			; (mov r8, r8)

1000f8d0 <__aeabi_uidiv>:
1000f8d0:	2200      	movs	r2, #0
1000f8d2:	0843      	lsrs	r3, r0, #1
1000f8d4:	428b      	cmp	r3, r1
1000f8d6:	d374      	bcc.n	1000f9c2 <__aeabi_uidiv+0xf2>
1000f8d8:	0903      	lsrs	r3, r0, #4
1000f8da:	428b      	cmp	r3, r1
1000f8dc:	d35f      	bcc.n	1000f99e <__aeabi_uidiv+0xce>
1000f8de:	0a03      	lsrs	r3, r0, #8
1000f8e0:	428b      	cmp	r3, r1
1000f8e2:	d344      	bcc.n	1000f96e <__aeabi_uidiv+0x9e>
1000f8e4:	0b03      	lsrs	r3, r0, #12
1000f8e6:	428b      	cmp	r3, r1
1000f8e8:	d328      	bcc.n	1000f93c <__aeabi_uidiv+0x6c>
1000f8ea:	0c03      	lsrs	r3, r0, #16
1000f8ec:	428b      	cmp	r3, r1
1000f8ee:	d30d      	bcc.n	1000f90c <__aeabi_uidiv+0x3c>
1000f8f0:	22ff      	movs	r2, #255	; 0xff
1000f8f2:	0209      	lsls	r1, r1, #8
1000f8f4:	ba12      	rev	r2, r2
1000f8f6:	0c03      	lsrs	r3, r0, #16
1000f8f8:	428b      	cmp	r3, r1
1000f8fa:	d302      	bcc.n	1000f902 <__aeabi_uidiv+0x32>
1000f8fc:	1212      	asrs	r2, r2, #8
1000f8fe:	0209      	lsls	r1, r1, #8
1000f900:	d065      	beq.n	1000f9ce <__aeabi_uidiv+0xfe>
1000f902:	0b03      	lsrs	r3, r0, #12
1000f904:	428b      	cmp	r3, r1
1000f906:	d319      	bcc.n	1000f93c <__aeabi_uidiv+0x6c>
1000f908:	e000      	b.n	1000f90c <__aeabi_uidiv+0x3c>
1000f90a:	0a09      	lsrs	r1, r1, #8
1000f90c:	0bc3      	lsrs	r3, r0, #15
1000f90e:	428b      	cmp	r3, r1
1000f910:	d301      	bcc.n	1000f916 <__aeabi_uidiv+0x46>
1000f912:	03cb      	lsls	r3, r1, #15
1000f914:	1ac0      	subs	r0, r0, r3
1000f916:	4152      	adcs	r2, r2
1000f918:	0b83      	lsrs	r3, r0, #14
1000f91a:	428b      	cmp	r3, r1
1000f91c:	d301      	bcc.n	1000f922 <__aeabi_uidiv+0x52>
1000f91e:	038b      	lsls	r3, r1, #14
1000f920:	1ac0      	subs	r0, r0, r3
1000f922:	4152      	adcs	r2, r2
1000f924:	0b43      	lsrs	r3, r0, #13
1000f926:	428b      	cmp	r3, r1
1000f928:	d301      	bcc.n	1000f92e <__aeabi_uidiv+0x5e>
1000f92a:	034b      	lsls	r3, r1, #13
1000f92c:	1ac0      	subs	r0, r0, r3
1000f92e:	4152      	adcs	r2, r2
1000f930:	0b03      	lsrs	r3, r0, #12
1000f932:	428b      	cmp	r3, r1
1000f934:	d301      	bcc.n	1000f93a <__aeabi_uidiv+0x6a>
1000f936:	030b      	lsls	r3, r1, #12
1000f938:	1ac0      	subs	r0, r0, r3
1000f93a:	4152      	adcs	r2, r2
1000f93c:	0ac3      	lsrs	r3, r0, #11
1000f93e:	428b      	cmp	r3, r1
1000f940:	d301      	bcc.n	1000f946 <__aeabi_uidiv+0x76>
1000f942:	02cb      	lsls	r3, r1, #11
1000f944:	1ac0      	subs	r0, r0, r3
1000f946:	4152      	adcs	r2, r2
1000f948:	0a83      	lsrs	r3, r0, #10
1000f94a:	428b      	cmp	r3, r1
1000f94c:	d301      	bcc.n	1000f952 <__aeabi_uidiv+0x82>
1000f94e:	028b      	lsls	r3, r1, #10
1000f950:	1ac0      	subs	r0, r0, r3
1000f952:	4152      	adcs	r2, r2
1000f954:	0a43      	lsrs	r3, r0, #9
1000f956:	428b      	cmp	r3, r1
1000f958:	d301      	bcc.n	1000f95e <__aeabi_uidiv+0x8e>
1000f95a:	024b      	lsls	r3, r1, #9
1000f95c:	1ac0      	subs	r0, r0, r3
1000f95e:	4152      	adcs	r2, r2
1000f960:	0a03      	lsrs	r3, r0, #8
1000f962:	428b      	cmp	r3, r1
1000f964:	d301      	bcc.n	1000f96a <__aeabi_uidiv+0x9a>
1000f966:	020b      	lsls	r3, r1, #8
1000f968:	1ac0      	subs	r0, r0, r3
1000f96a:	4152      	adcs	r2, r2
1000f96c:	d2cd      	bcs.n	1000f90a <__aeabi_uidiv+0x3a>
1000f96e:	09c3      	lsrs	r3, r0, #7
1000f970:	428b      	cmp	r3, r1
1000f972:	d301      	bcc.n	1000f978 <__aeabi_uidiv+0xa8>
1000f974:	01cb      	lsls	r3, r1, #7
1000f976:	1ac0      	subs	r0, r0, r3
1000f978:	4152      	adcs	r2, r2
1000f97a:	0983      	lsrs	r3, r0, #6
1000f97c:	428b      	cmp	r3, r1
1000f97e:	d301      	bcc.n	1000f984 <__aeabi_uidiv+0xb4>
1000f980:	018b      	lsls	r3, r1, #6
1000f982:	1ac0      	subs	r0, r0, r3
1000f984:	4152      	adcs	r2, r2
1000f986:	0943      	lsrs	r3, r0, #5
1000f988:	428b      	cmp	r3, r1
1000f98a:	d301      	bcc.n	1000f990 <__aeabi_uidiv+0xc0>
1000f98c:	014b      	lsls	r3, r1, #5
1000f98e:	1ac0      	subs	r0, r0, r3
1000f990:	4152      	adcs	r2, r2
1000f992:	0903      	lsrs	r3, r0, #4
1000f994:	428b      	cmp	r3, r1
1000f996:	d301      	bcc.n	1000f99c <__aeabi_uidiv+0xcc>
1000f998:	010b      	lsls	r3, r1, #4
1000f99a:	1ac0      	subs	r0, r0, r3
1000f99c:	4152      	adcs	r2, r2
1000f99e:	08c3      	lsrs	r3, r0, #3
1000f9a0:	428b      	cmp	r3, r1
1000f9a2:	d301      	bcc.n	1000f9a8 <__aeabi_uidiv+0xd8>
1000f9a4:	00cb      	lsls	r3, r1, #3
1000f9a6:	1ac0      	subs	r0, r0, r3
1000f9a8:	4152      	adcs	r2, r2
1000f9aa:	0883      	lsrs	r3, r0, #2
1000f9ac:	428b      	cmp	r3, r1
1000f9ae:	d301      	bcc.n	1000f9b4 <__aeabi_uidiv+0xe4>
1000f9b0:	008b      	lsls	r3, r1, #2
1000f9b2:	1ac0      	subs	r0, r0, r3
1000f9b4:	4152      	adcs	r2, r2
1000f9b6:	0843      	lsrs	r3, r0, #1
1000f9b8:	428b      	cmp	r3, r1
1000f9ba:	d301      	bcc.n	1000f9c0 <__aeabi_uidiv+0xf0>
1000f9bc:	004b      	lsls	r3, r1, #1
1000f9be:	1ac0      	subs	r0, r0, r3
1000f9c0:	4152      	adcs	r2, r2
1000f9c2:	1a41      	subs	r1, r0, r1
1000f9c4:	d200      	bcs.n	1000f9c8 <__aeabi_uidiv+0xf8>
1000f9c6:	4601      	mov	r1, r0
1000f9c8:	4152      	adcs	r2, r2
1000f9ca:	4610      	mov	r0, r2
1000f9cc:	4770      	bx	lr
1000f9ce:	e7ff      	b.n	1000f9d0 <__aeabi_uidiv+0x100>
1000f9d0:	b501      	push	{r0, lr}
1000f9d2:	2000      	movs	r0, #0
1000f9d4:	f000 f806 	bl	1000f9e4 <__aeabi_idiv0>
1000f9d8:	bd02      	pop	{r1, pc}
1000f9da:	46c0      	nop			; (mov r8, r8)

1000f9dc <__aeabi_uidivmod>:
1000f9dc:	2900      	cmp	r1, #0
1000f9de:	d0f7      	beq.n	1000f9d0 <__aeabi_uidiv+0x100>
1000f9e0:	e776      	b.n	1000f8d0 <__aeabi_uidiv>
1000f9e2:	4770      	bx	lr

1000f9e4 <__aeabi_idiv0>:
1000f9e4:	4770      	bx	lr
1000f9e6:	46c0      	nop			; (mov r8, r8)

1000f9e8 <__aeabi_f2uiz>:
1000f9e8:	219e      	movs	r1, #158	; 0x9e
1000f9ea:	b510      	push	{r4, lr}
1000f9ec:	05c9      	lsls	r1, r1, #23
1000f9ee:	1c04      	adds	r4, r0, #0
1000f9f0:	f001 fc64 	bl	100112bc <__aeabi_fcmpge>
1000f9f4:	2800      	cmp	r0, #0
1000f9f6:	d103      	bne.n	1000fa00 <__aeabi_f2uiz+0x18>
1000f9f8:	1c20      	adds	r0, r4, #0
1000f9fa:	f000 fd55 	bl	100104a8 <__aeabi_f2iz>
1000f9fe:	bd10      	pop	{r4, pc}
1000fa00:	219e      	movs	r1, #158	; 0x9e
1000fa02:	1c20      	adds	r0, r4, #0
1000fa04:	05c9      	lsls	r1, r1, #23
1000fa06:	f000 fbc9 	bl	1001019c <__aeabi_fsub>
1000fa0a:	f000 fd4d 	bl	100104a8 <__aeabi_f2iz>
1000fa0e:	2380      	movs	r3, #128	; 0x80
1000fa10:	061b      	lsls	r3, r3, #24
1000fa12:	469c      	mov	ip, r3
1000fa14:	4460      	add	r0, ip
1000fa16:	e7f2      	b.n	1000f9fe <__aeabi_f2uiz+0x16>

1000fa18 <__aeabi_d2uiz>:
1000fa18:	b570      	push	{r4, r5, r6, lr}
1000fa1a:	2200      	movs	r2, #0
1000fa1c:	4b0c      	ldr	r3, [pc, #48]	; (1000fa50 <__aeabi_d2uiz+0x38>)
1000fa1e:	0004      	movs	r4, r0
1000fa20:	000d      	movs	r5, r1
1000fa22:	f001 fc11 	bl	10011248 <__aeabi_dcmpge>
1000fa26:	2800      	cmp	r0, #0
1000fa28:	d104      	bne.n	1000fa34 <__aeabi_d2uiz+0x1c>
1000fa2a:	0020      	movs	r0, r4
1000fa2c:	0029      	movs	r1, r5
1000fa2e:	f001 fb69 	bl	10011104 <__aeabi_d2iz>
1000fa32:	bd70      	pop	{r4, r5, r6, pc}
1000fa34:	4b06      	ldr	r3, [pc, #24]	; (1000fa50 <__aeabi_d2uiz+0x38>)
1000fa36:	2200      	movs	r2, #0
1000fa38:	0020      	movs	r0, r4
1000fa3a:	0029      	movs	r1, r5
1000fa3c:	f001 f80e 	bl	10010a5c <__aeabi_dsub>
1000fa40:	f001 fb60 	bl	10011104 <__aeabi_d2iz>
1000fa44:	2380      	movs	r3, #128	; 0x80
1000fa46:	061b      	lsls	r3, r3, #24
1000fa48:	469c      	mov	ip, r3
1000fa4a:	4460      	add	r0, ip
1000fa4c:	e7f1      	b.n	1000fa32 <__aeabi_d2uiz+0x1a>
1000fa4e:	46c0      	nop			; (mov r8, r8)
1000fa50:	41e00000 	.word	0x41e00000

1000fa54 <__aeabi_fadd>:
1000fa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fa56:	024a      	lsls	r2, r1, #9
1000fa58:	0243      	lsls	r3, r0, #9
1000fa5a:	0044      	lsls	r4, r0, #1
1000fa5c:	004e      	lsls	r6, r1, #1
1000fa5e:	0fc5      	lsrs	r5, r0, #31
1000fa60:	0e24      	lsrs	r4, r4, #24
1000fa62:	0028      	movs	r0, r5
1000fa64:	099b      	lsrs	r3, r3, #6
1000fa66:	0e36      	lsrs	r6, r6, #24
1000fa68:	0fc9      	lsrs	r1, r1, #31
1000fa6a:	0992      	lsrs	r2, r2, #6
1000fa6c:	428d      	cmp	r5, r1
1000fa6e:	d059      	beq.n	1000fb24 <__aeabi_fadd+0xd0>
1000fa70:	1ba0      	subs	r0, r4, r6
1000fa72:	2800      	cmp	r0, #0
1000fa74:	dc00      	bgt.n	1000fa78 <__aeabi_fadd+0x24>
1000fa76:	e08d      	b.n	1000fb94 <__aeabi_fadd+0x140>
1000fa78:	2e00      	cmp	r6, #0
1000fa7a:	d11a      	bne.n	1000fab2 <__aeabi_fadd+0x5e>
1000fa7c:	2a00      	cmp	r2, #0
1000fa7e:	d000      	beq.n	1000fa82 <__aeabi_fadd+0x2e>
1000fa80:	e079      	b.n	1000fb76 <__aeabi_fadd+0x122>
1000fa82:	075a      	lsls	r2, r3, #29
1000fa84:	d004      	beq.n	1000fa90 <__aeabi_fadd+0x3c>
1000fa86:	220f      	movs	r2, #15
1000fa88:	401a      	ands	r2, r3
1000fa8a:	2a04      	cmp	r2, #4
1000fa8c:	d000      	beq.n	1000fa90 <__aeabi_fadd+0x3c>
1000fa8e:	3304      	adds	r3, #4
1000fa90:	015a      	lsls	r2, r3, #5
1000fa92:	d538      	bpl.n	1000fb06 <__aeabi_fadd+0xb2>
1000fa94:	3401      	adds	r4, #1
1000fa96:	2cff      	cmp	r4, #255	; 0xff
1000fa98:	d100      	bne.n	1000fa9c <__aeabi_fadd+0x48>
1000fa9a:	e089      	b.n	1000fbb0 <__aeabi_fadd+0x15c>
1000fa9c:	0028      	movs	r0, r5
1000fa9e:	019b      	lsls	r3, r3, #6
1000faa0:	0a5b      	lsrs	r3, r3, #9
1000faa2:	b2e4      	uxtb	r4, r4
1000faa4:	025b      	lsls	r3, r3, #9
1000faa6:	05e4      	lsls	r4, r4, #23
1000faa8:	0a5b      	lsrs	r3, r3, #9
1000faaa:	4323      	orrs	r3, r4
1000faac:	07c0      	lsls	r0, r0, #31
1000faae:	4318      	orrs	r0, r3
1000fab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fab2:	2cff      	cmp	r4, #255	; 0xff
1000fab4:	d0e5      	beq.n	1000fa82 <__aeabi_fadd+0x2e>
1000fab6:	2180      	movs	r1, #128	; 0x80
1000fab8:	04c9      	lsls	r1, r1, #19
1000faba:	430a      	orrs	r2, r1
1000fabc:	281b      	cmp	r0, #27
1000fabe:	dd00      	ble.n	1000fac2 <__aeabi_fadd+0x6e>
1000fac0:	e089      	b.n	1000fbd6 <__aeabi_fadd+0x182>
1000fac2:	0016      	movs	r6, r2
1000fac4:	2120      	movs	r1, #32
1000fac6:	40c6      	lsrs	r6, r0
1000fac8:	1a08      	subs	r0, r1, r0
1000faca:	4082      	lsls	r2, r0
1000facc:	1e51      	subs	r1, r2, #1
1000face:	418a      	sbcs	r2, r1
1000fad0:	4332      	orrs	r2, r6
1000fad2:	1a9b      	subs	r3, r3, r2
1000fad4:	015a      	lsls	r2, r3, #5
1000fad6:	d514      	bpl.n	1000fb02 <__aeabi_fadd+0xae>
1000fad8:	019b      	lsls	r3, r3, #6
1000fada:	099e      	lsrs	r6, r3, #6
1000fadc:	0030      	movs	r0, r6
1000fade:	f001 fbf7 	bl	100112d0 <__clzsi2>
1000fae2:	3805      	subs	r0, #5
1000fae4:	4086      	lsls	r6, r0
1000fae6:	4284      	cmp	r4, r0
1000fae8:	dc65      	bgt.n	1000fbb6 <__aeabi_fadd+0x162>
1000faea:	1b04      	subs	r4, r0, r4
1000faec:	0033      	movs	r3, r6
1000faee:	2020      	movs	r0, #32
1000faf0:	3401      	adds	r4, #1
1000faf2:	40e3      	lsrs	r3, r4
1000faf4:	1b04      	subs	r4, r0, r4
1000faf6:	40a6      	lsls	r6, r4
1000faf8:	1e72      	subs	r2, r6, #1
1000fafa:	4196      	sbcs	r6, r2
1000fafc:	2400      	movs	r4, #0
1000fafe:	4333      	orrs	r3, r6
1000fb00:	e7bf      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fb02:	075a      	lsls	r2, r3, #29
1000fb04:	d1bf      	bne.n	1000fa86 <__aeabi_fadd+0x32>
1000fb06:	08df      	lsrs	r7, r3, #3
1000fb08:	0028      	movs	r0, r5
1000fb0a:	2cff      	cmp	r4, #255	; 0xff
1000fb0c:	d12f      	bne.n	1000fb6e <__aeabi_fadd+0x11a>
1000fb0e:	2f00      	cmp	r7, #0
1000fb10:	d100      	bne.n	1000fb14 <__aeabi_fadd+0xc0>
1000fb12:	e087      	b.n	1000fc24 <__aeabi_fadd+0x1d0>
1000fb14:	2280      	movs	r2, #128	; 0x80
1000fb16:	03d2      	lsls	r2, r2, #15
1000fb18:	0013      	movs	r3, r2
1000fb1a:	433b      	orrs	r3, r7
1000fb1c:	025b      	lsls	r3, r3, #9
1000fb1e:	0a5b      	lsrs	r3, r3, #9
1000fb20:	24ff      	movs	r4, #255	; 0xff
1000fb22:	e7bf      	b.n	1000faa4 <__aeabi_fadd+0x50>
1000fb24:	1ba1      	subs	r1, r4, r6
1000fb26:	2900      	cmp	r1, #0
1000fb28:	dd49      	ble.n	1000fbbe <__aeabi_fadd+0x16a>
1000fb2a:	2e00      	cmp	r6, #0
1000fb2c:	d029      	beq.n	1000fb82 <__aeabi_fadd+0x12e>
1000fb2e:	2cff      	cmp	r4, #255	; 0xff
1000fb30:	d0a7      	beq.n	1000fa82 <__aeabi_fadd+0x2e>
1000fb32:	2680      	movs	r6, #128	; 0x80
1000fb34:	04f6      	lsls	r6, r6, #19
1000fb36:	4332      	orrs	r2, r6
1000fb38:	291b      	cmp	r1, #27
1000fb3a:	dd00      	ble.n	1000fb3e <__aeabi_fadd+0xea>
1000fb3c:	e08d      	b.n	1000fc5a <__aeabi_fadd+0x206>
1000fb3e:	0017      	movs	r7, r2
1000fb40:	2620      	movs	r6, #32
1000fb42:	40cf      	lsrs	r7, r1
1000fb44:	1a71      	subs	r1, r6, r1
1000fb46:	408a      	lsls	r2, r1
1000fb48:	1e51      	subs	r1, r2, #1
1000fb4a:	418a      	sbcs	r2, r1
1000fb4c:	433a      	orrs	r2, r7
1000fb4e:	189b      	adds	r3, r3, r2
1000fb50:	015a      	lsls	r2, r3, #5
1000fb52:	d5d6      	bpl.n	1000fb02 <__aeabi_fadd+0xae>
1000fb54:	3401      	adds	r4, #1
1000fb56:	2cff      	cmp	r4, #255	; 0xff
1000fb58:	d064      	beq.n	1000fc24 <__aeabi_fadd+0x1d0>
1000fb5a:	2201      	movs	r2, #1
1000fb5c:	4976      	ldr	r1, [pc, #472]	; (1000fd38 <__aeabi_fadd+0x2e4>)
1000fb5e:	401a      	ands	r2, r3
1000fb60:	085b      	lsrs	r3, r3, #1
1000fb62:	400b      	ands	r3, r1
1000fb64:	4313      	orrs	r3, r2
1000fb66:	e78c      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fb68:	1e03      	subs	r3, r0, #0
1000fb6a:	d1ca      	bne.n	1000fb02 <__aeabi_fadd+0xae>
1000fb6c:	2000      	movs	r0, #0
1000fb6e:	027b      	lsls	r3, r7, #9
1000fb70:	0a5b      	lsrs	r3, r3, #9
1000fb72:	b2e4      	uxtb	r4, r4
1000fb74:	e796      	b.n	1000faa4 <__aeabi_fadd+0x50>
1000fb76:	3801      	subs	r0, #1
1000fb78:	2800      	cmp	r0, #0
1000fb7a:	d0aa      	beq.n	1000fad2 <__aeabi_fadd+0x7e>
1000fb7c:	2cff      	cmp	r4, #255	; 0xff
1000fb7e:	d19d      	bne.n	1000fabc <__aeabi_fadd+0x68>
1000fb80:	e77f      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fb82:	2a00      	cmp	r2, #0
1000fb84:	d100      	bne.n	1000fb88 <__aeabi_fadd+0x134>
1000fb86:	e77c      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fb88:	3901      	subs	r1, #1
1000fb8a:	2900      	cmp	r1, #0
1000fb8c:	d0df      	beq.n	1000fb4e <__aeabi_fadd+0xfa>
1000fb8e:	2cff      	cmp	r4, #255	; 0xff
1000fb90:	d1d2      	bne.n	1000fb38 <__aeabi_fadd+0xe4>
1000fb92:	e776      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fb94:	2800      	cmp	r0, #0
1000fb96:	d120      	bne.n	1000fbda <__aeabi_fadd+0x186>
1000fb98:	1c60      	adds	r0, r4, #1
1000fb9a:	b2c0      	uxtb	r0, r0
1000fb9c:	2801      	cmp	r0, #1
1000fb9e:	dd53      	ble.n	1000fc48 <__aeabi_fadd+0x1f4>
1000fba0:	2780      	movs	r7, #128	; 0x80
1000fba2:	1a9e      	subs	r6, r3, r2
1000fba4:	04ff      	lsls	r7, r7, #19
1000fba6:	4037      	ands	r7, r6
1000fba8:	d02f      	beq.n	1000fc0a <__aeabi_fadd+0x1b6>
1000fbaa:	1ad6      	subs	r6, r2, r3
1000fbac:	000d      	movs	r5, r1
1000fbae:	e795      	b.n	1000fadc <__aeabi_fadd+0x88>
1000fbb0:	0028      	movs	r0, r5
1000fbb2:	2300      	movs	r3, #0
1000fbb4:	e776      	b.n	1000faa4 <__aeabi_fadd+0x50>
1000fbb6:	4b61      	ldr	r3, [pc, #388]	; (1000fd3c <__aeabi_fadd+0x2e8>)
1000fbb8:	1a24      	subs	r4, r4, r0
1000fbba:	4033      	ands	r3, r6
1000fbbc:	e761      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fbbe:	2900      	cmp	r1, #0
1000fbc0:	d14d      	bne.n	1000fc5e <__aeabi_fadd+0x20a>
1000fbc2:	1c61      	adds	r1, r4, #1
1000fbc4:	b2ce      	uxtb	r6, r1
1000fbc6:	2e01      	cmp	r6, #1
1000fbc8:	dd2f      	ble.n	1000fc2a <__aeabi_fadd+0x1d6>
1000fbca:	29ff      	cmp	r1, #255	; 0xff
1000fbcc:	d02a      	beq.n	1000fc24 <__aeabi_fadd+0x1d0>
1000fbce:	189b      	adds	r3, r3, r2
1000fbd0:	085b      	lsrs	r3, r3, #1
1000fbd2:	000c      	movs	r4, r1
1000fbd4:	e755      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fbd6:	2201      	movs	r2, #1
1000fbd8:	e77b      	b.n	1000fad2 <__aeabi_fadd+0x7e>
1000fbda:	2c00      	cmp	r4, #0
1000fbdc:	d11b      	bne.n	1000fc16 <__aeabi_fadd+0x1c2>
1000fbde:	2b00      	cmp	r3, #0
1000fbe0:	d05b      	beq.n	1000fc9a <__aeabi_fadd+0x246>
1000fbe2:	43c0      	mvns	r0, r0
1000fbe4:	2800      	cmp	r0, #0
1000fbe6:	d00c      	beq.n	1000fc02 <__aeabi_fadd+0x1ae>
1000fbe8:	2eff      	cmp	r6, #255	; 0xff
1000fbea:	d07e      	beq.n	1000fcea <__aeabi_fadd+0x296>
1000fbec:	281b      	cmp	r0, #27
1000fbee:	dd00      	ble.n	1000fbf2 <__aeabi_fadd+0x19e>
1000fbf0:	e092      	b.n	1000fd18 <__aeabi_fadd+0x2c4>
1000fbf2:	001d      	movs	r5, r3
1000fbf4:	2420      	movs	r4, #32
1000fbf6:	40c5      	lsrs	r5, r0
1000fbf8:	1a20      	subs	r0, r4, r0
1000fbfa:	4083      	lsls	r3, r0
1000fbfc:	1e58      	subs	r0, r3, #1
1000fbfe:	4183      	sbcs	r3, r0
1000fc00:	432b      	orrs	r3, r5
1000fc02:	1ad3      	subs	r3, r2, r3
1000fc04:	0034      	movs	r4, r6
1000fc06:	000d      	movs	r5, r1
1000fc08:	e764      	b.n	1000fad4 <__aeabi_fadd+0x80>
1000fc0a:	2e00      	cmp	r6, #0
1000fc0c:	d000      	beq.n	1000fc10 <__aeabi_fadd+0x1bc>
1000fc0e:	e765      	b.n	1000fadc <__aeabi_fadd+0x88>
1000fc10:	2000      	movs	r0, #0
1000fc12:	2400      	movs	r4, #0
1000fc14:	e7ab      	b.n	1000fb6e <__aeabi_fadd+0x11a>
1000fc16:	2eff      	cmp	r6, #255	; 0xff
1000fc18:	d067      	beq.n	1000fcea <__aeabi_fadd+0x296>
1000fc1a:	2480      	movs	r4, #128	; 0x80
1000fc1c:	04e4      	lsls	r4, r4, #19
1000fc1e:	4240      	negs	r0, r0
1000fc20:	4323      	orrs	r3, r4
1000fc22:	e7e3      	b.n	1000fbec <__aeabi_fadd+0x198>
1000fc24:	24ff      	movs	r4, #255	; 0xff
1000fc26:	2300      	movs	r3, #0
1000fc28:	e73c      	b.n	1000faa4 <__aeabi_fadd+0x50>
1000fc2a:	2c00      	cmp	r4, #0
1000fc2c:	d161      	bne.n	1000fcf2 <__aeabi_fadd+0x29e>
1000fc2e:	2b00      	cmp	r3, #0
1000fc30:	d07e      	beq.n	1000fd30 <__aeabi_fadd+0x2dc>
1000fc32:	2a00      	cmp	r2, #0
1000fc34:	d100      	bne.n	1000fc38 <__aeabi_fadd+0x1e4>
1000fc36:	e724      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fc38:	189b      	adds	r3, r3, r2
1000fc3a:	015a      	lsls	r2, r3, #5
1000fc3c:	d400      	bmi.n	1000fc40 <__aeabi_fadd+0x1ec>
1000fc3e:	e760      	b.n	1000fb02 <__aeabi_fadd+0xae>
1000fc40:	4a3e      	ldr	r2, [pc, #248]	; (1000fd3c <__aeabi_fadd+0x2e8>)
1000fc42:	000c      	movs	r4, r1
1000fc44:	4013      	ands	r3, r2
1000fc46:	e71c      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fc48:	2c00      	cmp	r4, #0
1000fc4a:	d11e      	bne.n	1000fc8a <__aeabi_fadd+0x236>
1000fc4c:	2b00      	cmp	r3, #0
1000fc4e:	d12f      	bne.n	1000fcb0 <__aeabi_fadd+0x25c>
1000fc50:	2a00      	cmp	r2, #0
1000fc52:	d066      	beq.n	1000fd22 <__aeabi_fadd+0x2ce>
1000fc54:	0013      	movs	r3, r2
1000fc56:	000d      	movs	r5, r1
1000fc58:	e713      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fc5a:	2201      	movs	r2, #1
1000fc5c:	e777      	b.n	1000fb4e <__aeabi_fadd+0xfa>
1000fc5e:	2c00      	cmp	r4, #0
1000fc60:	d11f      	bne.n	1000fca2 <__aeabi_fadd+0x24e>
1000fc62:	2b00      	cmp	r3, #0
1000fc64:	d05a      	beq.n	1000fd1c <__aeabi_fadd+0x2c8>
1000fc66:	43c9      	mvns	r1, r1
1000fc68:	2900      	cmp	r1, #0
1000fc6a:	d00b      	beq.n	1000fc84 <__aeabi_fadd+0x230>
1000fc6c:	2eff      	cmp	r6, #255	; 0xff
1000fc6e:	d050      	beq.n	1000fd12 <__aeabi_fadd+0x2be>
1000fc70:	291b      	cmp	r1, #27
1000fc72:	dc5f      	bgt.n	1000fd34 <__aeabi_fadd+0x2e0>
1000fc74:	001f      	movs	r7, r3
1000fc76:	2420      	movs	r4, #32
1000fc78:	40cf      	lsrs	r7, r1
1000fc7a:	1a61      	subs	r1, r4, r1
1000fc7c:	408b      	lsls	r3, r1
1000fc7e:	1e59      	subs	r1, r3, #1
1000fc80:	418b      	sbcs	r3, r1
1000fc82:	433b      	orrs	r3, r7
1000fc84:	189b      	adds	r3, r3, r2
1000fc86:	0034      	movs	r4, r6
1000fc88:	e762      	b.n	1000fb50 <__aeabi_fadd+0xfc>
1000fc8a:	2b00      	cmp	r3, #0
1000fc8c:	d11c      	bne.n	1000fcc8 <__aeabi_fadd+0x274>
1000fc8e:	2a00      	cmp	r2, #0
1000fc90:	d04a      	beq.n	1000fd28 <__aeabi_fadd+0x2d4>
1000fc92:	0013      	movs	r3, r2
1000fc94:	000d      	movs	r5, r1
1000fc96:	24ff      	movs	r4, #255	; 0xff
1000fc98:	e6f3      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fc9a:	0013      	movs	r3, r2
1000fc9c:	0034      	movs	r4, r6
1000fc9e:	000d      	movs	r5, r1
1000fca0:	e6ef      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fca2:	2eff      	cmp	r6, #255	; 0xff
1000fca4:	d035      	beq.n	1000fd12 <__aeabi_fadd+0x2be>
1000fca6:	2480      	movs	r4, #128	; 0x80
1000fca8:	04e4      	lsls	r4, r4, #19
1000fcaa:	4249      	negs	r1, r1
1000fcac:	4323      	orrs	r3, r4
1000fcae:	e7df      	b.n	1000fc70 <__aeabi_fadd+0x21c>
1000fcb0:	2a00      	cmp	r2, #0
1000fcb2:	d100      	bne.n	1000fcb6 <__aeabi_fadd+0x262>
1000fcb4:	e6e5      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fcb6:	2780      	movs	r7, #128	; 0x80
1000fcb8:	1a98      	subs	r0, r3, r2
1000fcba:	04ff      	lsls	r7, r7, #19
1000fcbc:	4007      	ands	r7, r0
1000fcbe:	d100      	bne.n	1000fcc2 <__aeabi_fadd+0x26e>
1000fcc0:	e752      	b.n	1000fb68 <__aeabi_fadd+0x114>
1000fcc2:	1ad3      	subs	r3, r2, r3
1000fcc4:	000d      	movs	r5, r1
1000fcc6:	e6dc      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fcc8:	24ff      	movs	r4, #255	; 0xff
1000fcca:	2a00      	cmp	r2, #0
1000fccc:	d100      	bne.n	1000fcd0 <__aeabi_fadd+0x27c>
1000fcce:	e6d8      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fcd0:	2080      	movs	r0, #128	; 0x80
1000fcd2:	08db      	lsrs	r3, r3, #3
1000fcd4:	03c0      	lsls	r0, r0, #15
1000fcd6:	4203      	tst	r3, r0
1000fcd8:	d004      	beq.n	1000fce4 <__aeabi_fadd+0x290>
1000fcda:	08d2      	lsrs	r2, r2, #3
1000fcdc:	4202      	tst	r2, r0
1000fcde:	d101      	bne.n	1000fce4 <__aeabi_fadd+0x290>
1000fce0:	0013      	movs	r3, r2
1000fce2:	000d      	movs	r5, r1
1000fce4:	00db      	lsls	r3, r3, #3
1000fce6:	24ff      	movs	r4, #255	; 0xff
1000fce8:	e6cb      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fcea:	0013      	movs	r3, r2
1000fcec:	24ff      	movs	r4, #255	; 0xff
1000fcee:	000d      	movs	r5, r1
1000fcf0:	e6c7      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fcf2:	2b00      	cmp	r3, #0
1000fcf4:	d00d      	beq.n	1000fd12 <__aeabi_fadd+0x2be>
1000fcf6:	24ff      	movs	r4, #255	; 0xff
1000fcf8:	2a00      	cmp	r2, #0
1000fcfa:	d100      	bne.n	1000fcfe <__aeabi_fadd+0x2aa>
1000fcfc:	e6c1      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fcfe:	2180      	movs	r1, #128	; 0x80
1000fd00:	08db      	lsrs	r3, r3, #3
1000fd02:	03c9      	lsls	r1, r1, #15
1000fd04:	420b      	tst	r3, r1
1000fd06:	d0ed      	beq.n	1000fce4 <__aeabi_fadd+0x290>
1000fd08:	08d2      	lsrs	r2, r2, #3
1000fd0a:	420a      	tst	r2, r1
1000fd0c:	d1ea      	bne.n	1000fce4 <__aeabi_fadd+0x290>
1000fd0e:	0013      	movs	r3, r2
1000fd10:	e7e8      	b.n	1000fce4 <__aeabi_fadd+0x290>
1000fd12:	0013      	movs	r3, r2
1000fd14:	24ff      	movs	r4, #255	; 0xff
1000fd16:	e6b4      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fd18:	2301      	movs	r3, #1
1000fd1a:	e772      	b.n	1000fc02 <__aeabi_fadd+0x1ae>
1000fd1c:	0013      	movs	r3, r2
1000fd1e:	0034      	movs	r4, r6
1000fd20:	e6af      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fd22:	2700      	movs	r7, #0
1000fd24:	2000      	movs	r0, #0
1000fd26:	e722      	b.n	1000fb6e <__aeabi_fadd+0x11a>
1000fd28:	2780      	movs	r7, #128	; 0x80
1000fd2a:	2000      	movs	r0, #0
1000fd2c:	03ff      	lsls	r7, r7, #15
1000fd2e:	e6f1      	b.n	1000fb14 <__aeabi_fadd+0xc0>
1000fd30:	0013      	movs	r3, r2
1000fd32:	e6a6      	b.n	1000fa82 <__aeabi_fadd+0x2e>
1000fd34:	2301      	movs	r3, #1
1000fd36:	e7a5      	b.n	1000fc84 <__aeabi_fadd+0x230>
1000fd38:	7dffffff 	.word	0x7dffffff
1000fd3c:	fbffffff 	.word	0xfbffffff

1000fd40 <__aeabi_fdiv>:
1000fd40:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fd42:	4656      	mov	r6, sl
1000fd44:	4644      	mov	r4, r8
1000fd46:	465f      	mov	r7, fp
1000fd48:	464d      	mov	r5, r9
1000fd4a:	b4f0      	push	{r4, r5, r6, r7}
1000fd4c:	0244      	lsls	r4, r0, #9
1000fd4e:	0046      	lsls	r6, r0, #1
1000fd50:	0fc7      	lsrs	r7, r0, #31
1000fd52:	b083      	sub	sp, #12
1000fd54:	4688      	mov	r8, r1
1000fd56:	0a65      	lsrs	r5, r4, #9
1000fd58:	0e36      	lsrs	r6, r6, #24
1000fd5a:	46ba      	mov	sl, r7
1000fd5c:	d03d      	beq.n	1000fdda <__aeabi_fdiv+0x9a>
1000fd5e:	2eff      	cmp	r6, #255	; 0xff
1000fd60:	d022      	beq.n	1000fda8 <__aeabi_fdiv+0x68>
1000fd62:	2300      	movs	r3, #0
1000fd64:	00ec      	lsls	r4, r5, #3
1000fd66:	2580      	movs	r5, #128	; 0x80
1000fd68:	4699      	mov	r9, r3
1000fd6a:	469b      	mov	fp, r3
1000fd6c:	04ed      	lsls	r5, r5, #19
1000fd6e:	4325      	orrs	r5, r4
1000fd70:	3e7f      	subs	r6, #127	; 0x7f
1000fd72:	4643      	mov	r3, r8
1000fd74:	025c      	lsls	r4, r3, #9
1000fd76:	0058      	lsls	r0, r3, #1
1000fd78:	0fdb      	lsrs	r3, r3, #31
1000fd7a:	0a64      	lsrs	r4, r4, #9
1000fd7c:	0e00      	lsrs	r0, r0, #24
1000fd7e:	4698      	mov	r8, r3
1000fd80:	d036      	beq.n	1000fdf0 <__aeabi_fdiv+0xb0>
1000fd82:	28ff      	cmp	r0, #255	; 0xff
1000fd84:	d030      	beq.n	1000fde8 <__aeabi_fdiv+0xa8>
1000fd86:	2380      	movs	r3, #128	; 0x80
1000fd88:	2100      	movs	r1, #0
1000fd8a:	00e4      	lsls	r4, r4, #3
1000fd8c:	04db      	lsls	r3, r3, #19
1000fd8e:	431c      	orrs	r4, r3
1000fd90:	387f      	subs	r0, #127	; 0x7f
1000fd92:	1a30      	subs	r0, r6, r0
1000fd94:	9001      	str	r0, [sp, #4]
1000fd96:	4648      	mov	r0, r9
1000fd98:	4642      	mov	r2, r8
1000fd9a:	4308      	orrs	r0, r1
1000fd9c:	4e72      	ldr	r6, [pc, #456]	; (1000ff68 <__aeabi_fdiv+0x228>)
1000fd9e:	0080      	lsls	r0, r0, #2
1000fda0:	5830      	ldr	r0, [r6, r0]
1000fda2:	407a      	eors	r2, r7
1000fda4:	0013      	movs	r3, r2
1000fda6:	4687      	mov	pc, r0
1000fda8:	2d00      	cmp	r5, #0
1000fdaa:	d144      	bne.n	1000fe36 <__aeabi_fdiv+0xf6>
1000fdac:	2308      	movs	r3, #8
1000fdae:	4699      	mov	r9, r3
1000fdb0:	3b06      	subs	r3, #6
1000fdb2:	469b      	mov	fp, r3
1000fdb4:	e7dd      	b.n	1000fd72 <__aeabi_fdiv+0x32>
1000fdb6:	2201      	movs	r2, #1
1000fdb8:	20ff      	movs	r0, #255	; 0xff
1000fdba:	2400      	movs	r4, #0
1000fdbc:	401a      	ands	r2, r3
1000fdbe:	0264      	lsls	r4, r4, #9
1000fdc0:	05c3      	lsls	r3, r0, #23
1000fdc2:	0a64      	lsrs	r4, r4, #9
1000fdc4:	07d2      	lsls	r2, r2, #31
1000fdc6:	431c      	orrs	r4, r3
1000fdc8:	4314      	orrs	r4, r2
1000fdca:	0020      	movs	r0, r4
1000fdcc:	b003      	add	sp, #12
1000fdce:	bc3c      	pop	{r2, r3, r4, r5}
1000fdd0:	4690      	mov	r8, r2
1000fdd2:	4699      	mov	r9, r3
1000fdd4:	46a2      	mov	sl, r4
1000fdd6:	46ab      	mov	fp, r5
1000fdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fdda:	2d00      	cmp	r5, #0
1000fddc:	d120      	bne.n	1000fe20 <__aeabi_fdiv+0xe0>
1000fdde:	2304      	movs	r3, #4
1000fde0:	4699      	mov	r9, r3
1000fde2:	3b03      	subs	r3, #3
1000fde4:	469b      	mov	fp, r3
1000fde6:	e7c4      	b.n	1000fd72 <__aeabi_fdiv+0x32>
1000fde8:	2c00      	cmp	r4, #0
1000fdea:	d117      	bne.n	1000fe1c <__aeabi_fdiv+0xdc>
1000fdec:	2102      	movs	r1, #2
1000fdee:	e002      	b.n	1000fdf6 <__aeabi_fdiv+0xb6>
1000fdf0:	2c00      	cmp	r4, #0
1000fdf2:	d10a      	bne.n	1000fe0a <__aeabi_fdiv+0xca>
1000fdf4:	2101      	movs	r1, #1
1000fdf6:	1a32      	subs	r2, r6, r0
1000fdf8:	9201      	str	r2, [sp, #4]
1000fdfa:	464a      	mov	r2, r9
1000fdfc:	4643      	mov	r3, r8
1000fdfe:	430a      	orrs	r2, r1
1000fe00:	485a      	ldr	r0, [pc, #360]	; (1000ff6c <__aeabi_fdiv+0x22c>)
1000fe02:	0092      	lsls	r2, r2, #2
1000fe04:	5882      	ldr	r2, [r0, r2]
1000fe06:	407b      	eors	r3, r7
1000fe08:	4697      	mov	pc, r2
1000fe0a:	0020      	movs	r0, r4
1000fe0c:	f001 fa60 	bl	100112d0 <__clzsi2>
1000fe10:	1f43      	subs	r3, r0, #5
1000fe12:	3076      	adds	r0, #118	; 0x76
1000fe14:	409c      	lsls	r4, r3
1000fe16:	4240      	negs	r0, r0
1000fe18:	2100      	movs	r1, #0
1000fe1a:	e7ba      	b.n	1000fd92 <__aeabi_fdiv+0x52>
1000fe1c:	2103      	movs	r1, #3
1000fe1e:	e7b8      	b.n	1000fd92 <__aeabi_fdiv+0x52>
1000fe20:	0028      	movs	r0, r5
1000fe22:	f001 fa55 	bl	100112d0 <__clzsi2>
1000fe26:	1f43      	subs	r3, r0, #5
1000fe28:	409d      	lsls	r5, r3
1000fe2a:	2300      	movs	r3, #0
1000fe2c:	3076      	adds	r0, #118	; 0x76
1000fe2e:	4246      	negs	r6, r0
1000fe30:	4699      	mov	r9, r3
1000fe32:	469b      	mov	fp, r3
1000fe34:	e79d      	b.n	1000fd72 <__aeabi_fdiv+0x32>
1000fe36:	230c      	movs	r3, #12
1000fe38:	4699      	mov	r9, r3
1000fe3a:	3b09      	subs	r3, #9
1000fe3c:	469b      	mov	fp, r3
1000fe3e:	e798      	b.n	1000fd72 <__aeabi_fdiv+0x32>
1000fe40:	2480      	movs	r4, #128	; 0x80
1000fe42:	2200      	movs	r2, #0
1000fe44:	03e4      	lsls	r4, r4, #15
1000fe46:	20ff      	movs	r0, #255	; 0xff
1000fe48:	e7b9      	b.n	1000fdbe <__aeabi_fdiv+0x7e>
1000fe4a:	2400      	movs	r4, #0
1000fe4c:	46c2      	mov	sl, r8
1000fe4e:	468b      	mov	fp, r1
1000fe50:	465a      	mov	r2, fp
1000fe52:	4653      	mov	r3, sl
1000fe54:	2a02      	cmp	r2, #2
1000fe56:	d0ae      	beq.n	1000fdb6 <__aeabi_fdiv+0x76>
1000fe58:	2a03      	cmp	r2, #3
1000fe5a:	d07d      	beq.n	1000ff58 <__aeabi_fdiv+0x218>
1000fe5c:	2a01      	cmp	r2, #1
1000fe5e:	d131      	bne.n	1000fec4 <__aeabi_fdiv+0x184>
1000fe60:	2201      	movs	r2, #1
1000fe62:	2000      	movs	r0, #0
1000fe64:	401a      	ands	r2, r3
1000fe66:	2400      	movs	r4, #0
1000fe68:	e7a9      	b.n	1000fdbe <__aeabi_fdiv+0x7e>
1000fe6a:	2201      	movs	r2, #1
1000fe6c:	1a10      	subs	r0, r2, r0
1000fe6e:	281b      	cmp	r0, #27
1000fe70:	dd56      	ble.n	1000ff20 <__aeabi_fdiv+0x1e0>
1000fe72:	401a      	ands	r2, r3
1000fe74:	2000      	movs	r0, #0
1000fe76:	2400      	movs	r4, #0
1000fe78:	e7a1      	b.n	1000fdbe <__aeabi_fdiv+0x7e>
1000fe7a:	2380      	movs	r3, #128	; 0x80
1000fe7c:	03db      	lsls	r3, r3, #15
1000fe7e:	421d      	tst	r5, r3
1000fe80:	d14b      	bne.n	1000ff1a <__aeabi_fdiv+0x1da>
1000fe82:	2380      	movs	r3, #128	; 0x80
1000fe84:	03db      	lsls	r3, r3, #15
1000fe86:	432b      	orrs	r3, r5
1000fe88:	025c      	lsls	r4, r3, #9
1000fe8a:	0a64      	lsrs	r4, r4, #9
1000fe8c:	003a      	movs	r2, r7
1000fe8e:	20ff      	movs	r0, #255	; 0xff
1000fe90:	e795      	b.n	1000fdbe <__aeabi_fdiv+0x7e>
1000fe92:	016d      	lsls	r5, r5, #5
1000fe94:	0160      	lsls	r0, r4, #5
1000fe96:	4285      	cmp	r5, r0
1000fe98:	d230      	bcs.n	1000fefc <__aeabi_fdiv+0x1bc>
1000fe9a:	9a01      	ldr	r2, [sp, #4]
1000fe9c:	2400      	movs	r4, #0
1000fe9e:	3a01      	subs	r2, #1
1000fea0:	9201      	str	r2, [sp, #4]
1000fea2:	221b      	movs	r2, #27
1000fea4:	2701      	movs	r7, #1
1000fea6:	0029      	movs	r1, r5
1000fea8:	0064      	lsls	r4, r4, #1
1000feaa:	006d      	lsls	r5, r5, #1
1000feac:	2900      	cmp	r1, #0
1000feae:	db01      	blt.n	1000feb4 <__aeabi_fdiv+0x174>
1000feb0:	42a8      	cmp	r0, r5
1000feb2:	d801      	bhi.n	1000feb8 <__aeabi_fdiv+0x178>
1000feb4:	1a2d      	subs	r5, r5, r0
1000feb6:	433c      	orrs	r4, r7
1000feb8:	3a01      	subs	r2, #1
1000feba:	2a00      	cmp	r2, #0
1000febc:	d1f3      	bne.n	1000fea6 <__aeabi_fdiv+0x166>
1000febe:	1e6a      	subs	r2, r5, #1
1000fec0:	4195      	sbcs	r5, r2
1000fec2:	432c      	orrs	r4, r5
1000fec4:	9801      	ldr	r0, [sp, #4]
1000fec6:	307f      	adds	r0, #127	; 0x7f
1000fec8:	2800      	cmp	r0, #0
1000feca:	ddce      	ble.n	1000fe6a <__aeabi_fdiv+0x12a>
1000fecc:	0762      	lsls	r2, r4, #29
1000fece:	d004      	beq.n	1000feda <__aeabi_fdiv+0x19a>
1000fed0:	220f      	movs	r2, #15
1000fed2:	4022      	ands	r2, r4
1000fed4:	2a04      	cmp	r2, #4
1000fed6:	d000      	beq.n	1000feda <__aeabi_fdiv+0x19a>
1000fed8:	3404      	adds	r4, #4
1000feda:	0122      	lsls	r2, r4, #4
1000fedc:	d503      	bpl.n	1000fee6 <__aeabi_fdiv+0x1a6>
1000fede:	4a24      	ldr	r2, [pc, #144]	; (1000ff70 <__aeabi_fdiv+0x230>)
1000fee0:	9801      	ldr	r0, [sp, #4]
1000fee2:	4014      	ands	r4, r2
1000fee4:	3080      	adds	r0, #128	; 0x80
1000fee6:	28fe      	cmp	r0, #254	; 0xfe
1000fee8:	dd00      	ble.n	1000feec <__aeabi_fdiv+0x1ac>
1000feea:	e764      	b.n	1000fdb6 <__aeabi_fdiv+0x76>
1000feec:	2201      	movs	r2, #1
1000feee:	01a4      	lsls	r4, r4, #6
1000fef0:	0a64      	lsrs	r4, r4, #9
1000fef2:	b2c0      	uxtb	r0, r0
1000fef4:	401a      	ands	r2, r3
1000fef6:	e762      	b.n	1000fdbe <__aeabi_fdiv+0x7e>
1000fef8:	002c      	movs	r4, r5
1000fefa:	e7a9      	b.n	1000fe50 <__aeabi_fdiv+0x110>
1000fefc:	1a2d      	subs	r5, r5, r0
1000fefe:	221a      	movs	r2, #26
1000ff00:	2401      	movs	r4, #1
1000ff02:	e7cf      	b.n	1000fea4 <__aeabi_fdiv+0x164>
1000ff04:	026b      	lsls	r3, r5, #9
1000ff06:	d5bc      	bpl.n	1000fe82 <__aeabi_fdiv+0x142>
1000ff08:	2400      	movs	r4, #0
1000ff0a:	2380      	movs	r3, #128	; 0x80
1000ff0c:	03db      	lsls	r3, r3, #15
1000ff0e:	431c      	orrs	r4, r3
1000ff10:	0264      	lsls	r4, r4, #9
1000ff12:	0a64      	lsrs	r4, r4, #9
1000ff14:	4642      	mov	r2, r8
1000ff16:	20ff      	movs	r0, #255	; 0xff
1000ff18:	e751      	b.n	1000fdbe <__aeabi_fdiv+0x7e>
1000ff1a:	421c      	tst	r4, r3
1000ff1c:	d1b3      	bne.n	1000fe86 <__aeabi_fdiv+0x146>
1000ff1e:	e7f4      	b.n	1000ff0a <__aeabi_fdiv+0x1ca>
1000ff20:	0021      	movs	r1, r4
1000ff22:	2220      	movs	r2, #32
1000ff24:	40c1      	lsrs	r1, r0
1000ff26:	1a10      	subs	r0, r2, r0
1000ff28:	4084      	lsls	r4, r0
1000ff2a:	1e62      	subs	r2, r4, #1
1000ff2c:	4194      	sbcs	r4, r2
1000ff2e:	430c      	orrs	r4, r1
1000ff30:	0762      	lsls	r2, r4, #29
1000ff32:	d004      	beq.n	1000ff3e <__aeabi_fdiv+0x1fe>
1000ff34:	220f      	movs	r2, #15
1000ff36:	4022      	ands	r2, r4
1000ff38:	2a04      	cmp	r2, #4
1000ff3a:	d000      	beq.n	1000ff3e <__aeabi_fdiv+0x1fe>
1000ff3c:	3404      	adds	r4, #4
1000ff3e:	0162      	lsls	r2, r4, #5
1000ff40:	d504      	bpl.n	1000ff4c <__aeabi_fdiv+0x20c>
1000ff42:	2201      	movs	r2, #1
1000ff44:	2001      	movs	r0, #1
1000ff46:	401a      	ands	r2, r3
1000ff48:	2400      	movs	r4, #0
1000ff4a:	e738      	b.n	1000fdbe <__aeabi_fdiv+0x7e>
1000ff4c:	2201      	movs	r2, #1
1000ff4e:	01a4      	lsls	r4, r4, #6
1000ff50:	0a64      	lsrs	r4, r4, #9
1000ff52:	401a      	ands	r2, r3
1000ff54:	2000      	movs	r0, #0
1000ff56:	e732      	b.n	1000fdbe <__aeabi_fdiv+0x7e>
1000ff58:	2380      	movs	r3, #128	; 0x80
1000ff5a:	03db      	lsls	r3, r3, #15
1000ff5c:	431c      	orrs	r4, r3
1000ff5e:	0264      	lsls	r4, r4, #9
1000ff60:	0a64      	lsrs	r4, r4, #9
1000ff62:	4652      	mov	r2, sl
1000ff64:	20ff      	movs	r0, #255	; 0xff
1000ff66:	e72a      	b.n	1000fdbe <__aeabi_fdiv+0x7e>
1000ff68:	10013708 	.word	0x10013708
1000ff6c:	10013748 	.word	0x10013748
1000ff70:	f7ffffff 	.word	0xf7ffffff

1000ff74 <__aeabi_fmul>:
1000ff74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff76:	4657      	mov	r7, sl
1000ff78:	464e      	mov	r6, r9
1000ff7a:	4645      	mov	r5, r8
1000ff7c:	0043      	lsls	r3, r0, #1
1000ff7e:	b4e0      	push	{r5, r6, r7}
1000ff80:	0246      	lsls	r6, r0, #9
1000ff82:	4688      	mov	r8, r1
1000ff84:	0a76      	lsrs	r6, r6, #9
1000ff86:	0e1f      	lsrs	r7, r3, #24
1000ff88:	0fc4      	lsrs	r4, r0, #31
1000ff8a:	2f00      	cmp	r7, #0
1000ff8c:	d047      	beq.n	1001001e <__aeabi_fmul+0xaa>
1000ff8e:	2fff      	cmp	r7, #255	; 0xff
1000ff90:	d025      	beq.n	1000ffde <__aeabi_fmul+0x6a>
1000ff92:	2300      	movs	r3, #0
1000ff94:	2580      	movs	r5, #128	; 0x80
1000ff96:	469a      	mov	sl, r3
1000ff98:	4699      	mov	r9, r3
1000ff9a:	00f6      	lsls	r6, r6, #3
1000ff9c:	04ed      	lsls	r5, r5, #19
1000ff9e:	432e      	orrs	r6, r5
1000ffa0:	3f7f      	subs	r7, #127	; 0x7f
1000ffa2:	4643      	mov	r3, r8
1000ffa4:	4642      	mov	r2, r8
1000ffa6:	025d      	lsls	r5, r3, #9
1000ffa8:	0fd2      	lsrs	r2, r2, #31
1000ffaa:	005b      	lsls	r3, r3, #1
1000ffac:	0a6d      	lsrs	r5, r5, #9
1000ffae:	0e1b      	lsrs	r3, r3, #24
1000ffb0:	4690      	mov	r8, r2
1000ffb2:	d040      	beq.n	10010036 <__aeabi_fmul+0xc2>
1000ffb4:	2bff      	cmp	r3, #255	; 0xff
1000ffb6:	d039      	beq.n	1001002c <__aeabi_fmul+0xb8>
1000ffb8:	2280      	movs	r2, #128	; 0x80
1000ffba:	2000      	movs	r0, #0
1000ffbc:	00ed      	lsls	r5, r5, #3
1000ffbe:	04d2      	lsls	r2, r2, #19
1000ffc0:	4315      	orrs	r5, r2
1000ffc2:	3b7f      	subs	r3, #127	; 0x7f
1000ffc4:	18fb      	adds	r3, r7, r3
1000ffc6:	4642      	mov	r2, r8
1000ffc8:	4657      	mov	r7, sl
1000ffca:	1c59      	adds	r1, r3, #1
1000ffcc:	4062      	eors	r2, r4
1000ffce:	468c      	mov	ip, r1
1000ffd0:	4307      	orrs	r7, r0
1000ffd2:	2f0f      	cmp	r7, #15
1000ffd4:	d85c      	bhi.n	10010090 <__aeabi_fmul+0x11c>
1000ffd6:	496f      	ldr	r1, [pc, #444]	; (10010194 <__aeabi_fmul+0x220>)
1000ffd8:	00bf      	lsls	r7, r7, #2
1000ffda:	59c9      	ldr	r1, [r1, r7]
1000ffdc:	468f      	mov	pc, r1
1000ffde:	2e00      	cmp	r6, #0
1000ffe0:	d145      	bne.n	1001006e <__aeabi_fmul+0xfa>
1000ffe2:	2308      	movs	r3, #8
1000ffe4:	469a      	mov	sl, r3
1000ffe6:	3b06      	subs	r3, #6
1000ffe8:	4699      	mov	r9, r3
1000ffea:	e7da      	b.n	1000ffa2 <__aeabi_fmul+0x2e>
1000ffec:	4642      	mov	r2, r8
1000ffee:	2802      	cmp	r0, #2
1000fff0:	d02d      	beq.n	1001004e <__aeabi_fmul+0xda>
1000fff2:	2803      	cmp	r0, #3
1000fff4:	d100      	bne.n	1000fff8 <__aeabi_fmul+0x84>
1000fff6:	e0c3      	b.n	10010180 <__aeabi_fmul+0x20c>
1000fff8:	2801      	cmp	r0, #1
1000fffa:	d000      	beq.n	1000fffe <__aeabi_fmul+0x8a>
1000fffc:	e0a2      	b.n	10010144 <__aeabi_fmul+0x1d0>
1000fffe:	2500      	movs	r5, #0
10010000:	2600      	movs	r6, #0
10010002:	4002      	ands	r2, r0
10010004:	b2d4      	uxtb	r4, r2
10010006:	0276      	lsls	r6, r6, #9
10010008:	05ed      	lsls	r5, r5, #23
1001000a:	0a76      	lsrs	r6, r6, #9
1001000c:	432e      	orrs	r6, r5
1001000e:	07e4      	lsls	r4, r4, #31
10010010:	4326      	orrs	r6, r4
10010012:	0030      	movs	r0, r6
10010014:	bc1c      	pop	{r2, r3, r4}
10010016:	4690      	mov	r8, r2
10010018:	4699      	mov	r9, r3
1001001a:	46a2      	mov	sl, r4
1001001c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001001e:	2e00      	cmp	r6, #0
10010020:	d11a      	bne.n	10010058 <__aeabi_fmul+0xe4>
10010022:	2304      	movs	r3, #4
10010024:	469a      	mov	sl, r3
10010026:	3b03      	subs	r3, #3
10010028:	4699      	mov	r9, r3
1001002a:	e7ba      	b.n	1000ffa2 <__aeabi_fmul+0x2e>
1001002c:	002a      	movs	r2, r5
1001002e:	1e51      	subs	r1, r2, #1
10010030:	418a      	sbcs	r2, r1
10010032:	1c90      	adds	r0, r2, #2
10010034:	e7c6      	b.n	1000ffc4 <__aeabi_fmul+0x50>
10010036:	2001      	movs	r0, #1
10010038:	2d00      	cmp	r5, #0
1001003a:	d0c3      	beq.n	1000ffc4 <__aeabi_fmul+0x50>
1001003c:	0028      	movs	r0, r5
1001003e:	f001 f947 	bl	100112d0 <__clzsi2>
10010042:	1f43      	subs	r3, r0, #5
10010044:	3076      	adds	r0, #118	; 0x76
10010046:	409d      	lsls	r5, r3
10010048:	4243      	negs	r3, r0
1001004a:	2000      	movs	r0, #0
1001004c:	e7ba      	b.n	1000ffc4 <__aeabi_fmul+0x50>
1001004e:	2401      	movs	r4, #1
10010050:	25ff      	movs	r5, #255	; 0xff
10010052:	4014      	ands	r4, r2
10010054:	2600      	movs	r6, #0
10010056:	e7d6      	b.n	10010006 <__aeabi_fmul+0x92>
10010058:	0030      	movs	r0, r6
1001005a:	f001 f939 	bl	100112d0 <__clzsi2>
1001005e:	1f43      	subs	r3, r0, #5
10010060:	409e      	lsls	r6, r3
10010062:	2300      	movs	r3, #0
10010064:	3076      	adds	r0, #118	; 0x76
10010066:	4247      	negs	r7, r0
10010068:	469a      	mov	sl, r3
1001006a:	4699      	mov	r9, r3
1001006c:	e799      	b.n	1000ffa2 <__aeabi_fmul+0x2e>
1001006e:	230c      	movs	r3, #12
10010070:	469a      	mov	sl, r3
10010072:	3b09      	subs	r3, #9
10010074:	4699      	mov	r9, r3
10010076:	e794      	b.n	1000ffa2 <__aeabi_fmul+0x2e>
10010078:	2680      	movs	r6, #128	; 0x80
1001007a:	2400      	movs	r4, #0
1001007c:	03f6      	lsls	r6, r6, #15
1001007e:	25ff      	movs	r5, #255	; 0xff
10010080:	e7c1      	b.n	10010006 <__aeabi_fmul+0x92>
10010082:	0035      	movs	r5, r6
10010084:	4648      	mov	r0, r9
10010086:	e7b2      	b.n	1000ffee <__aeabi_fmul+0x7a>
10010088:	0035      	movs	r5, r6
1001008a:	0022      	movs	r2, r4
1001008c:	4648      	mov	r0, r9
1001008e:	e7ae      	b.n	1000ffee <__aeabi_fmul+0x7a>
10010090:	0429      	lsls	r1, r5, #16
10010092:	0c09      	lsrs	r1, r1, #16
10010094:	0008      	movs	r0, r1
10010096:	0c37      	lsrs	r7, r6, #16
10010098:	0436      	lsls	r6, r6, #16
1001009a:	0c36      	lsrs	r6, r6, #16
1001009c:	0c2c      	lsrs	r4, r5, #16
1001009e:	4379      	muls	r1, r7
100100a0:	4370      	muls	r0, r6
100100a2:	4367      	muls	r7, r4
100100a4:	4374      	muls	r4, r6
100100a6:	0c06      	lsrs	r6, r0, #16
100100a8:	1864      	adds	r4, r4, r1
100100aa:	1936      	adds	r6, r6, r4
100100ac:	42b1      	cmp	r1, r6
100100ae:	d903      	bls.n	100100b8 <__aeabi_fmul+0x144>
100100b0:	2180      	movs	r1, #128	; 0x80
100100b2:	0249      	lsls	r1, r1, #9
100100b4:	4688      	mov	r8, r1
100100b6:	4447      	add	r7, r8
100100b8:	0400      	lsls	r0, r0, #16
100100ba:	0c00      	lsrs	r0, r0, #16
100100bc:	0431      	lsls	r1, r6, #16
100100be:	1809      	adds	r1, r1, r0
100100c0:	018d      	lsls	r5, r1, #6
100100c2:	1e68      	subs	r0, r5, #1
100100c4:	4185      	sbcs	r5, r0
100100c6:	0e89      	lsrs	r1, r1, #26
100100c8:	4329      	orrs	r1, r5
100100ca:	0c35      	lsrs	r5, r6, #16
100100cc:	19ed      	adds	r5, r5, r7
100100ce:	01ad      	lsls	r5, r5, #6
100100d0:	430d      	orrs	r5, r1
100100d2:	0129      	lsls	r1, r5, #4
100100d4:	d504      	bpl.n	100100e0 <__aeabi_fmul+0x16c>
100100d6:	2301      	movs	r3, #1
100100d8:	0869      	lsrs	r1, r5, #1
100100da:	401d      	ands	r5, r3
100100dc:	4663      	mov	r3, ip
100100de:	430d      	orrs	r5, r1
100100e0:	0019      	movs	r1, r3
100100e2:	317f      	adds	r1, #127	; 0x7f
100100e4:	2900      	cmp	r1, #0
100100e6:	dd25      	ble.n	10010134 <__aeabi_fmul+0x1c0>
100100e8:	0768      	lsls	r0, r5, #29
100100ea:	d004      	beq.n	100100f6 <__aeabi_fmul+0x182>
100100ec:	200f      	movs	r0, #15
100100ee:	4028      	ands	r0, r5
100100f0:	2804      	cmp	r0, #4
100100f2:	d000      	beq.n	100100f6 <__aeabi_fmul+0x182>
100100f4:	3504      	adds	r5, #4
100100f6:	0128      	lsls	r0, r5, #4
100100f8:	d503      	bpl.n	10010102 <__aeabi_fmul+0x18e>
100100fa:	4927      	ldr	r1, [pc, #156]	; (10010198 <__aeabi_fmul+0x224>)
100100fc:	3380      	adds	r3, #128	; 0x80
100100fe:	400d      	ands	r5, r1
10010100:	0019      	movs	r1, r3
10010102:	29fe      	cmp	r1, #254	; 0xfe
10010104:	dca3      	bgt.n	1001004e <__aeabi_fmul+0xda>
10010106:	2401      	movs	r4, #1
10010108:	01ad      	lsls	r5, r5, #6
1001010a:	0a6e      	lsrs	r6, r5, #9
1001010c:	4014      	ands	r4, r2
1001010e:	b2cd      	uxtb	r5, r1
10010110:	e779      	b.n	10010006 <__aeabi_fmul+0x92>
10010112:	2080      	movs	r0, #128	; 0x80
10010114:	03c0      	lsls	r0, r0, #15
10010116:	4206      	tst	r6, r0
10010118:	d007      	beq.n	1001012a <__aeabi_fmul+0x1b6>
1001011a:	4205      	tst	r5, r0
1001011c:	d105      	bne.n	1001012a <__aeabi_fmul+0x1b6>
1001011e:	4328      	orrs	r0, r5
10010120:	0246      	lsls	r6, r0, #9
10010122:	0a76      	lsrs	r6, r6, #9
10010124:	4644      	mov	r4, r8
10010126:	25ff      	movs	r5, #255	; 0xff
10010128:	e76d      	b.n	10010006 <__aeabi_fmul+0x92>
1001012a:	4306      	orrs	r6, r0
1001012c:	0276      	lsls	r6, r6, #9
1001012e:	0a76      	lsrs	r6, r6, #9
10010130:	25ff      	movs	r5, #255	; 0xff
10010132:	e768      	b.n	10010006 <__aeabi_fmul+0x92>
10010134:	2401      	movs	r4, #1
10010136:	1a61      	subs	r1, r4, r1
10010138:	291b      	cmp	r1, #27
1001013a:	dd05      	ble.n	10010148 <__aeabi_fmul+0x1d4>
1001013c:	4014      	ands	r4, r2
1001013e:	2500      	movs	r5, #0
10010140:	2600      	movs	r6, #0
10010142:	e760      	b.n	10010006 <__aeabi_fmul+0x92>
10010144:	4663      	mov	r3, ip
10010146:	e7cb      	b.n	100100e0 <__aeabi_fmul+0x16c>
10010148:	002e      	movs	r6, r5
1001014a:	2320      	movs	r3, #32
1001014c:	40ce      	lsrs	r6, r1
1001014e:	1a59      	subs	r1, r3, r1
10010150:	408d      	lsls	r5, r1
10010152:	1e6b      	subs	r3, r5, #1
10010154:	419d      	sbcs	r5, r3
10010156:	432e      	orrs	r6, r5
10010158:	0773      	lsls	r3, r6, #29
1001015a:	d004      	beq.n	10010166 <__aeabi_fmul+0x1f2>
1001015c:	230f      	movs	r3, #15
1001015e:	4033      	ands	r3, r6
10010160:	2b04      	cmp	r3, #4
10010162:	d000      	beq.n	10010166 <__aeabi_fmul+0x1f2>
10010164:	3604      	adds	r6, #4
10010166:	0173      	lsls	r3, r6, #5
10010168:	d504      	bpl.n	10010174 <__aeabi_fmul+0x200>
1001016a:	2401      	movs	r4, #1
1001016c:	2501      	movs	r5, #1
1001016e:	4014      	ands	r4, r2
10010170:	2600      	movs	r6, #0
10010172:	e748      	b.n	10010006 <__aeabi_fmul+0x92>
10010174:	2401      	movs	r4, #1
10010176:	01b6      	lsls	r6, r6, #6
10010178:	0a76      	lsrs	r6, r6, #9
1001017a:	4014      	ands	r4, r2
1001017c:	2500      	movs	r5, #0
1001017e:	e742      	b.n	10010006 <__aeabi_fmul+0x92>
10010180:	2680      	movs	r6, #128	; 0x80
10010182:	2401      	movs	r4, #1
10010184:	03f6      	lsls	r6, r6, #15
10010186:	432e      	orrs	r6, r5
10010188:	0276      	lsls	r6, r6, #9
1001018a:	0a76      	lsrs	r6, r6, #9
1001018c:	4014      	ands	r4, r2
1001018e:	25ff      	movs	r5, #255	; 0xff
10010190:	e739      	b.n	10010006 <__aeabi_fmul+0x92>
10010192:	46c0      	nop			; (mov r8, r8)
10010194:	10013788 	.word	0x10013788
10010198:	f7ffffff 	.word	0xf7ffffff

1001019c <__aeabi_fsub>:
1001019c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001019e:	024a      	lsls	r2, r1, #9
100101a0:	004e      	lsls	r6, r1, #1
100101a2:	0243      	lsls	r3, r0, #9
100101a4:	0044      	lsls	r4, r0, #1
100101a6:	0e24      	lsrs	r4, r4, #24
100101a8:	0fc5      	lsrs	r5, r0, #31
100101aa:	099b      	lsrs	r3, r3, #6
100101ac:	0e36      	lsrs	r6, r6, #24
100101ae:	0fc9      	lsrs	r1, r1, #31
100101b0:	0992      	lsrs	r2, r2, #6
100101b2:	2eff      	cmp	r6, #255	; 0xff
100101b4:	d100      	bne.n	100101b8 <__aeabi_fsub+0x1c>
100101b6:	e083      	b.n	100102c0 <__aeabi_fsub+0x124>
100101b8:	2001      	movs	r0, #1
100101ba:	4041      	eors	r1, r0
100101bc:	1ba0      	subs	r0, r4, r6
100101be:	42a9      	cmp	r1, r5
100101c0:	d05c      	beq.n	1001027c <__aeabi_fsub+0xe0>
100101c2:	2800      	cmp	r0, #0
100101c4:	dc00      	bgt.n	100101c8 <__aeabi_fsub+0x2c>
100101c6:	e095      	b.n	100102f4 <__aeabi_fsub+0x158>
100101c8:	2e00      	cmp	r6, #0
100101ca:	d11c      	bne.n	10010206 <__aeabi_fsub+0x6a>
100101cc:	2a00      	cmp	r2, #0
100101ce:	d000      	beq.n	100101d2 <__aeabi_fsub+0x36>
100101d0:	e081      	b.n	100102d6 <__aeabi_fsub+0x13a>
100101d2:	075a      	lsls	r2, r3, #29
100101d4:	d004      	beq.n	100101e0 <__aeabi_fsub+0x44>
100101d6:	220f      	movs	r2, #15
100101d8:	401a      	ands	r2, r3
100101da:	2a04      	cmp	r2, #4
100101dc:	d000      	beq.n	100101e0 <__aeabi_fsub+0x44>
100101de:	3304      	adds	r3, #4
100101e0:	015a      	lsls	r2, r3, #5
100101e2:	d53b      	bpl.n	1001025c <__aeabi_fsub+0xc0>
100101e4:	3401      	adds	r4, #1
100101e6:	2cff      	cmp	r4, #255	; 0xff
100101e8:	d100      	bne.n	100101ec <__aeabi_fsub+0x50>
100101ea:	e091      	b.n	10010310 <__aeabi_fsub+0x174>
100101ec:	2001      	movs	r0, #1
100101ee:	019b      	lsls	r3, r3, #6
100101f0:	0a5b      	lsrs	r3, r3, #9
100101f2:	b2e4      	uxtb	r4, r4
100101f4:	4005      	ands	r5, r0
100101f6:	025b      	lsls	r3, r3, #9
100101f8:	05e4      	lsls	r4, r4, #23
100101fa:	0a5b      	lsrs	r3, r3, #9
100101fc:	07ed      	lsls	r5, r5, #31
100101fe:	4323      	orrs	r3, r4
10010200:	432b      	orrs	r3, r5
10010202:	0018      	movs	r0, r3
10010204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010206:	2cff      	cmp	r4, #255	; 0xff
10010208:	d0e3      	beq.n	100101d2 <__aeabi_fsub+0x36>
1001020a:	2180      	movs	r1, #128	; 0x80
1001020c:	04c9      	lsls	r1, r1, #19
1001020e:	430a      	orrs	r2, r1
10010210:	281b      	cmp	r0, #27
10010212:	dd00      	ble.n	10010216 <__aeabi_fsub+0x7a>
10010214:	e090      	b.n	10010338 <__aeabi_fsub+0x19c>
10010216:	0016      	movs	r6, r2
10010218:	2120      	movs	r1, #32
1001021a:	40c6      	lsrs	r6, r0
1001021c:	1a08      	subs	r0, r1, r0
1001021e:	4082      	lsls	r2, r0
10010220:	1e51      	subs	r1, r2, #1
10010222:	418a      	sbcs	r2, r1
10010224:	4332      	orrs	r2, r6
10010226:	1a9b      	subs	r3, r3, r2
10010228:	015a      	lsls	r2, r3, #5
1001022a:	d515      	bpl.n	10010258 <__aeabi_fsub+0xbc>
1001022c:	019b      	lsls	r3, r3, #6
1001022e:	099e      	lsrs	r6, r3, #6
10010230:	0030      	movs	r0, r6
10010232:	f001 f84d 	bl	100112d0 <__clzsi2>
10010236:	3805      	subs	r0, #5
10010238:	4086      	lsls	r6, r0
1001023a:	4284      	cmp	r4, r0
1001023c:	dc6c      	bgt.n	10010318 <__aeabi_fsub+0x17c>
1001023e:	1b04      	subs	r4, r0, r4
10010240:	0033      	movs	r3, r6
10010242:	2020      	movs	r0, #32
10010244:	3401      	adds	r4, #1
10010246:	40e3      	lsrs	r3, r4
10010248:	1b04      	subs	r4, r0, r4
1001024a:	40a6      	lsls	r6, r4
1001024c:	1e72      	subs	r2, r6, #1
1001024e:	4196      	sbcs	r6, r2
10010250:	2400      	movs	r4, #0
10010252:	4333      	orrs	r3, r6
10010254:	e7bd      	b.n	100101d2 <__aeabi_fsub+0x36>
10010256:	000d      	movs	r5, r1
10010258:	075a      	lsls	r2, r3, #29
1001025a:	d1bc      	bne.n	100101d6 <__aeabi_fsub+0x3a>
1001025c:	08df      	lsrs	r7, r3, #3
1001025e:	2301      	movs	r3, #1
10010260:	401d      	ands	r5, r3
10010262:	2cff      	cmp	r4, #255	; 0xff
10010264:	d133      	bne.n	100102ce <__aeabi_fsub+0x132>
10010266:	2f00      	cmp	r7, #0
10010268:	d100      	bne.n	1001026c <__aeabi_fsub+0xd0>
1001026a:	e090      	b.n	1001038e <__aeabi_fsub+0x1f2>
1001026c:	2280      	movs	r2, #128	; 0x80
1001026e:	03d2      	lsls	r2, r2, #15
10010270:	0013      	movs	r3, r2
10010272:	433b      	orrs	r3, r7
10010274:	025b      	lsls	r3, r3, #9
10010276:	0a5b      	lsrs	r3, r3, #9
10010278:	24ff      	movs	r4, #255	; 0xff
1001027a:	e7bc      	b.n	100101f6 <__aeabi_fsub+0x5a>
1001027c:	2800      	cmp	r0, #0
1001027e:	dd4f      	ble.n	10010320 <__aeabi_fsub+0x184>
10010280:	2e00      	cmp	r6, #0
10010282:	d02e      	beq.n	100102e2 <__aeabi_fsub+0x146>
10010284:	2cff      	cmp	r4, #255	; 0xff
10010286:	d0a4      	beq.n	100101d2 <__aeabi_fsub+0x36>
10010288:	2580      	movs	r5, #128	; 0x80
1001028a:	04ed      	lsls	r5, r5, #19
1001028c:	432a      	orrs	r2, r5
1001028e:	281b      	cmp	r0, #27
10010290:	dd00      	ble.n	10010294 <__aeabi_fsub+0xf8>
10010292:	e097      	b.n	100103c4 <__aeabi_fsub+0x228>
10010294:	0016      	movs	r6, r2
10010296:	2520      	movs	r5, #32
10010298:	40c6      	lsrs	r6, r0
1001029a:	1a28      	subs	r0, r5, r0
1001029c:	4082      	lsls	r2, r0
1001029e:	1e50      	subs	r0, r2, #1
100102a0:	4182      	sbcs	r2, r0
100102a2:	4332      	orrs	r2, r6
100102a4:	189b      	adds	r3, r3, r2
100102a6:	015a      	lsls	r2, r3, #5
100102a8:	d5d5      	bpl.n	10010256 <__aeabi_fsub+0xba>
100102aa:	3401      	adds	r4, #1
100102ac:	2cff      	cmp	r4, #255	; 0xff
100102ae:	d06d      	beq.n	1001038c <__aeabi_fsub+0x1f0>
100102b0:	2201      	movs	r2, #1
100102b2:	487b      	ldr	r0, [pc, #492]	; (100104a0 <__aeabi_fsub+0x304>)
100102b4:	401a      	ands	r2, r3
100102b6:	085b      	lsrs	r3, r3, #1
100102b8:	4003      	ands	r3, r0
100102ba:	4313      	orrs	r3, r2
100102bc:	000d      	movs	r5, r1
100102be:	e788      	b.n	100101d2 <__aeabi_fsub+0x36>
100102c0:	2a00      	cmp	r2, #0
100102c2:	d000      	beq.n	100102c6 <__aeabi_fsub+0x12a>
100102c4:	e77a      	b.n	100101bc <__aeabi_fsub+0x20>
100102c6:	e777      	b.n	100101b8 <__aeabi_fsub+0x1c>
100102c8:	1e03      	subs	r3, r0, #0
100102ca:	d1c5      	bne.n	10010258 <__aeabi_fsub+0xbc>
100102cc:	2500      	movs	r5, #0
100102ce:	027b      	lsls	r3, r7, #9
100102d0:	0a5b      	lsrs	r3, r3, #9
100102d2:	b2e4      	uxtb	r4, r4
100102d4:	e78f      	b.n	100101f6 <__aeabi_fsub+0x5a>
100102d6:	3801      	subs	r0, #1
100102d8:	2800      	cmp	r0, #0
100102da:	d0a4      	beq.n	10010226 <__aeabi_fsub+0x8a>
100102dc:	2cff      	cmp	r4, #255	; 0xff
100102de:	d197      	bne.n	10010210 <__aeabi_fsub+0x74>
100102e0:	e777      	b.n	100101d2 <__aeabi_fsub+0x36>
100102e2:	2a00      	cmp	r2, #0
100102e4:	d100      	bne.n	100102e8 <__aeabi_fsub+0x14c>
100102e6:	e774      	b.n	100101d2 <__aeabi_fsub+0x36>
100102e8:	3801      	subs	r0, #1
100102ea:	2800      	cmp	r0, #0
100102ec:	d0da      	beq.n	100102a4 <__aeabi_fsub+0x108>
100102ee:	2cff      	cmp	r4, #255	; 0xff
100102f0:	d1cd      	bne.n	1001028e <__aeabi_fsub+0xf2>
100102f2:	e76e      	b.n	100101d2 <__aeabi_fsub+0x36>
100102f4:	2800      	cmp	r0, #0
100102f6:	d121      	bne.n	1001033c <__aeabi_fsub+0x1a0>
100102f8:	1c60      	adds	r0, r4, #1
100102fa:	b2c0      	uxtb	r0, r0
100102fc:	2801      	cmp	r0, #1
100102fe:	dd58      	ble.n	100103b2 <__aeabi_fsub+0x216>
10010300:	2780      	movs	r7, #128	; 0x80
10010302:	1a9e      	subs	r6, r3, r2
10010304:	04ff      	lsls	r7, r7, #19
10010306:	4037      	ands	r7, r6
10010308:	d02f      	beq.n	1001036a <__aeabi_fsub+0x1ce>
1001030a:	1ad6      	subs	r6, r2, r3
1001030c:	000d      	movs	r5, r1
1001030e:	e78f      	b.n	10010230 <__aeabi_fsub+0x94>
10010310:	2301      	movs	r3, #1
10010312:	401d      	ands	r5, r3
10010314:	2300      	movs	r3, #0
10010316:	e76e      	b.n	100101f6 <__aeabi_fsub+0x5a>
10010318:	4b62      	ldr	r3, [pc, #392]	; (100104a4 <__aeabi_fsub+0x308>)
1001031a:	1a24      	subs	r4, r4, r0
1001031c:	4033      	ands	r3, r6
1001031e:	e758      	b.n	100101d2 <__aeabi_fsub+0x36>
10010320:	2800      	cmp	r0, #0
10010322:	d151      	bne.n	100103c8 <__aeabi_fsub+0x22c>
10010324:	1c60      	adds	r0, r4, #1
10010326:	b2c6      	uxtb	r6, r0
10010328:	2e01      	cmp	r6, #1
1001032a:	dd33      	ble.n	10010394 <__aeabi_fsub+0x1f8>
1001032c:	28ff      	cmp	r0, #255	; 0xff
1001032e:	d02d      	beq.n	1001038c <__aeabi_fsub+0x1f0>
10010330:	189b      	adds	r3, r3, r2
10010332:	085b      	lsrs	r3, r3, #1
10010334:	0004      	movs	r4, r0
10010336:	e74c      	b.n	100101d2 <__aeabi_fsub+0x36>
10010338:	2201      	movs	r2, #1
1001033a:	e774      	b.n	10010226 <__aeabi_fsub+0x8a>
1001033c:	2c00      	cmp	r4, #0
1001033e:	d01a      	beq.n	10010376 <__aeabi_fsub+0x1da>
10010340:	2eff      	cmp	r6, #255	; 0xff
10010342:	d01f      	beq.n	10010384 <__aeabi_fsub+0x1e8>
10010344:	2480      	movs	r4, #128	; 0x80
10010346:	04e4      	lsls	r4, r4, #19
10010348:	4240      	negs	r0, r0
1001034a:	4323      	orrs	r3, r4
1001034c:	281b      	cmp	r0, #27
1001034e:	dd00      	ble.n	10010352 <__aeabi_fsub+0x1b6>
10010350:	e096      	b.n	10010480 <__aeabi_fsub+0x2e4>
10010352:	001d      	movs	r5, r3
10010354:	2420      	movs	r4, #32
10010356:	40c5      	lsrs	r5, r0
10010358:	1a20      	subs	r0, r4, r0
1001035a:	4083      	lsls	r3, r0
1001035c:	1e58      	subs	r0, r3, #1
1001035e:	4183      	sbcs	r3, r0
10010360:	432b      	orrs	r3, r5
10010362:	1ad3      	subs	r3, r2, r3
10010364:	0034      	movs	r4, r6
10010366:	000d      	movs	r5, r1
10010368:	e75e      	b.n	10010228 <__aeabi_fsub+0x8c>
1001036a:	2e00      	cmp	r6, #0
1001036c:	d000      	beq.n	10010370 <__aeabi_fsub+0x1d4>
1001036e:	e75f      	b.n	10010230 <__aeabi_fsub+0x94>
10010370:	2500      	movs	r5, #0
10010372:	2400      	movs	r4, #0
10010374:	e7ab      	b.n	100102ce <__aeabi_fsub+0x132>
10010376:	2b00      	cmp	r3, #0
10010378:	d044      	beq.n	10010404 <__aeabi_fsub+0x268>
1001037a:	43c0      	mvns	r0, r0
1001037c:	2800      	cmp	r0, #0
1001037e:	d0f0      	beq.n	10010362 <__aeabi_fsub+0x1c6>
10010380:	2eff      	cmp	r6, #255	; 0xff
10010382:	d1e3      	bne.n	1001034c <__aeabi_fsub+0x1b0>
10010384:	0013      	movs	r3, r2
10010386:	24ff      	movs	r4, #255	; 0xff
10010388:	000d      	movs	r5, r1
1001038a:	e722      	b.n	100101d2 <__aeabi_fsub+0x36>
1001038c:	000d      	movs	r5, r1
1001038e:	24ff      	movs	r4, #255	; 0xff
10010390:	2300      	movs	r3, #0
10010392:	e730      	b.n	100101f6 <__aeabi_fsub+0x5a>
10010394:	2c00      	cmp	r4, #0
10010396:	d15d      	bne.n	10010454 <__aeabi_fsub+0x2b8>
10010398:	2b00      	cmp	r3, #0
1001039a:	d07d      	beq.n	10010498 <__aeabi_fsub+0x2fc>
1001039c:	2a00      	cmp	r2, #0
1001039e:	d100      	bne.n	100103a2 <__aeabi_fsub+0x206>
100103a0:	e717      	b.n	100101d2 <__aeabi_fsub+0x36>
100103a2:	189b      	adds	r3, r3, r2
100103a4:	015a      	lsls	r2, r3, #5
100103a6:	d400      	bmi.n	100103aa <__aeabi_fsub+0x20e>
100103a8:	e756      	b.n	10010258 <__aeabi_fsub+0xbc>
100103aa:	4a3e      	ldr	r2, [pc, #248]	; (100104a4 <__aeabi_fsub+0x308>)
100103ac:	0004      	movs	r4, r0
100103ae:	4013      	ands	r3, r2
100103b0:	e70f      	b.n	100101d2 <__aeabi_fsub+0x36>
100103b2:	2c00      	cmp	r4, #0
100103b4:	d11e      	bne.n	100103f4 <__aeabi_fsub+0x258>
100103b6:	2b00      	cmp	r3, #0
100103b8:	d12f      	bne.n	1001041a <__aeabi_fsub+0x27e>
100103ba:	2a00      	cmp	r2, #0
100103bc:	d065      	beq.n	1001048a <__aeabi_fsub+0x2ee>
100103be:	0013      	movs	r3, r2
100103c0:	000d      	movs	r5, r1
100103c2:	e706      	b.n	100101d2 <__aeabi_fsub+0x36>
100103c4:	2201      	movs	r2, #1
100103c6:	e76d      	b.n	100102a4 <__aeabi_fsub+0x108>
100103c8:	2c00      	cmp	r4, #0
100103ca:	d11f      	bne.n	1001040c <__aeabi_fsub+0x270>
100103cc:	2b00      	cmp	r3, #0
100103ce:	d059      	beq.n	10010484 <__aeabi_fsub+0x2e8>
100103d0:	43c0      	mvns	r0, r0
100103d2:	2800      	cmp	r0, #0
100103d4:	d00b      	beq.n	100103ee <__aeabi_fsub+0x252>
100103d6:	2eff      	cmp	r6, #255	; 0xff
100103d8:	d04f      	beq.n	1001047a <__aeabi_fsub+0x2de>
100103da:	281b      	cmp	r0, #27
100103dc:	dc5e      	bgt.n	1001049c <__aeabi_fsub+0x300>
100103de:	001d      	movs	r5, r3
100103e0:	2420      	movs	r4, #32
100103e2:	40c5      	lsrs	r5, r0
100103e4:	1a20      	subs	r0, r4, r0
100103e6:	4083      	lsls	r3, r0
100103e8:	1e58      	subs	r0, r3, #1
100103ea:	4183      	sbcs	r3, r0
100103ec:	432b      	orrs	r3, r5
100103ee:	189b      	adds	r3, r3, r2
100103f0:	0034      	movs	r4, r6
100103f2:	e758      	b.n	100102a6 <__aeabi_fsub+0x10a>
100103f4:	2b00      	cmp	r3, #0
100103f6:	d11c      	bne.n	10010432 <__aeabi_fsub+0x296>
100103f8:	2a00      	cmp	r2, #0
100103fa:	d049      	beq.n	10010490 <__aeabi_fsub+0x2f4>
100103fc:	0013      	movs	r3, r2
100103fe:	000d      	movs	r5, r1
10010400:	24ff      	movs	r4, #255	; 0xff
10010402:	e6e6      	b.n	100101d2 <__aeabi_fsub+0x36>
10010404:	0013      	movs	r3, r2
10010406:	0034      	movs	r4, r6
10010408:	000d      	movs	r5, r1
1001040a:	e6e2      	b.n	100101d2 <__aeabi_fsub+0x36>
1001040c:	2eff      	cmp	r6, #255	; 0xff
1001040e:	d034      	beq.n	1001047a <__aeabi_fsub+0x2de>
10010410:	2480      	movs	r4, #128	; 0x80
10010412:	04e4      	lsls	r4, r4, #19
10010414:	4240      	negs	r0, r0
10010416:	4323      	orrs	r3, r4
10010418:	e7df      	b.n	100103da <__aeabi_fsub+0x23e>
1001041a:	2a00      	cmp	r2, #0
1001041c:	d100      	bne.n	10010420 <__aeabi_fsub+0x284>
1001041e:	e6d8      	b.n	100101d2 <__aeabi_fsub+0x36>
10010420:	2780      	movs	r7, #128	; 0x80
10010422:	1a98      	subs	r0, r3, r2
10010424:	04ff      	lsls	r7, r7, #19
10010426:	4007      	ands	r7, r0
10010428:	d100      	bne.n	1001042c <__aeabi_fsub+0x290>
1001042a:	e74d      	b.n	100102c8 <__aeabi_fsub+0x12c>
1001042c:	1ad3      	subs	r3, r2, r3
1001042e:	000d      	movs	r5, r1
10010430:	e6cf      	b.n	100101d2 <__aeabi_fsub+0x36>
10010432:	24ff      	movs	r4, #255	; 0xff
10010434:	2a00      	cmp	r2, #0
10010436:	d100      	bne.n	1001043a <__aeabi_fsub+0x29e>
10010438:	e6cb      	b.n	100101d2 <__aeabi_fsub+0x36>
1001043a:	2080      	movs	r0, #128	; 0x80
1001043c:	08db      	lsrs	r3, r3, #3
1001043e:	03c0      	lsls	r0, r0, #15
10010440:	4203      	tst	r3, r0
10010442:	d004      	beq.n	1001044e <__aeabi_fsub+0x2b2>
10010444:	08d2      	lsrs	r2, r2, #3
10010446:	4202      	tst	r2, r0
10010448:	d101      	bne.n	1001044e <__aeabi_fsub+0x2b2>
1001044a:	0013      	movs	r3, r2
1001044c:	000d      	movs	r5, r1
1001044e:	00db      	lsls	r3, r3, #3
10010450:	24ff      	movs	r4, #255	; 0xff
10010452:	e6be      	b.n	100101d2 <__aeabi_fsub+0x36>
10010454:	2b00      	cmp	r3, #0
10010456:	d010      	beq.n	1001047a <__aeabi_fsub+0x2de>
10010458:	24ff      	movs	r4, #255	; 0xff
1001045a:	2a00      	cmp	r2, #0
1001045c:	d100      	bne.n	10010460 <__aeabi_fsub+0x2c4>
1001045e:	e6b8      	b.n	100101d2 <__aeabi_fsub+0x36>
10010460:	2080      	movs	r0, #128	; 0x80
10010462:	08db      	lsrs	r3, r3, #3
10010464:	03c0      	lsls	r0, r0, #15
10010466:	4203      	tst	r3, r0
10010468:	d003      	beq.n	10010472 <__aeabi_fsub+0x2d6>
1001046a:	08d2      	lsrs	r2, r2, #3
1001046c:	4202      	tst	r2, r0
1001046e:	d100      	bne.n	10010472 <__aeabi_fsub+0x2d6>
10010470:	0013      	movs	r3, r2
10010472:	00db      	lsls	r3, r3, #3
10010474:	000d      	movs	r5, r1
10010476:	24ff      	movs	r4, #255	; 0xff
10010478:	e6ab      	b.n	100101d2 <__aeabi_fsub+0x36>
1001047a:	0013      	movs	r3, r2
1001047c:	24ff      	movs	r4, #255	; 0xff
1001047e:	e6a8      	b.n	100101d2 <__aeabi_fsub+0x36>
10010480:	2301      	movs	r3, #1
10010482:	e76e      	b.n	10010362 <__aeabi_fsub+0x1c6>
10010484:	0013      	movs	r3, r2
10010486:	0034      	movs	r4, r6
10010488:	e6a3      	b.n	100101d2 <__aeabi_fsub+0x36>
1001048a:	2700      	movs	r7, #0
1001048c:	2500      	movs	r5, #0
1001048e:	e71e      	b.n	100102ce <__aeabi_fsub+0x132>
10010490:	2780      	movs	r7, #128	; 0x80
10010492:	2500      	movs	r5, #0
10010494:	03ff      	lsls	r7, r7, #15
10010496:	e6e9      	b.n	1001026c <__aeabi_fsub+0xd0>
10010498:	0013      	movs	r3, r2
1001049a:	e69a      	b.n	100101d2 <__aeabi_fsub+0x36>
1001049c:	2301      	movs	r3, #1
1001049e:	e7a6      	b.n	100103ee <__aeabi_fsub+0x252>
100104a0:	7dffffff 	.word	0x7dffffff
100104a4:	fbffffff 	.word	0xfbffffff

100104a8 <__aeabi_f2iz>:
100104a8:	0243      	lsls	r3, r0, #9
100104aa:	0a59      	lsrs	r1, r3, #9
100104ac:	0043      	lsls	r3, r0, #1
100104ae:	0fc2      	lsrs	r2, r0, #31
100104b0:	0e1b      	lsrs	r3, r3, #24
100104b2:	2000      	movs	r0, #0
100104b4:	2b7e      	cmp	r3, #126	; 0x7e
100104b6:	dd0e      	ble.n	100104d6 <__aeabi_f2iz+0x2e>
100104b8:	2b9d      	cmp	r3, #157	; 0x9d
100104ba:	dc0d      	bgt.n	100104d8 <__aeabi_f2iz+0x30>
100104bc:	2080      	movs	r0, #128	; 0x80
100104be:	0400      	lsls	r0, r0, #16
100104c0:	4301      	orrs	r1, r0
100104c2:	2b95      	cmp	r3, #149	; 0x95
100104c4:	dc0b      	bgt.n	100104de <__aeabi_f2iz+0x36>
100104c6:	2096      	movs	r0, #150	; 0x96
100104c8:	1ac3      	subs	r3, r0, r3
100104ca:	40d9      	lsrs	r1, r3
100104cc:	000b      	movs	r3, r1
100104ce:	4258      	negs	r0, r3
100104d0:	2a00      	cmp	r2, #0
100104d2:	d100      	bne.n	100104d6 <__aeabi_f2iz+0x2e>
100104d4:	0018      	movs	r0, r3
100104d6:	4770      	bx	lr
100104d8:	4b03      	ldr	r3, [pc, #12]	; (100104e8 <__aeabi_f2iz+0x40>)
100104da:	18d0      	adds	r0, r2, r3
100104dc:	e7fb      	b.n	100104d6 <__aeabi_f2iz+0x2e>
100104de:	3b96      	subs	r3, #150	; 0x96
100104e0:	4099      	lsls	r1, r3
100104e2:	000b      	movs	r3, r1
100104e4:	e7f3      	b.n	100104ce <__aeabi_f2iz+0x26>
100104e6:	46c0      	nop			; (mov r8, r8)
100104e8:	7fffffff 	.word	0x7fffffff

100104ec <__aeabi_ui2f>:
100104ec:	b570      	push	{r4, r5, r6, lr}
100104ee:	1e04      	subs	r4, r0, #0
100104f0:	d028      	beq.n	10010544 <__aeabi_ui2f+0x58>
100104f2:	f000 feed 	bl	100112d0 <__clzsi2>
100104f6:	239e      	movs	r3, #158	; 0x9e
100104f8:	1a1b      	subs	r3, r3, r0
100104fa:	2b96      	cmp	r3, #150	; 0x96
100104fc:	dc0a      	bgt.n	10010514 <__aeabi_ui2f+0x28>
100104fe:	2296      	movs	r2, #150	; 0x96
10010500:	1ad2      	subs	r2, r2, r3
10010502:	4094      	lsls	r4, r2
10010504:	0262      	lsls	r2, r4, #9
10010506:	0a52      	lsrs	r2, r2, #9
10010508:	b2d8      	uxtb	r0, r3
1001050a:	0252      	lsls	r2, r2, #9
1001050c:	0a52      	lsrs	r2, r2, #9
1001050e:	05c0      	lsls	r0, r0, #23
10010510:	4310      	orrs	r0, r2
10010512:	bd70      	pop	{r4, r5, r6, pc}
10010514:	2b99      	cmp	r3, #153	; 0x99
10010516:	dc18      	bgt.n	1001054a <__aeabi_ui2f+0x5e>
10010518:	2299      	movs	r2, #153	; 0x99
1001051a:	1ad2      	subs	r2, r2, r3
1001051c:	4094      	lsls	r4, r2
1001051e:	4a11      	ldr	r2, [pc, #68]	; (10010564 <__aeabi_ui2f+0x78>)
10010520:	4022      	ands	r2, r4
10010522:	0761      	lsls	r1, r4, #29
10010524:	d004      	beq.n	10010530 <__aeabi_ui2f+0x44>
10010526:	210f      	movs	r1, #15
10010528:	400c      	ands	r4, r1
1001052a:	2c04      	cmp	r4, #4
1001052c:	d000      	beq.n	10010530 <__aeabi_ui2f+0x44>
1001052e:	3204      	adds	r2, #4
10010530:	0151      	lsls	r1, r2, #5
10010532:	d503      	bpl.n	1001053c <__aeabi_ui2f+0x50>
10010534:	4b0b      	ldr	r3, [pc, #44]	; (10010564 <__aeabi_ui2f+0x78>)
10010536:	401a      	ands	r2, r3
10010538:	239f      	movs	r3, #159	; 0x9f
1001053a:	1a1b      	subs	r3, r3, r0
1001053c:	0192      	lsls	r2, r2, #6
1001053e:	0a52      	lsrs	r2, r2, #9
10010540:	b2d8      	uxtb	r0, r3
10010542:	e7e2      	b.n	1001050a <__aeabi_ui2f+0x1e>
10010544:	2000      	movs	r0, #0
10010546:	2200      	movs	r2, #0
10010548:	e7df      	b.n	1001050a <__aeabi_ui2f+0x1e>
1001054a:	2205      	movs	r2, #5
1001054c:	0025      	movs	r5, r4
1001054e:	1a12      	subs	r2, r2, r0
10010550:	21b9      	movs	r1, #185	; 0xb9
10010552:	40d5      	lsrs	r5, r2
10010554:	0022      	movs	r2, r4
10010556:	1ac9      	subs	r1, r1, r3
10010558:	408a      	lsls	r2, r1
1001055a:	1e54      	subs	r4, r2, #1
1001055c:	41a2      	sbcs	r2, r4
1001055e:	002c      	movs	r4, r5
10010560:	4314      	orrs	r4, r2
10010562:	e7dc      	b.n	1001051e <__aeabi_ui2f+0x32>
10010564:	fbffffff 	.word	0xfbffffff

10010568 <__aeabi_dmul>:
10010568:	b5f0      	push	{r4, r5, r6, r7, lr}
1001056a:	465f      	mov	r7, fp
1001056c:	4656      	mov	r6, sl
1001056e:	464d      	mov	r5, r9
10010570:	4644      	mov	r4, r8
10010572:	b4f0      	push	{r4, r5, r6, r7}
10010574:	030d      	lsls	r5, r1, #12
10010576:	4699      	mov	r9, r3
10010578:	004e      	lsls	r6, r1, #1
1001057a:	0b2b      	lsrs	r3, r5, #12
1001057c:	b087      	sub	sp, #28
1001057e:	0007      	movs	r7, r0
10010580:	4692      	mov	sl, r2
10010582:	4680      	mov	r8, r0
10010584:	469b      	mov	fp, r3
10010586:	0d76      	lsrs	r6, r6, #21
10010588:	0fcc      	lsrs	r4, r1, #31
1001058a:	2e00      	cmp	r6, #0
1001058c:	d069      	beq.n	10010662 <__aeabi_dmul+0xfa>
1001058e:	4b6d      	ldr	r3, [pc, #436]	; (10010744 <__aeabi_dmul+0x1dc>)
10010590:	429e      	cmp	r6, r3
10010592:	d035      	beq.n	10010600 <__aeabi_dmul+0x98>
10010594:	465b      	mov	r3, fp
10010596:	2280      	movs	r2, #128	; 0x80
10010598:	00dd      	lsls	r5, r3, #3
1001059a:	0412      	lsls	r2, r2, #16
1001059c:	0f43      	lsrs	r3, r0, #29
1001059e:	4313      	orrs	r3, r2
100105a0:	432b      	orrs	r3, r5
100105a2:	469b      	mov	fp, r3
100105a4:	00c3      	lsls	r3, r0, #3
100105a6:	4698      	mov	r8, r3
100105a8:	4b67      	ldr	r3, [pc, #412]	; (10010748 <__aeabi_dmul+0x1e0>)
100105aa:	2700      	movs	r7, #0
100105ac:	469c      	mov	ip, r3
100105ae:	2300      	movs	r3, #0
100105b0:	4466      	add	r6, ip
100105b2:	9301      	str	r3, [sp, #4]
100105b4:	464a      	mov	r2, r9
100105b6:	0315      	lsls	r5, r2, #12
100105b8:	0050      	lsls	r0, r2, #1
100105ba:	0fd2      	lsrs	r2, r2, #31
100105bc:	4653      	mov	r3, sl
100105be:	0b2d      	lsrs	r5, r5, #12
100105c0:	0d40      	lsrs	r0, r0, #21
100105c2:	4691      	mov	r9, r2
100105c4:	d100      	bne.n	100105c8 <__aeabi_dmul+0x60>
100105c6:	e076      	b.n	100106b6 <__aeabi_dmul+0x14e>
100105c8:	4a5e      	ldr	r2, [pc, #376]	; (10010744 <__aeabi_dmul+0x1dc>)
100105ca:	4290      	cmp	r0, r2
100105cc:	d06c      	beq.n	100106a8 <__aeabi_dmul+0x140>
100105ce:	2280      	movs	r2, #128	; 0x80
100105d0:	0f5b      	lsrs	r3, r3, #29
100105d2:	0412      	lsls	r2, r2, #16
100105d4:	4313      	orrs	r3, r2
100105d6:	4a5c      	ldr	r2, [pc, #368]	; (10010748 <__aeabi_dmul+0x1e0>)
100105d8:	00ed      	lsls	r5, r5, #3
100105da:	4694      	mov	ip, r2
100105dc:	431d      	orrs	r5, r3
100105de:	4653      	mov	r3, sl
100105e0:	2200      	movs	r2, #0
100105e2:	00db      	lsls	r3, r3, #3
100105e4:	4460      	add	r0, ip
100105e6:	4649      	mov	r1, r9
100105e8:	1836      	adds	r6, r6, r0
100105ea:	1c70      	adds	r0, r6, #1
100105ec:	4061      	eors	r1, r4
100105ee:	9002      	str	r0, [sp, #8]
100105f0:	4317      	orrs	r7, r2
100105f2:	2f0f      	cmp	r7, #15
100105f4:	d900      	bls.n	100105f8 <__aeabi_dmul+0x90>
100105f6:	e0af      	b.n	10010758 <__aeabi_dmul+0x1f0>
100105f8:	4854      	ldr	r0, [pc, #336]	; (1001074c <__aeabi_dmul+0x1e4>)
100105fa:	00bf      	lsls	r7, r7, #2
100105fc:	59c7      	ldr	r7, [r0, r7]
100105fe:	46bf      	mov	pc, r7
10010600:	465b      	mov	r3, fp
10010602:	431f      	orrs	r7, r3
10010604:	d000      	beq.n	10010608 <__aeabi_dmul+0xa0>
10010606:	e088      	b.n	1001071a <__aeabi_dmul+0x1b2>
10010608:	2300      	movs	r3, #0
1001060a:	469b      	mov	fp, r3
1001060c:	4698      	mov	r8, r3
1001060e:	3302      	adds	r3, #2
10010610:	2708      	movs	r7, #8
10010612:	9301      	str	r3, [sp, #4]
10010614:	e7ce      	b.n	100105b4 <__aeabi_dmul+0x4c>
10010616:	4649      	mov	r1, r9
10010618:	2a02      	cmp	r2, #2
1001061a:	d06a      	beq.n	100106f2 <__aeabi_dmul+0x18a>
1001061c:	2a03      	cmp	r2, #3
1001061e:	d100      	bne.n	10010622 <__aeabi_dmul+0xba>
10010620:	e209      	b.n	10010a36 <__aeabi_dmul+0x4ce>
10010622:	2a01      	cmp	r2, #1
10010624:	d000      	beq.n	10010628 <__aeabi_dmul+0xc0>
10010626:	e1bb      	b.n	100109a0 <__aeabi_dmul+0x438>
10010628:	4011      	ands	r1, r2
1001062a:	2200      	movs	r2, #0
1001062c:	2300      	movs	r3, #0
1001062e:	2500      	movs	r5, #0
10010630:	4690      	mov	r8, r2
10010632:	b2cc      	uxtb	r4, r1
10010634:	2100      	movs	r1, #0
10010636:	032d      	lsls	r5, r5, #12
10010638:	0d0a      	lsrs	r2, r1, #20
1001063a:	0512      	lsls	r2, r2, #20
1001063c:	0b2d      	lsrs	r5, r5, #12
1001063e:	4315      	orrs	r5, r2
10010640:	4a43      	ldr	r2, [pc, #268]	; (10010750 <__aeabi_dmul+0x1e8>)
10010642:	051b      	lsls	r3, r3, #20
10010644:	4015      	ands	r5, r2
10010646:	431d      	orrs	r5, r3
10010648:	006d      	lsls	r5, r5, #1
1001064a:	07e4      	lsls	r4, r4, #31
1001064c:	086d      	lsrs	r5, r5, #1
1001064e:	4325      	orrs	r5, r4
10010650:	4640      	mov	r0, r8
10010652:	0029      	movs	r1, r5
10010654:	b007      	add	sp, #28
10010656:	bc3c      	pop	{r2, r3, r4, r5}
10010658:	4690      	mov	r8, r2
1001065a:	4699      	mov	r9, r3
1001065c:	46a2      	mov	sl, r4
1001065e:	46ab      	mov	fp, r5
10010660:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010662:	4303      	orrs	r3, r0
10010664:	d052      	beq.n	1001070c <__aeabi_dmul+0x1a4>
10010666:	465b      	mov	r3, fp
10010668:	2b00      	cmp	r3, #0
1001066a:	d100      	bne.n	1001066e <__aeabi_dmul+0x106>
1001066c:	e18a      	b.n	10010984 <__aeabi_dmul+0x41c>
1001066e:	4658      	mov	r0, fp
10010670:	f000 fe2e 	bl	100112d0 <__clzsi2>
10010674:	0003      	movs	r3, r0
10010676:	3b0b      	subs	r3, #11
10010678:	2b1c      	cmp	r3, #28
1001067a:	dd00      	ble.n	1001067e <__aeabi_dmul+0x116>
1001067c:	e17b      	b.n	10010976 <__aeabi_dmul+0x40e>
1001067e:	221d      	movs	r2, #29
10010680:	1ad3      	subs	r3, r2, r3
10010682:	003a      	movs	r2, r7
10010684:	0001      	movs	r1, r0
10010686:	465d      	mov	r5, fp
10010688:	40da      	lsrs	r2, r3
1001068a:	3908      	subs	r1, #8
1001068c:	408d      	lsls	r5, r1
1001068e:	0013      	movs	r3, r2
10010690:	408f      	lsls	r7, r1
10010692:	432b      	orrs	r3, r5
10010694:	469b      	mov	fp, r3
10010696:	46b8      	mov	r8, r7
10010698:	4b2e      	ldr	r3, [pc, #184]	; (10010754 <__aeabi_dmul+0x1ec>)
1001069a:	2700      	movs	r7, #0
1001069c:	469c      	mov	ip, r3
1001069e:	2300      	movs	r3, #0
100106a0:	4460      	add	r0, ip
100106a2:	4246      	negs	r6, r0
100106a4:	9301      	str	r3, [sp, #4]
100106a6:	e785      	b.n	100105b4 <__aeabi_dmul+0x4c>
100106a8:	4652      	mov	r2, sl
100106aa:	432a      	orrs	r2, r5
100106ac:	d12c      	bne.n	10010708 <__aeabi_dmul+0x1a0>
100106ae:	2500      	movs	r5, #0
100106b0:	2300      	movs	r3, #0
100106b2:	2202      	movs	r2, #2
100106b4:	e797      	b.n	100105e6 <__aeabi_dmul+0x7e>
100106b6:	4652      	mov	r2, sl
100106b8:	432a      	orrs	r2, r5
100106ba:	d021      	beq.n	10010700 <__aeabi_dmul+0x198>
100106bc:	2d00      	cmp	r5, #0
100106be:	d100      	bne.n	100106c2 <__aeabi_dmul+0x15a>
100106c0:	e154      	b.n	1001096c <__aeabi_dmul+0x404>
100106c2:	0028      	movs	r0, r5
100106c4:	f000 fe04 	bl	100112d0 <__clzsi2>
100106c8:	0003      	movs	r3, r0
100106ca:	3b0b      	subs	r3, #11
100106cc:	2b1c      	cmp	r3, #28
100106ce:	dd00      	ble.n	100106d2 <__aeabi_dmul+0x16a>
100106d0:	e146      	b.n	10010960 <__aeabi_dmul+0x3f8>
100106d2:	211d      	movs	r1, #29
100106d4:	1acb      	subs	r3, r1, r3
100106d6:	4651      	mov	r1, sl
100106d8:	0002      	movs	r2, r0
100106da:	40d9      	lsrs	r1, r3
100106dc:	4653      	mov	r3, sl
100106de:	3a08      	subs	r2, #8
100106e0:	4095      	lsls	r5, r2
100106e2:	4093      	lsls	r3, r2
100106e4:	430d      	orrs	r5, r1
100106e6:	4a1b      	ldr	r2, [pc, #108]	; (10010754 <__aeabi_dmul+0x1ec>)
100106e8:	4694      	mov	ip, r2
100106ea:	4460      	add	r0, ip
100106ec:	4240      	negs	r0, r0
100106ee:	2200      	movs	r2, #0
100106f0:	e779      	b.n	100105e6 <__aeabi_dmul+0x7e>
100106f2:	2401      	movs	r4, #1
100106f4:	2200      	movs	r2, #0
100106f6:	400c      	ands	r4, r1
100106f8:	4b12      	ldr	r3, [pc, #72]	; (10010744 <__aeabi_dmul+0x1dc>)
100106fa:	2500      	movs	r5, #0
100106fc:	4690      	mov	r8, r2
100106fe:	e799      	b.n	10010634 <__aeabi_dmul+0xcc>
10010700:	2500      	movs	r5, #0
10010702:	2300      	movs	r3, #0
10010704:	2201      	movs	r2, #1
10010706:	e76e      	b.n	100105e6 <__aeabi_dmul+0x7e>
10010708:	2203      	movs	r2, #3
1001070a:	e76c      	b.n	100105e6 <__aeabi_dmul+0x7e>
1001070c:	2300      	movs	r3, #0
1001070e:	469b      	mov	fp, r3
10010710:	4698      	mov	r8, r3
10010712:	3301      	adds	r3, #1
10010714:	2704      	movs	r7, #4
10010716:	9301      	str	r3, [sp, #4]
10010718:	e74c      	b.n	100105b4 <__aeabi_dmul+0x4c>
1001071a:	2303      	movs	r3, #3
1001071c:	270c      	movs	r7, #12
1001071e:	9301      	str	r3, [sp, #4]
10010720:	e748      	b.n	100105b4 <__aeabi_dmul+0x4c>
10010722:	2300      	movs	r3, #0
10010724:	2580      	movs	r5, #128	; 0x80
10010726:	4698      	mov	r8, r3
10010728:	2400      	movs	r4, #0
1001072a:	032d      	lsls	r5, r5, #12
1001072c:	4b05      	ldr	r3, [pc, #20]	; (10010744 <__aeabi_dmul+0x1dc>)
1001072e:	e781      	b.n	10010634 <__aeabi_dmul+0xcc>
10010730:	465d      	mov	r5, fp
10010732:	4643      	mov	r3, r8
10010734:	9a01      	ldr	r2, [sp, #4]
10010736:	e76f      	b.n	10010618 <__aeabi_dmul+0xb0>
10010738:	465d      	mov	r5, fp
1001073a:	4643      	mov	r3, r8
1001073c:	0021      	movs	r1, r4
1001073e:	9a01      	ldr	r2, [sp, #4]
10010740:	e76a      	b.n	10010618 <__aeabi_dmul+0xb0>
10010742:	46c0      	nop			; (mov r8, r8)
10010744:	000007ff 	.word	0x000007ff
10010748:	fffffc01 	.word	0xfffffc01
1001074c:	100137c8 	.word	0x100137c8
10010750:	800fffff 	.word	0x800fffff
10010754:	000003f3 	.word	0x000003f3
10010758:	4642      	mov	r2, r8
1001075a:	0c12      	lsrs	r2, r2, #16
1001075c:	4691      	mov	r9, r2
1001075e:	0c1a      	lsrs	r2, r3, #16
10010760:	4694      	mov	ip, r2
10010762:	4642      	mov	r2, r8
10010764:	0417      	lsls	r7, r2, #16
10010766:	464a      	mov	r2, r9
10010768:	041b      	lsls	r3, r3, #16
1001076a:	0c1b      	lsrs	r3, r3, #16
1001076c:	435a      	muls	r2, r3
1001076e:	4660      	mov	r0, ip
10010770:	4690      	mov	r8, r2
10010772:	464a      	mov	r2, r9
10010774:	4342      	muls	r2, r0
10010776:	0010      	movs	r0, r2
10010778:	9203      	str	r2, [sp, #12]
1001077a:	4662      	mov	r2, ip
1001077c:	001c      	movs	r4, r3
1001077e:	0c3f      	lsrs	r7, r7, #16
10010780:	437a      	muls	r2, r7
10010782:	437c      	muls	r4, r7
10010784:	4442      	add	r2, r8
10010786:	9201      	str	r2, [sp, #4]
10010788:	0c22      	lsrs	r2, r4, #16
1001078a:	4692      	mov	sl, r2
1001078c:	9a01      	ldr	r2, [sp, #4]
1001078e:	4452      	add	r2, sl
10010790:	4590      	cmp	r8, r2
10010792:	d906      	bls.n	100107a2 <__aeabi_dmul+0x23a>
10010794:	4682      	mov	sl, r0
10010796:	2080      	movs	r0, #128	; 0x80
10010798:	0240      	lsls	r0, r0, #9
1001079a:	4680      	mov	r8, r0
1001079c:	44c2      	add	sl, r8
1001079e:	4650      	mov	r0, sl
100107a0:	9003      	str	r0, [sp, #12]
100107a2:	0c10      	lsrs	r0, r2, #16
100107a4:	9004      	str	r0, [sp, #16]
100107a6:	4648      	mov	r0, r9
100107a8:	0424      	lsls	r4, r4, #16
100107aa:	0c24      	lsrs	r4, r4, #16
100107ac:	0412      	lsls	r2, r2, #16
100107ae:	1912      	adds	r2, r2, r4
100107b0:	9205      	str	r2, [sp, #20]
100107b2:	0c2a      	lsrs	r2, r5, #16
100107b4:	042d      	lsls	r5, r5, #16
100107b6:	0c2d      	lsrs	r5, r5, #16
100107b8:	4368      	muls	r0, r5
100107ba:	002c      	movs	r4, r5
100107bc:	4682      	mov	sl, r0
100107be:	4648      	mov	r0, r9
100107c0:	437c      	muls	r4, r7
100107c2:	4350      	muls	r0, r2
100107c4:	4681      	mov	r9, r0
100107c6:	0c20      	lsrs	r0, r4, #16
100107c8:	4680      	mov	r8, r0
100107ca:	4357      	muls	r7, r2
100107cc:	4457      	add	r7, sl
100107ce:	4447      	add	r7, r8
100107d0:	45ba      	cmp	sl, r7
100107d2:	d903      	bls.n	100107dc <__aeabi_dmul+0x274>
100107d4:	2080      	movs	r0, #128	; 0x80
100107d6:	0240      	lsls	r0, r0, #9
100107d8:	4680      	mov	r8, r0
100107da:	44c1      	add	r9, r8
100107dc:	0c38      	lsrs	r0, r7, #16
100107de:	043f      	lsls	r7, r7, #16
100107e0:	46b8      	mov	r8, r7
100107e2:	4448      	add	r0, r9
100107e4:	0424      	lsls	r4, r4, #16
100107e6:	0c24      	lsrs	r4, r4, #16
100107e8:	9001      	str	r0, [sp, #4]
100107ea:	9804      	ldr	r0, [sp, #16]
100107ec:	44a0      	add	r8, r4
100107ee:	4440      	add	r0, r8
100107f0:	9004      	str	r0, [sp, #16]
100107f2:	4658      	mov	r0, fp
100107f4:	0c00      	lsrs	r0, r0, #16
100107f6:	4681      	mov	r9, r0
100107f8:	4658      	mov	r0, fp
100107fa:	0404      	lsls	r4, r0, #16
100107fc:	0c20      	lsrs	r0, r4, #16
100107fe:	4682      	mov	sl, r0
10010800:	0007      	movs	r7, r0
10010802:	4648      	mov	r0, r9
10010804:	435f      	muls	r7, r3
10010806:	464c      	mov	r4, r9
10010808:	4343      	muls	r3, r0
1001080a:	4660      	mov	r0, ip
1001080c:	4360      	muls	r0, r4
1001080e:	4664      	mov	r4, ip
10010810:	4683      	mov	fp, r0
10010812:	4650      	mov	r0, sl
10010814:	4344      	muls	r4, r0
10010816:	0c38      	lsrs	r0, r7, #16
10010818:	4684      	mov	ip, r0
1001081a:	18e4      	adds	r4, r4, r3
1001081c:	4464      	add	r4, ip
1001081e:	42a3      	cmp	r3, r4
10010820:	d903      	bls.n	1001082a <__aeabi_dmul+0x2c2>
10010822:	2380      	movs	r3, #128	; 0x80
10010824:	025b      	lsls	r3, r3, #9
10010826:	469c      	mov	ip, r3
10010828:	44e3      	add	fp, ip
1001082a:	4648      	mov	r0, r9
1001082c:	043f      	lsls	r7, r7, #16
1001082e:	0c23      	lsrs	r3, r4, #16
10010830:	0c3f      	lsrs	r7, r7, #16
10010832:	0424      	lsls	r4, r4, #16
10010834:	19e4      	adds	r4, r4, r7
10010836:	4657      	mov	r7, sl
10010838:	4368      	muls	r0, r5
1001083a:	436f      	muls	r7, r5
1001083c:	4684      	mov	ip, r0
1001083e:	464d      	mov	r5, r9
10010840:	4650      	mov	r0, sl
10010842:	4355      	muls	r5, r2
10010844:	4342      	muls	r2, r0
10010846:	0c38      	lsrs	r0, r7, #16
10010848:	4681      	mov	r9, r0
1001084a:	4462      	add	r2, ip
1001084c:	444a      	add	r2, r9
1001084e:	445b      	add	r3, fp
10010850:	4594      	cmp	ip, r2
10010852:	d903      	bls.n	1001085c <__aeabi_dmul+0x2f4>
10010854:	2080      	movs	r0, #128	; 0x80
10010856:	0240      	lsls	r0, r0, #9
10010858:	4684      	mov	ip, r0
1001085a:	4465      	add	r5, ip
1001085c:	9803      	ldr	r0, [sp, #12]
1001085e:	043f      	lsls	r7, r7, #16
10010860:	4683      	mov	fp, r0
10010862:	9804      	ldr	r0, [sp, #16]
10010864:	0c3f      	lsrs	r7, r7, #16
10010866:	4684      	mov	ip, r0
10010868:	44e3      	add	fp, ip
1001086a:	45c3      	cmp	fp, r8
1001086c:	4180      	sbcs	r0, r0
1001086e:	4240      	negs	r0, r0
10010870:	4682      	mov	sl, r0
10010872:	0410      	lsls	r0, r2, #16
10010874:	4684      	mov	ip, r0
10010876:	9801      	ldr	r0, [sp, #4]
10010878:	4467      	add	r7, ip
1001087a:	4684      	mov	ip, r0
1001087c:	4467      	add	r7, ip
1001087e:	44a3      	add	fp, r4
10010880:	46bc      	mov	ip, r7
10010882:	45a3      	cmp	fp, r4
10010884:	41a4      	sbcs	r4, r4
10010886:	4699      	mov	r9, r3
10010888:	44d4      	add	ip, sl
1001088a:	4264      	negs	r4, r4
1001088c:	4287      	cmp	r7, r0
1001088e:	41bf      	sbcs	r7, r7
10010890:	45d4      	cmp	ip, sl
10010892:	4180      	sbcs	r0, r0
10010894:	44e1      	add	r9, ip
10010896:	46a0      	mov	r8, r4
10010898:	4599      	cmp	r9, r3
1001089a:	419b      	sbcs	r3, r3
1001089c:	427f      	negs	r7, r7
1001089e:	4240      	negs	r0, r0
100108a0:	44c8      	add	r8, r9
100108a2:	4307      	orrs	r7, r0
100108a4:	0c12      	lsrs	r2, r2, #16
100108a6:	18ba      	adds	r2, r7, r2
100108a8:	45a0      	cmp	r8, r4
100108aa:	41a4      	sbcs	r4, r4
100108ac:	425f      	negs	r7, r3
100108ae:	003b      	movs	r3, r7
100108b0:	4264      	negs	r4, r4
100108b2:	4323      	orrs	r3, r4
100108b4:	18d7      	adds	r7, r2, r3
100108b6:	4643      	mov	r3, r8
100108b8:	197d      	adds	r5, r7, r5
100108ba:	0ddb      	lsrs	r3, r3, #23
100108bc:	026d      	lsls	r5, r5, #9
100108be:	431d      	orrs	r5, r3
100108c0:	465b      	mov	r3, fp
100108c2:	025a      	lsls	r2, r3, #9
100108c4:	9b05      	ldr	r3, [sp, #20]
100108c6:	431a      	orrs	r2, r3
100108c8:	1e53      	subs	r3, r2, #1
100108ca:	419a      	sbcs	r2, r3
100108cc:	465b      	mov	r3, fp
100108ce:	0ddb      	lsrs	r3, r3, #23
100108d0:	431a      	orrs	r2, r3
100108d2:	4643      	mov	r3, r8
100108d4:	025b      	lsls	r3, r3, #9
100108d6:	4313      	orrs	r3, r2
100108d8:	01ea      	lsls	r2, r5, #7
100108da:	d507      	bpl.n	100108ec <__aeabi_dmul+0x384>
100108dc:	2201      	movs	r2, #1
100108de:	085c      	lsrs	r4, r3, #1
100108e0:	4013      	ands	r3, r2
100108e2:	4323      	orrs	r3, r4
100108e4:	07ea      	lsls	r2, r5, #31
100108e6:	9e02      	ldr	r6, [sp, #8]
100108e8:	4313      	orrs	r3, r2
100108ea:	086d      	lsrs	r5, r5, #1
100108ec:	4a57      	ldr	r2, [pc, #348]	; (10010a4c <__aeabi_dmul+0x4e4>)
100108ee:	18b2      	adds	r2, r6, r2
100108f0:	2a00      	cmp	r2, #0
100108f2:	dd4b      	ble.n	1001098c <__aeabi_dmul+0x424>
100108f4:	0758      	lsls	r0, r3, #29
100108f6:	d009      	beq.n	1001090c <__aeabi_dmul+0x3a4>
100108f8:	200f      	movs	r0, #15
100108fa:	4018      	ands	r0, r3
100108fc:	2804      	cmp	r0, #4
100108fe:	d005      	beq.n	1001090c <__aeabi_dmul+0x3a4>
10010900:	1d18      	adds	r0, r3, #4
10010902:	4298      	cmp	r0, r3
10010904:	419b      	sbcs	r3, r3
10010906:	425b      	negs	r3, r3
10010908:	18ed      	adds	r5, r5, r3
1001090a:	0003      	movs	r3, r0
1001090c:	01e8      	lsls	r0, r5, #7
1001090e:	d504      	bpl.n	1001091a <__aeabi_dmul+0x3b2>
10010910:	4a4f      	ldr	r2, [pc, #316]	; (10010a50 <__aeabi_dmul+0x4e8>)
10010912:	4015      	ands	r5, r2
10010914:	2280      	movs	r2, #128	; 0x80
10010916:	00d2      	lsls	r2, r2, #3
10010918:	18b2      	adds	r2, r6, r2
1001091a:	484e      	ldr	r0, [pc, #312]	; (10010a54 <__aeabi_dmul+0x4ec>)
1001091c:	4282      	cmp	r2, r0
1001091e:	dd00      	ble.n	10010922 <__aeabi_dmul+0x3ba>
10010920:	e6e7      	b.n	100106f2 <__aeabi_dmul+0x18a>
10010922:	2401      	movs	r4, #1
10010924:	08db      	lsrs	r3, r3, #3
10010926:	0768      	lsls	r0, r5, #29
10010928:	4318      	orrs	r0, r3
1001092a:	026d      	lsls	r5, r5, #9
1001092c:	0553      	lsls	r3, r2, #21
1001092e:	4680      	mov	r8, r0
10010930:	0b2d      	lsrs	r5, r5, #12
10010932:	0d5b      	lsrs	r3, r3, #21
10010934:	400c      	ands	r4, r1
10010936:	e67d      	b.n	10010634 <__aeabi_dmul+0xcc>
10010938:	2280      	movs	r2, #128	; 0x80
1001093a:	4659      	mov	r1, fp
1001093c:	0312      	lsls	r2, r2, #12
1001093e:	4211      	tst	r1, r2
10010940:	d008      	beq.n	10010954 <__aeabi_dmul+0x3ec>
10010942:	4215      	tst	r5, r2
10010944:	d106      	bne.n	10010954 <__aeabi_dmul+0x3ec>
10010946:	4315      	orrs	r5, r2
10010948:	032d      	lsls	r5, r5, #12
1001094a:	4698      	mov	r8, r3
1001094c:	0b2d      	lsrs	r5, r5, #12
1001094e:	464c      	mov	r4, r9
10010950:	4b41      	ldr	r3, [pc, #260]	; (10010a58 <__aeabi_dmul+0x4f0>)
10010952:	e66f      	b.n	10010634 <__aeabi_dmul+0xcc>
10010954:	465d      	mov	r5, fp
10010956:	4315      	orrs	r5, r2
10010958:	032d      	lsls	r5, r5, #12
1001095a:	0b2d      	lsrs	r5, r5, #12
1001095c:	4b3e      	ldr	r3, [pc, #248]	; (10010a58 <__aeabi_dmul+0x4f0>)
1001095e:	e669      	b.n	10010634 <__aeabi_dmul+0xcc>
10010960:	0003      	movs	r3, r0
10010962:	4655      	mov	r5, sl
10010964:	3b28      	subs	r3, #40	; 0x28
10010966:	409d      	lsls	r5, r3
10010968:	2300      	movs	r3, #0
1001096a:	e6bc      	b.n	100106e6 <__aeabi_dmul+0x17e>
1001096c:	4650      	mov	r0, sl
1001096e:	f000 fcaf 	bl	100112d0 <__clzsi2>
10010972:	3020      	adds	r0, #32
10010974:	e6a8      	b.n	100106c8 <__aeabi_dmul+0x160>
10010976:	0003      	movs	r3, r0
10010978:	3b28      	subs	r3, #40	; 0x28
1001097a:	409f      	lsls	r7, r3
1001097c:	2300      	movs	r3, #0
1001097e:	46bb      	mov	fp, r7
10010980:	4698      	mov	r8, r3
10010982:	e689      	b.n	10010698 <__aeabi_dmul+0x130>
10010984:	f000 fca4 	bl	100112d0 <__clzsi2>
10010988:	3020      	adds	r0, #32
1001098a:	e673      	b.n	10010674 <__aeabi_dmul+0x10c>
1001098c:	2401      	movs	r4, #1
1001098e:	1aa6      	subs	r6, r4, r2
10010990:	2e38      	cmp	r6, #56	; 0x38
10010992:	dd07      	ble.n	100109a4 <__aeabi_dmul+0x43c>
10010994:	2200      	movs	r2, #0
10010996:	400c      	ands	r4, r1
10010998:	2300      	movs	r3, #0
1001099a:	2500      	movs	r5, #0
1001099c:	4690      	mov	r8, r2
1001099e:	e649      	b.n	10010634 <__aeabi_dmul+0xcc>
100109a0:	9e02      	ldr	r6, [sp, #8]
100109a2:	e7a3      	b.n	100108ec <__aeabi_dmul+0x384>
100109a4:	2e1f      	cmp	r6, #31
100109a6:	dc20      	bgt.n	100109ea <__aeabi_dmul+0x482>
100109a8:	2220      	movs	r2, #32
100109aa:	002c      	movs	r4, r5
100109ac:	0018      	movs	r0, r3
100109ae:	1b92      	subs	r2, r2, r6
100109b0:	40f0      	lsrs	r0, r6
100109b2:	4094      	lsls	r4, r2
100109b4:	4093      	lsls	r3, r2
100109b6:	4304      	orrs	r4, r0
100109b8:	1e58      	subs	r0, r3, #1
100109ba:	4183      	sbcs	r3, r0
100109bc:	431c      	orrs	r4, r3
100109be:	40f5      	lsrs	r5, r6
100109c0:	0763      	lsls	r3, r4, #29
100109c2:	d009      	beq.n	100109d8 <__aeabi_dmul+0x470>
100109c4:	230f      	movs	r3, #15
100109c6:	4023      	ands	r3, r4
100109c8:	2b04      	cmp	r3, #4
100109ca:	d005      	beq.n	100109d8 <__aeabi_dmul+0x470>
100109cc:	0023      	movs	r3, r4
100109ce:	1d1c      	adds	r4, r3, #4
100109d0:	429c      	cmp	r4, r3
100109d2:	4192      	sbcs	r2, r2
100109d4:	4252      	negs	r2, r2
100109d6:	18ad      	adds	r5, r5, r2
100109d8:	022b      	lsls	r3, r5, #8
100109da:	d51f      	bpl.n	10010a1c <__aeabi_dmul+0x4b4>
100109dc:	2401      	movs	r4, #1
100109de:	2200      	movs	r2, #0
100109e0:	400c      	ands	r4, r1
100109e2:	2301      	movs	r3, #1
100109e4:	2500      	movs	r5, #0
100109e6:	4690      	mov	r8, r2
100109e8:	e624      	b.n	10010634 <__aeabi_dmul+0xcc>
100109ea:	201f      	movs	r0, #31
100109ec:	002c      	movs	r4, r5
100109ee:	4240      	negs	r0, r0
100109f0:	1a82      	subs	r2, r0, r2
100109f2:	40d4      	lsrs	r4, r2
100109f4:	2e20      	cmp	r6, #32
100109f6:	d01c      	beq.n	10010a32 <__aeabi_dmul+0x4ca>
100109f8:	2240      	movs	r2, #64	; 0x40
100109fa:	1b96      	subs	r6, r2, r6
100109fc:	40b5      	lsls	r5, r6
100109fe:	432b      	orrs	r3, r5
10010a00:	1e58      	subs	r0, r3, #1
10010a02:	4183      	sbcs	r3, r0
10010a04:	2007      	movs	r0, #7
10010a06:	4323      	orrs	r3, r4
10010a08:	4018      	ands	r0, r3
10010a0a:	2500      	movs	r5, #0
10010a0c:	2800      	cmp	r0, #0
10010a0e:	d009      	beq.n	10010a24 <__aeabi_dmul+0x4bc>
10010a10:	220f      	movs	r2, #15
10010a12:	2500      	movs	r5, #0
10010a14:	401a      	ands	r2, r3
10010a16:	001c      	movs	r4, r3
10010a18:	2a04      	cmp	r2, #4
10010a1a:	d1d8      	bne.n	100109ce <__aeabi_dmul+0x466>
10010a1c:	0023      	movs	r3, r4
10010a1e:	0768      	lsls	r0, r5, #29
10010a20:	026d      	lsls	r5, r5, #9
10010a22:	0b2d      	lsrs	r5, r5, #12
10010a24:	2401      	movs	r4, #1
10010a26:	08db      	lsrs	r3, r3, #3
10010a28:	4303      	orrs	r3, r0
10010a2a:	4698      	mov	r8, r3
10010a2c:	400c      	ands	r4, r1
10010a2e:	2300      	movs	r3, #0
10010a30:	e600      	b.n	10010634 <__aeabi_dmul+0xcc>
10010a32:	2500      	movs	r5, #0
10010a34:	e7e3      	b.n	100109fe <__aeabi_dmul+0x496>
10010a36:	2280      	movs	r2, #128	; 0x80
10010a38:	2401      	movs	r4, #1
10010a3a:	0312      	lsls	r2, r2, #12
10010a3c:	4315      	orrs	r5, r2
10010a3e:	032d      	lsls	r5, r5, #12
10010a40:	4698      	mov	r8, r3
10010a42:	0b2d      	lsrs	r5, r5, #12
10010a44:	400c      	ands	r4, r1
10010a46:	4b04      	ldr	r3, [pc, #16]	; (10010a58 <__aeabi_dmul+0x4f0>)
10010a48:	e5f4      	b.n	10010634 <__aeabi_dmul+0xcc>
10010a4a:	46c0      	nop			; (mov r8, r8)
10010a4c:	000003ff 	.word	0x000003ff
10010a50:	feffffff 	.word	0xfeffffff
10010a54:	000007fe 	.word	0x000007fe
10010a58:	000007ff 	.word	0x000007ff

10010a5c <__aeabi_dsub>:
10010a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a5e:	4657      	mov	r7, sl
10010a60:	464e      	mov	r6, r9
10010a62:	4645      	mov	r5, r8
10010a64:	b4e0      	push	{r5, r6, r7}
10010a66:	000e      	movs	r6, r1
10010a68:	0011      	movs	r1, r2
10010a6a:	0ff2      	lsrs	r2, r6, #31
10010a6c:	4692      	mov	sl, r2
10010a6e:	00c5      	lsls	r5, r0, #3
10010a70:	0f42      	lsrs	r2, r0, #29
10010a72:	0318      	lsls	r0, r3, #12
10010a74:	0337      	lsls	r7, r6, #12
10010a76:	0074      	lsls	r4, r6, #1
10010a78:	0a40      	lsrs	r0, r0, #9
10010a7a:	0f4e      	lsrs	r6, r1, #29
10010a7c:	0a7f      	lsrs	r7, r7, #9
10010a7e:	4330      	orrs	r0, r6
10010a80:	4ecf      	ldr	r6, [pc, #828]	; (10010dc0 <__aeabi_dsub+0x364>)
10010a82:	4317      	orrs	r7, r2
10010a84:	005a      	lsls	r2, r3, #1
10010a86:	0d64      	lsrs	r4, r4, #21
10010a88:	0d52      	lsrs	r2, r2, #21
10010a8a:	0fdb      	lsrs	r3, r3, #31
10010a8c:	00c9      	lsls	r1, r1, #3
10010a8e:	42b2      	cmp	r2, r6
10010a90:	d100      	bne.n	10010a94 <__aeabi_dsub+0x38>
10010a92:	e0e5      	b.n	10010c60 <__aeabi_dsub+0x204>
10010a94:	2601      	movs	r6, #1
10010a96:	4073      	eors	r3, r6
10010a98:	1aa6      	subs	r6, r4, r2
10010a9a:	46b4      	mov	ip, r6
10010a9c:	4553      	cmp	r3, sl
10010a9e:	d100      	bne.n	10010aa2 <__aeabi_dsub+0x46>
10010aa0:	e0af      	b.n	10010c02 <__aeabi_dsub+0x1a6>
10010aa2:	2e00      	cmp	r6, #0
10010aa4:	dc00      	bgt.n	10010aa8 <__aeabi_dsub+0x4c>
10010aa6:	e10d      	b.n	10010cc4 <__aeabi_dsub+0x268>
10010aa8:	2a00      	cmp	r2, #0
10010aaa:	d13a      	bne.n	10010b22 <__aeabi_dsub+0xc6>
10010aac:	0003      	movs	r3, r0
10010aae:	430b      	orrs	r3, r1
10010ab0:	d000      	beq.n	10010ab4 <__aeabi_dsub+0x58>
10010ab2:	e0e4      	b.n	10010c7e <__aeabi_dsub+0x222>
10010ab4:	076b      	lsls	r3, r5, #29
10010ab6:	d009      	beq.n	10010acc <__aeabi_dsub+0x70>
10010ab8:	230f      	movs	r3, #15
10010aba:	402b      	ands	r3, r5
10010abc:	2b04      	cmp	r3, #4
10010abe:	d005      	beq.n	10010acc <__aeabi_dsub+0x70>
10010ac0:	1d2b      	adds	r3, r5, #4
10010ac2:	42ab      	cmp	r3, r5
10010ac4:	41ad      	sbcs	r5, r5
10010ac6:	426d      	negs	r5, r5
10010ac8:	197f      	adds	r7, r7, r5
10010aca:	001d      	movs	r5, r3
10010acc:	023b      	lsls	r3, r7, #8
10010ace:	d400      	bmi.n	10010ad2 <__aeabi_dsub+0x76>
10010ad0:	e088      	b.n	10010be4 <__aeabi_dsub+0x188>
10010ad2:	4bbb      	ldr	r3, [pc, #748]	; (10010dc0 <__aeabi_dsub+0x364>)
10010ad4:	3401      	adds	r4, #1
10010ad6:	429c      	cmp	r4, r3
10010ad8:	d100      	bne.n	10010adc <__aeabi_dsub+0x80>
10010ada:	e110      	b.n	10010cfe <__aeabi_dsub+0x2a2>
10010adc:	003a      	movs	r2, r7
10010ade:	4bb9      	ldr	r3, [pc, #740]	; (10010dc4 <__aeabi_dsub+0x368>)
10010ae0:	4651      	mov	r1, sl
10010ae2:	401a      	ands	r2, r3
10010ae4:	2301      	movs	r3, #1
10010ae6:	0750      	lsls	r0, r2, #29
10010ae8:	08ed      	lsrs	r5, r5, #3
10010aea:	0252      	lsls	r2, r2, #9
10010aec:	0564      	lsls	r4, r4, #21
10010aee:	4305      	orrs	r5, r0
10010af0:	0b12      	lsrs	r2, r2, #12
10010af2:	0d64      	lsrs	r4, r4, #21
10010af4:	400b      	ands	r3, r1
10010af6:	2100      	movs	r1, #0
10010af8:	0028      	movs	r0, r5
10010afa:	0312      	lsls	r2, r2, #12
10010afc:	0d0d      	lsrs	r5, r1, #20
10010afe:	0b12      	lsrs	r2, r2, #12
10010b00:	0564      	lsls	r4, r4, #21
10010b02:	052d      	lsls	r5, r5, #20
10010b04:	4315      	orrs	r5, r2
10010b06:	0862      	lsrs	r2, r4, #1
10010b08:	4caf      	ldr	r4, [pc, #700]	; (10010dc8 <__aeabi_dsub+0x36c>)
10010b0a:	07db      	lsls	r3, r3, #31
10010b0c:	402c      	ands	r4, r5
10010b0e:	4314      	orrs	r4, r2
10010b10:	0064      	lsls	r4, r4, #1
10010b12:	0864      	lsrs	r4, r4, #1
10010b14:	431c      	orrs	r4, r3
10010b16:	0021      	movs	r1, r4
10010b18:	bc1c      	pop	{r2, r3, r4}
10010b1a:	4690      	mov	r8, r2
10010b1c:	4699      	mov	r9, r3
10010b1e:	46a2      	mov	sl, r4
10010b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b22:	4ba7      	ldr	r3, [pc, #668]	; (10010dc0 <__aeabi_dsub+0x364>)
10010b24:	429c      	cmp	r4, r3
10010b26:	d0c5      	beq.n	10010ab4 <__aeabi_dsub+0x58>
10010b28:	2380      	movs	r3, #128	; 0x80
10010b2a:	041b      	lsls	r3, r3, #16
10010b2c:	4318      	orrs	r0, r3
10010b2e:	4663      	mov	r3, ip
10010b30:	2b38      	cmp	r3, #56	; 0x38
10010b32:	dd00      	ble.n	10010b36 <__aeabi_dsub+0xda>
10010b34:	e0fd      	b.n	10010d32 <__aeabi_dsub+0x2d6>
10010b36:	2b1f      	cmp	r3, #31
10010b38:	dd00      	ble.n	10010b3c <__aeabi_dsub+0xe0>
10010b3a:	e130      	b.n	10010d9e <__aeabi_dsub+0x342>
10010b3c:	4662      	mov	r2, ip
10010b3e:	2320      	movs	r3, #32
10010b40:	1a9b      	subs	r3, r3, r2
10010b42:	0002      	movs	r2, r0
10010b44:	409a      	lsls	r2, r3
10010b46:	4666      	mov	r6, ip
10010b48:	4690      	mov	r8, r2
10010b4a:	000a      	movs	r2, r1
10010b4c:	4099      	lsls	r1, r3
10010b4e:	40f2      	lsrs	r2, r6
10010b50:	4646      	mov	r6, r8
10010b52:	1e4b      	subs	r3, r1, #1
10010b54:	4199      	sbcs	r1, r3
10010b56:	4332      	orrs	r2, r6
10010b58:	4311      	orrs	r1, r2
10010b5a:	4663      	mov	r3, ip
10010b5c:	0002      	movs	r2, r0
10010b5e:	40da      	lsrs	r2, r3
10010b60:	1a69      	subs	r1, r5, r1
10010b62:	428d      	cmp	r5, r1
10010b64:	419b      	sbcs	r3, r3
10010b66:	000d      	movs	r5, r1
10010b68:	1aba      	subs	r2, r7, r2
10010b6a:	425b      	negs	r3, r3
10010b6c:	1ad7      	subs	r7, r2, r3
10010b6e:	023b      	lsls	r3, r7, #8
10010b70:	d535      	bpl.n	10010bde <__aeabi_dsub+0x182>
10010b72:	027a      	lsls	r2, r7, #9
10010b74:	0a53      	lsrs	r3, r2, #9
10010b76:	4698      	mov	r8, r3
10010b78:	4643      	mov	r3, r8
10010b7a:	2b00      	cmp	r3, #0
10010b7c:	d100      	bne.n	10010b80 <__aeabi_dsub+0x124>
10010b7e:	e0c4      	b.n	10010d0a <__aeabi_dsub+0x2ae>
10010b80:	4640      	mov	r0, r8
10010b82:	f000 fba5 	bl	100112d0 <__clzsi2>
10010b86:	0003      	movs	r3, r0
10010b88:	3b08      	subs	r3, #8
10010b8a:	2b1f      	cmp	r3, #31
10010b8c:	dd00      	ble.n	10010b90 <__aeabi_dsub+0x134>
10010b8e:	e0c5      	b.n	10010d1c <__aeabi_dsub+0x2c0>
10010b90:	2220      	movs	r2, #32
10010b92:	0029      	movs	r1, r5
10010b94:	1ad2      	subs	r2, r2, r3
10010b96:	4647      	mov	r7, r8
10010b98:	40d1      	lsrs	r1, r2
10010b9a:	409f      	lsls	r7, r3
10010b9c:	000a      	movs	r2, r1
10010b9e:	409d      	lsls	r5, r3
10010ba0:	433a      	orrs	r2, r7
10010ba2:	429c      	cmp	r4, r3
10010ba4:	dd00      	ble.n	10010ba8 <__aeabi_dsub+0x14c>
10010ba6:	e0c0      	b.n	10010d2a <__aeabi_dsub+0x2ce>
10010ba8:	1b1c      	subs	r4, r3, r4
10010baa:	1c63      	adds	r3, r4, #1
10010bac:	2b1f      	cmp	r3, #31
10010bae:	dd00      	ble.n	10010bb2 <__aeabi_dsub+0x156>
10010bb0:	e0e4      	b.n	10010d7c <__aeabi_dsub+0x320>
10010bb2:	2120      	movs	r1, #32
10010bb4:	0014      	movs	r4, r2
10010bb6:	0028      	movs	r0, r5
10010bb8:	1ac9      	subs	r1, r1, r3
10010bba:	40d8      	lsrs	r0, r3
10010bbc:	408c      	lsls	r4, r1
10010bbe:	408d      	lsls	r5, r1
10010bc0:	4304      	orrs	r4, r0
10010bc2:	40da      	lsrs	r2, r3
10010bc4:	1e68      	subs	r0, r5, #1
10010bc6:	4185      	sbcs	r5, r0
10010bc8:	0017      	movs	r7, r2
10010bca:	4325      	orrs	r5, r4
10010bcc:	2400      	movs	r4, #0
10010bce:	e771      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010bd0:	4642      	mov	r2, r8
10010bd2:	4663      	mov	r3, ip
10010bd4:	431a      	orrs	r2, r3
10010bd6:	d100      	bne.n	10010bda <__aeabi_dsub+0x17e>
10010bd8:	e24c      	b.n	10011074 <__aeabi_dsub+0x618>
10010bda:	4667      	mov	r7, ip
10010bdc:	4645      	mov	r5, r8
10010bde:	076b      	lsls	r3, r5, #29
10010be0:	d000      	beq.n	10010be4 <__aeabi_dsub+0x188>
10010be2:	e769      	b.n	10010ab8 <__aeabi_dsub+0x5c>
10010be4:	2301      	movs	r3, #1
10010be6:	4651      	mov	r1, sl
10010be8:	0778      	lsls	r0, r7, #29
10010bea:	08ed      	lsrs	r5, r5, #3
10010bec:	08fa      	lsrs	r2, r7, #3
10010bee:	400b      	ands	r3, r1
10010bf0:	4305      	orrs	r5, r0
10010bf2:	4973      	ldr	r1, [pc, #460]	; (10010dc0 <__aeabi_dsub+0x364>)
10010bf4:	428c      	cmp	r4, r1
10010bf6:	d038      	beq.n	10010c6a <__aeabi_dsub+0x20e>
10010bf8:	0312      	lsls	r2, r2, #12
10010bfa:	0564      	lsls	r4, r4, #21
10010bfc:	0b12      	lsrs	r2, r2, #12
10010bfe:	0d64      	lsrs	r4, r4, #21
10010c00:	e779      	b.n	10010af6 <__aeabi_dsub+0x9a>
10010c02:	2e00      	cmp	r6, #0
10010c04:	dc00      	bgt.n	10010c08 <__aeabi_dsub+0x1ac>
10010c06:	e09a      	b.n	10010d3e <__aeabi_dsub+0x2e2>
10010c08:	2a00      	cmp	r2, #0
10010c0a:	d047      	beq.n	10010c9c <__aeabi_dsub+0x240>
10010c0c:	4a6c      	ldr	r2, [pc, #432]	; (10010dc0 <__aeabi_dsub+0x364>)
10010c0e:	4294      	cmp	r4, r2
10010c10:	d100      	bne.n	10010c14 <__aeabi_dsub+0x1b8>
10010c12:	e74f      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010c14:	2280      	movs	r2, #128	; 0x80
10010c16:	0412      	lsls	r2, r2, #16
10010c18:	4310      	orrs	r0, r2
10010c1a:	4662      	mov	r2, ip
10010c1c:	2a38      	cmp	r2, #56	; 0x38
10010c1e:	dc00      	bgt.n	10010c22 <__aeabi_dsub+0x1c6>
10010c20:	e108      	b.n	10010e34 <__aeabi_dsub+0x3d8>
10010c22:	4301      	orrs	r1, r0
10010c24:	1e48      	subs	r0, r1, #1
10010c26:	4181      	sbcs	r1, r0
10010c28:	2200      	movs	r2, #0
10010c2a:	b2c9      	uxtb	r1, r1
10010c2c:	1949      	adds	r1, r1, r5
10010c2e:	19d2      	adds	r2, r2, r7
10010c30:	42a9      	cmp	r1, r5
10010c32:	41bf      	sbcs	r7, r7
10010c34:	000d      	movs	r5, r1
10010c36:	427f      	negs	r7, r7
10010c38:	18bf      	adds	r7, r7, r2
10010c3a:	023a      	lsls	r2, r7, #8
10010c3c:	d400      	bmi.n	10010c40 <__aeabi_dsub+0x1e4>
10010c3e:	e142      	b.n	10010ec6 <__aeabi_dsub+0x46a>
10010c40:	4a5f      	ldr	r2, [pc, #380]	; (10010dc0 <__aeabi_dsub+0x364>)
10010c42:	3401      	adds	r4, #1
10010c44:	4294      	cmp	r4, r2
10010c46:	d100      	bne.n	10010c4a <__aeabi_dsub+0x1ee>
10010c48:	e14e      	b.n	10010ee8 <__aeabi_dsub+0x48c>
10010c4a:	2001      	movs	r0, #1
10010c4c:	4a5d      	ldr	r2, [pc, #372]	; (10010dc4 <__aeabi_dsub+0x368>)
10010c4e:	0869      	lsrs	r1, r5, #1
10010c50:	403a      	ands	r2, r7
10010c52:	4028      	ands	r0, r5
10010c54:	4308      	orrs	r0, r1
10010c56:	07d5      	lsls	r5, r2, #31
10010c58:	4305      	orrs	r5, r0
10010c5a:	0857      	lsrs	r7, r2, #1
10010c5c:	469a      	mov	sl, r3
10010c5e:	e729      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010c60:	0006      	movs	r6, r0
10010c62:	430e      	orrs	r6, r1
10010c64:	d000      	beq.n	10010c68 <__aeabi_dsub+0x20c>
10010c66:	e717      	b.n	10010a98 <__aeabi_dsub+0x3c>
10010c68:	e714      	b.n	10010a94 <__aeabi_dsub+0x38>
10010c6a:	0029      	movs	r1, r5
10010c6c:	4311      	orrs	r1, r2
10010c6e:	d100      	bne.n	10010c72 <__aeabi_dsub+0x216>
10010c70:	e1f9      	b.n	10011066 <__aeabi_dsub+0x60a>
10010c72:	2180      	movs	r1, #128	; 0x80
10010c74:	0309      	lsls	r1, r1, #12
10010c76:	430a      	orrs	r2, r1
10010c78:	0312      	lsls	r2, r2, #12
10010c7a:	0b12      	lsrs	r2, r2, #12
10010c7c:	e73b      	b.n	10010af6 <__aeabi_dsub+0x9a>
10010c7e:	2301      	movs	r3, #1
10010c80:	425b      	negs	r3, r3
10010c82:	4698      	mov	r8, r3
10010c84:	44c4      	add	ip, r8
10010c86:	4663      	mov	r3, ip
10010c88:	2b00      	cmp	r3, #0
10010c8a:	d172      	bne.n	10010d72 <__aeabi_dsub+0x316>
10010c8c:	1a69      	subs	r1, r5, r1
10010c8e:	428d      	cmp	r5, r1
10010c90:	419b      	sbcs	r3, r3
10010c92:	1a3f      	subs	r7, r7, r0
10010c94:	425b      	negs	r3, r3
10010c96:	1aff      	subs	r7, r7, r3
10010c98:	000d      	movs	r5, r1
10010c9a:	e768      	b.n	10010b6e <__aeabi_dsub+0x112>
10010c9c:	0002      	movs	r2, r0
10010c9e:	430a      	orrs	r2, r1
10010ca0:	d100      	bne.n	10010ca4 <__aeabi_dsub+0x248>
10010ca2:	e707      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010ca4:	2201      	movs	r2, #1
10010ca6:	4252      	negs	r2, r2
10010ca8:	4690      	mov	r8, r2
10010caa:	44c4      	add	ip, r8
10010cac:	4662      	mov	r2, ip
10010cae:	2a00      	cmp	r2, #0
10010cb0:	d000      	beq.n	10010cb4 <__aeabi_dsub+0x258>
10010cb2:	e0e6      	b.n	10010e82 <__aeabi_dsub+0x426>
10010cb4:	1869      	adds	r1, r5, r1
10010cb6:	42a9      	cmp	r1, r5
10010cb8:	41b6      	sbcs	r6, r6
10010cba:	183f      	adds	r7, r7, r0
10010cbc:	4276      	negs	r6, r6
10010cbe:	19f7      	adds	r7, r6, r7
10010cc0:	000d      	movs	r5, r1
10010cc2:	e7ba      	b.n	10010c3a <__aeabi_dsub+0x1de>
10010cc4:	2e00      	cmp	r6, #0
10010cc6:	d000      	beq.n	10010cca <__aeabi_dsub+0x26e>
10010cc8:	e080      	b.n	10010dcc <__aeabi_dsub+0x370>
10010cca:	1c62      	adds	r2, r4, #1
10010ccc:	0552      	lsls	r2, r2, #21
10010cce:	0d52      	lsrs	r2, r2, #21
10010cd0:	2a01      	cmp	r2, #1
10010cd2:	dc00      	bgt.n	10010cd6 <__aeabi_dsub+0x27a>
10010cd4:	e0f9      	b.n	10010eca <__aeabi_dsub+0x46e>
10010cd6:	1a6a      	subs	r2, r5, r1
10010cd8:	4691      	mov	r9, r2
10010cda:	454d      	cmp	r5, r9
10010cdc:	41b6      	sbcs	r6, r6
10010cde:	1a3a      	subs	r2, r7, r0
10010ce0:	4276      	negs	r6, r6
10010ce2:	1b92      	subs	r2, r2, r6
10010ce4:	4690      	mov	r8, r2
10010ce6:	0212      	lsls	r2, r2, #8
10010ce8:	d400      	bmi.n	10010cec <__aeabi_dsub+0x290>
10010cea:	e099      	b.n	10010e20 <__aeabi_dsub+0x3c4>
10010cec:	1b4d      	subs	r5, r1, r5
10010cee:	42a9      	cmp	r1, r5
10010cf0:	4189      	sbcs	r1, r1
10010cf2:	1bc7      	subs	r7, r0, r7
10010cf4:	4249      	negs	r1, r1
10010cf6:	1a7a      	subs	r2, r7, r1
10010cf8:	4690      	mov	r8, r2
10010cfa:	469a      	mov	sl, r3
10010cfc:	e73c      	b.n	10010b78 <__aeabi_dsub+0x11c>
10010cfe:	4652      	mov	r2, sl
10010d00:	2301      	movs	r3, #1
10010d02:	2500      	movs	r5, #0
10010d04:	4013      	ands	r3, r2
10010d06:	2200      	movs	r2, #0
10010d08:	e6f5      	b.n	10010af6 <__aeabi_dsub+0x9a>
10010d0a:	0028      	movs	r0, r5
10010d0c:	f000 fae0 	bl	100112d0 <__clzsi2>
10010d10:	3020      	adds	r0, #32
10010d12:	0003      	movs	r3, r0
10010d14:	3b08      	subs	r3, #8
10010d16:	2b1f      	cmp	r3, #31
10010d18:	dc00      	bgt.n	10010d1c <__aeabi_dsub+0x2c0>
10010d1a:	e739      	b.n	10010b90 <__aeabi_dsub+0x134>
10010d1c:	002a      	movs	r2, r5
10010d1e:	3828      	subs	r0, #40	; 0x28
10010d20:	4082      	lsls	r2, r0
10010d22:	2500      	movs	r5, #0
10010d24:	429c      	cmp	r4, r3
10010d26:	dc00      	bgt.n	10010d2a <__aeabi_dsub+0x2ce>
10010d28:	e73e      	b.n	10010ba8 <__aeabi_dsub+0x14c>
10010d2a:	4f26      	ldr	r7, [pc, #152]	; (10010dc4 <__aeabi_dsub+0x368>)
10010d2c:	1ae4      	subs	r4, r4, r3
10010d2e:	4017      	ands	r7, r2
10010d30:	e6c0      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010d32:	4301      	orrs	r1, r0
10010d34:	1e48      	subs	r0, r1, #1
10010d36:	4181      	sbcs	r1, r0
10010d38:	2200      	movs	r2, #0
10010d3a:	b2c9      	uxtb	r1, r1
10010d3c:	e710      	b.n	10010b60 <__aeabi_dsub+0x104>
10010d3e:	2e00      	cmp	r6, #0
10010d40:	d000      	beq.n	10010d44 <__aeabi_dsub+0x2e8>
10010d42:	e0f1      	b.n	10010f28 <__aeabi_dsub+0x4cc>
10010d44:	1c62      	adds	r2, r4, #1
10010d46:	4694      	mov	ip, r2
10010d48:	0552      	lsls	r2, r2, #21
10010d4a:	0d52      	lsrs	r2, r2, #21
10010d4c:	2a01      	cmp	r2, #1
10010d4e:	dc00      	bgt.n	10010d52 <__aeabi_dsub+0x2f6>
10010d50:	e0a0      	b.n	10010e94 <__aeabi_dsub+0x438>
10010d52:	4a1b      	ldr	r2, [pc, #108]	; (10010dc0 <__aeabi_dsub+0x364>)
10010d54:	4594      	cmp	ip, r2
10010d56:	d100      	bne.n	10010d5a <__aeabi_dsub+0x2fe>
10010d58:	e0c5      	b.n	10010ee6 <__aeabi_dsub+0x48a>
10010d5a:	1869      	adds	r1, r5, r1
10010d5c:	42a9      	cmp	r1, r5
10010d5e:	4192      	sbcs	r2, r2
10010d60:	183f      	adds	r7, r7, r0
10010d62:	4252      	negs	r2, r2
10010d64:	19d2      	adds	r2, r2, r7
10010d66:	0849      	lsrs	r1, r1, #1
10010d68:	07d5      	lsls	r5, r2, #31
10010d6a:	430d      	orrs	r5, r1
10010d6c:	0857      	lsrs	r7, r2, #1
10010d6e:	4664      	mov	r4, ip
10010d70:	e6a0      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010d72:	4b13      	ldr	r3, [pc, #76]	; (10010dc0 <__aeabi_dsub+0x364>)
10010d74:	429c      	cmp	r4, r3
10010d76:	d000      	beq.n	10010d7a <__aeabi_dsub+0x31e>
10010d78:	e6d9      	b.n	10010b2e <__aeabi_dsub+0xd2>
10010d7a:	e69b      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010d7c:	0011      	movs	r1, r2
10010d7e:	3c1f      	subs	r4, #31
10010d80:	40e1      	lsrs	r1, r4
10010d82:	000c      	movs	r4, r1
10010d84:	2b20      	cmp	r3, #32
10010d86:	d100      	bne.n	10010d8a <__aeabi_dsub+0x32e>
10010d88:	e080      	b.n	10010e8c <__aeabi_dsub+0x430>
10010d8a:	2140      	movs	r1, #64	; 0x40
10010d8c:	1acb      	subs	r3, r1, r3
10010d8e:	409a      	lsls	r2, r3
10010d90:	4315      	orrs	r5, r2
10010d92:	1e6a      	subs	r2, r5, #1
10010d94:	4195      	sbcs	r5, r2
10010d96:	2700      	movs	r7, #0
10010d98:	4325      	orrs	r5, r4
10010d9a:	2400      	movs	r4, #0
10010d9c:	e71f      	b.n	10010bde <__aeabi_dsub+0x182>
10010d9e:	4663      	mov	r3, ip
10010da0:	0002      	movs	r2, r0
10010da2:	3b20      	subs	r3, #32
10010da4:	40da      	lsrs	r2, r3
10010da6:	4663      	mov	r3, ip
10010da8:	2b20      	cmp	r3, #32
10010daa:	d071      	beq.n	10010e90 <__aeabi_dsub+0x434>
10010dac:	2340      	movs	r3, #64	; 0x40
10010dae:	4666      	mov	r6, ip
10010db0:	1b9b      	subs	r3, r3, r6
10010db2:	4098      	lsls	r0, r3
10010db4:	4301      	orrs	r1, r0
10010db6:	1e48      	subs	r0, r1, #1
10010db8:	4181      	sbcs	r1, r0
10010dba:	4311      	orrs	r1, r2
10010dbc:	2200      	movs	r2, #0
10010dbe:	e6cf      	b.n	10010b60 <__aeabi_dsub+0x104>
10010dc0:	000007ff 	.word	0x000007ff
10010dc4:	ff7fffff 	.word	0xff7fffff
10010dc8:	800fffff 	.word	0x800fffff
10010dcc:	2c00      	cmp	r4, #0
10010dce:	d048      	beq.n	10010e62 <__aeabi_dsub+0x406>
10010dd0:	4cca      	ldr	r4, [pc, #808]	; (100110fc <__aeabi_dsub+0x6a0>)
10010dd2:	42a2      	cmp	r2, r4
10010dd4:	d100      	bne.n	10010dd8 <__aeabi_dsub+0x37c>
10010dd6:	e0a2      	b.n	10010f1e <__aeabi_dsub+0x4c2>
10010dd8:	4274      	negs	r4, r6
10010dda:	46a1      	mov	r9, r4
10010ddc:	2480      	movs	r4, #128	; 0x80
10010dde:	0424      	lsls	r4, r4, #16
10010de0:	4327      	orrs	r7, r4
10010de2:	464c      	mov	r4, r9
10010de4:	2c38      	cmp	r4, #56	; 0x38
10010de6:	dd00      	ble.n	10010dea <__aeabi_dsub+0x38e>
10010de8:	e0db      	b.n	10010fa2 <__aeabi_dsub+0x546>
10010dea:	2c1f      	cmp	r4, #31
10010dec:	dd00      	ble.n	10010df0 <__aeabi_dsub+0x394>
10010dee:	e144      	b.n	1001107a <__aeabi_dsub+0x61e>
10010df0:	464e      	mov	r6, r9
10010df2:	2420      	movs	r4, #32
10010df4:	1ba4      	subs	r4, r4, r6
10010df6:	003e      	movs	r6, r7
10010df8:	40a6      	lsls	r6, r4
10010dfa:	46a2      	mov	sl, r4
10010dfc:	46b0      	mov	r8, r6
10010dfe:	464c      	mov	r4, r9
10010e00:	002e      	movs	r6, r5
10010e02:	40e6      	lsrs	r6, r4
10010e04:	46b4      	mov	ip, r6
10010e06:	4646      	mov	r6, r8
10010e08:	4664      	mov	r4, ip
10010e0a:	4326      	orrs	r6, r4
10010e0c:	4654      	mov	r4, sl
10010e0e:	40a5      	lsls	r5, r4
10010e10:	1e6c      	subs	r4, r5, #1
10010e12:	41a5      	sbcs	r5, r4
10010e14:	0034      	movs	r4, r6
10010e16:	432c      	orrs	r4, r5
10010e18:	464d      	mov	r5, r9
10010e1a:	40ef      	lsrs	r7, r5
10010e1c:	1b0d      	subs	r5, r1, r4
10010e1e:	e028      	b.n	10010e72 <__aeabi_dsub+0x416>
10010e20:	464a      	mov	r2, r9
10010e22:	4643      	mov	r3, r8
10010e24:	464d      	mov	r5, r9
10010e26:	431a      	orrs	r2, r3
10010e28:	d000      	beq.n	10010e2c <__aeabi_dsub+0x3d0>
10010e2a:	e6a5      	b.n	10010b78 <__aeabi_dsub+0x11c>
10010e2c:	2300      	movs	r3, #0
10010e2e:	2400      	movs	r4, #0
10010e30:	2500      	movs	r5, #0
10010e32:	e6de      	b.n	10010bf2 <__aeabi_dsub+0x196>
10010e34:	2a1f      	cmp	r2, #31
10010e36:	dc5a      	bgt.n	10010eee <__aeabi_dsub+0x492>
10010e38:	4666      	mov	r6, ip
10010e3a:	2220      	movs	r2, #32
10010e3c:	1b92      	subs	r2, r2, r6
10010e3e:	0006      	movs	r6, r0
10010e40:	4096      	lsls	r6, r2
10010e42:	4691      	mov	r9, r2
10010e44:	46b0      	mov	r8, r6
10010e46:	4662      	mov	r2, ip
10010e48:	000e      	movs	r6, r1
10010e4a:	40d6      	lsrs	r6, r2
10010e4c:	4642      	mov	r2, r8
10010e4e:	4316      	orrs	r6, r2
10010e50:	464a      	mov	r2, r9
10010e52:	4091      	lsls	r1, r2
10010e54:	1e4a      	subs	r2, r1, #1
10010e56:	4191      	sbcs	r1, r2
10010e58:	0002      	movs	r2, r0
10010e5a:	4660      	mov	r0, ip
10010e5c:	4331      	orrs	r1, r6
10010e5e:	40c2      	lsrs	r2, r0
10010e60:	e6e4      	b.n	10010c2c <__aeabi_dsub+0x1d0>
10010e62:	003c      	movs	r4, r7
10010e64:	432c      	orrs	r4, r5
10010e66:	d05a      	beq.n	10010f1e <__aeabi_dsub+0x4c2>
10010e68:	43f4      	mvns	r4, r6
10010e6a:	46a1      	mov	r9, r4
10010e6c:	2c00      	cmp	r4, #0
10010e6e:	d152      	bne.n	10010f16 <__aeabi_dsub+0x4ba>
10010e70:	1b4d      	subs	r5, r1, r5
10010e72:	42a9      	cmp	r1, r5
10010e74:	4189      	sbcs	r1, r1
10010e76:	1bc7      	subs	r7, r0, r7
10010e78:	4249      	negs	r1, r1
10010e7a:	1a7f      	subs	r7, r7, r1
10010e7c:	0014      	movs	r4, r2
10010e7e:	469a      	mov	sl, r3
10010e80:	e675      	b.n	10010b6e <__aeabi_dsub+0x112>
10010e82:	4a9e      	ldr	r2, [pc, #632]	; (100110fc <__aeabi_dsub+0x6a0>)
10010e84:	4294      	cmp	r4, r2
10010e86:	d000      	beq.n	10010e8a <__aeabi_dsub+0x42e>
10010e88:	e6c7      	b.n	10010c1a <__aeabi_dsub+0x1be>
10010e8a:	e613      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010e8c:	2200      	movs	r2, #0
10010e8e:	e77f      	b.n	10010d90 <__aeabi_dsub+0x334>
10010e90:	2000      	movs	r0, #0
10010e92:	e78f      	b.n	10010db4 <__aeabi_dsub+0x358>
10010e94:	2c00      	cmp	r4, #0
10010e96:	d000      	beq.n	10010e9a <__aeabi_dsub+0x43e>
10010e98:	e0c8      	b.n	1001102c <__aeabi_dsub+0x5d0>
10010e9a:	003b      	movs	r3, r7
10010e9c:	432b      	orrs	r3, r5
10010e9e:	d100      	bne.n	10010ea2 <__aeabi_dsub+0x446>
10010ea0:	e10f      	b.n	100110c2 <__aeabi_dsub+0x666>
10010ea2:	0003      	movs	r3, r0
10010ea4:	430b      	orrs	r3, r1
10010ea6:	d100      	bne.n	10010eaa <__aeabi_dsub+0x44e>
10010ea8:	e604      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010eaa:	1869      	adds	r1, r5, r1
10010eac:	42a9      	cmp	r1, r5
10010eae:	419b      	sbcs	r3, r3
10010eb0:	183f      	adds	r7, r7, r0
10010eb2:	425b      	negs	r3, r3
10010eb4:	19df      	adds	r7, r3, r7
10010eb6:	023b      	lsls	r3, r7, #8
10010eb8:	d400      	bmi.n	10010ebc <__aeabi_dsub+0x460>
10010eba:	e11a      	b.n	100110f2 <__aeabi_dsub+0x696>
10010ebc:	4b90      	ldr	r3, [pc, #576]	; (10011100 <__aeabi_dsub+0x6a4>)
10010ebe:	000d      	movs	r5, r1
10010ec0:	401f      	ands	r7, r3
10010ec2:	4664      	mov	r4, ip
10010ec4:	e5f6      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010ec6:	469a      	mov	sl, r3
10010ec8:	e689      	b.n	10010bde <__aeabi_dsub+0x182>
10010eca:	003a      	movs	r2, r7
10010ecc:	432a      	orrs	r2, r5
10010ece:	2c00      	cmp	r4, #0
10010ed0:	d15c      	bne.n	10010f8c <__aeabi_dsub+0x530>
10010ed2:	2a00      	cmp	r2, #0
10010ed4:	d175      	bne.n	10010fc2 <__aeabi_dsub+0x566>
10010ed6:	0002      	movs	r2, r0
10010ed8:	430a      	orrs	r2, r1
10010eda:	d100      	bne.n	10010ede <__aeabi_dsub+0x482>
10010edc:	e0ca      	b.n	10011074 <__aeabi_dsub+0x618>
10010ede:	0007      	movs	r7, r0
10010ee0:	000d      	movs	r5, r1
10010ee2:	469a      	mov	sl, r3
10010ee4:	e5e6      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010ee6:	4664      	mov	r4, ip
10010ee8:	2200      	movs	r2, #0
10010eea:	2500      	movs	r5, #0
10010eec:	e681      	b.n	10010bf2 <__aeabi_dsub+0x196>
10010eee:	4662      	mov	r2, ip
10010ef0:	0006      	movs	r6, r0
10010ef2:	3a20      	subs	r2, #32
10010ef4:	40d6      	lsrs	r6, r2
10010ef6:	4662      	mov	r2, ip
10010ef8:	46b0      	mov	r8, r6
10010efa:	2a20      	cmp	r2, #32
10010efc:	d100      	bne.n	10010f00 <__aeabi_dsub+0x4a4>
10010efe:	e0b7      	b.n	10011070 <__aeabi_dsub+0x614>
10010f00:	2240      	movs	r2, #64	; 0x40
10010f02:	4666      	mov	r6, ip
10010f04:	1b92      	subs	r2, r2, r6
10010f06:	4090      	lsls	r0, r2
10010f08:	4301      	orrs	r1, r0
10010f0a:	4642      	mov	r2, r8
10010f0c:	1e48      	subs	r0, r1, #1
10010f0e:	4181      	sbcs	r1, r0
10010f10:	4311      	orrs	r1, r2
10010f12:	2200      	movs	r2, #0
10010f14:	e68a      	b.n	10010c2c <__aeabi_dsub+0x1d0>
10010f16:	4c79      	ldr	r4, [pc, #484]	; (100110fc <__aeabi_dsub+0x6a0>)
10010f18:	42a2      	cmp	r2, r4
10010f1a:	d000      	beq.n	10010f1e <__aeabi_dsub+0x4c2>
10010f1c:	e761      	b.n	10010de2 <__aeabi_dsub+0x386>
10010f1e:	0007      	movs	r7, r0
10010f20:	000d      	movs	r5, r1
10010f22:	0014      	movs	r4, r2
10010f24:	469a      	mov	sl, r3
10010f26:	e5c5      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010f28:	2c00      	cmp	r4, #0
10010f2a:	d141      	bne.n	10010fb0 <__aeabi_dsub+0x554>
10010f2c:	003c      	movs	r4, r7
10010f2e:	432c      	orrs	r4, r5
10010f30:	d078      	beq.n	10011024 <__aeabi_dsub+0x5c8>
10010f32:	43f4      	mvns	r4, r6
10010f34:	46a1      	mov	r9, r4
10010f36:	2c00      	cmp	r4, #0
10010f38:	d020      	beq.n	10010f7c <__aeabi_dsub+0x520>
10010f3a:	4c70      	ldr	r4, [pc, #448]	; (100110fc <__aeabi_dsub+0x6a0>)
10010f3c:	42a2      	cmp	r2, r4
10010f3e:	d071      	beq.n	10011024 <__aeabi_dsub+0x5c8>
10010f40:	464c      	mov	r4, r9
10010f42:	2c38      	cmp	r4, #56	; 0x38
10010f44:	dd00      	ble.n	10010f48 <__aeabi_dsub+0x4ec>
10010f46:	e0b2      	b.n	100110ae <__aeabi_dsub+0x652>
10010f48:	2c1f      	cmp	r4, #31
10010f4a:	dd00      	ble.n	10010f4e <__aeabi_dsub+0x4f2>
10010f4c:	e0bc      	b.n	100110c8 <__aeabi_dsub+0x66c>
10010f4e:	2620      	movs	r6, #32
10010f50:	1b34      	subs	r4, r6, r4
10010f52:	46a2      	mov	sl, r4
10010f54:	003c      	movs	r4, r7
10010f56:	4656      	mov	r6, sl
10010f58:	40b4      	lsls	r4, r6
10010f5a:	464e      	mov	r6, r9
10010f5c:	46a0      	mov	r8, r4
10010f5e:	002c      	movs	r4, r5
10010f60:	40f4      	lsrs	r4, r6
10010f62:	46a4      	mov	ip, r4
10010f64:	4644      	mov	r4, r8
10010f66:	4666      	mov	r6, ip
10010f68:	4334      	orrs	r4, r6
10010f6a:	46a4      	mov	ip, r4
10010f6c:	4654      	mov	r4, sl
10010f6e:	40a5      	lsls	r5, r4
10010f70:	4664      	mov	r4, ip
10010f72:	1e6e      	subs	r6, r5, #1
10010f74:	41b5      	sbcs	r5, r6
10010f76:	4325      	orrs	r5, r4
10010f78:	464c      	mov	r4, r9
10010f7a:	40e7      	lsrs	r7, r4
10010f7c:	186d      	adds	r5, r5, r1
10010f7e:	428d      	cmp	r5, r1
10010f80:	4189      	sbcs	r1, r1
10010f82:	183f      	adds	r7, r7, r0
10010f84:	4249      	negs	r1, r1
10010f86:	19cf      	adds	r7, r1, r7
10010f88:	0014      	movs	r4, r2
10010f8a:	e656      	b.n	10010c3a <__aeabi_dsub+0x1de>
10010f8c:	2a00      	cmp	r2, #0
10010f8e:	d12f      	bne.n	10010ff0 <__aeabi_dsub+0x594>
10010f90:	0002      	movs	r2, r0
10010f92:	430a      	orrs	r2, r1
10010f94:	d100      	bne.n	10010f98 <__aeabi_dsub+0x53c>
10010f96:	e084      	b.n	100110a2 <__aeabi_dsub+0x646>
10010f98:	0007      	movs	r7, r0
10010f9a:	000d      	movs	r5, r1
10010f9c:	469a      	mov	sl, r3
10010f9e:	4c57      	ldr	r4, [pc, #348]	; (100110fc <__aeabi_dsub+0x6a0>)
10010fa0:	e588      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010fa2:	433d      	orrs	r5, r7
10010fa4:	1e6f      	subs	r7, r5, #1
10010fa6:	41bd      	sbcs	r5, r7
10010fa8:	b2ec      	uxtb	r4, r5
10010faa:	2700      	movs	r7, #0
10010fac:	1b0d      	subs	r5, r1, r4
10010fae:	e760      	b.n	10010e72 <__aeabi_dsub+0x416>
10010fb0:	4c52      	ldr	r4, [pc, #328]	; (100110fc <__aeabi_dsub+0x6a0>)
10010fb2:	42a2      	cmp	r2, r4
10010fb4:	d036      	beq.n	10011024 <__aeabi_dsub+0x5c8>
10010fb6:	4274      	negs	r4, r6
10010fb8:	2680      	movs	r6, #128	; 0x80
10010fba:	0436      	lsls	r6, r6, #16
10010fbc:	46a1      	mov	r9, r4
10010fbe:	4337      	orrs	r7, r6
10010fc0:	e7be      	b.n	10010f40 <__aeabi_dsub+0x4e4>
10010fc2:	0002      	movs	r2, r0
10010fc4:	430a      	orrs	r2, r1
10010fc6:	d100      	bne.n	10010fca <__aeabi_dsub+0x56e>
10010fc8:	e574      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010fca:	1a6a      	subs	r2, r5, r1
10010fcc:	4690      	mov	r8, r2
10010fce:	4545      	cmp	r5, r8
10010fd0:	41b6      	sbcs	r6, r6
10010fd2:	1a3a      	subs	r2, r7, r0
10010fd4:	4276      	negs	r6, r6
10010fd6:	1b92      	subs	r2, r2, r6
10010fd8:	4694      	mov	ip, r2
10010fda:	0212      	lsls	r2, r2, #8
10010fdc:	d400      	bmi.n	10010fe0 <__aeabi_dsub+0x584>
10010fde:	e5f7      	b.n	10010bd0 <__aeabi_dsub+0x174>
10010fe0:	1b4d      	subs	r5, r1, r5
10010fe2:	42a9      	cmp	r1, r5
10010fe4:	4189      	sbcs	r1, r1
10010fe6:	1bc7      	subs	r7, r0, r7
10010fe8:	4249      	negs	r1, r1
10010fea:	1a7f      	subs	r7, r7, r1
10010fec:	469a      	mov	sl, r3
10010fee:	e561      	b.n	10010ab4 <__aeabi_dsub+0x58>
10010ff0:	0002      	movs	r2, r0
10010ff2:	430a      	orrs	r2, r1
10010ff4:	d03a      	beq.n	1001106c <__aeabi_dsub+0x610>
10010ff6:	08ed      	lsrs	r5, r5, #3
10010ff8:	077c      	lsls	r4, r7, #29
10010ffa:	432c      	orrs	r4, r5
10010ffc:	2580      	movs	r5, #128	; 0x80
10010ffe:	08fa      	lsrs	r2, r7, #3
10011000:	032d      	lsls	r5, r5, #12
10011002:	422a      	tst	r2, r5
10011004:	d008      	beq.n	10011018 <__aeabi_dsub+0x5bc>
10011006:	08c7      	lsrs	r7, r0, #3
10011008:	422f      	tst	r7, r5
1001100a:	d105      	bne.n	10011018 <__aeabi_dsub+0x5bc>
1001100c:	0745      	lsls	r5, r0, #29
1001100e:	002c      	movs	r4, r5
10011010:	003a      	movs	r2, r7
10011012:	469a      	mov	sl, r3
10011014:	08c9      	lsrs	r1, r1, #3
10011016:	430c      	orrs	r4, r1
10011018:	0f67      	lsrs	r7, r4, #29
1001101a:	00d2      	lsls	r2, r2, #3
1001101c:	00e5      	lsls	r5, r4, #3
1001101e:	4317      	orrs	r7, r2
10011020:	4c36      	ldr	r4, [pc, #216]	; (100110fc <__aeabi_dsub+0x6a0>)
10011022:	e547      	b.n	10010ab4 <__aeabi_dsub+0x58>
10011024:	0007      	movs	r7, r0
10011026:	000d      	movs	r5, r1
10011028:	0014      	movs	r4, r2
1001102a:	e543      	b.n	10010ab4 <__aeabi_dsub+0x58>
1001102c:	003a      	movs	r2, r7
1001102e:	432a      	orrs	r2, r5
10011030:	d043      	beq.n	100110ba <__aeabi_dsub+0x65e>
10011032:	0002      	movs	r2, r0
10011034:	430a      	orrs	r2, r1
10011036:	d019      	beq.n	1001106c <__aeabi_dsub+0x610>
10011038:	08ed      	lsrs	r5, r5, #3
1001103a:	077c      	lsls	r4, r7, #29
1001103c:	432c      	orrs	r4, r5
1001103e:	2580      	movs	r5, #128	; 0x80
10011040:	08fa      	lsrs	r2, r7, #3
10011042:	032d      	lsls	r5, r5, #12
10011044:	422a      	tst	r2, r5
10011046:	d007      	beq.n	10011058 <__aeabi_dsub+0x5fc>
10011048:	08c6      	lsrs	r6, r0, #3
1001104a:	422e      	tst	r6, r5
1001104c:	d104      	bne.n	10011058 <__aeabi_dsub+0x5fc>
1001104e:	0747      	lsls	r7, r0, #29
10011050:	003c      	movs	r4, r7
10011052:	0032      	movs	r2, r6
10011054:	08c9      	lsrs	r1, r1, #3
10011056:	430c      	orrs	r4, r1
10011058:	00d7      	lsls	r7, r2, #3
1001105a:	0f62      	lsrs	r2, r4, #29
1001105c:	00e5      	lsls	r5, r4, #3
1001105e:	4317      	orrs	r7, r2
10011060:	469a      	mov	sl, r3
10011062:	4c26      	ldr	r4, [pc, #152]	; (100110fc <__aeabi_dsub+0x6a0>)
10011064:	e526      	b.n	10010ab4 <__aeabi_dsub+0x58>
10011066:	2200      	movs	r2, #0
10011068:	2500      	movs	r5, #0
1001106a:	e544      	b.n	10010af6 <__aeabi_dsub+0x9a>
1001106c:	4c23      	ldr	r4, [pc, #140]	; (100110fc <__aeabi_dsub+0x6a0>)
1001106e:	e521      	b.n	10010ab4 <__aeabi_dsub+0x58>
10011070:	2000      	movs	r0, #0
10011072:	e749      	b.n	10010f08 <__aeabi_dsub+0x4ac>
10011074:	2300      	movs	r3, #0
10011076:	2500      	movs	r5, #0
10011078:	e5bb      	b.n	10010bf2 <__aeabi_dsub+0x196>
1001107a:	464c      	mov	r4, r9
1001107c:	003e      	movs	r6, r7
1001107e:	3c20      	subs	r4, #32
10011080:	40e6      	lsrs	r6, r4
10011082:	464c      	mov	r4, r9
10011084:	46b4      	mov	ip, r6
10011086:	2c20      	cmp	r4, #32
10011088:	d031      	beq.n	100110ee <__aeabi_dsub+0x692>
1001108a:	2440      	movs	r4, #64	; 0x40
1001108c:	464e      	mov	r6, r9
1001108e:	1ba6      	subs	r6, r4, r6
10011090:	40b7      	lsls	r7, r6
10011092:	433d      	orrs	r5, r7
10011094:	1e6c      	subs	r4, r5, #1
10011096:	41a5      	sbcs	r5, r4
10011098:	4664      	mov	r4, ip
1001109a:	432c      	orrs	r4, r5
1001109c:	2700      	movs	r7, #0
1001109e:	1b0d      	subs	r5, r1, r4
100110a0:	e6e7      	b.n	10010e72 <__aeabi_dsub+0x416>
100110a2:	2280      	movs	r2, #128	; 0x80
100110a4:	2300      	movs	r3, #0
100110a6:	0312      	lsls	r2, r2, #12
100110a8:	4c14      	ldr	r4, [pc, #80]	; (100110fc <__aeabi_dsub+0x6a0>)
100110aa:	2500      	movs	r5, #0
100110ac:	e5a1      	b.n	10010bf2 <__aeabi_dsub+0x196>
100110ae:	433d      	orrs	r5, r7
100110b0:	1e6f      	subs	r7, r5, #1
100110b2:	41bd      	sbcs	r5, r7
100110b4:	2700      	movs	r7, #0
100110b6:	b2ed      	uxtb	r5, r5
100110b8:	e760      	b.n	10010f7c <__aeabi_dsub+0x520>
100110ba:	0007      	movs	r7, r0
100110bc:	000d      	movs	r5, r1
100110be:	4c0f      	ldr	r4, [pc, #60]	; (100110fc <__aeabi_dsub+0x6a0>)
100110c0:	e4f8      	b.n	10010ab4 <__aeabi_dsub+0x58>
100110c2:	0007      	movs	r7, r0
100110c4:	000d      	movs	r5, r1
100110c6:	e4f5      	b.n	10010ab4 <__aeabi_dsub+0x58>
100110c8:	464e      	mov	r6, r9
100110ca:	003c      	movs	r4, r7
100110cc:	3e20      	subs	r6, #32
100110ce:	40f4      	lsrs	r4, r6
100110d0:	46a0      	mov	r8, r4
100110d2:	464c      	mov	r4, r9
100110d4:	2c20      	cmp	r4, #32
100110d6:	d00e      	beq.n	100110f6 <__aeabi_dsub+0x69a>
100110d8:	2440      	movs	r4, #64	; 0x40
100110da:	464e      	mov	r6, r9
100110dc:	1ba4      	subs	r4, r4, r6
100110de:	40a7      	lsls	r7, r4
100110e0:	433d      	orrs	r5, r7
100110e2:	1e6f      	subs	r7, r5, #1
100110e4:	41bd      	sbcs	r5, r7
100110e6:	4644      	mov	r4, r8
100110e8:	2700      	movs	r7, #0
100110ea:	4325      	orrs	r5, r4
100110ec:	e746      	b.n	10010f7c <__aeabi_dsub+0x520>
100110ee:	2700      	movs	r7, #0
100110f0:	e7cf      	b.n	10011092 <__aeabi_dsub+0x636>
100110f2:	000d      	movs	r5, r1
100110f4:	e573      	b.n	10010bde <__aeabi_dsub+0x182>
100110f6:	2700      	movs	r7, #0
100110f8:	e7f2      	b.n	100110e0 <__aeabi_dsub+0x684>
100110fa:	46c0      	nop			; (mov r8, r8)
100110fc:	000007ff 	.word	0x000007ff
10011100:	ff7fffff 	.word	0xff7fffff

10011104 <__aeabi_d2iz>:
10011104:	030b      	lsls	r3, r1, #12
10011106:	b530      	push	{r4, r5, lr}
10011108:	4d13      	ldr	r5, [pc, #76]	; (10011158 <__aeabi_d2iz+0x54>)
1001110a:	0b1a      	lsrs	r2, r3, #12
1001110c:	004b      	lsls	r3, r1, #1
1001110e:	0d5b      	lsrs	r3, r3, #21
10011110:	0fc9      	lsrs	r1, r1, #31
10011112:	2400      	movs	r4, #0
10011114:	42ab      	cmp	r3, r5
10011116:	dd11      	ble.n	1001113c <__aeabi_d2iz+0x38>
10011118:	4c10      	ldr	r4, [pc, #64]	; (1001115c <__aeabi_d2iz+0x58>)
1001111a:	42a3      	cmp	r3, r4
1001111c:	dc10      	bgt.n	10011140 <__aeabi_d2iz+0x3c>
1001111e:	2480      	movs	r4, #128	; 0x80
10011120:	0364      	lsls	r4, r4, #13
10011122:	4322      	orrs	r2, r4
10011124:	4c0e      	ldr	r4, [pc, #56]	; (10011160 <__aeabi_d2iz+0x5c>)
10011126:	1ae4      	subs	r4, r4, r3
10011128:	2c1f      	cmp	r4, #31
1001112a:	dd0c      	ble.n	10011146 <__aeabi_d2iz+0x42>
1001112c:	480d      	ldr	r0, [pc, #52]	; (10011164 <__aeabi_d2iz+0x60>)
1001112e:	1ac3      	subs	r3, r0, r3
10011130:	40da      	lsrs	r2, r3
10011132:	0013      	movs	r3, r2
10011134:	425c      	negs	r4, r3
10011136:	2900      	cmp	r1, #0
10011138:	d100      	bne.n	1001113c <__aeabi_d2iz+0x38>
1001113a:	001c      	movs	r4, r3
1001113c:	0020      	movs	r0, r4
1001113e:	bd30      	pop	{r4, r5, pc}
10011140:	4b09      	ldr	r3, [pc, #36]	; (10011168 <__aeabi_d2iz+0x64>)
10011142:	18cc      	adds	r4, r1, r3
10011144:	e7fa      	b.n	1001113c <__aeabi_d2iz+0x38>
10011146:	40e0      	lsrs	r0, r4
10011148:	4c08      	ldr	r4, [pc, #32]	; (1001116c <__aeabi_d2iz+0x68>)
1001114a:	46a4      	mov	ip, r4
1001114c:	4463      	add	r3, ip
1001114e:	409a      	lsls	r2, r3
10011150:	0013      	movs	r3, r2
10011152:	4303      	orrs	r3, r0
10011154:	e7ee      	b.n	10011134 <__aeabi_d2iz+0x30>
10011156:	46c0      	nop			; (mov r8, r8)
10011158:	000003fe 	.word	0x000003fe
1001115c:	0000041d 	.word	0x0000041d
10011160:	00000433 	.word	0x00000433
10011164:	00000413 	.word	0x00000413
10011168:	7fffffff 	.word	0x7fffffff
1001116c:	fffffbed 	.word	0xfffffbed

10011170 <__aeabi_ui2d>:
10011170:	b570      	push	{r4, r5, r6, lr}
10011172:	1e05      	subs	r5, r0, #0
10011174:	d028      	beq.n	100111c8 <__aeabi_ui2d+0x58>
10011176:	f000 f8ab 	bl	100112d0 <__clzsi2>
1001117a:	4b15      	ldr	r3, [pc, #84]	; (100111d0 <__aeabi_ui2d+0x60>)
1001117c:	4a15      	ldr	r2, [pc, #84]	; (100111d4 <__aeabi_ui2d+0x64>)
1001117e:	1a1b      	subs	r3, r3, r0
10011180:	1ad2      	subs	r2, r2, r3
10011182:	2a1f      	cmp	r2, #31
10011184:	dd16      	ble.n	100111b4 <__aeabi_ui2d+0x44>
10011186:	002c      	movs	r4, r5
10011188:	4a13      	ldr	r2, [pc, #76]	; (100111d8 <__aeabi_ui2d+0x68>)
1001118a:	2500      	movs	r5, #0
1001118c:	1ad2      	subs	r2, r2, r3
1001118e:	4094      	lsls	r4, r2
10011190:	055a      	lsls	r2, r3, #21
10011192:	0324      	lsls	r4, r4, #12
10011194:	0b24      	lsrs	r4, r4, #12
10011196:	0d52      	lsrs	r2, r2, #21
10011198:	2100      	movs	r1, #0
1001119a:	0324      	lsls	r4, r4, #12
1001119c:	0d0b      	lsrs	r3, r1, #20
1001119e:	0b24      	lsrs	r4, r4, #12
100111a0:	051b      	lsls	r3, r3, #20
100111a2:	4323      	orrs	r3, r4
100111a4:	4c0d      	ldr	r4, [pc, #52]	; (100111dc <__aeabi_ui2d+0x6c>)
100111a6:	0512      	lsls	r2, r2, #20
100111a8:	4023      	ands	r3, r4
100111aa:	4313      	orrs	r3, r2
100111ac:	005b      	lsls	r3, r3, #1
100111ae:	0028      	movs	r0, r5
100111b0:	0859      	lsrs	r1, r3, #1
100111b2:	bd70      	pop	{r4, r5, r6, pc}
100111b4:	210b      	movs	r1, #11
100111b6:	002c      	movs	r4, r5
100111b8:	1a08      	subs	r0, r1, r0
100111ba:	40c4      	lsrs	r4, r0
100111bc:	4095      	lsls	r5, r2
100111be:	0324      	lsls	r4, r4, #12
100111c0:	055a      	lsls	r2, r3, #21
100111c2:	0b24      	lsrs	r4, r4, #12
100111c4:	0d52      	lsrs	r2, r2, #21
100111c6:	e7e7      	b.n	10011198 <__aeabi_ui2d+0x28>
100111c8:	2200      	movs	r2, #0
100111ca:	2400      	movs	r4, #0
100111cc:	e7e4      	b.n	10011198 <__aeabi_ui2d+0x28>
100111ce:	46c0      	nop			; (mov r8, r8)
100111d0:	0000041e 	.word	0x0000041e
100111d4:	00000433 	.word	0x00000433
100111d8:	00000413 	.word	0x00000413
100111dc:	800fffff 	.word	0x800fffff

100111e0 <__aeabi_cdrcmple>:
100111e0:	4684      	mov	ip, r0
100111e2:	1c10      	adds	r0, r2, #0
100111e4:	4662      	mov	r2, ip
100111e6:	468c      	mov	ip, r1
100111e8:	1c19      	adds	r1, r3, #0
100111ea:	4663      	mov	r3, ip
100111ec:	e000      	b.n	100111f0 <__aeabi_cdcmpeq>
100111ee:	46c0      	nop			; (mov r8, r8)

100111f0 <__aeabi_cdcmpeq>:
100111f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100111f2:	f000 f9df 	bl	100115b4 <__ledf2>
100111f6:	2800      	cmp	r0, #0
100111f8:	d401      	bmi.n	100111fe <__aeabi_cdcmpeq+0xe>
100111fa:	2100      	movs	r1, #0
100111fc:	42c8      	cmn	r0, r1
100111fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10011200 <__aeabi_dcmpeq>:
10011200:	b510      	push	{r4, lr}
10011202:	f000 f933 	bl	1001146c <__eqdf2>
10011206:	4240      	negs	r0, r0
10011208:	3001      	adds	r0, #1
1001120a:	bd10      	pop	{r4, pc}

1001120c <__aeabi_dcmplt>:
1001120c:	b510      	push	{r4, lr}
1001120e:	f000 f9d1 	bl	100115b4 <__ledf2>
10011212:	2800      	cmp	r0, #0
10011214:	db01      	blt.n	1001121a <__aeabi_dcmplt+0xe>
10011216:	2000      	movs	r0, #0
10011218:	bd10      	pop	{r4, pc}
1001121a:	2001      	movs	r0, #1
1001121c:	bd10      	pop	{r4, pc}
1001121e:	46c0      	nop			; (mov r8, r8)

10011220 <__aeabi_dcmple>:
10011220:	b510      	push	{r4, lr}
10011222:	f000 f9c7 	bl	100115b4 <__ledf2>
10011226:	2800      	cmp	r0, #0
10011228:	dd01      	ble.n	1001122e <__aeabi_dcmple+0xe>
1001122a:	2000      	movs	r0, #0
1001122c:	bd10      	pop	{r4, pc}
1001122e:	2001      	movs	r0, #1
10011230:	bd10      	pop	{r4, pc}
10011232:	46c0      	nop			; (mov r8, r8)

10011234 <__aeabi_dcmpgt>:
10011234:	b510      	push	{r4, lr}
10011236:	f000 f959 	bl	100114ec <__gedf2>
1001123a:	2800      	cmp	r0, #0
1001123c:	dc01      	bgt.n	10011242 <__aeabi_dcmpgt+0xe>
1001123e:	2000      	movs	r0, #0
10011240:	bd10      	pop	{r4, pc}
10011242:	2001      	movs	r0, #1
10011244:	bd10      	pop	{r4, pc}
10011246:	46c0      	nop			; (mov r8, r8)

10011248 <__aeabi_dcmpge>:
10011248:	b510      	push	{r4, lr}
1001124a:	f000 f94f 	bl	100114ec <__gedf2>
1001124e:	2800      	cmp	r0, #0
10011250:	da01      	bge.n	10011256 <__aeabi_dcmpge+0xe>
10011252:	2000      	movs	r0, #0
10011254:	bd10      	pop	{r4, pc}
10011256:	2001      	movs	r0, #1
10011258:	bd10      	pop	{r4, pc}
1001125a:	46c0      	nop			; (mov r8, r8)

1001125c <__aeabi_cfrcmple>:
1001125c:	4684      	mov	ip, r0
1001125e:	1c08      	adds	r0, r1, #0
10011260:	4661      	mov	r1, ip
10011262:	e7ff      	b.n	10011264 <__aeabi_cfcmpeq>

10011264 <__aeabi_cfcmpeq>:
10011264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10011266:	f000 f8bd 	bl	100113e4 <__lesf2>
1001126a:	2800      	cmp	r0, #0
1001126c:	d401      	bmi.n	10011272 <__aeabi_cfcmpeq+0xe>
1001126e:	2100      	movs	r1, #0
10011270:	42c8      	cmn	r0, r1
10011272:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10011274 <__aeabi_fcmpeq>:
10011274:	b510      	push	{r4, lr}
10011276:	f000 f849 	bl	1001130c <__eqsf2>
1001127a:	4240      	negs	r0, r0
1001127c:	3001      	adds	r0, #1
1001127e:	bd10      	pop	{r4, pc}

10011280 <__aeabi_fcmplt>:
10011280:	b510      	push	{r4, lr}
10011282:	f000 f8af 	bl	100113e4 <__lesf2>
10011286:	2800      	cmp	r0, #0
10011288:	db01      	blt.n	1001128e <__aeabi_fcmplt+0xe>
1001128a:	2000      	movs	r0, #0
1001128c:	bd10      	pop	{r4, pc}
1001128e:	2001      	movs	r0, #1
10011290:	bd10      	pop	{r4, pc}
10011292:	46c0      	nop			; (mov r8, r8)

10011294 <__aeabi_fcmple>:
10011294:	b510      	push	{r4, lr}
10011296:	f000 f8a5 	bl	100113e4 <__lesf2>
1001129a:	2800      	cmp	r0, #0
1001129c:	dd01      	ble.n	100112a2 <__aeabi_fcmple+0xe>
1001129e:	2000      	movs	r0, #0
100112a0:	bd10      	pop	{r4, pc}
100112a2:	2001      	movs	r0, #1
100112a4:	bd10      	pop	{r4, pc}
100112a6:	46c0      	nop			; (mov r8, r8)

100112a8 <__aeabi_fcmpgt>:
100112a8:	b510      	push	{r4, lr}
100112aa:	f000 f857 	bl	1001135c <__gesf2>
100112ae:	2800      	cmp	r0, #0
100112b0:	dc01      	bgt.n	100112b6 <__aeabi_fcmpgt+0xe>
100112b2:	2000      	movs	r0, #0
100112b4:	bd10      	pop	{r4, pc}
100112b6:	2001      	movs	r0, #1
100112b8:	bd10      	pop	{r4, pc}
100112ba:	46c0      	nop			; (mov r8, r8)

100112bc <__aeabi_fcmpge>:
100112bc:	b510      	push	{r4, lr}
100112be:	f000 f84d 	bl	1001135c <__gesf2>
100112c2:	2800      	cmp	r0, #0
100112c4:	da01      	bge.n	100112ca <__aeabi_fcmpge+0xe>
100112c6:	2000      	movs	r0, #0
100112c8:	bd10      	pop	{r4, pc}
100112ca:	2001      	movs	r0, #1
100112cc:	bd10      	pop	{r4, pc}
100112ce:	46c0      	nop			; (mov r8, r8)

100112d0 <__clzsi2>:
100112d0:	211c      	movs	r1, #28
100112d2:	2301      	movs	r3, #1
100112d4:	041b      	lsls	r3, r3, #16
100112d6:	4298      	cmp	r0, r3
100112d8:	d301      	bcc.n	100112de <__clzsi2+0xe>
100112da:	0c00      	lsrs	r0, r0, #16
100112dc:	3910      	subs	r1, #16
100112de:	0a1b      	lsrs	r3, r3, #8
100112e0:	4298      	cmp	r0, r3
100112e2:	d301      	bcc.n	100112e8 <__clzsi2+0x18>
100112e4:	0a00      	lsrs	r0, r0, #8
100112e6:	3908      	subs	r1, #8
100112e8:	091b      	lsrs	r3, r3, #4
100112ea:	4298      	cmp	r0, r3
100112ec:	d301      	bcc.n	100112f2 <__clzsi2+0x22>
100112ee:	0900      	lsrs	r0, r0, #4
100112f0:	3904      	subs	r1, #4
100112f2:	a202      	add	r2, pc, #8	; (adr r2, 100112fc <__clzsi2+0x2c>)
100112f4:	5c10      	ldrb	r0, [r2, r0]
100112f6:	1840      	adds	r0, r0, r1
100112f8:	4770      	bx	lr
100112fa:	46c0      	nop			; (mov r8, r8)
100112fc:	02020304 	.word	0x02020304
10011300:	01010101 	.word	0x01010101
	...

1001130c <__eqsf2>:
1001130c:	0243      	lsls	r3, r0, #9
1001130e:	b570      	push	{r4, r5, r6, lr}
10011310:	0042      	lsls	r2, r0, #1
10011312:	004c      	lsls	r4, r1, #1
10011314:	0a5d      	lsrs	r5, r3, #9
10011316:	0fc3      	lsrs	r3, r0, #31
10011318:	0248      	lsls	r0, r1, #9
1001131a:	0e12      	lsrs	r2, r2, #24
1001131c:	0a46      	lsrs	r6, r0, #9
1001131e:	0e24      	lsrs	r4, r4, #24
10011320:	0fc9      	lsrs	r1, r1, #31
10011322:	2aff      	cmp	r2, #255	; 0xff
10011324:	d00f      	beq.n	10011346 <__eqsf2+0x3a>
10011326:	2cff      	cmp	r4, #255	; 0xff
10011328:	d011      	beq.n	1001134e <__eqsf2+0x42>
1001132a:	2001      	movs	r0, #1
1001132c:	42a2      	cmp	r2, r4
1001132e:	d000      	beq.n	10011332 <__eqsf2+0x26>
10011330:	bd70      	pop	{r4, r5, r6, pc}
10011332:	42b5      	cmp	r5, r6
10011334:	d1fc      	bne.n	10011330 <__eqsf2+0x24>
10011336:	428b      	cmp	r3, r1
10011338:	d00d      	beq.n	10011356 <__eqsf2+0x4a>
1001133a:	2a00      	cmp	r2, #0
1001133c:	d1f8      	bne.n	10011330 <__eqsf2+0x24>
1001133e:	0028      	movs	r0, r5
10011340:	1e43      	subs	r3, r0, #1
10011342:	4198      	sbcs	r0, r3
10011344:	e7f4      	b.n	10011330 <__eqsf2+0x24>
10011346:	2001      	movs	r0, #1
10011348:	2d00      	cmp	r5, #0
1001134a:	d1f1      	bne.n	10011330 <__eqsf2+0x24>
1001134c:	e7eb      	b.n	10011326 <__eqsf2+0x1a>
1001134e:	2001      	movs	r0, #1
10011350:	2e00      	cmp	r6, #0
10011352:	d1ed      	bne.n	10011330 <__eqsf2+0x24>
10011354:	e7e9      	b.n	1001132a <__eqsf2+0x1e>
10011356:	2000      	movs	r0, #0
10011358:	e7ea      	b.n	10011330 <__eqsf2+0x24>
1001135a:	46c0      	nop			; (mov r8, r8)

1001135c <__gesf2>:
1001135c:	0243      	lsls	r3, r0, #9
1001135e:	b5f0      	push	{r4, r5, r6, r7, lr}
10011360:	0042      	lsls	r2, r0, #1
10011362:	0a5d      	lsrs	r5, r3, #9
10011364:	0fc3      	lsrs	r3, r0, #31
10011366:	0248      	lsls	r0, r1, #9
10011368:	0a44      	lsrs	r4, r0, #9
1001136a:	0048      	lsls	r0, r1, #1
1001136c:	0e12      	lsrs	r2, r2, #24
1001136e:	0e00      	lsrs	r0, r0, #24
10011370:	0fc9      	lsrs	r1, r1, #31
10011372:	2aff      	cmp	r2, #255	; 0xff
10011374:	d01f      	beq.n	100113b6 <__gesf2+0x5a>
10011376:	28ff      	cmp	r0, #255	; 0xff
10011378:	d022      	beq.n	100113c0 <__gesf2+0x64>
1001137a:	2a00      	cmp	r2, #0
1001137c:	d109      	bne.n	10011392 <__gesf2+0x36>
1001137e:	426e      	negs	r6, r5
10011380:	416e      	adcs	r6, r5
10011382:	2800      	cmp	r0, #0
10011384:	d10f      	bne.n	100113a6 <__gesf2+0x4a>
10011386:	2c00      	cmp	r4, #0
10011388:	d10d      	bne.n	100113a6 <__gesf2+0x4a>
1001138a:	2000      	movs	r0, #0
1001138c:	2d00      	cmp	r5, #0
1001138e:	d009      	beq.n	100113a4 <__gesf2+0x48>
10011390:	e005      	b.n	1001139e <__gesf2+0x42>
10011392:	2800      	cmp	r0, #0
10011394:	d101      	bne.n	1001139a <__gesf2+0x3e>
10011396:	2c00      	cmp	r4, #0
10011398:	d001      	beq.n	1001139e <__gesf2+0x42>
1001139a:	428b      	cmp	r3, r1
1001139c:	d013      	beq.n	100113c6 <__gesf2+0x6a>
1001139e:	4258      	negs	r0, r3
100113a0:	2301      	movs	r3, #1
100113a2:	4318      	orrs	r0, r3
100113a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100113a6:	2e00      	cmp	r6, #0
100113a8:	d0f7      	beq.n	1001139a <__gesf2+0x3e>
100113aa:	4248      	negs	r0, r1
100113ac:	4141      	adcs	r1, r0
100113ae:	2001      	movs	r0, #1
100113b0:	4249      	negs	r1, r1
100113b2:	4308      	orrs	r0, r1
100113b4:	e7f6      	b.n	100113a4 <__gesf2+0x48>
100113b6:	2d00      	cmp	r5, #0
100113b8:	d0dd      	beq.n	10011376 <__gesf2+0x1a>
100113ba:	2002      	movs	r0, #2
100113bc:	4240      	negs	r0, r0
100113be:	e7f1      	b.n	100113a4 <__gesf2+0x48>
100113c0:	2c00      	cmp	r4, #0
100113c2:	d0da      	beq.n	1001137a <__gesf2+0x1e>
100113c4:	e7f9      	b.n	100113ba <__gesf2+0x5e>
100113c6:	4282      	cmp	r2, r0
100113c8:	dce9      	bgt.n	1001139e <__gesf2+0x42>
100113ca:	db04      	blt.n	100113d6 <__gesf2+0x7a>
100113cc:	42a5      	cmp	r5, r4
100113ce:	d8e6      	bhi.n	1001139e <__gesf2+0x42>
100113d0:	2000      	movs	r0, #0
100113d2:	42a5      	cmp	r5, r4
100113d4:	d2e6      	bcs.n	100113a4 <__gesf2+0x48>
100113d6:	4258      	negs	r0, r3
100113d8:	4143      	adcs	r3, r0
100113da:	2001      	movs	r0, #1
100113dc:	425b      	negs	r3, r3
100113de:	4318      	orrs	r0, r3
100113e0:	e7e0      	b.n	100113a4 <__gesf2+0x48>
100113e2:	46c0      	nop			; (mov r8, r8)

100113e4 <__lesf2>:
100113e4:	0243      	lsls	r3, r0, #9
100113e6:	b5f0      	push	{r4, r5, r6, r7, lr}
100113e8:	0042      	lsls	r2, r0, #1
100113ea:	004c      	lsls	r4, r1, #1
100113ec:	0a5e      	lsrs	r6, r3, #9
100113ee:	0fc3      	lsrs	r3, r0, #31
100113f0:	0248      	lsls	r0, r1, #9
100113f2:	0e12      	lsrs	r2, r2, #24
100113f4:	0a45      	lsrs	r5, r0, #9
100113f6:	0e24      	lsrs	r4, r4, #24
100113f8:	0fc9      	lsrs	r1, r1, #31
100113fa:	2aff      	cmp	r2, #255	; 0xff
100113fc:	d017      	beq.n	1001142e <__lesf2+0x4a>
100113fe:	2cff      	cmp	r4, #255	; 0xff
10011400:	d019      	beq.n	10011436 <__lesf2+0x52>
10011402:	2a00      	cmp	r2, #0
10011404:	d10b      	bne.n	1001141e <__lesf2+0x3a>
10011406:	4270      	negs	r0, r6
10011408:	4170      	adcs	r0, r6
1001140a:	2c00      	cmp	r4, #0
1001140c:	d017      	beq.n	1001143e <__lesf2+0x5a>
1001140e:	2800      	cmp	r0, #0
10011410:	d007      	beq.n	10011422 <__lesf2+0x3e>
10011412:	4248      	negs	r0, r1
10011414:	4141      	adcs	r1, r0
10011416:	2001      	movs	r0, #1
10011418:	4249      	negs	r1, r1
1001141a:	4308      	orrs	r0, r1
1001141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001141e:	2c00      	cmp	r4, #0
10011420:	d013      	beq.n	1001144a <__lesf2+0x66>
10011422:	428b      	cmp	r3, r1
10011424:	d014      	beq.n	10011450 <__lesf2+0x6c>
10011426:	4258      	negs	r0, r3
10011428:	2301      	movs	r3, #1
1001142a:	4318      	orrs	r0, r3
1001142c:	e7f6      	b.n	1001141c <__lesf2+0x38>
1001142e:	2002      	movs	r0, #2
10011430:	2e00      	cmp	r6, #0
10011432:	d1f3      	bne.n	1001141c <__lesf2+0x38>
10011434:	e7e3      	b.n	100113fe <__lesf2+0x1a>
10011436:	2002      	movs	r0, #2
10011438:	2d00      	cmp	r5, #0
1001143a:	d1ef      	bne.n	1001141c <__lesf2+0x38>
1001143c:	e7e1      	b.n	10011402 <__lesf2+0x1e>
1001143e:	2d00      	cmp	r5, #0
10011440:	d1e5      	bne.n	1001140e <__lesf2+0x2a>
10011442:	2000      	movs	r0, #0
10011444:	2e00      	cmp	r6, #0
10011446:	d0e9      	beq.n	1001141c <__lesf2+0x38>
10011448:	e7ed      	b.n	10011426 <__lesf2+0x42>
1001144a:	2d00      	cmp	r5, #0
1001144c:	d1e9      	bne.n	10011422 <__lesf2+0x3e>
1001144e:	e7ea      	b.n	10011426 <__lesf2+0x42>
10011450:	42a2      	cmp	r2, r4
10011452:	dce8      	bgt.n	10011426 <__lesf2+0x42>
10011454:	db04      	blt.n	10011460 <__lesf2+0x7c>
10011456:	42ae      	cmp	r6, r5
10011458:	d8e5      	bhi.n	10011426 <__lesf2+0x42>
1001145a:	2000      	movs	r0, #0
1001145c:	42ae      	cmp	r6, r5
1001145e:	d2dd      	bcs.n	1001141c <__lesf2+0x38>
10011460:	4258      	negs	r0, r3
10011462:	4143      	adcs	r3, r0
10011464:	2001      	movs	r0, #1
10011466:	425b      	negs	r3, r3
10011468:	4318      	orrs	r0, r3
1001146a:	e7d7      	b.n	1001141c <__lesf2+0x38>

1001146c <__eqdf2>:
1001146c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001146e:	465f      	mov	r7, fp
10011470:	4656      	mov	r6, sl
10011472:	464d      	mov	r5, r9
10011474:	4644      	mov	r4, r8
10011476:	b4f0      	push	{r4, r5, r6, r7}
10011478:	031f      	lsls	r7, r3, #12
1001147a:	005c      	lsls	r4, r3, #1
1001147c:	0fdb      	lsrs	r3, r3, #31
1001147e:	469a      	mov	sl, r3
10011480:	4b19      	ldr	r3, [pc, #100]	; (100114e8 <__eqdf2+0x7c>)
10011482:	030e      	lsls	r6, r1, #12
10011484:	004d      	lsls	r5, r1, #1
10011486:	0fc9      	lsrs	r1, r1, #31
10011488:	4680      	mov	r8, r0
1001148a:	0b36      	lsrs	r6, r6, #12
1001148c:	0d6d      	lsrs	r5, r5, #21
1001148e:	468b      	mov	fp, r1
10011490:	4691      	mov	r9, r2
10011492:	0b3f      	lsrs	r7, r7, #12
10011494:	0d64      	lsrs	r4, r4, #21
10011496:	429d      	cmp	r5, r3
10011498:	d019      	beq.n	100114ce <__eqdf2+0x62>
1001149a:	4b13      	ldr	r3, [pc, #76]	; (100114e8 <__eqdf2+0x7c>)
1001149c:	429c      	cmp	r4, r3
1001149e:	d01b      	beq.n	100114d8 <__eqdf2+0x6c>
100114a0:	2301      	movs	r3, #1
100114a2:	42a5      	cmp	r5, r4
100114a4:	d006      	beq.n	100114b4 <__eqdf2+0x48>
100114a6:	0018      	movs	r0, r3
100114a8:	bc3c      	pop	{r2, r3, r4, r5}
100114aa:	4690      	mov	r8, r2
100114ac:	4699      	mov	r9, r3
100114ae:	46a2      	mov	sl, r4
100114b0:	46ab      	mov	fp, r5
100114b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100114b4:	42be      	cmp	r6, r7
100114b6:	d1f6      	bne.n	100114a6 <__eqdf2+0x3a>
100114b8:	45c8      	cmp	r8, r9
100114ba:	d1f4      	bne.n	100114a6 <__eqdf2+0x3a>
100114bc:	45d3      	cmp	fp, sl
100114be:	d010      	beq.n	100114e2 <__eqdf2+0x76>
100114c0:	2d00      	cmp	r5, #0
100114c2:	d1f0      	bne.n	100114a6 <__eqdf2+0x3a>
100114c4:	4330      	orrs	r0, r6
100114c6:	0003      	movs	r3, r0
100114c8:	1e5a      	subs	r2, r3, #1
100114ca:	4193      	sbcs	r3, r2
100114cc:	e7eb      	b.n	100114a6 <__eqdf2+0x3a>
100114ce:	0031      	movs	r1, r6
100114d0:	2301      	movs	r3, #1
100114d2:	4301      	orrs	r1, r0
100114d4:	d1e7      	bne.n	100114a6 <__eqdf2+0x3a>
100114d6:	e7e0      	b.n	1001149a <__eqdf2+0x2e>
100114d8:	433a      	orrs	r2, r7
100114da:	2301      	movs	r3, #1
100114dc:	2a00      	cmp	r2, #0
100114de:	d1e2      	bne.n	100114a6 <__eqdf2+0x3a>
100114e0:	e7de      	b.n	100114a0 <__eqdf2+0x34>
100114e2:	2300      	movs	r3, #0
100114e4:	e7df      	b.n	100114a6 <__eqdf2+0x3a>
100114e6:	46c0      	nop			; (mov r8, r8)
100114e8:	000007ff 	.word	0x000007ff

100114ec <__gedf2>:
100114ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100114ee:	465f      	mov	r7, fp
100114f0:	4644      	mov	r4, r8
100114f2:	4656      	mov	r6, sl
100114f4:	464d      	mov	r5, r9
100114f6:	b4f0      	push	{r4, r5, r6, r7}
100114f8:	031f      	lsls	r7, r3, #12
100114fa:	0b3c      	lsrs	r4, r7, #12
100114fc:	4f2c      	ldr	r7, [pc, #176]	; (100115b0 <__gedf2+0xc4>)
100114fe:	030e      	lsls	r6, r1, #12
10011500:	004d      	lsls	r5, r1, #1
10011502:	46a3      	mov	fp, r4
10011504:	005c      	lsls	r4, r3, #1
10011506:	4684      	mov	ip, r0
10011508:	0b36      	lsrs	r6, r6, #12
1001150a:	0d6d      	lsrs	r5, r5, #21
1001150c:	0fc9      	lsrs	r1, r1, #31
1001150e:	4690      	mov	r8, r2
10011510:	0d64      	lsrs	r4, r4, #21
10011512:	0fdb      	lsrs	r3, r3, #31
10011514:	42bd      	cmp	r5, r7
10011516:	d02b      	beq.n	10011570 <__gedf2+0x84>
10011518:	4f25      	ldr	r7, [pc, #148]	; (100115b0 <__gedf2+0xc4>)
1001151a:	42bc      	cmp	r4, r7
1001151c:	d02e      	beq.n	1001157c <__gedf2+0x90>
1001151e:	2d00      	cmp	r5, #0
10011520:	d10e      	bne.n	10011540 <__gedf2+0x54>
10011522:	4330      	orrs	r0, r6
10011524:	0007      	movs	r7, r0
10011526:	4681      	mov	r9, r0
10011528:	4278      	negs	r0, r7
1001152a:	4178      	adcs	r0, r7
1001152c:	2c00      	cmp	r4, #0
1001152e:	d117      	bne.n	10011560 <__gedf2+0x74>
10011530:	465f      	mov	r7, fp
10011532:	433a      	orrs	r2, r7
10011534:	d114      	bne.n	10011560 <__gedf2+0x74>
10011536:	464b      	mov	r3, r9
10011538:	2000      	movs	r0, #0
1001153a:	2b00      	cmp	r3, #0
1001153c:	d00a      	beq.n	10011554 <__gedf2+0x68>
1001153e:	e006      	b.n	1001154e <__gedf2+0x62>
10011540:	2c00      	cmp	r4, #0
10011542:	d102      	bne.n	1001154a <__gedf2+0x5e>
10011544:	4658      	mov	r0, fp
10011546:	4302      	orrs	r2, r0
10011548:	d001      	beq.n	1001154e <__gedf2+0x62>
1001154a:	4299      	cmp	r1, r3
1001154c:	d01a      	beq.n	10011584 <__gedf2+0x98>
1001154e:	2301      	movs	r3, #1
10011550:	4248      	negs	r0, r1
10011552:	4318      	orrs	r0, r3
10011554:	bc3c      	pop	{r2, r3, r4, r5}
10011556:	4690      	mov	r8, r2
10011558:	4699      	mov	r9, r3
1001155a:	46a2      	mov	sl, r4
1001155c:	46ab      	mov	fp, r5
1001155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011560:	2800      	cmp	r0, #0
10011562:	d0f2      	beq.n	1001154a <__gedf2+0x5e>
10011564:	4258      	negs	r0, r3
10011566:	4158      	adcs	r0, r3
10011568:	2201      	movs	r2, #1
1001156a:	4240      	negs	r0, r0
1001156c:	4310      	orrs	r0, r2
1001156e:	e7f1      	b.n	10011554 <__gedf2+0x68>
10011570:	0037      	movs	r7, r6
10011572:	4307      	orrs	r7, r0
10011574:	d0d0      	beq.n	10011518 <__gedf2+0x2c>
10011576:	2002      	movs	r0, #2
10011578:	4240      	negs	r0, r0
1001157a:	e7eb      	b.n	10011554 <__gedf2+0x68>
1001157c:	465f      	mov	r7, fp
1001157e:	4317      	orrs	r7, r2
10011580:	d0cd      	beq.n	1001151e <__gedf2+0x32>
10011582:	e7f8      	b.n	10011576 <__gedf2+0x8a>
10011584:	42a5      	cmp	r5, r4
10011586:	dce2      	bgt.n	1001154e <__gedf2+0x62>
10011588:	db05      	blt.n	10011596 <__gedf2+0xaa>
1001158a:	455e      	cmp	r6, fp
1001158c:	d8df      	bhi.n	1001154e <__gedf2+0x62>
1001158e:	d008      	beq.n	100115a2 <__gedf2+0xb6>
10011590:	2000      	movs	r0, #0
10011592:	455e      	cmp	r6, fp
10011594:	d2de      	bcs.n	10011554 <__gedf2+0x68>
10011596:	4248      	negs	r0, r1
10011598:	4148      	adcs	r0, r1
1001159a:	2301      	movs	r3, #1
1001159c:	4240      	negs	r0, r0
1001159e:	4318      	orrs	r0, r3
100115a0:	e7d8      	b.n	10011554 <__gedf2+0x68>
100115a2:	45c4      	cmp	ip, r8
100115a4:	d8d3      	bhi.n	1001154e <__gedf2+0x62>
100115a6:	2000      	movs	r0, #0
100115a8:	45c4      	cmp	ip, r8
100115aa:	d3f4      	bcc.n	10011596 <__gedf2+0xaa>
100115ac:	e7d2      	b.n	10011554 <__gedf2+0x68>
100115ae:	46c0      	nop			; (mov r8, r8)
100115b0:	000007ff 	.word	0x000007ff

100115b4 <__ledf2>:
100115b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100115b6:	465f      	mov	r7, fp
100115b8:	464d      	mov	r5, r9
100115ba:	4644      	mov	r4, r8
100115bc:	4656      	mov	r6, sl
100115be:	b4f0      	push	{r4, r5, r6, r7}
100115c0:	031c      	lsls	r4, r3, #12
100115c2:	0b24      	lsrs	r4, r4, #12
100115c4:	46a4      	mov	ip, r4
100115c6:	4c2f      	ldr	r4, [pc, #188]	; (10011684 <__ledf2+0xd0>)
100115c8:	030f      	lsls	r7, r1, #12
100115ca:	004d      	lsls	r5, r1, #1
100115cc:	005e      	lsls	r6, r3, #1
100115ce:	0fc9      	lsrs	r1, r1, #31
100115d0:	4680      	mov	r8, r0
100115d2:	0b3f      	lsrs	r7, r7, #12
100115d4:	0d6d      	lsrs	r5, r5, #21
100115d6:	468b      	mov	fp, r1
100115d8:	4691      	mov	r9, r2
100115da:	0d76      	lsrs	r6, r6, #21
100115dc:	0fdb      	lsrs	r3, r3, #31
100115de:	42a5      	cmp	r5, r4
100115e0:	d020      	beq.n	10011624 <__ledf2+0x70>
100115e2:	4c28      	ldr	r4, [pc, #160]	; (10011684 <__ledf2+0xd0>)
100115e4:	42a6      	cmp	r6, r4
100115e6:	d022      	beq.n	1001162e <__ledf2+0x7a>
100115e8:	2d00      	cmp	r5, #0
100115ea:	d112      	bne.n	10011612 <__ledf2+0x5e>
100115ec:	4338      	orrs	r0, r7
100115ee:	4244      	negs	r4, r0
100115f0:	4144      	adcs	r4, r0
100115f2:	2e00      	cmp	r6, #0
100115f4:	d020      	beq.n	10011638 <__ledf2+0x84>
100115f6:	2c00      	cmp	r4, #0
100115f8:	d00d      	beq.n	10011616 <__ledf2+0x62>
100115fa:	425c      	negs	r4, r3
100115fc:	4163      	adcs	r3, r4
100115fe:	2401      	movs	r4, #1
10011600:	425b      	negs	r3, r3
10011602:	431c      	orrs	r4, r3
10011604:	0020      	movs	r0, r4
10011606:	bc3c      	pop	{r2, r3, r4, r5}
10011608:	4690      	mov	r8, r2
1001160a:	4699      	mov	r9, r3
1001160c:	46a2      	mov	sl, r4
1001160e:	46ab      	mov	fp, r5
10011610:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011612:	2e00      	cmp	r6, #0
10011614:	d017      	beq.n	10011646 <__ledf2+0x92>
10011616:	455b      	cmp	r3, fp
10011618:	d019      	beq.n	1001164e <__ledf2+0x9a>
1001161a:	465b      	mov	r3, fp
1001161c:	425c      	negs	r4, r3
1001161e:	2301      	movs	r3, #1
10011620:	431c      	orrs	r4, r3
10011622:	e7ef      	b.n	10011604 <__ledf2+0x50>
10011624:	0039      	movs	r1, r7
10011626:	2402      	movs	r4, #2
10011628:	4301      	orrs	r1, r0
1001162a:	d1eb      	bne.n	10011604 <__ledf2+0x50>
1001162c:	e7d9      	b.n	100115e2 <__ledf2+0x2e>
1001162e:	4661      	mov	r1, ip
10011630:	2402      	movs	r4, #2
10011632:	4311      	orrs	r1, r2
10011634:	d1e6      	bne.n	10011604 <__ledf2+0x50>
10011636:	e7d7      	b.n	100115e8 <__ledf2+0x34>
10011638:	4661      	mov	r1, ip
1001163a:	430a      	orrs	r2, r1
1001163c:	d1db      	bne.n	100115f6 <__ledf2+0x42>
1001163e:	2400      	movs	r4, #0
10011640:	2800      	cmp	r0, #0
10011642:	d0df      	beq.n	10011604 <__ledf2+0x50>
10011644:	e7e9      	b.n	1001161a <__ledf2+0x66>
10011646:	4661      	mov	r1, ip
10011648:	430a      	orrs	r2, r1
1001164a:	d1e4      	bne.n	10011616 <__ledf2+0x62>
1001164c:	e7e5      	b.n	1001161a <__ledf2+0x66>
1001164e:	42b5      	cmp	r5, r6
10011650:	dd03      	ble.n	1001165a <__ledf2+0xa6>
10011652:	2201      	movs	r2, #1
10011654:	425c      	negs	r4, r3
10011656:	4314      	orrs	r4, r2
10011658:	e7d4      	b.n	10011604 <__ledf2+0x50>
1001165a:	42b5      	cmp	r5, r6
1001165c:	dbcd      	blt.n	100115fa <__ledf2+0x46>
1001165e:	4567      	cmp	r7, ip
10011660:	d8db      	bhi.n	1001161a <__ledf2+0x66>
10011662:	d009      	beq.n	10011678 <__ledf2+0xc4>
10011664:	2400      	movs	r4, #0
10011666:	4567      	cmp	r7, ip
10011668:	d2cc      	bcs.n	10011604 <__ledf2+0x50>
1001166a:	4659      	mov	r1, fp
1001166c:	424c      	negs	r4, r1
1001166e:	4161      	adcs	r1, r4
10011670:	2401      	movs	r4, #1
10011672:	4249      	negs	r1, r1
10011674:	430c      	orrs	r4, r1
10011676:	e7c5      	b.n	10011604 <__ledf2+0x50>
10011678:	45c8      	cmp	r8, r9
1001167a:	d8ce      	bhi.n	1001161a <__ledf2+0x66>
1001167c:	2400      	movs	r4, #0
1001167e:	45c8      	cmp	r8, r9
10011680:	d3f3      	bcc.n	1001166a <__ledf2+0xb6>
10011682:	e7bf      	b.n	10011604 <__ledf2+0x50>
10011684:	000007ff 	.word	0x000007ff

10011688 <__libc_init_array>:
10011688:	4b0e      	ldr	r3, [pc, #56]	; (100116c4 <__libc_init_array+0x3c>)
1001168a:	b570      	push	{r4, r5, r6, lr}
1001168c:	2500      	movs	r5, #0
1001168e:	001e      	movs	r6, r3
10011690:	4c0d      	ldr	r4, [pc, #52]	; (100116c8 <__libc_init_array+0x40>)
10011692:	1ae4      	subs	r4, r4, r3
10011694:	10a4      	asrs	r4, r4, #2
10011696:	42a5      	cmp	r5, r4
10011698:	d004      	beq.n	100116a4 <__libc_init_array+0x1c>
1001169a:	00ab      	lsls	r3, r5, #2
1001169c:	58f3      	ldr	r3, [r6, r3]
1001169e:	4798      	blx	r3
100116a0:	3501      	adds	r5, #1
100116a2:	e7f8      	b.n	10011696 <__libc_init_array+0xe>
100116a4:	f002 f8fe 	bl	100138a4 <_init>
100116a8:	4b08      	ldr	r3, [pc, #32]	; (100116cc <__libc_init_array+0x44>)
100116aa:	2500      	movs	r5, #0
100116ac:	001e      	movs	r6, r3
100116ae:	4c08      	ldr	r4, [pc, #32]	; (100116d0 <__libc_init_array+0x48>)
100116b0:	1ae4      	subs	r4, r4, r3
100116b2:	10a4      	asrs	r4, r4, #2
100116b4:	42a5      	cmp	r5, r4
100116b6:	d004      	beq.n	100116c2 <__libc_init_array+0x3a>
100116b8:	00ab      	lsls	r3, r5, #2
100116ba:	58f3      	ldr	r3, [r6, r3]
100116bc:	4798      	blx	r3
100116be:	3501      	adds	r5, #1
100116c0:	e7f8      	b.n	100116b4 <__libc_init_array+0x2c>
100116c2:	bd70      	pop	{r4, r5, r6, pc}
100116c4:	100138b0 	.word	0x100138b0
100116c8:	100138b0 	.word	0x100138b0
100116cc:	100138b0 	.word	0x100138b0
100116d0:	100138b4 	.word	0x100138b4

100116d4 <memcmp>:
100116d4:	b530      	push	{r4, r5, lr}
100116d6:	2400      	movs	r4, #0
100116d8:	42a2      	cmp	r2, r4
100116da:	d008      	beq.n	100116ee <memcmp+0x1a>
100116dc:	5d03      	ldrb	r3, [r0, r4]
100116de:	1c65      	adds	r5, r4, #1
100116e0:	5d0c      	ldrb	r4, [r1, r4]
100116e2:	42a3      	cmp	r3, r4
100116e4:	d001      	beq.n	100116ea <memcmp+0x16>
100116e6:	1b18      	subs	r0, r3, r4
100116e8:	e002      	b.n	100116f0 <memcmp+0x1c>
100116ea:	002c      	movs	r4, r5
100116ec:	e7f4      	b.n	100116d8 <memcmp+0x4>
100116ee:	2000      	movs	r0, #0
100116f0:	bd30      	pop	{r4, r5, pc}

100116f2 <memcpy>:
100116f2:	2300      	movs	r3, #0
100116f4:	b510      	push	{r4, lr}
100116f6:	429a      	cmp	r2, r3
100116f8:	d003      	beq.n	10011702 <memcpy+0x10>
100116fa:	5ccc      	ldrb	r4, [r1, r3]
100116fc:	54c4      	strb	r4, [r0, r3]
100116fe:	3301      	adds	r3, #1
10011700:	e7f9      	b.n	100116f6 <memcpy+0x4>
10011702:	bd10      	pop	{r4, pc}

10011704 <memset>:
10011704:	0003      	movs	r3, r0
10011706:	1882      	adds	r2, r0, r2
10011708:	4293      	cmp	r3, r2
1001170a:	d002      	beq.n	10011712 <memset+0xe>
1001170c:	7019      	strb	r1, [r3, #0]
1001170e:	3301      	adds	r3, #1
10011710:	e7fa      	b.n	10011708 <memset+0x4>
10011712:	4770      	bx	lr

10011714 <iprintf>:
10011714:	b40f      	push	{r0, r1, r2, r3}
10011716:	4b0b      	ldr	r3, [pc, #44]	; (10011744 <iprintf+0x30>)
10011718:	b513      	push	{r0, r1, r4, lr}
1001171a:	681c      	ldr	r4, [r3, #0]
1001171c:	2c00      	cmp	r4, #0
1001171e:	d005      	beq.n	1001172c <iprintf+0x18>
10011720:	69a3      	ldr	r3, [r4, #24]
10011722:	2b00      	cmp	r3, #0
10011724:	d102      	bne.n	1001172c <iprintf+0x18>
10011726:	0020      	movs	r0, r4
10011728:	f000 fb46 	bl	10011db8 <__sinit>
1001172c:	ab05      	add	r3, sp, #20
1001172e:	9a04      	ldr	r2, [sp, #16]
10011730:	68a1      	ldr	r1, [r4, #8]
10011732:	0020      	movs	r0, r4
10011734:	9301      	str	r3, [sp, #4]
10011736:	f000 fd05 	bl	10012144 <_vfiprintf_r>
1001173a:	bc16      	pop	{r1, r2, r4}
1001173c:	bc08      	pop	{r3}
1001173e:	b004      	add	sp, #16
10011740:	4718      	bx	r3
10011742:	46c0      	nop			; (mov r8, r8)
10011744:	10013938 	.word	0x10013938

10011748 <putchar>:
10011748:	4b08      	ldr	r3, [pc, #32]	; (1001176c <putchar+0x24>)
1001174a:	b570      	push	{r4, r5, r6, lr}
1001174c:	681c      	ldr	r4, [r3, #0]
1001174e:	0005      	movs	r5, r0
10011750:	2c00      	cmp	r4, #0
10011752:	d005      	beq.n	10011760 <putchar+0x18>
10011754:	69a3      	ldr	r3, [r4, #24]
10011756:	2b00      	cmp	r3, #0
10011758:	d102      	bne.n	10011760 <putchar+0x18>
1001175a:	0020      	movs	r0, r4
1001175c:	f000 fb2c 	bl	10011db8 <__sinit>
10011760:	0029      	movs	r1, r5
10011762:	68a2      	ldr	r2, [r4, #8]
10011764:	0020      	movs	r0, r4
10011766:	f000 ff99 	bl	1001269c <_putc_r>
1001176a:	bd70      	pop	{r4, r5, r6, pc}
1001176c:	10013938 	.word	0x10013938

10011770 <_puts_r>:
10011770:	b570      	push	{r4, r5, r6, lr}
10011772:	0005      	movs	r5, r0
10011774:	000e      	movs	r6, r1
10011776:	2800      	cmp	r0, #0
10011778:	d004      	beq.n	10011784 <_puts_r+0x14>
1001177a:	6983      	ldr	r3, [r0, #24]
1001177c:	2b00      	cmp	r3, #0
1001177e:	d101      	bne.n	10011784 <_puts_r+0x14>
10011780:	f000 fb1a 	bl	10011db8 <__sinit>
10011784:	69ab      	ldr	r3, [r5, #24]
10011786:	68ac      	ldr	r4, [r5, #8]
10011788:	2b00      	cmp	r3, #0
1001178a:	d102      	bne.n	10011792 <_puts_r+0x22>
1001178c:	0028      	movs	r0, r5
1001178e:	f000 fb13 	bl	10011db8 <__sinit>
10011792:	4b25      	ldr	r3, [pc, #148]	; (10011828 <_puts_r+0xb8>)
10011794:	429c      	cmp	r4, r3
10011796:	d101      	bne.n	1001179c <_puts_r+0x2c>
10011798:	686c      	ldr	r4, [r5, #4]
1001179a:	e008      	b.n	100117ae <_puts_r+0x3e>
1001179c:	4b23      	ldr	r3, [pc, #140]	; (1001182c <_puts_r+0xbc>)
1001179e:	429c      	cmp	r4, r3
100117a0:	d101      	bne.n	100117a6 <_puts_r+0x36>
100117a2:	68ac      	ldr	r4, [r5, #8]
100117a4:	e003      	b.n	100117ae <_puts_r+0x3e>
100117a6:	4b22      	ldr	r3, [pc, #136]	; (10011830 <_puts_r+0xc0>)
100117a8:	429c      	cmp	r4, r3
100117aa:	d100      	bne.n	100117ae <_puts_r+0x3e>
100117ac:	68ec      	ldr	r4, [r5, #12]
100117ae:	89a3      	ldrh	r3, [r4, #12]
100117b0:	071b      	lsls	r3, r3, #28
100117b2:	d502      	bpl.n	100117ba <_puts_r+0x4a>
100117b4:	6923      	ldr	r3, [r4, #16]
100117b6:	2b00      	cmp	r3, #0
100117b8:	d111      	bne.n	100117de <_puts_r+0x6e>
100117ba:	0021      	movs	r1, r4
100117bc:	0028      	movs	r0, r5
100117be:	f000 f991 	bl	10011ae4 <__swsetup_r>
100117c2:	2800      	cmp	r0, #0
100117c4:	d00b      	beq.n	100117de <_puts_r+0x6e>
100117c6:	2001      	movs	r0, #1
100117c8:	4240      	negs	r0, r0
100117ca:	e02b      	b.n	10011824 <_puts_r+0xb4>
100117cc:	3b01      	subs	r3, #1
100117ce:	3601      	adds	r6, #1
100117d0:	60a3      	str	r3, [r4, #8]
100117d2:	2b00      	cmp	r3, #0
100117d4:	db08      	blt.n	100117e8 <_puts_r+0x78>
100117d6:	6823      	ldr	r3, [r4, #0]
100117d8:	1c5a      	adds	r2, r3, #1
100117da:	6022      	str	r2, [r4, #0]
100117dc:	7019      	strb	r1, [r3, #0]
100117de:	7831      	ldrb	r1, [r6, #0]
100117e0:	68a3      	ldr	r3, [r4, #8]
100117e2:	2900      	cmp	r1, #0
100117e4:	d1f2      	bne.n	100117cc <_puts_r+0x5c>
100117e6:	e00b      	b.n	10011800 <_puts_r+0x90>
100117e8:	69a2      	ldr	r2, [r4, #24]
100117ea:	4293      	cmp	r3, r2
100117ec:	db01      	blt.n	100117f2 <_puts_r+0x82>
100117ee:	290a      	cmp	r1, #10
100117f0:	d1f1      	bne.n	100117d6 <_puts_r+0x66>
100117f2:	0022      	movs	r2, r4
100117f4:	0028      	movs	r0, r5
100117f6:	f000 f91d 	bl	10011a34 <__swbuf_r>
100117fa:	1c43      	adds	r3, r0, #1
100117fc:	d1ef      	bne.n	100117de <_puts_r+0x6e>
100117fe:	e7e2      	b.n	100117c6 <_puts_r+0x56>
10011800:	3b01      	subs	r3, #1
10011802:	60a3      	str	r3, [r4, #8]
10011804:	2b00      	cmp	r3, #0
10011806:	da08      	bge.n	1001181a <_puts_r+0xaa>
10011808:	0022      	movs	r2, r4
1001180a:	310a      	adds	r1, #10
1001180c:	0028      	movs	r0, r5
1001180e:	f000 f911 	bl	10011a34 <__swbuf_r>
10011812:	1c43      	adds	r3, r0, #1
10011814:	d0d7      	beq.n	100117c6 <_puts_r+0x56>
10011816:	200a      	movs	r0, #10
10011818:	e004      	b.n	10011824 <_puts_r+0xb4>
1001181a:	200a      	movs	r0, #10
1001181c:	6823      	ldr	r3, [r4, #0]
1001181e:	1c5a      	adds	r2, r3, #1
10011820:	6022      	str	r2, [r4, #0]
10011822:	7018      	strb	r0, [r3, #0]
10011824:	bd70      	pop	{r4, r5, r6, pc}
10011826:	46c0      	nop			; (mov r8, r8)
10011828:	10013810 	.word	0x10013810
1001182c:	10013830 	.word	0x10013830
10011830:	10013850 	.word	0x10013850

10011834 <puts>:
10011834:	b510      	push	{r4, lr}
10011836:	4b03      	ldr	r3, [pc, #12]	; (10011844 <puts+0x10>)
10011838:	0001      	movs	r1, r0
1001183a:	6818      	ldr	r0, [r3, #0]
1001183c:	f7ff ff98 	bl	10011770 <_puts_r>
10011840:	bd10      	pop	{r4, pc}
10011842:	46c0      	nop			; (mov r8, r8)
10011844:	10013938 	.word	0x10013938

10011848 <rand>:
10011848:	4b15      	ldr	r3, [pc, #84]	; (100118a0 <rand+0x58>)
1001184a:	b510      	push	{r4, lr}
1001184c:	681c      	ldr	r4, [r3, #0]
1001184e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10011850:	2b00      	cmp	r3, #0
10011852:	d115      	bne.n	10011880 <rand+0x38>
10011854:	2018      	movs	r0, #24
10011856:	f000 fba7 	bl	10011fa8 <malloc>
1001185a:	4b12      	ldr	r3, [pc, #72]	; (100118a4 <rand+0x5c>)
1001185c:	63a0      	str	r0, [r4, #56]	; 0x38
1001185e:	8003      	strh	r3, [r0, #0]
10011860:	4b11      	ldr	r3, [pc, #68]	; (100118a8 <rand+0x60>)
10011862:	2201      	movs	r2, #1
10011864:	8043      	strh	r3, [r0, #2]
10011866:	4b11      	ldr	r3, [pc, #68]	; (100118ac <rand+0x64>)
10011868:	8083      	strh	r3, [r0, #4]
1001186a:	4b11      	ldr	r3, [pc, #68]	; (100118b0 <rand+0x68>)
1001186c:	80c3      	strh	r3, [r0, #6]
1001186e:	4b11      	ldr	r3, [pc, #68]	; (100118b4 <rand+0x6c>)
10011870:	8103      	strh	r3, [r0, #8]
10011872:	2305      	movs	r3, #5
10011874:	8143      	strh	r3, [r0, #10]
10011876:	3306      	adds	r3, #6
10011878:	8183      	strh	r3, [r0, #12]
1001187a:	2300      	movs	r3, #0
1001187c:	6102      	str	r2, [r0, #16]
1001187e:	6143      	str	r3, [r0, #20]
10011880:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10011882:	4a0d      	ldr	r2, [pc, #52]	; (100118b8 <rand+0x70>)
10011884:	6920      	ldr	r0, [r4, #16]
10011886:	6961      	ldr	r1, [r4, #20]
10011888:	4b0c      	ldr	r3, [pc, #48]	; (100118bc <rand+0x74>)
1001188a:	f001 f819 	bl	100128c0 <__aeabi_lmul>
1001188e:	2201      	movs	r2, #1
10011890:	2300      	movs	r3, #0
10011892:	1880      	adds	r0, r0, r2
10011894:	4159      	adcs	r1, r3
10011896:	6120      	str	r0, [r4, #16]
10011898:	6161      	str	r1, [r4, #20]
1001189a:	0048      	lsls	r0, r1, #1
1001189c:	0840      	lsrs	r0, r0, #1
1001189e:	bd10      	pop	{r4, pc}
100118a0:	10013938 	.word	0x10013938
100118a4:	0000330e 	.word	0x0000330e
100118a8:	ffffabcd 	.word	0xffffabcd
100118ac:	00001234 	.word	0x00001234
100118b0:	ffffe66d 	.word	0xffffe66d
100118b4:	ffffdeec 	.word	0xffffdeec
100118b8:	4c957f2d 	.word	0x4c957f2d
100118bc:	5851f42d 	.word	0x5851f42d

100118c0 <setbuf>:
100118c0:	424a      	negs	r2, r1
100118c2:	414a      	adcs	r2, r1
100118c4:	2380      	movs	r3, #128	; 0x80
100118c6:	b510      	push	{r4, lr}
100118c8:	0052      	lsls	r2, r2, #1
100118ca:	00db      	lsls	r3, r3, #3
100118cc:	f000 f802 	bl	100118d4 <setvbuf>
100118d0:	bd10      	pop	{r4, pc}
	...

100118d4 <setvbuf>:
100118d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100118d6:	001d      	movs	r5, r3
100118d8:	4b51      	ldr	r3, [pc, #324]	; (10011a20 <setvbuf+0x14c>)
100118da:	b085      	sub	sp, #20
100118dc:	681e      	ldr	r6, [r3, #0]
100118de:	0004      	movs	r4, r0
100118e0:	000f      	movs	r7, r1
100118e2:	9200      	str	r2, [sp, #0]
100118e4:	2e00      	cmp	r6, #0
100118e6:	d005      	beq.n	100118f4 <setvbuf+0x20>
100118e8:	69b3      	ldr	r3, [r6, #24]
100118ea:	2b00      	cmp	r3, #0
100118ec:	d102      	bne.n	100118f4 <setvbuf+0x20>
100118ee:	0030      	movs	r0, r6
100118f0:	f000 fa62 	bl	10011db8 <__sinit>
100118f4:	4b4b      	ldr	r3, [pc, #300]	; (10011a24 <setvbuf+0x150>)
100118f6:	429c      	cmp	r4, r3
100118f8:	d101      	bne.n	100118fe <setvbuf+0x2a>
100118fa:	6874      	ldr	r4, [r6, #4]
100118fc:	e008      	b.n	10011910 <setvbuf+0x3c>
100118fe:	4b4a      	ldr	r3, [pc, #296]	; (10011a28 <setvbuf+0x154>)
10011900:	429c      	cmp	r4, r3
10011902:	d101      	bne.n	10011908 <setvbuf+0x34>
10011904:	68b4      	ldr	r4, [r6, #8]
10011906:	e003      	b.n	10011910 <setvbuf+0x3c>
10011908:	4b48      	ldr	r3, [pc, #288]	; (10011a2c <setvbuf+0x158>)
1001190a:	429c      	cmp	r4, r3
1001190c:	d100      	bne.n	10011910 <setvbuf+0x3c>
1001190e:	68f4      	ldr	r4, [r6, #12]
10011910:	9b00      	ldr	r3, [sp, #0]
10011912:	2b02      	cmp	r3, #2
10011914:	d005      	beq.n	10011922 <setvbuf+0x4e>
10011916:	2b01      	cmp	r3, #1
10011918:	d900      	bls.n	1001191c <setvbuf+0x48>
1001191a:	e07c      	b.n	10011a16 <setvbuf+0x142>
1001191c:	2d00      	cmp	r5, #0
1001191e:	da00      	bge.n	10011922 <setvbuf+0x4e>
10011920:	e079      	b.n	10011a16 <setvbuf+0x142>
10011922:	0021      	movs	r1, r4
10011924:	0030      	movs	r0, r6
10011926:	f000 f9d9 	bl	10011cdc <_fflush_r>
1001192a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001192c:	2900      	cmp	r1, #0
1001192e:	d008      	beq.n	10011942 <setvbuf+0x6e>
10011930:	0023      	movs	r3, r4
10011932:	3344      	adds	r3, #68	; 0x44
10011934:	4299      	cmp	r1, r3
10011936:	d002      	beq.n	1001193e <setvbuf+0x6a>
10011938:	0030      	movs	r0, r6
1001193a:	f000 fb3f 	bl	10011fbc <_free_r>
1001193e:	2300      	movs	r3, #0
10011940:	6363      	str	r3, [r4, #52]	; 0x34
10011942:	2300      	movs	r3, #0
10011944:	61a3      	str	r3, [r4, #24]
10011946:	6063      	str	r3, [r4, #4]
10011948:	89a3      	ldrh	r3, [r4, #12]
1001194a:	061b      	lsls	r3, r3, #24
1001194c:	d503      	bpl.n	10011956 <setvbuf+0x82>
1001194e:	6921      	ldr	r1, [r4, #16]
10011950:	0030      	movs	r0, r6
10011952:	f000 fb33 	bl	10011fbc <_free_r>
10011956:	89a2      	ldrh	r2, [r4, #12]
10011958:	4b35      	ldr	r3, [pc, #212]	; (10011a30 <setvbuf+0x15c>)
1001195a:	4013      	ands	r3, r2
1001195c:	81a3      	strh	r3, [r4, #12]
1001195e:	9b00      	ldr	r3, [sp, #0]
10011960:	2b02      	cmp	r3, #2
10011962:	d021      	beq.n	100119a8 <setvbuf+0xd4>
10011964:	ab03      	add	r3, sp, #12
10011966:	aa02      	add	r2, sp, #8
10011968:	0021      	movs	r1, r4
1001196a:	0030      	movs	r0, r6
1001196c:	f000 fab8 	bl	10011ee0 <__swhatbuf_r>
10011970:	89a3      	ldrh	r3, [r4, #12]
10011972:	4318      	orrs	r0, r3
10011974:	81a0      	strh	r0, [r4, #12]
10011976:	2d00      	cmp	r5, #0
10011978:	d101      	bne.n	1001197e <setvbuf+0xaa>
1001197a:	9d02      	ldr	r5, [sp, #8]
1001197c:	e001      	b.n	10011982 <setvbuf+0xae>
1001197e:	2f00      	cmp	r7, #0
10011980:	d125      	bne.n	100119ce <setvbuf+0xfa>
10011982:	0028      	movs	r0, r5
10011984:	f000 fb10 	bl	10011fa8 <malloc>
10011988:	9501      	str	r5, [sp, #4]
1001198a:	1e07      	subs	r7, r0, #0
1001198c:	d11a      	bne.n	100119c4 <setvbuf+0xf0>
1001198e:	9b02      	ldr	r3, [sp, #8]
10011990:	9301      	str	r3, [sp, #4]
10011992:	42ab      	cmp	r3, r5
10011994:	d102      	bne.n	1001199c <setvbuf+0xc8>
10011996:	2001      	movs	r0, #1
10011998:	4240      	negs	r0, r0
1001199a:	e006      	b.n	100119aa <setvbuf+0xd6>
1001199c:	9801      	ldr	r0, [sp, #4]
1001199e:	f000 fb03 	bl	10011fa8 <malloc>
100119a2:	1e07      	subs	r7, r0, #0
100119a4:	d10e      	bne.n	100119c4 <setvbuf+0xf0>
100119a6:	e7f6      	b.n	10011996 <setvbuf+0xc2>
100119a8:	2000      	movs	r0, #0
100119aa:	2202      	movs	r2, #2
100119ac:	89a3      	ldrh	r3, [r4, #12]
100119ae:	4313      	orrs	r3, r2
100119b0:	81a3      	strh	r3, [r4, #12]
100119b2:	2300      	movs	r3, #0
100119b4:	60a3      	str	r3, [r4, #8]
100119b6:	0023      	movs	r3, r4
100119b8:	3347      	adds	r3, #71	; 0x47
100119ba:	6023      	str	r3, [r4, #0]
100119bc:	6123      	str	r3, [r4, #16]
100119be:	2301      	movs	r3, #1
100119c0:	6163      	str	r3, [r4, #20]
100119c2:	e02a      	b.n	10011a1a <setvbuf+0x146>
100119c4:	2280      	movs	r2, #128	; 0x80
100119c6:	89a3      	ldrh	r3, [r4, #12]
100119c8:	9d01      	ldr	r5, [sp, #4]
100119ca:	4313      	orrs	r3, r2
100119cc:	81a3      	strh	r3, [r4, #12]
100119ce:	69b3      	ldr	r3, [r6, #24]
100119d0:	2b00      	cmp	r3, #0
100119d2:	d102      	bne.n	100119da <setvbuf+0x106>
100119d4:	0030      	movs	r0, r6
100119d6:	f000 f9ef 	bl	10011db8 <__sinit>
100119da:	9b00      	ldr	r3, [sp, #0]
100119dc:	2b01      	cmp	r3, #1
100119de:	d103      	bne.n	100119e8 <setvbuf+0x114>
100119e0:	89a3      	ldrh	r3, [r4, #12]
100119e2:	9a00      	ldr	r2, [sp, #0]
100119e4:	431a      	orrs	r2, r3
100119e6:	81a2      	strh	r2, [r4, #12]
100119e8:	2308      	movs	r3, #8
100119ea:	89a2      	ldrh	r2, [r4, #12]
100119ec:	6027      	str	r7, [r4, #0]
100119ee:	4013      	ands	r3, r2
100119f0:	6127      	str	r7, [r4, #16]
100119f2:	6165      	str	r5, [r4, #20]
100119f4:	1e18      	subs	r0, r3, #0
100119f6:	d00c      	beq.n	10011a12 <setvbuf+0x13e>
100119f8:	2301      	movs	r3, #1
100119fa:	401a      	ands	r2, r3
100119fc:	2300      	movs	r3, #0
100119fe:	1e10      	subs	r0, r2, #0
10011a00:	4298      	cmp	r0, r3
10011a02:	d004      	beq.n	10011a0e <setvbuf+0x13a>
10011a04:	426d      	negs	r5, r5
10011a06:	60a3      	str	r3, [r4, #8]
10011a08:	61a5      	str	r5, [r4, #24]
10011a0a:	0018      	movs	r0, r3
10011a0c:	e005      	b.n	10011a1a <setvbuf+0x146>
10011a0e:	60a5      	str	r5, [r4, #8]
10011a10:	e003      	b.n	10011a1a <setvbuf+0x146>
10011a12:	60a3      	str	r3, [r4, #8]
10011a14:	e001      	b.n	10011a1a <setvbuf+0x146>
10011a16:	2001      	movs	r0, #1
10011a18:	4240      	negs	r0, r0
10011a1a:	b005      	add	sp, #20
10011a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a1e:	46c0      	nop			; (mov r8, r8)
10011a20:	10013938 	.word	0x10013938
10011a24:	10013810 	.word	0x10013810
10011a28:	10013830 	.word	0x10013830
10011a2c:	10013850 	.word	0x10013850
10011a30:	fffff35c 	.word	0xfffff35c

10011a34 <__swbuf_r>:
10011a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011a36:	0005      	movs	r5, r0
10011a38:	000f      	movs	r7, r1
10011a3a:	0014      	movs	r4, r2
10011a3c:	2800      	cmp	r0, #0
10011a3e:	d004      	beq.n	10011a4a <__swbuf_r+0x16>
10011a40:	6983      	ldr	r3, [r0, #24]
10011a42:	2b00      	cmp	r3, #0
10011a44:	d101      	bne.n	10011a4a <__swbuf_r+0x16>
10011a46:	f000 f9b7 	bl	10011db8 <__sinit>
10011a4a:	4b23      	ldr	r3, [pc, #140]	; (10011ad8 <__swbuf_r+0xa4>)
10011a4c:	429c      	cmp	r4, r3
10011a4e:	d101      	bne.n	10011a54 <__swbuf_r+0x20>
10011a50:	686c      	ldr	r4, [r5, #4]
10011a52:	e008      	b.n	10011a66 <__swbuf_r+0x32>
10011a54:	4b21      	ldr	r3, [pc, #132]	; (10011adc <__swbuf_r+0xa8>)
10011a56:	429c      	cmp	r4, r3
10011a58:	d101      	bne.n	10011a5e <__swbuf_r+0x2a>
10011a5a:	68ac      	ldr	r4, [r5, #8]
10011a5c:	e003      	b.n	10011a66 <__swbuf_r+0x32>
10011a5e:	4b20      	ldr	r3, [pc, #128]	; (10011ae0 <__swbuf_r+0xac>)
10011a60:	429c      	cmp	r4, r3
10011a62:	d100      	bne.n	10011a66 <__swbuf_r+0x32>
10011a64:	68ec      	ldr	r4, [r5, #12]
10011a66:	69a3      	ldr	r3, [r4, #24]
10011a68:	60a3      	str	r3, [r4, #8]
10011a6a:	89a3      	ldrh	r3, [r4, #12]
10011a6c:	071b      	lsls	r3, r3, #28
10011a6e:	d50a      	bpl.n	10011a86 <__swbuf_r+0x52>
10011a70:	6923      	ldr	r3, [r4, #16]
10011a72:	2b00      	cmp	r3, #0
10011a74:	d007      	beq.n	10011a86 <__swbuf_r+0x52>
10011a76:	6823      	ldr	r3, [r4, #0]
10011a78:	6922      	ldr	r2, [r4, #16]
10011a7a:	b2fe      	uxtb	r6, r7
10011a7c:	1a98      	subs	r0, r3, r2
10011a7e:	6963      	ldr	r3, [r4, #20]
10011a80:	4298      	cmp	r0, r3
10011a82:	db0f      	blt.n	10011aa4 <__swbuf_r+0x70>
10011a84:	e008      	b.n	10011a98 <__swbuf_r+0x64>
10011a86:	0021      	movs	r1, r4
10011a88:	0028      	movs	r0, r5
10011a8a:	f000 f82b 	bl	10011ae4 <__swsetup_r>
10011a8e:	2800      	cmp	r0, #0
10011a90:	d0f1      	beq.n	10011a76 <__swbuf_r+0x42>
10011a92:	2001      	movs	r0, #1
10011a94:	4240      	negs	r0, r0
10011a96:	e01d      	b.n	10011ad4 <__swbuf_r+0xa0>
10011a98:	0021      	movs	r1, r4
10011a9a:	0028      	movs	r0, r5
10011a9c:	f000 f91e 	bl	10011cdc <_fflush_r>
10011aa0:	2800      	cmp	r0, #0
10011aa2:	d1f6      	bne.n	10011a92 <__swbuf_r+0x5e>
10011aa4:	68a3      	ldr	r3, [r4, #8]
10011aa6:	3001      	adds	r0, #1
10011aa8:	3b01      	subs	r3, #1
10011aaa:	60a3      	str	r3, [r4, #8]
10011aac:	6823      	ldr	r3, [r4, #0]
10011aae:	1c5a      	adds	r2, r3, #1
10011ab0:	6022      	str	r2, [r4, #0]
10011ab2:	701f      	strb	r7, [r3, #0]
10011ab4:	6963      	ldr	r3, [r4, #20]
10011ab6:	4298      	cmp	r0, r3
10011ab8:	d005      	beq.n	10011ac6 <__swbuf_r+0x92>
10011aba:	89a3      	ldrh	r3, [r4, #12]
10011abc:	0030      	movs	r0, r6
10011abe:	07db      	lsls	r3, r3, #31
10011ac0:	d508      	bpl.n	10011ad4 <__swbuf_r+0xa0>
10011ac2:	2e0a      	cmp	r6, #10
10011ac4:	d106      	bne.n	10011ad4 <__swbuf_r+0xa0>
10011ac6:	0021      	movs	r1, r4
10011ac8:	0028      	movs	r0, r5
10011aca:	f000 f907 	bl	10011cdc <_fflush_r>
10011ace:	2800      	cmp	r0, #0
10011ad0:	d1df      	bne.n	10011a92 <__swbuf_r+0x5e>
10011ad2:	0030      	movs	r0, r6
10011ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011ad6:	46c0      	nop			; (mov r8, r8)
10011ad8:	10013810 	.word	0x10013810
10011adc:	10013830 	.word	0x10013830
10011ae0:	10013850 	.word	0x10013850

10011ae4 <__swsetup_r>:
10011ae4:	4b36      	ldr	r3, [pc, #216]	; (10011bc0 <__swsetup_r+0xdc>)
10011ae6:	b570      	push	{r4, r5, r6, lr}
10011ae8:	681d      	ldr	r5, [r3, #0]
10011aea:	0006      	movs	r6, r0
10011aec:	000c      	movs	r4, r1
10011aee:	2d00      	cmp	r5, #0
10011af0:	d005      	beq.n	10011afe <__swsetup_r+0x1a>
10011af2:	69ab      	ldr	r3, [r5, #24]
10011af4:	2b00      	cmp	r3, #0
10011af6:	d102      	bne.n	10011afe <__swsetup_r+0x1a>
10011af8:	0028      	movs	r0, r5
10011afa:	f000 f95d 	bl	10011db8 <__sinit>
10011afe:	4b31      	ldr	r3, [pc, #196]	; (10011bc4 <__swsetup_r+0xe0>)
10011b00:	429c      	cmp	r4, r3
10011b02:	d101      	bne.n	10011b08 <__swsetup_r+0x24>
10011b04:	686c      	ldr	r4, [r5, #4]
10011b06:	e008      	b.n	10011b1a <__swsetup_r+0x36>
10011b08:	4b2f      	ldr	r3, [pc, #188]	; (10011bc8 <__swsetup_r+0xe4>)
10011b0a:	429c      	cmp	r4, r3
10011b0c:	d101      	bne.n	10011b12 <__swsetup_r+0x2e>
10011b0e:	68ac      	ldr	r4, [r5, #8]
10011b10:	e003      	b.n	10011b1a <__swsetup_r+0x36>
10011b12:	4b2e      	ldr	r3, [pc, #184]	; (10011bcc <__swsetup_r+0xe8>)
10011b14:	429c      	cmp	r4, r3
10011b16:	d100      	bne.n	10011b1a <__swsetup_r+0x36>
10011b18:	68ec      	ldr	r4, [r5, #12]
10011b1a:	220c      	movs	r2, #12
10011b1c:	5ea3      	ldrsh	r3, [r4, r2]
10011b1e:	b29a      	uxth	r2, r3
10011b20:	0711      	lsls	r1, r2, #28
10011b22:	d423      	bmi.n	10011b6c <__swsetup_r+0x88>
10011b24:	06d1      	lsls	r1, r2, #27
10011b26:	d407      	bmi.n	10011b38 <__swsetup_r+0x54>
10011b28:	2209      	movs	r2, #9
10011b2a:	2001      	movs	r0, #1
10011b2c:	6032      	str	r2, [r6, #0]
10011b2e:	3237      	adds	r2, #55	; 0x37
10011b30:	4313      	orrs	r3, r2
10011b32:	81a3      	strh	r3, [r4, #12]
10011b34:	4240      	negs	r0, r0
10011b36:	e042      	b.n	10011bbe <__swsetup_r+0xda>
10011b38:	0753      	lsls	r3, r2, #29
10011b3a:	d513      	bpl.n	10011b64 <__swsetup_r+0x80>
10011b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011b3e:	2900      	cmp	r1, #0
10011b40:	d008      	beq.n	10011b54 <__swsetup_r+0x70>
10011b42:	0023      	movs	r3, r4
10011b44:	3344      	adds	r3, #68	; 0x44
10011b46:	4299      	cmp	r1, r3
10011b48:	d002      	beq.n	10011b50 <__swsetup_r+0x6c>
10011b4a:	0030      	movs	r0, r6
10011b4c:	f000 fa36 	bl	10011fbc <_free_r>
10011b50:	2300      	movs	r3, #0
10011b52:	6363      	str	r3, [r4, #52]	; 0x34
10011b54:	2224      	movs	r2, #36	; 0x24
10011b56:	89a3      	ldrh	r3, [r4, #12]
10011b58:	4393      	bics	r3, r2
10011b5a:	81a3      	strh	r3, [r4, #12]
10011b5c:	2300      	movs	r3, #0
10011b5e:	6063      	str	r3, [r4, #4]
10011b60:	6923      	ldr	r3, [r4, #16]
10011b62:	6023      	str	r3, [r4, #0]
10011b64:	2208      	movs	r2, #8
10011b66:	89a3      	ldrh	r3, [r4, #12]
10011b68:	4313      	orrs	r3, r2
10011b6a:	81a3      	strh	r3, [r4, #12]
10011b6c:	6923      	ldr	r3, [r4, #16]
10011b6e:	2b00      	cmp	r3, #0
10011b70:	d10b      	bne.n	10011b8a <__swsetup_r+0xa6>
10011b72:	23a0      	movs	r3, #160	; 0xa0
10011b74:	89a2      	ldrh	r2, [r4, #12]
10011b76:	009b      	lsls	r3, r3, #2
10011b78:	4013      	ands	r3, r2
10011b7a:	2280      	movs	r2, #128	; 0x80
10011b7c:	0092      	lsls	r2, r2, #2
10011b7e:	4293      	cmp	r3, r2
10011b80:	d003      	beq.n	10011b8a <__swsetup_r+0xa6>
10011b82:	0021      	movs	r1, r4
10011b84:	0030      	movs	r0, r6
10011b86:	f000 f9d1 	bl	10011f2c <__smakebuf_r>
10011b8a:	2301      	movs	r3, #1
10011b8c:	89a2      	ldrh	r2, [r4, #12]
10011b8e:	4013      	ands	r3, r2
10011b90:	d005      	beq.n	10011b9e <__swsetup_r+0xba>
10011b92:	2300      	movs	r3, #0
10011b94:	60a3      	str	r3, [r4, #8]
10011b96:	6963      	ldr	r3, [r4, #20]
10011b98:	425b      	negs	r3, r3
10011b9a:	61a3      	str	r3, [r4, #24]
10011b9c:	e003      	b.n	10011ba6 <__swsetup_r+0xc2>
10011b9e:	0792      	lsls	r2, r2, #30
10011ba0:	d400      	bmi.n	10011ba4 <__swsetup_r+0xc0>
10011ba2:	6963      	ldr	r3, [r4, #20]
10011ba4:	60a3      	str	r3, [r4, #8]
10011ba6:	2000      	movs	r0, #0
10011ba8:	6923      	ldr	r3, [r4, #16]
10011baa:	4283      	cmp	r3, r0
10011bac:	d107      	bne.n	10011bbe <__swsetup_r+0xda>
10011bae:	220c      	movs	r2, #12
10011bb0:	5ea3      	ldrsh	r3, [r4, r2]
10011bb2:	061a      	lsls	r2, r3, #24
10011bb4:	d503      	bpl.n	10011bbe <__swsetup_r+0xda>
10011bb6:	2240      	movs	r2, #64	; 0x40
10011bb8:	4313      	orrs	r3, r2
10011bba:	81a3      	strh	r3, [r4, #12]
10011bbc:	3801      	subs	r0, #1
10011bbe:	bd70      	pop	{r4, r5, r6, pc}
10011bc0:	10013938 	.word	0x10013938
10011bc4:	10013810 	.word	0x10013810
10011bc8:	10013830 	.word	0x10013830
10011bcc:	10013850 	.word	0x10013850

10011bd0 <__sflush_r>:
10011bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011bd2:	898a      	ldrh	r2, [r1, #12]
10011bd4:	0005      	movs	r5, r0
10011bd6:	000c      	movs	r4, r1
10011bd8:	0713      	lsls	r3, r2, #28
10011bda:	d45a      	bmi.n	10011c92 <__sflush_r+0xc2>
10011bdc:	684b      	ldr	r3, [r1, #4]
10011bde:	2b00      	cmp	r3, #0
10011be0:	dc02      	bgt.n	10011be8 <__sflush_r+0x18>
10011be2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011be4:	2b00      	cmp	r3, #0
10011be6:	dd19      	ble.n	10011c1c <__sflush_r+0x4c>
10011be8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011bea:	2f00      	cmp	r7, #0
10011bec:	d016      	beq.n	10011c1c <__sflush_r+0x4c>
10011bee:	2300      	movs	r3, #0
10011bf0:	682e      	ldr	r6, [r5, #0]
10011bf2:	602b      	str	r3, [r5, #0]
10011bf4:	2380      	movs	r3, #128	; 0x80
10011bf6:	015b      	lsls	r3, r3, #5
10011bf8:	401a      	ands	r2, r3
10011bfa:	d001      	beq.n	10011c00 <__sflush_r+0x30>
10011bfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
10011bfe:	e014      	b.n	10011c2a <__sflush_r+0x5a>
10011c00:	2301      	movs	r3, #1
10011c02:	6a21      	ldr	r1, [r4, #32]
10011c04:	0028      	movs	r0, r5
10011c06:	47b8      	blx	r7
10011c08:	1c43      	adds	r3, r0, #1
10011c0a:	d10e      	bne.n	10011c2a <__sflush_r+0x5a>
10011c0c:	682b      	ldr	r3, [r5, #0]
10011c0e:	2b00      	cmp	r3, #0
10011c10:	d00b      	beq.n	10011c2a <__sflush_r+0x5a>
10011c12:	2b1d      	cmp	r3, #29
10011c14:	d001      	beq.n	10011c1a <__sflush_r+0x4a>
10011c16:	2b16      	cmp	r3, #22
10011c18:	d102      	bne.n	10011c20 <__sflush_r+0x50>
10011c1a:	602e      	str	r6, [r5, #0]
10011c1c:	2000      	movs	r0, #0
10011c1e:	e05a      	b.n	10011cd6 <__sflush_r+0x106>
10011c20:	2240      	movs	r2, #64	; 0x40
10011c22:	89a3      	ldrh	r3, [r4, #12]
10011c24:	4313      	orrs	r3, r2
10011c26:	81a3      	strh	r3, [r4, #12]
10011c28:	e055      	b.n	10011cd6 <__sflush_r+0x106>
10011c2a:	89a3      	ldrh	r3, [r4, #12]
10011c2c:	075b      	lsls	r3, r3, #29
10011c2e:	d506      	bpl.n	10011c3e <__sflush_r+0x6e>
10011c30:	6863      	ldr	r3, [r4, #4]
10011c32:	1ac0      	subs	r0, r0, r3
10011c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
10011c36:	2b00      	cmp	r3, #0
10011c38:	d001      	beq.n	10011c3e <__sflush_r+0x6e>
10011c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
10011c3c:	1ac0      	subs	r0, r0, r3
10011c3e:	2300      	movs	r3, #0
10011c40:	0002      	movs	r2, r0
10011c42:	6a21      	ldr	r1, [r4, #32]
10011c44:	0028      	movs	r0, r5
10011c46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011c48:	47b8      	blx	r7
10011c4a:	89a3      	ldrh	r3, [r4, #12]
10011c4c:	1c42      	adds	r2, r0, #1
10011c4e:	d106      	bne.n	10011c5e <__sflush_r+0x8e>
10011c50:	6829      	ldr	r1, [r5, #0]
10011c52:	291d      	cmp	r1, #29
10011c54:	d83a      	bhi.n	10011ccc <__sflush_r+0xfc>
10011c56:	4a20      	ldr	r2, [pc, #128]	; (10011cd8 <__sflush_r+0x108>)
10011c58:	40ca      	lsrs	r2, r1
10011c5a:	07d2      	lsls	r2, r2, #31
10011c5c:	d536      	bpl.n	10011ccc <__sflush_r+0xfc>
10011c5e:	2200      	movs	r2, #0
10011c60:	6062      	str	r2, [r4, #4]
10011c62:	6922      	ldr	r2, [r4, #16]
10011c64:	6022      	str	r2, [r4, #0]
10011c66:	04db      	lsls	r3, r3, #19
10011c68:	d505      	bpl.n	10011c76 <__sflush_r+0xa6>
10011c6a:	1c43      	adds	r3, r0, #1
10011c6c:	d102      	bne.n	10011c74 <__sflush_r+0xa4>
10011c6e:	682b      	ldr	r3, [r5, #0]
10011c70:	2b00      	cmp	r3, #0
10011c72:	d100      	bne.n	10011c76 <__sflush_r+0xa6>
10011c74:	6560      	str	r0, [r4, #84]	; 0x54
10011c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011c78:	602e      	str	r6, [r5, #0]
10011c7a:	2900      	cmp	r1, #0
10011c7c:	d0ce      	beq.n	10011c1c <__sflush_r+0x4c>
10011c7e:	0023      	movs	r3, r4
10011c80:	3344      	adds	r3, #68	; 0x44
10011c82:	4299      	cmp	r1, r3
10011c84:	d002      	beq.n	10011c8c <__sflush_r+0xbc>
10011c86:	0028      	movs	r0, r5
10011c88:	f000 f998 	bl	10011fbc <_free_r>
10011c8c:	2000      	movs	r0, #0
10011c8e:	6360      	str	r0, [r4, #52]	; 0x34
10011c90:	e021      	b.n	10011cd6 <__sflush_r+0x106>
10011c92:	690f      	ldr	r7, [r1, #16]
10011c94:	2f00      	cmp	r7, #0
10011c96:	d0c1      	beq.n	10011c1c <__sflush_r+0x4c>
10011c98:	680b      	ldr	r3, [r1, #0]
10011c9a:	600f      	str	r7, [r1, #0]
10011c9c:	1bdb      	subs	r3, r3, r7
10011c9e:	9301      	str	r3, [sp, #4]
10011ca0:	2300      	movs	r3, #0
10011ca2:	0792      	lsls	r2, r2, #30
10011ca4:	d100      	bne.n	10011ca8 <__sflush_r+0xd8>
10011ca6:	694b      	ldr	r3, [r1, #20]
10011ca8:	60a3      	str	r3, [r4, #8]
10011caa:	e003      	b.n	10011cb4 <__sflush_r+0xe4>
10011cac:	9b01      	ldr	r3, [sp, #4]
10011cae:	183f      	adds	r7, r7, r0
10011cb0:	1a1b      	subs	r3, r3, r0
10011cb2:	9301      	str	r3, [sp, #4]
10011cb4:	9b01      	ldr	r3, [sp, #4]
10011cb6:	2b00      	cmp	r3, #0
10011cb8:	ddb0      	ble.n	10011c1c <__sflush_r+0x4c>
10011cba:	9b01      	ldr	r3, [sp, #4]
10011cbc:	003a      	movs	r2, r7
10011cbe:	6a21      	ldr	r1, [r4, #32]
10011cc0:	0028      	movs	r0, r5
10011cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011cc4:	47b0      	blx	r6
10011cc6:	2800      	cmp	r0, #0
10011cc8:	dcf0      	bgt.n	10011cac <__sflush_r+0xdc>
10011cca:	89a3      	ldrh	r3, [r4, #12]
10011ccc:	2240      	movs	r2, #64	; 0x40
10011cce:	2001      	movs	r0, #1
10011cd0:	4313      	orrs	r3, r2
10011cd2:	81a3      	strh	r3, [r4, #12]
10011cd4:	4240      	negs	r0, r0
10011cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011cd8:	20400001 	.word	0x20400001

10011cdc <_fflush_r>:
10011cdc:	690b      	ldr	r3, [r1, #16]
10011cde:	b570      	push	{r4, r5, r6, lr}
10011ce0:	0005      	movs	r5, r0
10011ce2:	000c      	movs	r4, r1
10011ce4:	2b00      	cmp	r3, #0
10011ce6:	d101      	bne.n	10011cec <_fflush_r+0x10>
10011ce8:	2000      	movs	r0, #0
10011cea:	e01c      	b.n	10011d26 <_fflush_r+0x4a>
10011cec:	2800      	cmp	r0, #0
10011cee:	d004      	beq.n	10011cfa <_fflush_r+0x1e>
10011cf0:	6983      	ldr	r3, [r0, #24]
10011cf2:	2b00      	cmp	r3, #0
10011cf4:	d101      	bne.n	10011cfa <_fflush_r+0x1e>
10011cf6:	f000 f85f 	bl	10011db8 <__sinit>
10011cfa:	4b0b      	ldr	r3, [pc, #44]	; (10011d28 <_fflush_r+0x4c>)
10011cfc:	429c      	cmp	r4, r3
10011cfe:	d101      	bne.n	10011d04 <_fflush_r+0x28>
10011d00:	686c      	ldr	r4, [r5, #4]
10011d02:	e008      	b.n	10011d16 <_fflush_r+0x3a>
10011d04:	4b09      	ldr	r3, [pc, #36]	; (10011d2c <_fflush_r+0x50>)
10011d06:	429c      	cmp	r4, r3
10011d08:	d101      	bne.n	10011d0e <_fflush_r+0x32>
10011d0a:	68ac      	ldr	r4, [r5, #8]
10011d0c:	e003      	b.n	10011d16 <_fflush_r+0x3a>
10011d0e:	4b08      	ldr	r3, [pc, #32]	; (10011d30 <_fflush_r+0x54>)
10011d10:	429c      	cmp	r4, r3
10011d12:	d100      	bne.n	10011d16 <_fflush_r+0x3a>
10011d14:	68ec      	ldr	r4, [r5, #12]
10011d16:	220c      	movs	r2, #12
10011d18:	5ea3      	ldrsh	r3, [r4, r2]
10011d1a:	2b00      	cmp	r3, #0
10011d1c:	d0e4      	beq.n	10011ce8 <_fflush_r+0xc>
10011d1e:	0021      	movs	r1, r4
10011d20:	0028      	movs	r0, r5
10011d22:	f7ff ff55 	bl	10011bd0 <__sflush_r>
10011d26:	bd70      	pop	{r4, r5, r6, pc}
10011d28:	10013810 	.word	0x10013810
10011d2c:	10013830 	.word	0x10013830
10011d30:	10013850 	.word	0x10013850

10011d34 <_cleanup_r>:
10011d34:	b510      	push	{r4, lr}
10011d36:	4902      	ldr	r1, [pc, #8]	; (10011d40 <_cleanup_r+0xc>)
10011d38:	f000 f8b0 	bl	10011e9c <_fwalk_reent>
10011d3c:	bd10      	pop	{r4, pc}
10011d3e:	46c0      	nop			; (mov r8, r8)
10011d40:	10011cdd 	.word	0x10011cdd

10011d44 <std.isra.0>:
10011d44:	2300      	movs	r3, #0
10011d46:	b510      	push	{r4, lr}
10011d48:	0004      	movs	r4, r0
10011d4a:	6003      	str	r3, [r0, #0]
10011d4c:	6043      	str	r3, [r0, #4]
10011d4e:	6083      	str	r3, [r0, #8]
10011d50:	8181      	strh	r1, [r0, #12]
10011d52:	6643      	str	r3, [r0, #100]	; 0x64
10011d54:	81c2      	strh	r2, [r0, #14]
10011d56:	6103      	str	r3, [r0, #16]
10011d58:	6143      	str	r3, [r0, #20]
10011d5a:	6183      	str	r3, [r0, #24]
10011d5c:	0019      	movs	r1, r3
10011d5e:	2208      	movs	r2, #8
10011d60:	305c      	adds	r0, #92	; 0x5c
10011d62:	f7ff fccf 	bl	10011704 <memset>
10011d66:	4b05      	ldr	r3, [pc, #20]	; (10011d7c <std.isra.0+0x38>)
10011d68:	6224      	str	r4, [r4, #32]
10011d6a:	6263      	str	r3, [r4, #36]	; 0x24
10011d6c:	4b04      	ldr	r3, [pc, #16]	; (10011d80 <std.isra.0+0x3c>)
10011d6e:	62a3      	str	r3, [r4, #40]	; 0x28
10011d70:	4b04      	ldr	r3, [pc, #16]	; (10011d84 <std.isra.0+0x40>)
10011d72:	62e3      	str	r3, [r4, #44]	; 0x2c
10011d74:	4b04      	ldr	r3, [pc, #16]	; (10011d88 <std.isra.0+0x44>)
10011d76:	6323      	str	r3, [r4, #48]	; 0x30
10011d78:	bd10      	pop	{r4, pc}
10011d7a:	46c0      	nop			; (mov r8, r8)
10011d7c:	1001272d 	.word	0x1001272d
10011d80:	10012755 	.word	0x10012755
10011d84:	1001278d 	.word	0x1001278d
10011d88:	100127b9 	.word	0x100127b9

10011d8c <__sfmoreglue>:
10011d8c:	b570      	push	{r4, r5, r6, lr}
10011d8e:	2568      	movs	r5, #104	; 0x68
10011d90:	1e4b      	subs	r3, r1, #1
10011d92:	435d      	muls	r5, r3
10011d94:	000e      	movs	r6, r1
10011d96:	0029      	movs	r1, r5
10011d98:	3174      	adds	r1, #116	; 0x74
10011d9a:	f000 f955 	bl	10012048 <_malloc_r>
10011d9e:	1e04      	subs	r4, r0, #0
10011da0:	d008      	beq.n	10011db4 <__sfmoreglue+0x28>
10011da2:	2100      	movs	r1, #0
10011da4:	002a      	movs	r2, r5
10011da6:	6001      	str	r1, [r0, #0]
10011da8:	6046      	str	r6, [r0, #4]
10011daa:	300c      	adds	r0, #12
10011dac:	60a0      	str	r0, [r4, #8]
10011dae:	3268      	adds	r2, #104	; 0x68
10011db0:	f7ff fca8 	bl	10011704 <memset>
10011db4:	0020      	movs	r0, r4
10011db6:	bd70      	pop	{r4, r5, r6, pc}

10011db8 <__sinit>:
10011db8:	6983      	ldr	r3, [r0, #24]
10011dba:	b513      	push	{r0, r1, r4, lr}
10011dbc:	0004      	movs	r4, r0
10011dbe:	2b00      	cmp	r3, #0
10011dc0:	d128      	bne.n	10011e14 <__sinit+0x5c>
10011dc2:	6483      	str	r3, [r0, #72]	; 0x48
10011dc4:	64c3      	str	r3, [r0, #76]	; 0x4c
10011dc6:	6503      	str	r3, [r0, #80]	; 0x50
10011dc8:	4b13      	ldr	r3, [pc, #76]	; (10011e18 <__sinit+0x60>)
10011dca:	4a14      	ldr	r2, [pc, #80]	; (10011e1c <__sinit+0x64>)
10011dcc:	681b      	ldr	r3, [r3, #0]
10011dce:	6282      	str	r2, [r0, #40]	; 0x28
10011dd0:	9301      	str	r3, [sp, #4]
10011dd2:	4298      	cmp	r0, r3
10011dd4:	d101      	bne.n	10011dda <__sinit+0x22>
10011dd6:	2301      	movs	r3, #1
10011dd8:	6183      	str	r3, [r0, #24]
10011dda:	0020      	movs	r0, r4
10011ddc:	f000 f820 	bl	10011e20 <__sfp>
10011de0:	6060      	str	r0, [r4, #4]
10011de2:	0020      	movs	r0, r4
10011de4:	f000 f81c 	bl	10011e20 <__sfp>
10011de8:	60a0      	str	r0, [r4, #8]
10011dea:	0020      	movs	r0, r4
10011dec:	f000 f818 	bl	10011e20 <__sfp>
10011df0:	2200      	movs	r2, #0
10011df2:	60e0      	str	r0, [r4, #12]
10011df4:	2104      	movs	r1, #4
10011df6:	6860      	ldr	r0, [r4, #4]
10011df8:	f7ff ffa4 	bl	10011d44 <std.isra.0>
10011dfc:	2201      	movs	r2, #1
10011dfe:	2109      	movs	r1, #9
10011e00:	68a0      	ldr	r0, [r4, #8]
10011e02:	f7ff ff9f 	bl	10011d44 <std.isra.0>
10011e06:	2202      	movs	r2, #2
10011e08:	2112      	movs	r1, #18
10011e0a:	68e0      	ldr	r0, [r4, #12]
10011e0c:	f7ff ff9a 	bl	10011d44 <std.isra.0>
10011e10:	2301      	movs	r3, #1
10011e12:	61a3      	str	r3, [r4, #24]
10011e14:	bd13      	pop	{r0, r1, r4, pc}
10011e16:	46c0      	nop			; (mov r8, r8)
10011e18:	1001380c 	.word	0x1001380c
10011e1c:	10011d35 	.word	0x10011d35

10011e20 <__sfp>:
10011e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011e22:	4b1d      	ldr	r3, [pc, #116]	; (10011e98 <__sfp+0x78>)
10011e24:	0006      	movs	r6, r0
10011e26:	681d      	ldr	r5, [r3, #0]
10011e28:	69ab      	ldr	r3, [r5, #24]
10011e2a:	2b00      	cmp	r3, #0
10011e2c:	d102      	bne.n	10011e34 <__sfp+0x14>
10011e2e:	0028      	movs	r0, r5
10011e30:	f7ff ffc2 	bl	10011db8 <__sinit>
10011e34:	3548      	adds	r5, #72	; 0x48
10011e36:	68ac      	ldr	r4, [r5, #8]
10011e38:	686b      	ldr	r3, [r5, #4]
10011e3a:	3b01      	subs	r3, #1
10011e3c:	d405      	bmi.n	10011e4a <__sfp+0x2a>
10011e3e:	220c      	movs	r2, #12
10011e40:	5ea7      	ldrsh	r7, [r4, r2]
10011e42:	2f00      	cmp	r7, #0
10011e44:	d010      	beq.n	10011e68 <__sfp+0x48>
10011e46:	3468      	adds	r4, #104	; 0x68
10011e48:	e7f7      	b.n	10011e3a <__sfp+0x1a>
10011e4a:	682b      	ldr	r3, [r5, #0]
10011e4c:	2b00      	cmp	r3, #0
10011e4e:	d001      	beq.n	10011e54 <__sfp+0x34>
10011e50:	682d      	ldr	r5, [r5, #0]
10011e52:	e7f0      	b.n	10011e36 <__sfp+0x16>
10011e54:	2104      	movs	r1, #4
10011e56:	0030      	movs	r0, r6
10011e58:	f7ff ff98 	bl	10011d8c <__sfmoreglue>
10011e5c:	6028      	str	r0, [r5, #0]
10011e5e:	2800      	cmp	r0, #0
10011e60:	d1f6      	bne.n	10011e50 <__sfp+0x30>
10011e62:	230c      	movs	r3, #12
10011e64:	6033      	str	r3, [r6, #0]
10011e66:	e016      	b.n	10011e96 <__sfp+0x76>
10011e68:	2301      	movs	r3, #1
10011e6a:	0020      	movs	r0, r4
10011e6c:	425b      	negs	r3, r3
10011e6e:	81e3      	strh	r3, [r4, #14]
10011e70:	3302      	adds	r3, #2
10011e72:	81a3      	strh	r3, [r4, #12]
10011e74:	6667      	str	r7, [r4, #100]	; 0x64
10011e76:	6027      	str	r7, [r4, #0]
10011e78:	60a7      	str	r7, [r4, #8]
10011e7a:	6067      	str	r7, [r4, #4]
10011e7c:	6127      	str	r7, [r4, #16]
10011e7e:	6167      	str	r7, [r4, #20]
10011e80:	61a7      	str	r7, [r4, #24]
10011e82:	305c      	adds	r0, #92	; 0x5c
10011e84:	2208      	movs	r2, #8
10011e86:	0039      	movs	r1, r7
10011e88:	f7ff fc3c 	bl	10011704 <memset>
10011e8c:	0020      	movs	r0, r4
10011e8e:	6367      	str	r7, [r4, #52]	; 0x34
10011e90:	63a7      	str	r7, [r4, #56]	; 0x38
10011e92:	64a7      	str	r7, [r4, #72]	; 0x48
10011e94:	64e7      	str	r7, [r4, #76]	; 0x4c
10011e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011e98:	1001380c 	.word	0x1001380c

10011e9c <_fwalk_reent>:
10011e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011e9e:	0004      	movs	r4, r0
10011ea0:	0007      	movs	r7, r0
10011ea2:	2600      	movs	r6, #0
10011ea4:	9101      	str	r1, [sp, #4]
10011ea6:	3448      	adds	r4, #72	; 0x48
10011ea8:	2c00      	cmp	r4, #0
10011eaa:	d016      	beq.n	10011eda <_fwalk_reent+0x3e>
10011eac:	6863      	ldr	r3, [r4, #4]
10011eae:	68a5      	ldr	r5, [r4, #8]
10011eb0:	9300      	str	r3, [sp, #0]
10011eb2:	9b00      	ldr	r3, [sp, #0]
10011eb4:	3b01      	subs	r3, #1
10011eb6:	9300      	str	r3, [sp, #0]
10011eb8:	d40d      	bmi.n	10011ed6 <_fwalk_reent+0x3a>
10011eba:	89ab      	ldrh	r3, [r5, #12]
10011ebc:	2b01      	cmp	r3, #1
10011ebe:	d908      	bls.n	10011ed2 <_fwalk_reent+0x36>
10011ec0:	220e      	movs	r2, #14
10011ec2:	5eab      	ldrsh	r3, [r5, r2]
10011ec4:	3301      	adds	r3, #1
10011ec6:	d004      	beq.n	10011ed2 <_fwalk_reent+0x36>
10011ec8:	0029      	movs	r1, r5
10011eca:	0038      	movs	r0, r7
10011ecc:	9b01      	ldr	r3, [sp, #4]
10011ece:	4798      	blx	r3
10011ed0:	4306      	orrs	r6, r0
10011ed2:	3568      	adds	r5, #104	; 0x68
10011ed4:	e7ed      	b.n	10011eb2 <_fwalk_reent+0x16>
10011ed6:	6824      	ldr	r4, [r4, #0]
10011ed8:	e7e6      	b.n	10011ea8 <_fwalk_reent+0xc>
10011eda:	0030      	movs	r0, r6
10011edc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10011ee0 <__swhatbuf_r>:
10011ee0:	b570      	push	{r4, r5, r6, lr}
10011ee2:	000e      	movs	r6, r1
10011ee4:	001d      	movs	r5, r3
10011ee6:	230e      	movs	r3, #14
10011ee8:	5ec9      	ldrsh	r1, [r1, r3]
10011eea:	b090      	sub	sp, #64	; 0x40
10011eec:	0014      	movs	r4, r2
10011eee:	2900      	cmp	r1, #0
10011ef0:	da06      	bge.n	10011f00 <__swhatbuf_r+0x20>
10011ef2:	2300      	movs	r3, #0
10011ef4:	602b      	str	r3, [r5, #0]
10011ef6:	89b3      	ldrh	r3, [r6, #12]
10011ef8:	061b      	lsls	r3, r3, #24
10011efa:	d50f      	bpl.n	10011f1c <__swhatbuf_r+0x3c>
10011efc:	2340      	movs	r3, #64	; 0x40
10011efe:	e00f      	b.n	10011f20 <__swhatbuf_r+0x40>
10011f00:	aa01      	add	r2, sp, #4
10011f02:	f000 fc85 	bl	10012810 <_fstat_r>
10011f06:	2800      	cmp	r0, #0
10011f08:	dbf3      	blt.n	10011ef2 <__swhatbuf_r+0x12>
10011f0a:	23f0      	movs	r3, #240	; 0xf0
10011f0c:	9a02      	ldr	r2, [sp, #8]
10011f0e:	021b      	lsls	r3, r3, #8
10011f10:	4013      	ands	r3, r2
10011f12:	4a05      	ldr	r2, [pc, #20]	; (10011f28 <__swhatbuf_r+0x48>)
10011f14:	189b      	adds	r3, r3, r2
10011f16:	425a      	negs	r2, r3
10011f18:	4153      	adcs	r3, r2
10011f1a:	602b      	str	r3, [r5, #0]
10011f1c:	2380      	movs	r3, #128	; 0x80
10011f1e:	00db      	lsls	r3, r3, #3
10011f20:	2000      	movs	r0, #0
10011f22:	6023      	str	r3, [r4, #0]
10011f24:	b010      	add	sp, #64	; 0x40
10011f26:	bd70      	pop	{r4, r5, r6, pc}
10011f28:	ffffe000 	.word	0xffffe000

10011f2c <__smakebuf_r>:
10011f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011f2e:	2602      	movs	r6, #2
10011f30:	898b      	ldrh	r3, [r1, #12]
10011f32:	0005      	movs	r5, r0
10011f34:	000c      	movs	r4, r1
10011f36:	4233      	tst	r3, r6
10011f38:	d110      	bne.n	10011f5c <__smakebuf_r+0x30>
10011f3a:	ab01      	add	r3, sp, #4
10011f3c:	466a      	mov	r2, sp
10011f3e:	f7ff ffcf 	bl	10011ee0 <__swhatbuf_r>
10011f42:	9900      	ldr	r1, [sp, #0]
10011f44:	0007      	movs	r7, r0
10011f46:	0028      	movs	r0, r5
10011f48:	f000 f87e 	bl	10012048 <_malloc_r>
10011f4c:	2800      	cmp	r0, #0
10011f4e:	d10c      	bne.n	10011f6a <__smakebuf_r+0x3e>
10011f50:	220c      	movs	r2, #12
10011f52:	5ea3      	ldrsh	r3, [r4, r2]
10011f54:	059a      	lsls	r2, r3, #22
10011f56:	d423      	bmi.n	10011fa0 <__smakebuf_r+0x74>
10011f58:	4333      	orrs	r3, r6
10011f5a:	81a3      	strh	r3, [r4, #12]
10011f5c:	0023      	movs	r3, r4
10011f5e:	3347      	adds	r3, #71	; 0x47
10011f60:	6023      	str	r3, [r4, #0]
10011f62:	6123      	str	r3, [r4, #16]
10011f64:	2301      	movs	r3, #1
10011f66:	6163      	str	r3, [r4, #20]
10011f68:	e01a      	b.n	10011fa0 <__smakebuf_r+0x74>
10011f6a:	2280      	movs	r2, #128	; 0x80
10011f6c:	4b0d      	ldr	r3, [pc, #52]	; (10011fa4 <__smakebuf_r+0x78>)
10011f6e:	62ab      	str	r3, [r5, #40]	; 0x28
10011f70:	89a3      	ldrh	r3, [r4, #12]
10011f72:	6020      	str	r0, [r4, #0]
10011f74:	4313      	orrs	r3, r2
10011f76:	81a3      	strh	r3, [r4, #12]
10011f78:	9b00      	ldr	r3, [sp, #0]
10011f7a:	6120      	str	r0, [r4, #16]
10011f7c:	6163      	str	r3, [r4, #20]
10011f7e:	9b01      	ldr	r3, [sp, #4]
10011f80:	2b00      	cmp	r3, #0
10011f82:	d00a      	beq.n	10011f9a <__smakebuf_r+0x6e>
10011f84:	230e      	movs	r3, #14
10011f86:	5ee1      	ldrsh	r1, [r4, r3]
10011f88:	0028      	movs	r0, r5
10011f8a:	f000 fc53 	bl	10012834 <_isatty_r>
10011f8e:	2800      	cmp	r0, #0
10011f90:	d003      	beq.n	10011f9a <__smakebuf_r+0x6e>
10011f92:	2201      	movs	r2, #1
10011f94:	89a3      	ldrh	r3, [r4, #12]
10011f96:	4313      	orrs	r3, r2
10011f98:	81a3      	strh	r3, [r4, #12]
10011f9a:	89a3      	ldrh	r3, [r4, #12]
10011f9c:	431f      	orrs	r7, r3
10011f9e:	81a7      	strh	r7, [r4, #12]
10011fa0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011fa2:	46c0      	nop			; (mov r8, r8)
10011fa4:	10011d35 	.word	0x10011d35

10011fa8 <malloc>:
10011fa8:	b510      	push	{r4, lr}
10011faa:	4b03      	ldr	r3, [pc, #12]	; (10011fb8 <malloc+0x10>)
10011fac:	0001      	movs	r1, r0
10011fae:	6818      	ldr	r0, [r3, #0]
10011fb0:	f000 f84a 	bl	10012048 <_malloc_r>
10011fb4:	bd10      	pop	{r4, pc}
10011fb6:	46c0      	nop			; (mov r8, r8)
10011fb8:	10013938 	.word	0x10013938

10011fbc <_free_r>:
10011fbc:	b530      	push	{r4, r5, lr}
10011fbe:	2900      	cmp	r1, #0
10011fc0:	d03e      	beq.n	10012040 <_free_r+0x84>
10011fc2:	3904      	subs	r1, #4
10011fc4:	680b      	ldr	r3, [r1, #0]
10011fc6:	2b00      	cmp	r3, #0
10011fc8:	da00      	bge.n	10011fcc <_free_r+0x10>
10011fca:	18c9      	adds	r1, r1, r3
10011fcc:	4a1d      	ldr	r2, [pc, #116]	; (10012044 <_free_r+0x88>)
10011fce:	6813      	ldr	r3, [r2, #0]
10011fd0:	0014      	movs	r4, r2
10011fd2:	2b00      	cmp	r3, #0
10011fd4:	d102      	bne.n	10011fdc <_free_r+0x20>
10011fd6:	604b      	str	r3, [r1, #4]
10011fd8:	6011      	str	r1, [r2, #0]
10011fda:	e031      	b.n	10012040 <_free_r+0x84>
10011fdc:	428b      	cmp	r3, r1
10011fde:	d90d      	bls.n	10011ffc <_free_r+0x40>
10011fe0:	680a      	ldr	r2, [r1, #0]
10011fe2:	1888      	adds	r0, r1, r2
10011fe4:	4283      	cmp	r3, r0
10011fe6:	d103      	bne.n	10011ff0 <_free_r+0x34>
10011fe8:	6818      	ldr	r0, [r3, #0]
10011fea:	685b      	ldr	r3, [r3, #4]
10011fec:	1882      	adds	r2, r0, r2
10011fee:	600a      	str	r2, [r1, #0]
10011ff0:	604b      	str	r3, [r1, #4]
10011ff2:	6021      	str	r1, [r4, #0]
10011ff4:	e024      	b.n	10012040 <_free_r+0x84>
10011ff6:	428a      	cmp	r2, r1
10011ff8:	d803      	bhi.n	10012002 <_free_r+0x46>
10011ffa:	0013      	movs	r3, r2
10011ffc:	685a      	ldr	r2, [r3, #4]
10011ffe:	2a00      	cmp	r2, #0
10012000:	d1f9      	bne.n	10011ff6 <_free_r+0x3a>
10012002:	681d      	ldr	r5, [r3, #0]
10012004:	195c      	adds	r4, r3, r5
10012006:	428c      	cmp	r4, r1
10012008:	d10b      	bne.n	10012022 <_free_r+0x66>
1001200a:	6809      	ldr	r1, [r1, #0]
1001200c:	1869      	adds	r1, r5, r1
1001200e:	1858      	adds	r0, r3, r1
10012010:	6019      	str	r1, [r3, #0]
10012012:	4282      	cmp	r2, r0
10012014:	d114      	bne.n	10012040 <_free_r+0x84>
10012016:	6810      	ldr	r0, [r2, #0]
10012018:	6852      	ldr	r2, [r2, #4]
1001201a:	1841      	adds	r1, r0, r1
1001201c:	6019      	str	r1, [r3, #0]
1001201e:	605a      	str	r2, [r3, #4]
10012020:	e00e      	b.n	10012040 <_free_r+0x84>
10012022:	428c      	cmp	r4, r1
10012024:	d902      	bls.n	1001202c <_free_r+0x70>
10012026:	230c      	movs	r3, #12
10012028:	6003      	str	r3, [r0, #0]
1001202a:	e009      	b.n	10012040 <_free_r+0x84>
1001202c:	6808      	ldr	r0, [r1, #0]
1001202e:	180c      	adds	r4, r1, r0
10012030:	42a2      	cmp	r2, r4
10012032:	d103      	bne.n	1001203c <_free_r+0x80>
10012034:	6814      	ldr	r4, [r2, #0]
10012036:	6852      	ldr	r2, [r2, #4]
10012038:	1820      	adds	r0, r4, r0
1001203a:	6008      	str	r0, [r1, #0]
1001203c:	604a      	str	r2, [r1, #4]
1001203e:	6059      	str	r1, [r3, #4]
10012040:	bd30      	pop	{r4, r5, pc}
10012042:	46c0      	nop			; (mov r8, r8)
10012044:	10015428 	.word	0x10015428

10012048 <_malloc_r>:
10012048:	2303      	movs	r3, #3
1001204a:	b570      	push	{r4, r5, r6, lr}
1001204c:	1ccd      	adds	r5, r1, #3
1001204e:	439d      	bics	r5, r3
10012050:	3508      	adds	r5, #8
10012052:	0006      	movs	r6, r0
10012054:	2d0c      	cmp	r5, #12
10012056:	d201      	bcs.n	1001205c <_malloc_r+0x14>
10012058:	250c      	movs	r5, #12
1001205a:	e005      	b.n	10012068 <_malloc_r+0x20>
1001205c:	2d00      	cmp	r5, #0
1001205e:	da03      	bge.n	10012068 <_malloc_r+0x20>
10012060:	230c      	movs	r3, #12
10012062:	2000      	movs	r0, #0
10012064:	6033      	str	r3, [r6, #0]
10012066:	e040      	b.n	100120ea <_malloc_r+0xa2>
10012068:	42a9      	cmp	r1, r5
1001206a:	d8f9      	bhi.n	10012060 <_malloc_r+0x18>
1001206c:	4b1f      	ldr	r3, [pc, #124]	; (100120ec <_malloc_r+0xa4>)
1001206e:	681c      	ldr	r4, [r3, #0]
10012070:	001a      	movs	r2, r3
10012072:	0021      	movs	r1, r4
10012074:	2900      	cmp	r1, #0
10012076:	d013      	beq.n	100120a0 <_malloc_r+0x58>
10012078:	680b      	ldr	r3, [r1, #0]
1001207a:	1b5b      	subs	r3, r3, r5
1001207c:	d40d      	bmi.n	1001209a <_malloc_r+0x52>
1001207e:	2b0b      	cmp	r3, #11
10012080:	d902      	bls.n	10012088 <_malloc_r+0x40>
10012082:	600b      	str	r3, [r1, #0]
10012084:	18cc      	adds	r4, r1, r3
10012086:	e01e      	b.n	100120c6 <_malloc_r+0x7e>
10012088:	428c      	cmp	r4, r1
1001208a:	d102      	bne.n	10012092 <_malloc_r+0x4a>
1001208c:	6863      	ldr	r3, [r4, #4]
1001208e:	6013      	str	r3, [r2, #0]
10012090:	e01a      	b.n	100120c8 <_malloc_r+0x80>
10012092:	684b      	ldr	r3, [r1, #4]
10012094:	6063      	str	r3, [r4, #4]
10012096:	000c      	movs	r4, r1
10012098:	e016      	b.n	100120c8 <_malloc_r+0x80>
1001209a:	000c      	movs	r4, r1
1001209c:	6849      	ldr	r1, [r1, #4]
1001209e:	e7e9      	b.n	10012074 <_malloc_r+0x2c>
100120a0:	4c13      	ldr	r4, [pc, #76]	; (100120f0 <_malloc_r+0xa8>)
100120a2:	6823      	ldr	r3, [r4, #0]
100120a4:	2b00      	cmp	r3, #0
100120a6:	d103      	bne.n	100120b0 <_malloc_r+0x68>
100120a8:	0030      	movs	r0, r6
100120aa:	f000 fb2d 	bl	10012708 <_sbrk_r>
100120ae:	6020      	str	r0, [r4, #0]
100120b0:	0029      	movs	r1, r5
100120b2:	0030      	movs	r0, r6
100120b4:	f000 fb28 	bl	10012708 <_sbrk_r>
100120b8:	1c43      	adds	r3, r0, #1
100120ba:	d0d1      	beq.n	10012060 <_malloc_r+0x18>
100120bc:	2303      	movs	r3, #3
100120be:	1cc4      	adds	r4, r0, #3
100120c0:	439c      	bics	r4, r3
100120c2:	42a0      	cmp	r0, r4
100120c4:	d10a      	bne.n	100120dc <_malloc_r+0x94>
100120c6:	6025      	str	r5, [r4, #0]
100120c8:	0020      	movs	r0, r4
100120ca:	2207      	movs	r2, #7
100120cc:	300b      	adds	r0, #11
100120ce:	1d23      	adds	r3, r4, #4
100120d0:	4390      	bics	r0, r2
100120d2:	1ac3      	subs	r3, r0, r3
100120d4:	d009      	beq.n	100120ea <_malloc_r+0xa2>
100120d6:	425a      	negs	r2, r3
100120d8:	50e2      	str	r2, [r4, r3]
100120da:	e006      	b.n	100120ea <_malloc_r+0xa2>
100120dc:	1a21      	subs	r1, r4, r0
100120de:	0030      	movs	r0, r6
100120e0:	f000 fb12 	bl	10012708 <_sbrk_r>
100120e4:	1c43      	adds	r3, r0, #1
100120e6:	d1ee      	bne.n	100120c6 <_malloc_r+0x7e>
100120e8:	e7ba      	b.n	10012060 <_malloc_r+0x18>
100120ea:	bd70      	pop	{r4, r5, r6, pc}
100120ec:	10015428 	.word	0x10015428
100120f0:	10015424 	.word	0x10015424

100120f4 <__sfputc_r>:
100120f4:	6893      	ldr	r3, [r2, #8]
100120f6:	b510      	push	{r4, lr}
100120f8:	3b01      	subs	r3, #1
100120fa:	6093      	str	r3, [r2, #8]
100120fc:	2b00      	cmp	r3, #0
100120fe:	da05      	bge.n	1001210c <__sfputc_r+0x18>
10012100:	6994      	ldr	r4, [r2, #24]
10012102:	42a3      	cmp	r3, r4
10012104:	db08      	blt.n	10012118 <__sfputc_r+0x24>
10012106:	b2cb      	uxtb	r3, r1
10012108:	2b0a      	cmp	r3, #10
1001210a:	d005      	beq.n	10012118 <__sfputc_r+0x24>
1001210c:	6813      	ldr	r3, [r2, #0]
1001210e:	1c58      	adds	r0, r3, #1
10012110:	6010      	str	r0, [r2, #0]
10012112:	7019      	strb	r1, [r3, #0]
10012114:	b2c8      	uxtb	r0, r1
10012116:	e001      	b.n	1001211c <__sfputc_r+0x28>
10012118:	f7ff fc8c 	bl	10011a34 <__swbuf_r>
1001211c:	bd10      	pop	{r4, pc}

1001211e <__sfputs_r>:
1001211e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012120:	0006      	movs	r6, r0
10012122:	000f      	movs	r7, r1
10012124:	0014      	movs	r4, r2
10012126:	18d5      	adds	r5, r2, r3
10012128:	42ac      	cmp	r4, r5
1001212a:	d008      	beq.n	1001213e <__sfputs_r+0x20>
1001212c:	7821      	ldrb	r1, [r4, #0]
1001212e:	003a      	movs	r2, r7
10012130:	0030      	movs	r0, r6
10012132:	f7ff ffdf 	bl	100120f4 <__sfputc_r>
10012136:	3401      	adds	r4, #1
10012138:	1c43      	adds	r3, r0, #1
1001213a:	d1f5      	bne.n	10012128 <__sfputs_r+0xa>
1001213c:	e000      	b.n	10012140 <__sfputs_r+0x22>
1001213e:	2000      	movs	r0, #0
10012140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10012144 <_vfiprintf_r>:
10012144:	b5f0      	push	{r4, r5, r6, r7, lr}
10012146:	b09f      	sub	sp, #124	; 0x7c
10012148:	0006      	movs	r6, r0
1001214a:	000f      	movs	r7, r1
1001214c:	9202      	str	r2, [sp, #8]
1001214e:	9305      	str	r3, [sp, #20]
10012150:	2800      	cmp	r0, #0
10012152:	d004      	beq.n	1001215e <_vfiprintf_r+0x1a>
10012154:	6983      	ldr	r3, [r0, #24]
10012156:	2b00      	cmp	r3, #0
10012158:	d101      	bne.n	1001215e <_vfiprintf_r+0x1a>
1001215a:	f7ff fe2d 	bl	10011db8 <__sinit>
1001215e:	4b7f      	ldr	r3, [pc, #508]	; (1001235c <_vfiprintf_r+0x218>)
10012160:	429f      	cmp	r7, r3
10012162:	d101      	bne.n	10012168 <_vfiprintf_r+0x24>
10012164:	6877      	ldr	r7, [r6, #4]
10012166:	e008      	b.n	1001217a <_vfiprintf_r+0x36>
10012168:	4b7d      	ldr	r3, [pc, #500]	; (10012360 <_vfiprintf_r+0x21c>)
1001216a:	429f      	cmp	r7, r3
1001216c:	d101      	bne.n	10012172 <_vfiprintf_r+0x2e>
1001216e:	68b7      	ldr	r7, [r6, #8]
10012170:	e003      	b.n	1001217a <_vfiprintf_r+0x36>
10012172:	4b7c      	ldr	r3, [pc, #496]	; (10012364 <_vfiprintf_r+0x220>)
10012174:	429f      	cmp	r7, r3
10012176:	d100      	bne.n	1001217a <_vfiprintf_r+0x36>
10012178:	68f7      	ldr	r7, [r6, #12]
1001217a:	89bb      	ldrh	r3, [r7, #12]
1001217c:	071b      	lsls	r3, r3, #28
1001217e:	d50a      	bpl.n	10012196 <_vfiprintf_r+0x52>
10012180:	693b      	ldr	r3, [r7, #16]
10012182:	2b00      	cmp	r3, #0
10012184:	d007      	beq.n	10012196 <_vfiprintf_r+0x52>
10012186:	2300      	movs	r3, #0
10012188:	ad06      	add	r5, sp, #24
1001218a:	616b      	str	r3, [r5, #20]
1001218c:	3320      	adds	r3, #32
1001218e:	766b      	strb	r3, [r5, #25]
10012190:	3310      	adds	r3, #16
10012192:	76ab      	strb	r3, [r5, #26]
10012194:	e03d      	b.n	10012212 <_vfiprintf_r+0xce>
10012196:	0039      	movs	r1, r7
10012198:	0030      	movs	r0, r6
1001219a:	f7ff fca3 	bl	10011ae4 <__swsetup_r>
1001219e:	2800      	cmp	r0, #0
100121a0:	d0f1      	beq.n	10012186 <_vfiprintf_r+0x42>
100121a2:	2001      	movs	r0, #1
100121a4:	4240      	negs	r0, r0
100121a6:	e0d6      	b.n	10012356 <_vfiprintf_r+0x212>
100121a8:	9a05      	ldr	r2, [sp, #20]
100121aa:	1d11      	adds	r1, r2, #4
100121ac:	6812      	ldr	r2, [r2, #0]
100121ae:	9105      	str	r1, [sp, #20]
100121b0:	2a00      	cmp	r2, #0
100121b2:	da00      	bge.n	100121b6 <_vfiprintf_r+0x72>
100121b4:	e07f      	b.n	100122b6 <_vfiprintf_r+0x172>
100121b6:	9209      	str	r2, [sp, #36]	; 0x24
100121b8:	3401      	adds	r4, #1
100121ba:	7823      	ldrb	r3, [r4, #0]
100121bc:	2b2e      	cmp	r3, #46	; 0x2e
100121be:	d100      	bne.n	100121c2 <_vfiprintf_r+0x7e>
100121c0:	e08d      	b.n	100122de <_vfiprintf_r+0x19a>
100121c2:	7821      	ldrb	r1, [r4, #0]
100121c4:	2203      	movs	r2, #3
100121c6:	4868      	ldr	r0, [pc, #416]	; (10012368 <_vfiprintf_r+0x224>)
100121c8:	f000 fb5a 	bl	10012880 <memchr>
100121cc:	2800      	cmp	r0, #0
100121ce:	d007      	beq.n	100121e0 <_vfiprintf_r+0x9c>
100121d0:	4b65      	ldr	r3, [pc, #404]	; (10012368 <_vfiprintf_r+0x224>)
100121d2:	682a      	ldr	r2, [r5, #0]
100121d4:	1ac0      	subs	r0, r0, r3
100121d6:	2340      	movs	r3, #64	; 0x40
100121d8:	4083      	lsls	r3, r0
100121da:	4313      	orrs	r3, r2
100121dc:	602b      	str	r3, [r5, #0]
100121de:	3401      	adds	r4, #1
100121e0:	7821      	ldrb	r1, [r4, #0]
100121e2:	1c63      	adds	r3, r4, #1
100121e4:	2206      	movs	r2, #6
100121e6:	4861      	ldr	r0, [pc, #388]	; (1001236c <_vfiprintf_r+0x228>)
100121e8:	9302      	str	r3, [sp, #8]
100121ea:	7629      	strb	r1, [r5, #24]
100121ec:	f000 fb48 	bl	10012880 <memchr>
100121f0:	2800      	cmp	r0, #0
100121f2:	d100      	bne.n	100121f6 <_vfiprintf_r+0xb2>
100121f4:	e09d      	b.n	10012332 <_vfiprintf_r+0x1ee>
100121f6:	4b5e      	ldr	r3, [pc, #376]	; (10012370 <_vfiprintf_r+0x22c>)
100121f8:	2b00      	cmp	r3, #0
100121fa:	d000      	beq.n	100121fe <_vfiprintf_r+0xba>
100121fc:	e090      	b.n	10012320 <_vfiprintf_r+0x1dc>
100121fe:	2207      	movs	r2, #7
10012200:	9b05      	ldr	r3, [sp, #20]
10012202:	3307      	adds	r3, #7
10012204:	4393      	bics	r3, r2
10012206:	3308      	adds	r3, #8
10012208:	9305      	str	r3, [sp, #20]
1001220a:	696b      	ldr	r3, [r5, #20]
1001220c:	9a03      	ldr	r2, [sp, #12]
1001220e:	189b      	adds	r3, r3, r2
10012210:	616b      	str	r3, [r5, #20]
10012212:	9c02      	ldr	r4, [sp, #8]
10012214:	7823      	ldrb	r3, [r4, #0]
10012216:	2b00      	cmp	r3, #0
10012218:	d104      	bne.n	10012224 <_vfiprintf_r+0xe0>
1001221a:	9b02      	ldr	r3, [sp, #8]
1001221c:	1ae3      	subs	r3, r4, r3
1001221e:	9304      	str	r3, [sp, #16]
10012220:	d012      	beq.n	10012248 <_vfiprintf_r+0x104>
10012222:	e003      	b.n	1001222c <_vfiprintf_r+0xe8>
10012224:	2b25      	cmp	r3, #37	; 0x25
10012226:	d0f8      	beq.n	1001221a <_vfiprintf_r+0xd6>
10012228:	3401      	adds	r4, #1
1001222a:	e7f3      	b.n	10012214 <_vfiprintf_r+0xd0>
1001222c:	9b04      	ldr	r3, [sp, #16]
1001222e:	9a02      	ldr	r2, [sp, #8]
10012230:	0039      	movs	r1, r7
10012232:	0030      	movs	r0, r6
10012234:	f7ff ff73 	bl	1001211e <__sfputs_r>
10012238:	1c43      	adds	r3, r0, #1
1001223a:	d100      	bne.n	1001223e <_vfiprintf_r+0xfa>
1001223c:	e086      	b.n	1001234c <_vfiprintf_r+0x208>
1001223e:	696a      	ldr	r2, [r5, #20]
10012240:	9b04      	ldr	r3, [sp, #16]
10012242:	4694      	mov	ip, r2
10012244:	4463      	add	r3, ip
10012246:	616b      	str	r3, [r5, #20]
10012248:	7823      	ldrb	r3, [r4, #0]
1001224a:	2b00      	cmp	r3, #0
1001224c:	d07e      	beq.n	1001234c <_vfiprintf_r+0x208>
1001224e:	2201      	movs	r2, #1
10012250:	2300      	movs	r3, #0
10012252:	4252      	negs	r2, r2
10012254:	606a      	str	r2, [r5, #4]
10012256:	a902      	add	r1, sp, #8
10012258:	3254      	adds	r2, #84	; 0x54
1001225a:	1852      	adds	r2, r2, r1
1001225c:	3401      	adds	r4, #1
1001225e:	602b      	str	r3, [r5, #0]
10012260:	60eb      	str	r3, [r5, #12]
10012262:	60ab      	str	r3, [r5, #8]
10012264:	7013      	strb	r3, [r2, #0]
10012266:	65ab      	str	r3, [r5, #88]	; 0x58
10012268:	7821      	ldrb	r1, [r4, #0]
1001226a:	2205      	movs	r2, #5
1001226c:	4841      	ldr	r0, [pc, #260]	; (10012374 <_vfiprintf_r+0x230>)
1001226e:	f000 fb07 	bl	10012880 <memchr>
10012272:	2800      	cmp	r0, #0
10012274:	d008      	beq.n	10012288 <_vfiprintf_r+0x144>
10012276:	4b3f      	ldr	r3, [pc, #252]	; (10012374 <_vfiprintf_r+0x230>)
10012278:	682a      	ldr	r2, [r5, #0]
1001227a:	1ac0      	subs	r0, r0, r3
1001227c:	2301      	movs	r3, #1
1001227e:	4083      	lsls	r3, r0
10012280:	4313      	orrs	r3, r2
10012282:	602b      	str	r3, [r5, #0]
10012284:	3401      	adds	r4, #1
10012286:	e7ef      	b.n	10012268 <_vfiprintf_r+0x124>
10012288:	682b      	ldr	r3, [r5, #0]
1001228a:	06da      	lsls	r2, r3, #27
1001228c:	d504      	bpl.n	10012298 <_vfiprintf_r+0x154>
1001228e:	2253      	movs	r2, #83	; 0x53
10012290:	2120      	movs	r1, #32
10012292:	a802      	add	r0, sp, #8
10012294:	1812      	adds	r2, r2, r0
10012296:	7011      	strb	r1, [r2, #0]
10012298:	071a      	lsls	r2, r3, #28
1001229a:	d504      	bpl.n	100122a6 <_vfiprintf_r+0x162>
1001229c:	2253      	movs	r2, #83	; 0x53
1001229e:	212b      	movs	r1, #43	; 0x2b
100122a0:	a802      	add	r0, sp, #8
100122a2:	1812      	adds	r2, r2, r0
100122a4:	7011      	strb	r1, [r2, #0]
100122a6:	7822      	ldrb	r2, [r4, #0]
100122a8:	2a2a      	cmp	r2, #42	; 0x2a
100122aa:	d100      	bne.n	100122ae <_vfiprintf_r+0x16a>
100122ac:	e77c      	b.n	100121a8 <_vfiprintf_r+0x64>
100122ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
100122b0:	2000      	movs	r0, #0
100122b2:	210a      	movs	r1, #10
100122b4:	e005      	b.n	100122c2 <_vfiprintf_r+0x17e>
100122b6:	4252      	negs	r2, r2
100122b8:	60ea      	str	r2, [r5, #12]
100122ba:	2202      	movs	r2, #2
100122bc:	4313      	orrs	r3, r2
100122be:	602b      	str	r3, [r5, #0]
100122c0:	e77a      	b.n	100121b8 <_vfiprintf_r+0x74>
100122c2:	7822      	ldrb	r2, [r4, #0]
100122c4:	3a30      	subs	r2, #48	; 0x30
100122c6:	2a09      	cmp	r2, #9
100122c8:	d804      	bhi.n	100122d4 <_vfiprintf_r+0x190>
100122ca:	434b      	muls	r3, r1
100122cc:	3401      	adds	r4, #1
100122ce:	189b      	adds	r3, r3, r2
100122d0:	2001      	movs	r0, #1
100122d2:	e7f6      	b.n	100122c2 <_vfiprintf_r+0x17e>
100122d4:	2800      	cmp	r0, #0
100122d6:	d100      	bne.n	100122da <_vfiprintf_r+0x196>
100122d8:	e76f      	b.n	100121ba <_vfiprintf_r+0x76>
100122da:	9309      	str	r3, [sp, #36]	; 0x24
100122dc:	e76d      	b.n	100121ba <_vfiprintf_r+0x76>
100122de:	7863      	ldrb	r3, [r4, #1]
100122e0:	2b2a      	cmp	r3, #42	; 0x2a
100122e2:	d10a      	bne.n	100122fa <_vfiprintf_r+0x1b6>
100122e4:	9b05      	ldr	r3, [sp, #20]
100122e6:	3402      	adds	r4, #2
100122e8:	1d1a      	adds	r2, r3, #4
100122ea:	681b      	ldr	r3, [r3, #0]
100122ec:	9205      	str	r2, [sp, #20]
100122ee:	2b00      	cmp	r3, #0
100122f0:	da01      	bge.n	100122f6 <_vfiprintf_r+0x1b2>
100122f2:	2301      	movs	r3, #1
100122f4:	425b      	negs	r3, r3
100122f6:	9307      	str	r3, [sp, #28]
100122f8:	e763      	b.n	100121c2 <_vfiprintf_r+0x7e>
100122fa:	2300      	movs	r3, #0
100122fc:	200a      	movs	r0, #10
100122fe:	001a      	movs	r2, r3
10012300:	3401      	adds	r4, #1
10012302:	606b      	str	r3, [r5, #4]
10012304:	7821      	ldrb	r1, [r4, #0]
10012306:	3930      	subs	r1, #48	; 0x30
10012308:	2909      	cmp	r1, #9
1001230a:	d804      	bhi.n	10012316 <_vfiprintf_r+0x1d2>
1001230c:	4342      	muls	r2, r0
1001230e:	3401      	adds	r4, #1
10012310:	1852      	adds	r2, r2, r1
10012312:	2301      	movs	r3, #1
10012314:	e7f6      	b.n	10012304 <_vfiprintf_r+0x1c0>
10012316:	2b00      	cmp	r3, #0
10012318:	d100      	bne.n	1001231c <_vfiprintf_r+0x1d8>
1001231a:	e752      	b.n	100121c2 <_vfiprintf_r+0x7e>
1001231c:	9207      	str	r2, [sp, #28]
1001231e:	e750      	b.n	100121c2 <_vfiprintf_r+0x7e>
10012320:	ab05      	add	r3, sp, #20
10012322:	9300      	str	r3, [sp, #0]
10012324:	003a      	movs	r2, r7
10012326:	4b14      	ldr	r3, [pc, #80]	; (10012378 <_vfiprintf_r+0x234>)
10012328:	0029      	movs	r1, r5
1001232a:	0030      	movs	r0, r6
1001232c:	e000      	b.n	10012330 <_vfiprintf_r+0x1ec>
1001232e:	bf00      	nop
10012330:	e007      	b.n	10012342 <_vfiprintf_r+0x1fe>
10012332:	ab05      	add	r3, sp, #20
10012334:	9300      	str	r3, [sp, #0]
10012336:	003a      	movs	r2, r7
10012338:	4b0f      	ldr	r3, [pc, #60]	; (10012378 <_vfiprintf_r+0x234>)
1001233a:	0029      	movs	r1, r5
1001233c:	0030      	movs	r0, r6
1001233e:	f000 f88b 	bl	10012458 <_printf_i>
10012342:	9003      	str	r0, [sp, #12]
10012344:	9b03      	ldr	r3, [sp, #12]
10012346:	3301      	adds	r3, #1
10012348:	d000      	beq.n	1001234c <_vfiprintf_r+0x208>
1001234a:	e75e      	b.n	1001220a <_vfiprintf_r+0xc6>
1001234c:	89bb      	ldrh	r3, [r7, #12]
1001234e:	065b      	lsls	r3, r3, #25
10012350:	d500      	bpl.n	10012354 <_vfiprintf_r+0x210>
10012352:	e726      	b.n	100121a2 <_vfiprintf_r+0x5e>
10012354:	980b      	ldr	r0, [sp, #44]	; 0x2c
10012356:	b01f      	add	sp, #124	; 0x7c
10012358:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001235a:	46c0      	nop			; (mov r8, r8)
1001235c:	10013810 	.word	0x10013810
10012360:	10013830 	.word	0x10013830
10012364:	10013850 	.word	0x10013850
10012368:	10013876 	.word	0x10013876
1001236c:	1001387a 	.word	0x1001387a
10012370:	00000000 	.word	0x00000000
10012374:	10013870 	.word	0x10013870
10012378:	1001211f 	.word	0x1001211f

1001237c <_printf_common>:
1001237c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001237e:	0017      	movs	r7, r2
10012380:	9301      	str	r3, [sp, #4]
10012382:	688a      	ldr	r2, [r1, #8]
10012384:	690b      	ldr	r3, [r1, #16]
10012386:	9000      	str	r0, [sp, #0]
10012388:	000c      	movs	r4, r1
1001238a:	4293      	cmp	r3, r2
1001238c:	da00      	bge.n	10012390 <_printf_common+0x14>
1001238e:	0013      	movs	r3, r2
10012390:	0022      	movs	r2, r4
10012392:	603b      	str	r3, [r7, #0]
10012394:	3243      	adds	r2, #67	; 0x43
10012396:	7812      	ldrb	r2, [r2, #0]
10012398:	2a00      	cmp	r2, #0
1001239a:	d001      	beq.n	100123a0 <_printf_common+0x24>
1001239c:	3301      	adds	r3, #1
1001239e:	603b      	str	r3, [r7, #0]
100123a0:	6823      	ldr	r3, [r4, #0]
100123a2:	069b      	lsls	r3, r3, #26
100123a4:	d502      	bpl.n	100123ac <_printf_common+0x30>
100123a6:	683b      	ldr	r3, [r7, #0]
100123a8:	3302      	adds	r3, #2
100123aa:	603b      	str	r3, [r7, #0]
100123ac:	2506      	movs	r5, #6
100123ae:	6823      	ldr	r3, [r4, #0]
100123b0:	401d      	ands	r5, r3
100123b2:	d01e      	beq.n	100123f2 <_printf_common+0x76>
100123b4:	0023      	movs	r3, r4
100123b6:	3343      	adds	r3, #67	; 0x43
100123b8:	781b      	ldrb	r3, [r3, #0]
100123ba:	1e5a      	subs	r2, r3, #1
100123bc:	4193      	sbcs	r3, r2
100123be:	6822      	ldr	r2, [r4, #0]
100123c0:	0692      	lsls	r2, r2, #26
100123c2:	d51c      	bpl.n	100123fe <_printf_common+0x82>
100123c4:	2030      	movs	r0, #48	; 0x30
100123c6:	18e1      	adds	r1, r4, r3
100123c8:	3143      	adds	r1, #67	; 0x43
100123ca:	7008      	strb	r0, [r1, #0]
100123cc:	0021      	movs	r1, r4
100123ce:	1c5a      	adds	r2, r3, #1
100123d0:	3145      	adds	r1, #69	; 0x45
100123d2:	7809      	ldrb	r1, [r1, #0]
100123d4:	18a2      	adds	r2, r4, r2
100123d6:	3243      	adds	r2, #67	; 0x43
100123d8:	3302      	adds	r3, #2
100123da:	7011      	strb	r1, [r2, #0]
100123dc:	e00f      	b.n	100123fe <_printf_common+0x82>
100123de:	0022      	movs	r2, r4
100123e0:	2301      	movs	r3, #1
100123e2:	3219      	adds	r2, #25
100123e4:	9901      	ldr	r1, [sp, #4]
100123e6:	9800      	ldr	r0, [sp, #0]
100123e8:	9e08      	ldr	r6, [sp, #32]
100123ea:	47b0      	blx	r6
100123ec:	1c43      	adds	r3, r0, #1
100123ee:	d00e      	beq.n	1001240e <_printf_common+0x92>
100123f0:	3501      	adds	r5, #1
100123f2:	68e3      	ldr	r3, [r4, #12]
100123f4:	683a      	ldr	r2, [r7, #0]
100123f6:	1a9b      	subs	r3, r3, r2
100123f8:	429d      	cmp	r5, r3
100123fa:	dbf0      	blt.n	100123de <_printf_common+0x62>
100123fc:	e7da      	b.n	100123b4 <_printf_common+0x38>
100123fe:	0022      	movs	r2, r4
10012400:	9901      	ldr	r1, [sp, #4]
10012402:	3243      	adds	r2, #67	; 0x43
10012404:	9800      	ldr	r0, [sp, #0]
10012406:	9d08      	ldr	r5, [sp, #32]
10012408:	47a8      	blx	r5
1001240a:	1c43      	adds	r3, r0, #1
1001240c:	d102      	bne.n	10012414 <_printf_common+0x98>
1001240e:	2001      	movs	r0, #1
10012410:	4240      	negs	r0, r0
10012412:	e020      	b.n	10012456 <_printf_common+0xda>
10012414:	2306      	movs	r3, #6
10012416:	6820      	ldr	r0, [r4, #0]
10012418:	68e1      	ldr	r1, [r4, #12]
1001241a:	683a      	ldr	r2, [r7, #0]
1001241c:	4003      	ands	r3, r0
1001241e:	2500      	movs	r5, #0
10012420:	2b04      	cmp	r3, #4
10012422:	d103      	bne.n	1001242c <_printf_common+0xb0>
10012424:	1a8d      	subs	r5, r1, r2
10012426:	43eb      	mvns	r3, r5
10012428:	17db      	asrs	r3, r3, #31
1001242a:	401d      	ands	r5, r3
1001242c:	68a3      	ldr	r3, [r4, #8]
1001242e:	6922      	ldr	r2, [r4, #16]
10012430:	4293      	cmp	r3, r2
10012432:	dd01      	ble.n	10012438 <_printf_common+0xbc>
10012434:	1a9b      	subs	r3, r3, r2
10012436:	18ed      	adds	r5, r5, r3
10012438:	2700      	movs	r7, #0
1001243a:	42bd      	cmp	r5, r7
1001243c:	d00a      	beq.n	10012454 <_printf_common+0xd8>
1001243e:	0022      	movs	r2, r4
10012440:	2301      	movs	r3, #1
10012442:	321a      	adds	r2, #26
10012444:	9901      	ldr	r1, [sp, #4]
10012446:	9800      	ldr	r0, [sp, #0]
10012448:	9e08      	ldr	r6, [sp, #32]
1001244a:	47b0      	blx	r6
1001244c:	1c43      	adds	r3, r0, #1
1001244e:	d0de      	beq.n	1001240e <_printf_common+0x92>
10012450:	3701      	adds	r7, #1
10012452:	e7f2      	b.n	1001243a <_printf_common+0xbe>
10012454:	2000      	movs	r0, #0
10012456:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012458 <_printf_i>:
10012458:	b5f0      	push	{r4, r5, r6, r7, lr}
1001245a:	b08b      	sub	sp, #44	; 0x2c
1001245c:	9206      	str	r2, [sp, #24]
1001245e:	000a      	movs	r2, r1
10012460:	3243      	adds	r2, #67	; 0x43
10012462:	9307      	str	r3, [sp, #28]
10012464:	9005      	str	r0, [sp, #20]
10012466:	9204      	str	r2, [sp, #16]
10012468:	7e0a      	ldrb	r2, [r1, #24]
1001246a:	000c      	movs	r4, r1
1001246c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001246e:	2a6e      	cmp	r2, #110	; 0x6e
10012470:	d100      	bne.n	10012474 <_printf_i+0x1c>
10012472:	e0ab      	b.n	100125cc <_printf_i+0x174>
10012474:	d811      	bhi.n	1001249a <_printf_i+0x42>
10012476:	2a63      	cmp	r2, #99	; 0x63
10012478:	d022      	beq.n	100124c0 <_printf_i+0x68>
1001247a:	d809      	bhi.n	10012490 <_printf_i+0x38>
1001247c:	2a00      	cmp	r2, #0
1001247e:	d100      	bne.n	10012482 <_printf_i+0x2a>
10012480:	e0b5      	b.n	100125ee <_printf_i+0x196>
10012482:	2a58      	cmp	r2, #88	; 0x58
10012484:	d000      	beq.n	10012488 <_printf_i+0x30>
10012486:	e0c5      	b.n	10012614 <_printf_i+0x1bc>
10012488:	3145      	adds	r1, #69	; 0x45
1001248a:	700a      	strb	r2, [r1, #0]
1001248c:	4a81      	ldr	r2, [pc, #516]	; (10012694 <_printf_i+0x23c>)
1001248e:	e04f      	b.n	10012530 <_printf_i+0xd8>
10012490:	2a64      	cmp	r2, #100	; 0x64
10012492:	d01d      	beq.n	100124d0 <_printf_i+0x78>
10012494:	2a69      	cmp	r2, #105	; 0x69
10012496:	d01b      	beq.n	100124d0 <_printf_i+0x78>
10012498:	e0bc      	b.n	10012614 <_printf_i+0x1bc>
1001249a:	2a73      	cmp	r2, #115	; 0x73
1001249c:	d100      	bne.n	100124a0 <_printf_i+0x48>
1001249e:	e0aa      	b.n	100125f6 <_printf_i+0x19e>
100124a0:	d809      	bhi.n	100124b6 <_printf_i+0x5e>
100124a2:	2a6f      	cmp	r2, #111	; 0x6f
100124a4:	d029      	beq.n	100124fa <_printf_i+0xa2>
100124a6:	2a70      	cmp	r2, #112	; 0x70
100124a8:	d000      	beq.n	100124ac <_printf_i+0x54>
100124aa:	e0b3      	b.n	10012614 <_printf_i+0x1bc>
100124ac:	2220      	movs	r2, #32
100124ae:	6809      	ldr	r1, [r1, #0]
100124b0:	430a      	orrs	r2, r1
100124b2:	6022      	str	r2, [r4, #0]
100124b4:	e037      	b.n	10012526 <_printf_i+0xce>
100124b6:	2a75      	cmp	r2, #117	; 0x75
100124b8:	d01f      	beq.n	100124fa <_printf_i+0xa2>
100124ba:	2a78      	cmp	r2, #120	; 0x78
100124bc:	d033      	beq.n	10012526 <_printf_i+0xce>
100124be:	e0a9      	b.n	10012614 <_printf_i+0x1bc>
100124c0:	000e      	movs	r6, r1
100124c2:	681a      	ldr	r2, [r3, #0]
100124c4:	3642      	adds	r6, #66	; 0x42
100124c6:	1d11      	adds	r1, r2, #4
100124c8:	6019      	str	r1, [r3, #0]
100124ca:	6813      	ldr	r3, [r2, #0]
100124cc:	7033      	strb	r3, [r6, #0]
100124ce:	e0a4      	b.n	1001261a <_printf_i+0x1c2>
100124d0:	6821      	ldr	r1, [r4, #0]
100124d2:	681a      	ldr	r2, [r3, #0]
100124d4:	0608      	lsls	r0, r1, #24
100124d6:	d406      	bmi.n	100124e6 <_printf_i+0x8e>
100124d8:	0649      	lsls	r1, r1, #25
100124da:	d504      	bpl.n	100124e6 <_printf_i+0x8e>
100124dc:	1d11      	adds	r1, r2, #4
100124de:	6019      	str	r1, [r3, #0]
100124e0:	2300      	movs	r3, #0
100124e2:	5ed5      	ldrsh	r5, [r2, r3]
100124e4:	e002      	b.n	100124ec <_printf_i+0x94>
100124e6:	1d11      	adds	r1, r2, #4
100124e8:	6019      	str	r1, [r3, #0]
100124ea:	6815      	ldr	r5, [r2, #0]
100124ec:	2d00      	cmp	r5, #0
100124ee:	da3b      	bge.n	10012568 <_printf_i+0x110>
100124f0:	232d      	movs	r3, #45	; 0x2d
100124f2:	9a04      	ldr	r2, [sp, #16]
100124f4:	426d      	negs	r5, r5
100124f6:	7013      	strb	r3, [r2, #0]
100124f8:	e036      	b.n	10012568 <_printf_i+0x110>
100124fa:	6821      	ldr	r1, [r4, #0]
100124fc:	681a      	ldr	r2, [r3, #0]
100124fe:	0608      	lsls	r0, r1, #24
10012500:	d406      	bmi.n	10012510 <_printf_i+0xb8>
10012502:	0649      	lsls	r1, r1, #25
10012504:	d504      	bpl.n	10012510 <_printf_i+0xb8>
10012506:	6815      	ldr	r5, [r2, #0]
10012508:	1d11      	adds	r1, r2, #4
1001250a:	6019      	str	r1, [r3, #0]
1001250c:	b2ad      	uxth	r5, r5
1001250e:	e002      	b.n	10012516 <_printf_i+0xbe>
10012510:	1d11      	adds	r1, r2, #4
10012512:	6019      	str	r1, [r3, #0]
10012514:	6815      	ldr	r5, [r2, #0]
10012516:	4b5f      	ldr	r3, [pc, #380]	; (10012694 <_printf_i+0x23c>)
10012518:	7e22      	ldrb	r2, [r4, #24]
1001251a:	9303      	str	r3, [sp, #12]
1001251c:	2708      	movs	r7, #8
1001251e:	2a6f      	cmp	r2, #111	; 0x6f
10012520:	d01d      	beq.n	1001255e <_printf_i+0x106>
10012522:	270a      	movs	r7, #10
10012524:	e01b      	b.n	1001255e <_printf_i+0x106>
10012526:	0022      	movs	r2, r4
10012528:	2178      	movs	r1, #120	; 0x78
1001252a:	3245      	adds	r2, #69	; 0x45
1001252c:	7011      	strb	r1, [r2, #0]
1001252e:	4a5a      	ldr	r2, [pc, #360]	; (10012698 <_printf_i+0x240>)
10012530:	6819      	ldr	r1, [r3, #0]
10012532:	9203      	str	r2, [sp, #12]
10012534:	1d08      	adds	r0, r1, #4
10012536:	6822      	ldr	r2, [r4, #0]
10012538:	6018      	str	r0, [r3, #0]
1001253a:	680d      	ldr	r5, [r1, #0]
1001253c:	0610      	lsls	r0, r2, #24
1001253e:	d402      	bmi.n	10012546 <_printf_i+0xee>
10012540:	0650      	lsls	r0, r2, #25
10012542:	d500      	bpl.n	10012546 <_printf_i+0xee>
10012544:	b2ad      	uxth	r5, r5
10012546:	07d3      	lsls	r3, r2, #31
10012548:	d502      	bpl.n	10012550 <_printf_i+0xf8>
1001254a:	2320      	movs	r3, #32
1001254c:	431a      	orrs	r2, r3
1001254e:	6022      	str	r2, [r4, #0]
10012550:	2710      	movs	r7, #16
10012552:	2d00      	cmp	r5, #0
10012554:	d103      	bne.n	1001255e <_printf_i+0x106>
10012556:	2320      	movs	r3, #32
10012558:	6822      	ldr	r2, [r4, #0]
1001255a:	439a      	bics	r2, r3
1001255c:	6022      	str	r2, [r4, #0]
1001255e:	0023      	movs	r3, r4
10012560:	2200      	movs	r2, #0
10012562:	3343      	adds	r3, #67	; 0x43
10012564:	701a      	strb	r2, [r3, #0]
10012566:	e002      	b.n	1001256e <_printf_i+0x116>
10012568:	270a      	movs	r7, #10
1001256a:	4b4a      	ldr	r3, [pc, #296]	; (10012694 <_printf_i+0x23c>)
1001256c:	9303      	str	r3, [sp, #12]
1001256e:	6863      	ldr	r3, [r4, #4]
10012570:	60a3      	str	r3, [r4, #8]
10012572:	2b00      	cmp	r3, #0
10012574:	db09      	blt.n	1001258a <_printf_i+0x132>
10012576:	2204      	movs	r2, #4
10012578:	6821      	ldr	r1, [r4, #0]
1001257a:	4391      	bics	r1, r2
1001257c:	6021      	str	r1, [r4, #0]
1001257e:	2d00      	cmp	r5, #0
10012580:	d105      	bne.n	1001258e <_printf_i+0x136>
10012582:	9e04      	ldr	r6, [sp, #16]
10012584:	2b00      	cmp	r3, #0
10012586:	d011      	beq.n	100125ac <_printf_i+0x154>
10012588:	e07b      	b.n	10012682 <_printf_i+0x22a>
1001258a:	2d00      	cmp	r5, #0
1001258c:	d079      	beq.n	10012682 <_printf_i+0x22a>
1001258e:	9e04      	ldr	r6, [sp, #16]
10012590:	0028      	movs	r0, r5
10012592:	0039      	movs	r1, r7
10012594:	f7fd fa22 	bl	1000f9dc <__aeabi_uidivmod>
10012598:	9b03      	ldr	r3, [sp, #12]
1001259a:	3e01      	subs	r6, #1
1001259c:	5c5b      	ldrb	r3, [r3, r1]
1001259e:	0028      	movs	r0, r5
100125a0:	7033      	strb	r3, [r6, #0]
100125a2:	0039      	movs	r1, r7
100125a4:	f7fd f994 	bl	1000f8d0 <__aeabi_uidiv>
100125a8:	1e05      	subs	r5, r0, #0
100125aa:	d1f1      	bne.n	10012590 <_printf_i+0x138>
100125ac:	2f08      	cmp	r7, #8
100125ae:	d109      	bne.n	100125c4 <_printf_i+0x16c>
100125b0:	6823      	ldr	r3, [r4, #0]
100125b2:	07db      	lsls	r3, r3, #31
100125b4:	d506      	bpl.n	100125c4 <_printf_i+0x16c>
100125b6:	6863      	ldr	r3, [r4, #4]
100125b8:	6922      	ldr	r2, [r4, #16]
100125ba:	4293      	cmp	r3, r2
100125bc:	dc02      	bgt.n	100125c4 <_printf_i+0x16c>
100125be:	2330      	movs	r3, #48	; 0x30
100125c0:	3e01      	subs	r6, #1
100125c2:	7033      	strb	r3, [r6, #0]
100125c4:	9b04      	ldr	r3, [sp, #16]
100125c6:	1b9b      	subs	r3, r3, r6
100125c8:	6123      	str	r3, [r4, #16]
100125ca:	e02b      	b.n	10012624 <_printf_i+0x1cc>
100125cc:	6809      	ldr	r1, [r1, #0]
100125ce:	681a      	ldr	r2, [r3, #0]
100125d0:	0608      	lsls	r0, r1, #24
100125d2:	d407      	bmi.n	100125e4 <_printf_i+0x18c>
100125d4:	0649      	lsls	r1, r1, #25
100125d6:	d505      	bpl.n	100125e4 <_printf_i+0x18c>
100125d8:	1d11      	adds	r1, r2, #4
100125da:	6019      	str	r1, [r3, #0]
100125dc:	6813      	ldr	r3, [r2, #0]
100125de:	8aa2      	ldrh	r2, [r4, #20]
100125e0:	801a      	strh	r2, [r3, #0]
100125e2:	e004      	b.n	100125ee <_printf_i+0x196>
100125e4:	1d11      	adds	r1, r2, #4
100125e6:	6019      	str	r1, [r3, #0]
100125e8:	6813      	ldr	r3, [r2, #0]
100125ea:	6962      	ldr	r2, [r4, #20]
100125ec:	601a      	str	r2, [r3, #0]
100125ee:	2300      	movs	r3, #0
100125f0:	9e04      	ldr	r6, [sp, #16]
100125f2:	6123      	str	r3, [r4, #16]
100125f4:	e016      	b.n	10012624 <_printf_i+0x1cc>
100125f6:	681a      	ldr	r2, [r3, #0]
100125f8:	1d11      	adds	r1, r2, #4
100125fa:	6019      	str	r1, [r3, #0]
100125fc:	6816      	ldr	r6, [r2, #0]
100125fe:	2100      	movs	r1, #0
10012600:	6862      	ldr	r2, [r4, #4]
10012602:	0030      	movs	r0, r6
10012604:	f000 f93c 	bl	10012880 <memchr>
10012608:	2800      	cmp	r0, #0
1001260a:	d001      	beq.n	10012610 <_printf_i+0x1b8>
1001260c:	1b80      	subs	r0, r0, r6
1001260e:	6060      	str	r0, [r4, #4]
10012610:	6863      	ldr	r3, [r4, #4]
10012612:	e003      	b.n	1001261c <_printf_i+0x1c4>
10012614:	0026      	movs	r6, r4
10012616:	3642      	adds	r6, #66	; 0x42
10012618:	7032      	strb	r2, [r6, #0]
1001261a:	2301      	movs	r3, #1
1001261c:	6123      	str	r3, [r4, #16]
1001261e:	2300      	movs	r3, #0
10012620:	9a04      	ldr	r2, [sp, #16]
10012622:	7013      	strb	r3, [r2, #0]
10012624:	9b07      	ldr	r3, [sp, #28]
10012626:	aa09      	add	r2, sp, #36	; 0x24
10012628:	9300      	str	r3, [sp, #0]
1001262a:	0021      	movs	r1, r4
1001262c:	9b06      	ldr	r3, [sp, #24]
1001262e:	9805      	ldr	r0, [sp, #20]
10012630:	f7ff fea4 	bl	1001237c <_printf_common>
10012634:	1c43      	adds	r3, r0, #1
10012636:	d102      	bne.n	1001263e <_printf_i+0x1e6>
10012638:	2001      	movs	r0, #1
1001263a:	4240      	negs	r0, r0
1001263c:	e027      	b.n	1001268e <_printf_i+0x236>
1001263e:	6923      	ldr	r3, [r4, #16]
10012640:	0032      	movs	r2, r6
10012642:	9906      	ldr	r1, [sp, #24]
10012644:	9805      	ldr	r0, [sp, #20]
10012646:	9d07      	ldr	r5, [sp, #28]
10012648:	47a8      	blx	r5
1001264a:	1c43      	adds	r3, r0, #1
1001264c:	d0f4      	beq.n	10012638 <_printf_i+0x1e0>
1001264e:	6823      	ldr	r3, [r4, #0]
10012650:	2500      	movs	r5, #0
10012652:	079b      	lsls	r3, r3, #30
10012654:	d40f      	bmi.n	10012676 <_printf_i+0x21e>
10012656:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012658:	68e0      	ldr	r0, [r4, #12]
1001265a:	4298      	cmp	r0, r3
1001265c:	da17      	bge.n	1001268e <_printf_i+0x236>
1001265e:	0018      	movs	r0, r3
10012660:	e015      	b.n	1001268e <_printf_i+0x236>
10012662:	0022      	movs	r2, r4
10012664:	2301      	movs	r3, #1
10012666:	3219      	adds	r2, #25
10012668:	9906      	ldr	r1, [sp, #24]
1001266a:	9805      	ldr	r0, [sp, #20]
1001266c:	9e07      	ldr	r6, [sp, #28]
1001266e:	47b0      	blx	r6
10012670:	1c43      	adds	r3, r0, #1
10012672:	d0e1      	beq.n	10012638 <_printf_i+0x1e0>
10012674:	3501      	adds	r5, #1
10012676:	68e3      	ldr	r3, [r4, #12]
10012678:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001267a:	1a9b      	subs	r3, r3, r2
1001267c:	429d      	cmp	r5, r3
1001267e:	dbf0      	blt.n	10012662 <_printf_i+0x20a>
10012680:	e7e9      	b.n	10012656 <_printf_i+0x1fe>
10012682:	0026      	movs	r6, r4
10012684:	9b03      	ldr	r3, [sp, #12]
10012686:	3642      	adds	r6, #66	; 0x42
10012688:	781b      	ldrb	r3, [r3, #0]
1001268a:	7033      	strb	r3, [r6, #0]
1001268c:	e78e      	b.n	100125ac <_printf_i+0x154>
1001268e:	b00b      	add	sp, #44	; 0x2c
10012690:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012692:	46c0      	nop			; (mov r8, r8)
10012694:	10013881 	.word	0x10013881
10012698:	10013892 	.word	0x10013892

1001269c <_putc_r>:
1001269c:	b570      	push	{r4, r5, r6, lr}
1001269e:	0006      	movs	r6, r0
100126a0:	000d      	movs	r5, r1
100126a2:	0014      	movs	r4, r2
100126a4:	2800      	cmp	r0, #0
100126a6:	d004      	beq.n	100126b2 <_putc_r+0x16>
100126a8:	6983      	ldr	r3, [r0, #24]
100126aa:	2b00      	cmp	r3, #0
100126ac:	d101      	bne.n	100126b2 <_putc_r+0x16>
100126ae:	f7ff fb83 	bl	10011db8 <__sinit>
100126b2:	4b12      	ldr	r3, [pc, #72]	; (100126fc <_putc_r+0x60>)
100126b4:	429c      	cmp	r4, r3
100126b6:	d101      	bne.n	100126bc <_putc_r+0x20>
100126b8:	6874      	ldr	r4, [r6, #4]
100126ba:	e008      	b.n	100126ce <_putc_r+0x32>
100126bc:	4b10      	ldr	r3, [pc, #64]	; (10012700 <_putc_r+0x64>)
100126be:	429c      	cmp	r4, r3
100126c0:	d101      	bne.n	100126c6 <_putc_r+0x2a>
100126c2:	68b4      	ldr	r4, [r6, #8]
100126c4:	e003      	b.n	100126ce <_putc_r+0x32>
100126c6:	4b0f      	ldr	r3, [pc, #60]	; (10012704 <_putc_r+0x68>)
100126c8:	429c      	cmp	r4, r3
100126ca:	d100      	bne.n	100126ce <_putc_r+0x32>
100126cc:	68f4      	ldr	r4, [r6, #12]
100126ce:	68a3      	ldr	r3, [r4, #8]
100126d0:	3b01      	subs	r3, #1
100126d2:	60a3      	str	r3, [r4, #8]
100126d4:	2b00      	cmp	r3, #0
100126d6:	da05      	bge.n	100126e4 <_putc_r+0x48>
100126d8:	69a2      	ldr	r2, [r4, #24]
100126da:	4293      	cmp	r3, r2
100126dc:	db08      	blt.n	100126f0 <_putc_r+0x54>
100126de:	b2eb      	uxtb	r3, r5
100126e0:	2b0a      	cmp	r3, #10
100126e2:	d005      	beq.n	100126f0 <_putc_r+0x54>
100126e4:	6823      	ldr	r3, [r4, #0]
100126e6:	b2e8      	uxtb	r0, r5
100126e8:	1c5a      	adds	r2, r3, #1
100126ea:	6022      	str	r2, [r4, #0]
100126ec:	701d      	strb	r5, [r3, #0]
100126ee:	e004      	b.n	100126fa <_putc_r+0x5e>
100126f0:	0022      	movs	r2, r4
100126f2:	0029      	movs	r1, r5
100126f4:	0030      	movs	r0, r6
100126f6:	f7ff f99d 	bl	10011a34 <__swbuf_r>
100126fa:	bd70      	pop	{r4, r5, r6, pc}
100126fc:	10013810 	.word	0x10013810
10012700:	10013830 	.word	0x10013830
10012704:	10013850 	.word	0x10013850

10012708 <_sbrk_r>:
10012708:	2300      	movs	r3, #0
1001270a:	b570      	push	{r4, r5, r6, lr}
1001270c:	4c06      	ldr	r4, [pc, #24]	; (10012728 <_sbrk_r+0x20>)
1001270e:	0005      	movs	r5, r0
10012710:	0008      	movs	r0, r1
10012712:	6023      	str	r3, [r4, #0]
10012714:	f7f7 f970 	bl	100099f8 <_sbrk>
10012718:	1c43      	adds	r3, r0, #1
1001271a:	d103      	bne.n	10012724 <_sbrk_r+0x1c>
1001271c:	6823      	ldr	r3, [r4, #0]
1001271e:	2b00      	cmp	r3, #0
10012720:	d000      	beq.n	10012724 <_sbrk_r+0x1c>
10012722:	602b      	str	r3, [r5, #0]
10012724:	bd70      	pop	{r4, r5, r6, pc}
10012726:	46c0      	nop			; (mov r8, r8)
10012728:	10016644 	.word	0x10016644

1001272c <__sread>:
1001272c:	b570      	push	{r4, r5, r6, lr}
1001272e:	000c      	movs	r4, r1
10012730:	250e      	movs	r5, #14
10012732:	5f49      	ldrsh	r1, [r1, r5]
10012734:	f000 f8b0 	bl	10012898 <_read_r>
10012738:	2800      	cmp	r0, #0
1001273a:	db03      	blt.n	10012744 <__sread+0x18>
1001273c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001273e:	181b      	adds	r3, r3, r0
10012740:	6563      	str	r3, [r4, #84]	; 0x54
10012742:	e003      	b.n	1001274c <__sread+0x20>
10012744:	89a2      	ldrh	r2, [r4, #12]
10012746:	4b02      	ldr	r3, [pc, #8]	; (10012750 <__sread+0x24>)
10012748:	4013      	ands	r3, r2
1001274a:	81a3      	strh	r3, [r4, #12]
1001274c:	bd70      	pop	{r4, r5, r6, pc}
1001274e:	46c0      	nop			; (mov r8, r8)
10012750:	ffffefff 	.word	0xffffefff

10012754 <__swrite>:
10012754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012756:	001f      	movs	r7, r3
10012758:	898b      	ldrh	r3, [r1, #12]
1001275a:	0005      	movs	r5, r0
1001275c:	000c      	movs	r4, r1
1001275e:	0016      	movs	r6, r2
10012760:	05db      	lsls	r3, r3, #23
10012762:	d505      	bpl.n	10012770 <__swrite+0x1c>
10012764:	230e      	movs	r3, #14
10012766:	5ec9      	ldrsh	r1, [r1, r3]
10012768:	2200      	movs	r2, #0
1001276a:	2302      	movs	r3, #2
1001276c:	f000 f874 	bl	10012858 <_lseek_r>
10012770:	89a2      	ldrh	r2, [r4, #12]
10012772:	4b05      	ldr	r3, [pc, #20]	; (10012788 <__swrite+0x34>)
10012774:	0028      	movs	r0, r5
10012776:	4013      	ands	r3, r2
10012778:	81a3      	strh	r3, [r4, #12]
1001277a:	0032      	movs	r2, r6
1001277c:	230e      	movs	r3, #14
1001277e:	5ee1      	ldrsh	r1, [r4, r3]
10012780:	003b      	movs	r3, r7
10012782:	f000 f81f 	bl	100127c4 <_write_r>
10012786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012788:	ffffefff 	.word	0xffffefff

1001278c <__sseek>:
1001278c:	b570      	push	{r4, r5, r6, lr}
1001278e:	000c      	movs	r4, r1
10012790:	250e      	movs	r5, #14
10012792:	5f49      	ldrsh	r1, [r1, r5]
10012794:	f000 f860 	bl	10012858 <_lseek_r>
10012798:	89a3      	ldrh	r3, [r4, #12]
1001279a:	1c42      	adds	r2, r0, #1
1001279c:	d103      	bne.n	100127a6 <__sseek+0x1a>
1001279e:	4a05      	ldr	r2, [pc, #20]	; (100127b4 <__sseek+0x28>)
100127a0:	4013      	ands	r3, r2
100127a2:	81a3      	strh	r3, [r4, #12]
100127a4:	e004      	b.n	100127b0 <__sseek+0x24>
100127a6:	2280      	movs	r2, #128	; 0x80
100127a8:	0152      	lsls	r2, r2, #5
100127aa:	4313      	orrs	r3, r2
100127ac:	81a3      	strh	r3, [r4, #12]
100127ae:	6560      	str	r0, [r4, #84]	; 0x54
100127b0:	bd70      	pop	{r4, r5, r6, pc}
100127b2:	46c0      	nop			; (mov r8, r8)
100127b4:	ffffefff 	.word	0xffffefff

100127b8 <__sclose>:
100127b8:	b510      	push	{r4, lr}
100127ba:	230e      	movs	r3, #14
100127bc:	5ec9      	ldrsh	r1, [r1, r3]
100127be:	f000 f815 	bl	100127ec <_close_r>
100127c2:	bd10      	pop	{r4, pc}

100127c4 <_write_r>:
100127c4:	b570      	push	{r4, r5, r6, lr}
100127c6:	0005      	movs	r5, r0
100127c8:	0008      	movs	r0, r1
100127ca:	0011      	movs	r1, r2
100127cc:	2200      	movs	r2, #0
100127ce:	4c06      	ldr	r4, [pc, #24]	; (100127e8 <_write_r+0x24>)
100127d0:	6022      	str	r2, [r4, #0]
100127d2:	001a      	movs	r2, r3
100127d4:	f7f7 f8e8 	bl	100099a8 <_write>
100127d8:	1c43      	adds	r3, r0, #1
100127da:	d103      	bne.n	100127e4 <_write_r+0x20>
100127dc:	6823      	ldr	r3, [r4, #0]
100127de:	2b00      	cmp	r3, #0
100127e0:	d000      	beq.n	100127e4 <_write_r+0x20>
100127e2:	602b      	str	r3, [r5, #0]
100127e4:	bd70      	pop	{r4, r5, r6, pc}
100127e6:	46c0      	nop			; (mov r8, r8)
100127e8:	10016644 	.word	0x10016644

100127ec <_close_r>:
100127ec:	2300      	movs	r3, #0
100127ee:	b570      	push	{r4, r5, r6, lr}
100127f0:	4c06      	ldr	r4, [pc, #24]	; (1001280c <_close_r+0x20>)
100127f2:	0005      	movs	r5, r0
100127f4:	0008      	movs	r0, r1
100127f6:	6023      	str	r3, [r4, #0]
100127f8:	f7f7 f910 	bl	10009a1c <_close>
100127fc:	1c43      	adds	r3, r0, #1
100127fe:	d103      	bne.n	10012808 <_close_r+0x1c>
10012800:	6823      	ldr	r3, [r4, #0]
10012802:	2b00      	cmp	r3, #0
10012804:	d000      	beq.n	10012808 <_close_r+0x1c>
10012806:	602b      	str	r3, [r5, #0]
10012808:	bd70      	pop	{r4, r5, r6, pc}
1001280a:	46c0      	nop			; (mov r8, r8)
1001280c:	10016644 	.word	0x10016644

10012810 <_fstat_r>:
10012810:	2300      	movs	r3, #0
10012812:	b570      	push	{r4, r5, r6, lr}
10012814:	4c06      	ldr	r4, [pc, #24]	; (10012830 <_fstat_r+0x20>)
10012816:	0005      	movs	r5, r0
10012818:	0008      	movs	r0, r1
1001281a:	0011      	movs	r1, r2
1001281c:	6023      	str	r3, [r4, #0]
1001281e:	f7f7 f901 	bl	10009a24 <_fstat>
10012822:	1c43      	adds	r3, r0, #1
10012824:	d103      	bne.n	1001282e <_fstat_r+0x1e>
10012826:	6823      	ldr	r3, [r4, #0]
10012828:	2b00      	cmp	r3, #0
1001282a:	d000      	beq.n	1001282e <_fstat_r+0x1e>
1001282c:	602b      	str	r3, [r5, #0]
1001282e:	bd70      	pop	{r4, r5, r6, pc}
10012830:	10016644 	.word	0x10016644

10012834 <_isatty_r>:
10012834:	2300      	movs	r3, #0
10012836:	b570      	push	{r4, r5, r6, lr}
10012838:	4c06      	ldr	r4, [pc, #24]	; (10012854 <_isatty_r+0x20>)
1001283a:	0005      	movs	r5, r0
1001283c:	0008      	movs	r0, r1
1001283e:	6023      	str	r3, [r4, #0]
10012840:	f7f7 f8f6 	bl	10009a30 <_isatty>
10012844:	1c43      	adds	r3, r0, #1
10012846:	d103      	bne.n	10012850 <_isatty_r+0x1c>
10012848:	6823      	ldr	r3, [r4, #0]
1001284a:	2b00      	cmp	r3, #0
1001284c:	d000      	beq.n	10012850 <_isatty_r+0x1c>
1001284e:	602b      	str	r3, [r5, #0]
10012850:	bd70      	pop	{r4, r5, r6, pc}
10012852:	46c0      	nop			; (mov r8, r8)
10012854:	10016644 	.word	0x10016644

10012858 <_lseek_r>:
10012858:	b570      	push	{r4, r5, r6, lr}
1001285a:	0005      	movs	r5, r0
1001285c:	0008      	movs	r0, r1
1001285e:	0011      	movs	r1, r2
10012860:	2200      	movs	r2, #0
10012862:	4c06      	ldr	r4, [pc, #24]	; (1001287c <_lseek_r+0x24>)
10012864:	6022      	str	r2, [r4, #0]
10012866:	001a      	movs	r2, r3
10012868:	f7f7 f8e4 	bl	10009a34 <_lseek>
1001286c:	1c43      	adds	r3, r0, #1
1001286e:	d103      	bne.n	10012878 <_lseek_r+0x20>
10012870:	6823      	ldr	r3, [r4, #0]
10012872:	2b00      	cmp	r3, #0
10012874:	d000      	beq.n	10012878 <_lseek_r+0x20>
10012876:	602b      	str	r3, [r5, #0]
10012878:	bd70      	pop	{r4, r5, r6, pc}
1001287a:	46c0      	nop			; (mov r8, r8)
1001287c:	10016644 	.word	0x10016644

10012880 <memchr>:
10012880:	b2c9      	uxtb	r1, r1
10012882:	1882      	adds	r2, r0, r2
10012884:	4290      	cmp	r0, r2
10012886:	d004      	beq.n	10012892 <memchr+0x12>
10012888:	7803      	ldrb	r3, [r0, #0]
1001288a:	428b      	cmp	r3, r1
1001288c:	d002      	beq.n	10012894 <memchr+0x14>
1001288e:	3001      	adds	r0, #1
10012890:	e7f8      	b.n	10012884 <memchr+0x4>
10012892:	2000      	movs	r0, #0
10012894:	4770      	bx	lr
	...

10012898 <_read_r>:
10012898:	b570      	push	{r4, r5, r6, lr}
1001289a:	0005      	movs	r5, r0
1001289c:	0008      	movs	r0, r1
1001289e:	0011      	movs	r1, r2
100128a0:	2200      	movs	r2, #0
100128a2:	4c06      	ldr	r4, [pc, #24]	; (100128bc <_read_r+0x24>)
100128a4:	6022      	str	r2, [r4, #0]
100128a6:	001a      	movs	r2, r3
100128a8:	f7f7 f85e 	bl	10009968 <_read>
100128ac:	1c43      	adds	r3, r0, #1
100128ae:	d103      	bne.n	100128b8 <_read_r+0x20>
100128b0:	6823      	ldr	r3, [r4, #0]
100128b2:	2b00      	cmp	r3, #0
100128b4:	d000      	beq.n	100128b8 <_read_r+0x20>
100128b6:	602b      	str	r3, [r5, #0]
100128b8:	bd70      	pop	{r4, r5, r6, pc}
100128ba:	46c0      	nop			; (mov r8, r8)
100128bc:	10016644 	.word	0x10016644

100128c0 <__aeabi_lmul>:
100128c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100128c2:	464f      	mov	r7, r9
100128c4:	4646      	mov	r6, r8
100128c6:	b4c0      	push	{r6, r7}
100128c8:	0416      	lsls	r6, r2, #16
100128ca:	0c36      	lsrs	r6, r6, #16
100128cc:	4699      	mov	r9, r3
100128ce:	0033      	movs	r3, r6
100128d0:	0405      	lsls	r5, r0, #16
100128d2:	0c2c      	lsrs	r4, r5, #16
100128d4:	0c07      	lsrs	r7, r0, #16
100128d6:	0c15      	lsrs	r5, r2, #16
100128d8:	4363      	muls	r3, r4
100128da:	437e      	muls	r6, r7
100128dc:	436f      	muls	r7, r5
100128de:	4365      	muls	r5, r4
100128e0:	0c1c      	lsrs	r4, r3, #16
100128e2:	19ad      	adds	r5, r5, r6
100128e4:	1964      	adds	r4, r4, r5
100128e6:	469c      	mov	ip, r3
100128e8:	42a6      	cmp	r6, r4
100128ea:	d903      	bls.n	100128f4 <__aeabi_lmul+0x34>
100128ec:	2380      	movs	r3, #128	; 0x80
100128ee:	025b      	lsls	r3, r3, #9
100128f0:	4698      	mov	r8, r3
100128f2:	4447      	add	r7, r8
100128f4:	4663      	mov	r3, ip
100128f6:	0c25      	lsrs	r5, r4, #16
100128f8:	19ef      	adds	r7, r5, r7
100128fa:	041d      	lsls	r5, r3, #16
100128fc:	464b      	mov	r3, r9
100128fe:	434a      	muls	r2, r1
10012900:	4343      	muls	r3, r0
10012902:	0c2d      	lsrs	r5, r5, #16
10012904:	0424      	lsls	r4, r4, #16
10012906:	1964      	adds	r4, r4, r5
10012908:	1899      	adds	r1, r3, r2
1001290a:	19c9      	adds	r1, r1, r7
1001290c:	0020      	movs	r0, r4
1001290e:	bc0c      	pop	{r2, r3}
10012910:	4690      	mov	r8, r2
10012912:	4699      	mov	r9, r3
10012914:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012916:	46c0      	nop			; (mov r8, r8)
10012918:	10008c84 	.word	0x10008c84
1001291c:	10008c92 	.word	0x10008c92
10012920:	10008ca0 	.word	0x10008ca0
10012924:	10008cae 	.word	0x10008cae
10012928:	10008cbc 	.word	0x10008cbc
1001292c:	10008cca 	.word	0x10008cca
10012930:	10008cd8 	.word	0x10008cd8
10012934:	10008ce8 	.word	0x10008ce8
10012938:	10008cf8 	.word	0x10008cf8
1001293c:	10008d08 	.word	0x10008d08
10012940:	10008d18 	.word	0x10008d18
10012944:	10008d28 	.word	0x10008d28
10012948:	10008d38 	.word	0x10008d38
1001294c:	10008d48 	.word	0x10008d48
10012950:	10008d58 	.word	0x10008d58
10012954:	10008d68 	.word	0x10008d68
10012958:	10008d78 	.word	0x10008d78
1001295c:	10008d88 	.word	0x10008d88
10012960:	10008d98 	.word	0x10008d98
10012964:	10008da8 	.word	0x10008da8
10012968:	10008db8 	.word	0x10008db8
1001296c:	10008dc8 	.word	0x10008dc8
10012970:	10008dd8 	.word	0x10008dd8
10012974:	10008de8 	.word	0x10008de8
10012978:	10008df8 	.word	0x10008df8
1001297c:	10008e08 	.word	0x10008e08
10012980:	10008e18 	.word	0x10008e18
10012984:	10008e28 	.word	0x10008e28
10012988:	10008e36 	.word	0x10008e36
1001298c:	10008e44 	.word	0x10008e44
10012990:	10008e52 	.word	0x10008e52
10012994:	10008e60 	.word	0x10008e60
10012998:	10008e6e 	.word	0x10008e6e
1001299c:	10008e7c 	.word	0x10008e7c
100129a0:	10008e8a 	.word	0x10008e8a
100129a4:	10008e98 	.word	0x10008e98
100129a8:	10008ea8 	.word	0x10008ea8
100129ac:	10008eb8 	.word	0x10008eb8
100129b0:	10008ec8 	.word	0x10008ec8
100129b4:	10008ed8 	.word	0x10008ed8
100129b8:	10008ee8 	.word	0x10008ee8
100129bc:	10008ef8 	.word	0x10008ef8
100129c0:	10008f08 	.word	0x10008f08
100129c4:	10008f18 	.word	0x10008f18
100129c8:	10008f28 	.word	0x10008f28
100129cc:	10008f38 	.word	0x10008f38
100129d0:	10008f48 	.word	0x10008f48
100129d4:	10008f58 	.word	0x10008f58
100129d8:	10008f68 	.word	0x10008f68
100129dc:	10008f78 	.word	0x10008f78
100129e0:	10008f88 	.word	0x10008f88
100129e4:	10008f98 	.word	0x10008f98
100129e8:	10008fa6 	.word	0x10008fa6
100129ec:	10008fb4 	.word	0x10008fb4
100129f0:	10008ff4 	.word	0x10008ff4
100129f4:	1000901c 	.word	0x1000901c
100129f8:	10009044 	.word	0x10009044
100129fc:	1000906c 	.word	0x1000906c
10012a00:	100092ac 	.word	0x100092ac
10012a04:	1000909c 	.word	0x1000909c
10012a08:	100090b4 	.word	0x100090b4
10012a0c:	1000912c 	.word	0x1000912c
10012a10:	10009144 	.word	0x10009144
10012a14:	100090cc 	.word	0x100090cc
10012a18:	100090e4 	.word	0x100090e4
10012a1c:	100090fc 	.word	0x100090fc
10012a20:	10009114 	.word	0x10009114
10012a24:	1000915c 	.word	0x1000915c
10012a28:	10009420 	.word	0x10009420
10012a2c:	10009420 	.word	0x10009420
10012a30:	10009420 	.word	0x10009420
10012a34:	10009420 	.word	0x10009420
10012a38:	10009420 	.word	0x10009420
10012a3c:	10009420 	.word	0x10009420
10012a40:	10009420 	.word	0x10009420
10012a44:	10009420 	.word	0x10009420
10012a48:	10009204 	.word	0x10009204
10012a4c:	1000921c 	.word	0x1000921c
10012a50:	10009234 	.word	0x10009234
10012a54:	100092c2 	.word	0x100092c2
10012a58:	1000918c 	.word	0x1000918c
10012a5c:	10009420 	.word	0x10009420
10012a60:	10009420 	.word	0x10009420
10012a64:	10009420 	.word	0x10009420
10012a68:	10009420 	.word	0x10009420
10012a6c:	10009420 	.word	0x10009420
10012a70:	10009420 	.word	0x10009420
10012a74:	1000924c 	.word	0x1000924c
10012a78:	10009264 	.word	0x10009264
10012a7c:	1000927c 	.word	0x1000927c
10012a80:	10009294 	.word	0x10009294
10012a84:	10009420 	.word	0x10009420
10012a88:	100093d8 	.word	0x100093d8
10012a8c:	100093f0 	.word	0x100093f0
10012a90:	10009420 	.word	0x10009420
10012a94:	10009420 	.word	0x10009420
10012a98:	100092ee 	.word	0x100092ee
10012a9c:	10009304 	.word	0x10009304
10012aa0:	1000931a 	.word	0x1000931a
10012aa4:	10009330 	.word	0x10009330
10012aa8:	10009420 	.word	0x10009420
10012aac:	10009420 	.word	0x10009420
10012ab0:	10009420 	.word	0x10009420
10012ab4:	10009420 	.word	0x10009420
10012ab8:	10009420 	.word	0x10009420
10012abc:	10009420 	.word	0x10009420
10012ac0:	10009420 	.word	0x10009420
10012ac4:	10009420 	.word	0x10009420
10012ac8:	10008fe0 	.word	0x10008fe0
10012acc:	10009008 	.word	0x10009008
10012ad0:	10009030 	.word	0x10009030
10012ad4:	10009058 	.word	0x10009058
10012ad8:	10009084 	.word	0x10009084
10012adc:	10009174 	.word	0x10009174
10012ae0:	100091a4 	.word	0x100091a4
10012ae4:	100091bc 	.word	0x100091bc
10012ae8:	100091d4 	.word	0x100091d4
10012aec:	100091ec 	.word	0x100091ec
10012af0:	100092d8 	.word	0x100092d8
10012af4:	10009346 	.word	0x10009346
10012af8:	100093c0 	.word	0x100093c0
10012afc:	10009408 	.word	0x10009408
10012b00:	0000000d 	.word	0x0000000d
10012b04:	61647075 	.word	0x61647075
10012b08:	676e6974 	.word	0x676e6974
10012b0c:	65687420 	.word	0x65687420
10012b10:	61686320 	.word	0x61686320
10012b14:	74636172 	.word	0x74636172
10012b18:	73697265 	.word	0x73697265
10012b1c:	20636974 	.word	0x20636974
10012b20:	6c696166 	.word	0x6c696166
10012b24:	64256465 	.word	0x64256465
10012b28:	00000000 	.word	0x00000000
10012b2c:	646e6573 	.word	0x646e6573
10012b30:	20676e69 	.word	0x20676e69
10012b34:	69746f6e 	.word	0x69746f6e
10012b38:	61636966 	.word	0x61636966
10012b3c:	6e6f6974 	.word	0x6e6f6974
10012b40:	69616620 	.word	0x69616620
10012b44:	2564656c 	.word	0x2564656c
10012b48:	00000064 	.word	0x00000064
10012b4c:	10009c98 	.word	0x10009c98
10012b50:	10009c9a 	.word	0x10009c9a
10012b54:	10009c80 	.word	0x10009c80
10012b58:	10009c80 	.word	0x10009c80
10012b5c:	10009c80 	.word	0x10009c80
10012b60:	10009c98 	.word	0x10009c98
10012b64:	10009c80 	.word	0x10009c80
10012b68:	10009c80 	.word	0x10009c80
10012b6c:	1000a4e6 	.word	0x1000a4e6
10012b70:	1000a55a 	.word	0x1000a55a
10012b74:	1000a4ce 	.word	0x1000a4ce
10012b78:	1000a560 	.word	0x1000a560
10012b7c:	1000a4d4 	.word	0x1000a4d4
10012b80:	1000a4da 	.word	0x1000a4da
10012b84:	1000a4e0 	.word	0x1000a4e0
10012b88:	1000abb8 	.word	0x1000abb8
10012b8c:	1000abb8 	.word	0x1000abb8
10012b90:	1000abb8 	.word	0x1000abb8
10012b94:	1000abb8 	.word	0x1000abb8
10012b98:	1000abb8 	.word	0x1000abb8
10012b9c:	1000abb8 	.word	0x1000abb8
10012ba0:	1000abb8 	.word	0x1000abb8
10012ba4:	1000abb8 	.word	0x1000abb8
10012ba8:	1000abb8 	.word	0x1000abb8
10012bac:	1000abb8 	.word	0x1000abb8
10012bb0:	1000abb8 	.word	0x1000abb8
10012bb4:	1000abb8 	.word	0x1000abb8
10012bb8:	1000abb8 	.word	0x1000abb8
10012bbc:	1000abb8 	.word	0x1000abb8
10012bc0:	1000abb8 	.word	0x1000abb8
10012bc4:	1000abb8 	.word	0x1000abb8
10012bc8:	1000abb8 	.word	0x1000abb8
10012bcc:	1000abb8 	.word	0x1000abb8
10012bd0:	1000abb8 	.word	0x1000abb8
10012bd4:	1000abd6 	.word	0x1000abd6
10012bd8:	1000abd6 	.word	0x1000abd6
10012bdc:	1000abd6 	.word	0x1000abd6
10012be0:	1000abd6 	.word	0x1000abd6
10012be4:	1000abd6 	.word	0x1000abd6
10012be8:	1000abd6 	.word	0x1000abd6
10012bec:	1000abd6 	.word	0x1000abd6
10012bf0:	1000abd6 	.word	0x1000abd6
10012bf4:	1000abd6 	.word	0x1000abd6
10012bf8:	1000abd6 	.word	0x1000abd6
10012bfc:	1000abf8 	.word	0x1000abf8
10012c00:	1000abf8 	.word	0x1000abf8
10012c04:	1000abf8 	.word	0x1000abf8
10012c08:	1000abf8 	.word	0x1000abf8
10012c0c:	1000abf8 	.word	0x1000abf8
10012c10:	1000abf8 	.word	0x1000abf8
10012c14:	1000abf8 	.word	0x1000abf8
10012c18:	1000abf8 	.word	0x1000abf8
10012c1c:	1000abf8 	.word	0x1000abf8
10012c20:	1000abf8 	.word	0x1000abf8
10012c24:	1000ac1a 	.word	0x1000ac1a
10012c28:	1000ac1a 	.word	0x1000ac1a
10012c2c:	1000ac1a 	.word	0x1000ac1a
10012c30:	1000ac1a 	.word	0x1000ac1a
10012c34:	1000ac1a 	.word	0x1000ac1a
10012c38:	1000ac1a 	.word	0x1000ac1a
10012c3c:	1000ac34 	.word	0x1000ac34
10012c40:	1000ac34 	.word	0x1000ac34
10012c44:	1000ac34 	.word	0x1000ac34
10012c48:	1000ac34 	.word	0x1000ac34
10012c4c:	1000ac34 	.word	0x1000ac34
10012c50:	1000ac34 	.word	0x1000ac34
10012c54:	1000ac34 	.word	0x1000ac34
10012c58:	1000ac34 	.word	0x1000ac34
10012c5c:	1000ac34 	.word	0x1000ac34
10012c60:	1000ac4e 	.word	0x1000ac4e
10012c64:	1000ac4e 	.word	0x1000ac4e
10012c68:	1000ac70 	.word	0x1000ac70
10012c6c:	1000ac70 	.word	0x1000ac70
10012c70:	1000ac8a 	.word	0x1000ac8a
10012c74:	1000ac70 	.word	0x1000ac70
10012c78:	34333231 	.word	0x34333231
10012c7c:	00003635 	.word	0x00003635
10012c80:	efcdab00 	.word	0xefcdab00
10012c84:	00efcdab 	.word	0x00efcdab
10012c88:	b2d60600 	.word	0xb2d60600
10012c8c:	f8f005f0 	.word	0xf8f005f0
10012c90:	00000000 	.word	0x00000000

10012c94 <ble_mgr_gatt_server_handle>:
	...
10012cac:	10009bdd 10009c19 10009be1 00000000     ................
10012cbc:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10012ccc:	00000000 2055544d 6e616843 46206567     ....MTU Change F
10012cdc:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10012cec:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10012cfc:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
10012d0c:	64206563 6f637369 63656e6e 20646574     ce disconnected 
10012d1c:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
10012d2c:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
10012d3c:	69747079 66206e6f 656c6961 00000064     yption failed...
10012d4c:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
10012d5c:	64657465 63757320 73736563 6c6c7566     eted successfull
10012d6c:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10012d7c:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10012d8c:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10012d9c:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10012dac:	206e6163 69766564 72206563 68636165     can device reach
10012dbc:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10012dcc:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10012ddc:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
10012dec:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
10012dfc:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
10012e0c:	656e6e6f 52207463 65757165 46207473     onnect Request F
10012e1c:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
10012e2c:	636f7270 72756465 6f632065 656c706d     procedure comple
10012e3c:	20646574 63637573 66737365 796c6c75     ted successfully
10012e4c:	00000000 20454c42 69766544 6e206563     ....BLE Device n
10012e5c:	6620746f 646e756f 206f7420 726f7473     ot found to stor
10012e6c:	68742065 61702065 6e697269 6e692067     e the pairing in
10012e7c:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
10012e8c:	7320746f 74726174 00006465 76616c53     ot started..Slav
10012e9c:	65532065 69727563 52207974 2d207165     e Security Req -
10012eac:	74754120 746e6568 74616369 206e6f69      Authentication 
10012ebc:	6c696146 00006465 72696150 71655220     Failed..Pair Req
10012ecc:	74736575 41202d20 65687475 6369746e     uest - Authentic
10012edc:	6f697461 6146206e 64656c69 00000000     ation Failed....
10012eec:	65746e45 68742072 61502065 656b7373     Enter the Passke
10012efc:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
10012f0c:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
10012f1c:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
10012f2c:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
10012f3c:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
10012f4c:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
10012f5c:	6568746f 65442072 65636976 00003a29     other Device):..
10012f6c:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
10012f7c:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
10012f8c:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10012f9c:	00000064 65746e45 20646572 73736150     d...Entered Pass
10012fac:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
10012fbc:	6f666e69 74616d72 206e6f69 7020666f     information of p
10012fcc:	20726565 69766564 69206563 6f6e2073     eer device is no
10012fdc:	76612074 616c6961 2e656c62 00000000     t available.....
10012fec:	61656c50 75206573 6961706e 68742072     Please unpair th
10012ffc:	65642065 65636976 6f726620 6570206d     e device from pe
1001300c:	64207265 63697665 6f6d2865 656c6962     er device(mobile
1001301c:	65732029 6e697474 6d207367 20756e65     ) settings menu 
1001302c:	20646e61 72617473 61702074 6e697269     and start pairin
1001303c:	67612067 006e6961 72636e45 69747079     g again.Encrypti
1001304c:	52206e6f 65757165 52207473 796c7065     on Request Reply
1001305c:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
1001306c:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
1001307c:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
1001308c:	6166206e 64656c69 00000000 61656c50     n failed....Plea
1001309c:	63206573 6b636568 65687420 776f7020     se check the pow
100130ac:	61207265 6320646e 656e6e6f 6f697463     er and connectio
100130bc:	202f206e 64726168 65726177 6e6f6320     n / hardware con
100130cc:	7463656e 0000726f 454d5441 41422d4c     nector..ATMEL-BA
100130dc:	00000053 69766544 6e206563 20656d61     S...Device name 
100130ec:	20746573 6c696166 00006465 61204442     set failed..BD a
100130fc:	65726464 67207373 66207465 656c6961     ddress get faile
1001310c:	00000064 41204442 65726464 303a7373     d...BD Address:0
1001311c:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
1001312c:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
1001313c:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
1001314c:	20454c42 69766544 63206563 69666e6f     BLE Device confi
1001315c:	61727567 6e6f6974 69616620 0064656c     guration failed.
1001316c:	20746553 20454c42 69766544 41206563     Set BLE Device A
1001317c:	65726464 66207373 656c6961 00000064     ddress failed...
1001318c:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
1001319c:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
100131ac:	65732065 69727563 72207974 65757165     e security reque
100131bc:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
100131cc:	65746365 6f742064 65657020 65642072     ected to peer de
100131dc:	65636976 74697720 64612068 73657264     vice with addres
100131ec:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100131fc:	78323025 78323025 78323025 00000000     %02x%02x%02x....
1001320c:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
1001321c:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001322c:	61522067 6d6f646e 64646120 73736572     g Random address
1001323c:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
1001324c:	626d756e 6f207265 6f632066 63656e6e     number of connec
1001325c:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
1001326c:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
1001327c:	2e2e676e 0000002e 69766544 43206563     ng......Device C
1001328c:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
1001329c:	53202d20 75746174 25203a73 00000064      - Status: %d...
100132ac:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
100132bc:	61642074 73206174 66207465 656c6961     t data set faile
100132cc:	00000064                                d...

100132d0 <ble_mgr_gap_handle>:
100132d0:	10009bd9 10009d95 10009bf1 00000000     ................
100132e0:	00000000 1000a881 10009c49 10009bed     ........I.......
100132f0:	10009f35 10009e15 1000a139 10009f4d     5.......9...M...
10013300:	1000a28d 1000a3d1 10009cd1 1000aabd     ................
	...

1001331c <battery_app_gap_cb>:
	...
10013330:	1000b975 1000bc0d 00000000 00000000     u...............
10013340:	1000b965 00000000 00000000 00000000     e...............
10013350:	00000000 1000b965 00000000 00000000     ....e...........
	...

10013368 <app_htpt_handle>:
	...
1001337c:	1000b9ad 00000000 00000000 00000000     ................

1001338c <app_gap_cb>:
	...
100133a4:	1000bc39 00000000 00000000 1000bb29     9...........)...
	...
100133d8:	72617453 20646574 20505448 706d6554     Started HTP Temp
100133e8:	74617265 20657275 69746f4e 61636966     erature Notifica
100133f8:	6e6f6974 00000000 20505448 706d6554     tion....HTP Temp
10013408:	74617265 20657275 69746f4e 61636966     erature Notifica
10013418:	6e6f6974 6f745320 64657070 00000000     tion Stopped....
10013428:	7373410a 6d6e6769 20746e65 3a322e33     .Assignment 3.2:
10013438:	70704120 6163696c 6e6f6974 69617020      Application pai
10013448:	20646572 00000000 7373410a 6d6e6769     red .....Assignm
10013458:	20746e65 3a312e34 616e6520 20656c62     ent 4.1: enable 
10013468:	6c616568 74206874 65706d65 75746172     health temperatu
10013478:	73206572 69767265 00206563 202a2a2a     re service .*** 
10013488:	6c696146 20657275 48206e69 50205054     Failure in HTP P
10013498:	69666f72 4520656c 6c62616e 00000065     rofile Enable...
100134a8:	7373410a 6d6e6769 20746e65 20312e32     .Assignment 2.1 
100134b8:	7453203a 20747261 65766441 73697472     : Start Advertis
100134c8:	00676e69 23230d0a 76644120 69747265     ing...## Adverti
100134d8:	656d6573 6420746e 20617461 20746573     sement data set 
100134e8:	6c696166 3a206465 72726520 2520726f     failed : error %
100134f8:	00000078 7373410a 6d6e6769 20746e65     x....Assignment 
10013508:	3a322e33 70704120 6163696c 6e6f6974     3.2: Application
10013518:	73696420 6e6e6f63 65746365 00002064      disconnected ..
10013528:	74696e49 696c6169 676e697a 74614220     Initializing Bat
10013538:	79726574 72655320 65636976 70704120     tery Service App
10013548:	6163696c 6e6f6974 00000000 41530d0a     lication......SA
10013558:	3131424d 454c4220 70704120 6163696c     MB11 BLE Applica
10013568:	6e6f6974 00000000 6d65540a 61726570     tion.....Tempera
10013578:	65727574 6425203a 67654420 6c654320     ture: %d Deg Cel
10013588:	73756973 00000000 7373410a 6d6e6769     sius.....Assignm
10013598:	20746e65 3a312e34 696e4920 65482074     ent 4.1: Init He
100135a8:	68746c61 6d657420 61726570 65727574     alth temperature
100135b8:	72657320 65636976 00000020 20505448      service ...HTP 
100135c8:	61746144 73614220 72632065 69746165     Data Base creati
100135d8:	66206e6f 656c6961 00000064 7373410a     on failed....Ass
100135e8:	6d6e6769 20746e65 3a322e33 67655220     ignment 3.2: Reg
100135f8:	65747369 6c622072 6f746575 2068746f     ister bluetooth 
10013608:	6e657665 63207374 626c6c61 736b6361     events callbacks
10013618:	00000000 4523230a 726f7272 65687720     .....##Error whe
10013628:	6552206e 74736967 6e697265 41532067     n Registering SA
10013638:	3131424d 70616720 6c616320 6361626c     MB11 gap callbac
10013648:	0000736b 4523230a 726f7272 65687720     ks...##Error whe
10013658:	6552206e 74736967 6e697265 41532067     n Registering SA
10013668:	3131424d 70746820 61632074 61626c6c     MB11 htpt callba
10013678:	00736b63 69666564 676e696e 74616220     cks.defining bat
10013688:	79726574 72657320 65636976 69616620     tery service fai
10013698:	2064656c 00006425 74746142 20797265     led %d..Battery 
100136a8:	6576654c 64253a6c 00002525              Level:%d%%..

100136b4 <battery_app_gatt_server_cb>:
100136b4:	1000b985 00000000 1000ba91 00000000     ................
	...
100136dc:	656d7441 6f43206c 022e7072                       Atmel Corp.

100136e7 <CSWTCH.45>:
100136e7:	00100402                                         ...

100136ea <CSWTCH.47>:
100136ea:	03010300 03030303 03030303 02020303              ...............

100136f9 <client_conf_uuid>:
100136f9:	29042902                                         .)

100136fb <presentation_format_uuid>:
100136fb:	29012904                                         .)

100136fd <user_desc_uuid>:
100136fd:	29032901                                         .)

100136ff <server_conf_uuid>:
100136ff:	29002903                                         .)

10013701 <extended_props_uuid>:
10013701:	28022900                                         .)

10013703 <include_uuid>:
10013703:	28032802                                         .(

10013705 <char_uuid>:
10013705:	92002803 b61000fe 741000fd 4c1000fe     .(.........t...L
10013715:	741000fe 401000fe 741000fe 4c1000fe     ...t...@...t...L
10013725:	b61000fe b61000fd 401000fd 4c1000fe     ...........@...L
10013735:	f81000fe f81000fe f81000fe 7a1000fe     ...............z
10013745:	b61000fe b61000fd 601000fd 4a1000fe     ...........`...J
10013755:	601000fe 401000fe 601000fe 4a1000fe     ...`...@...`...J
10013765:	b61000fe b61000fd 401000fd 4a1000fe     ...........@...J
10013775:	f81000fe f81000fe f81000fe 041000fe     ................
10013785:	901000ff ee100100 ee1000ff ec1000ff     ................
10013795:	821000ff 82100100 78100100 ec100100     ...........x....
100137a5:	821000ff 78100100 82100100 ec100100     .......x........
100137b5:	881000ff 88100100 88100100 12100100     ................
100137c5:	58100101 18100107 18100106 16100106     ...X............
100137d5:	30100106 30100107 22100107 16100107     ...0...0..."....
100137e5:	30100106 22100107 30100107 16100107     ...0..."...0....
100137f5:	38100106 38100107 38100107 38100107     ...8...8...8...8
10013805:	43100109 d8000000                                ...C...

1001380c <_global_impure_ptr>:
1001380c:	100138d8                                .8..

10013810 <__sf_fake_stdin>:
	...

10013830 <__sf_fake_stdout>:
	...

10013850 <__sf_fake_stderr>:
	...
10013870:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10013880:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10013890:	31300046 35343332 39383736 64636261     F.0123456789abcd
100138a0:	00006665                                ef..

100138a4 <_init>:
100138a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100138a6:	46c0      	nop			; (mov r8, r8)
100138a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100138aa:	bc08      	pop	{r3}
100138ac:	469e      	mov	lr, r3
100138ae:	4770      	bx	lr

100138b0 <__init_array_start>:
100138b0:	100080b1 	.word	0x100080b1

100138b4 <_fini>:
100138b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100138b6:	46c0      	nop			; (mov r8, r8)
100138b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100138ba:	bc08      	pop	{r3}
100138bc:	469e      	mov	lr, r3
100138be:	4770      	bx	lr

100138c0 <__fini_array_start>:
100138c0:	10008089 	.word	0x10008089
